{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 11, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/util.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Deferred = void 0;\nexports.autoId = autoId;\nexports.requestTag = requestTag;\nexports.isObject = isObject;\nexports.isPlainObject = isPlainObject;\nexports.isEmpty = isEmpty;\nexports.isFunction = isFunction;\nexports.isPermanentRpcError = isPermanentRpcError;\nexports.getRetryCodes = getRetryCodes;\nexports.getTotalTimeout = getTotalTimeout;\nexports.getRetryParams = getRetryParams;\nexports.silencePromise = silencePromise;\nexports.wrapError = wrapError;\nexports.tryGetPreferRestEnvironmentVariable = tryGetPreferRestEnvironmentVariable;\nexports.mapToArray = mapToArray;\nexports.isArrayEqual = isArrayEqual;\nexports.isPrimitiveArrayEqual = isPrimitiveArrayEqual;\nconst crypto_1 = require(\"crypto\");\nconst gapicConfig = require(\"./v1/firestore_client_config.json\");\n/**\n * A Promise implementation that supports deferred resolution.\n * @private\n * @internal\n */\nclass Deferred {\n    constructor() {\n        this.resolve = () => { };\n        this.reject = () => { };\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexports.Deferred = Deferred;\n/**\n * Generate a unique client-side identifier.\n *\n * Used for the creation of new documents.\n *\n * @private\n * @internal\n * @returns {string} A unique 20-character wide identifier.\n */\nfunction autoId() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let autoId = '';\n    while (autoId.length < 20) {\n        const bytes = (0, crypto_1.randomBytes)(40);\n        bytes.forEach(b => {\n            // Length of `chars` is 62. We only take bytes between 0 and 62*4-1\n            // (both inclusive). The value is then evenly mapped to indices of `char`\n            // via a modulo operation.\n            const maxValue = 62 * 4 - 1;\n            if (autoId.length < 20 && b <= maxValue) {\n                autoId += chars.charAt(b % 62);\n            }\n        });\n    }\n    return autoId;\n}\n/**\n * Generate a short and semi-random client-side identifier.\n *\n * Used for the creation of request tags.\n *\n * @private\n * @internal\n * @returns {string} A random 5-character wide identifier.\n */\nfunction requestTag() {\n    return autoId().substr(0, 5);\n}\n/**\n * Determines whether `value` is a JavaScript object.\n *\n * @private\n * @internal\n */\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Verifies that 'obj' is a plain JavaScript object that can be encoded as a\n * 'Map' in Firestore.\n *\n * @private\n * @internal\n * @param input The argument to verify.\n * @returns 'true' if the input can be a treated as a plain object.\n */\nfunction isPlainObject(input) {\n    return (isObject(input) &&\n        (Object.getPrototypeOf(input) === Object.prototype ||\n            Object.getPrototypeOf(input) === null ||\n            input.constructor.name === 'Object'));\n}\n/**\n * Returns whether `value` has no custom properties.\n *\n * @private\n * @internal\n */\nfunction isEmpty(value) {\n    return Object.keys(value).length === 0;\n}\n/**\n * Determines whether `value` is a JavaScript function.\n *\n * @private\n * @internal\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * Determines whether the provided error is considered permanent for the given\n * RPC.\n *\n * @private\n * @internal\n */\nfunction isPermanentRpcError(err, methodName) {\n    if (err.code !== undefined) {\n        const retryCodes = getRetryCodes(methodName);\n        return retryCodes.indexOf(err.code) === -1;\n    }\n    else {\n        return false;\n    }\n}\nlet serviceConfig;\n/**\n * Lazy-loads the service config when first accessed.\n * @private\n * @internal\n **/\nfunction getServiceConfig(methodName) {\n    if (!serviceConfig) {\n        serviceConfig = require('google-gax/build/src/fallback').constructSettings('google.firestore.v1.Firestore', gapicConfig, {}, require('google-gax/build/src/status').Status);\n    }\n    return serviceConfig[methodName];\n}\n/**\n * Returns the list of retryable error codes specified in the service\n * configuration.\n * @private\n * @internal\n */\nfunction getRetryCodes(methodName) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.retryCodes) !== null && _c !== void 0 ? _c : [];\n}\n/**\n * Gets the total timeout in milliseconds from the retry settings in\n * the service config for the given RPC. If the total timeout is not\n * set, then `0` is returned.\n *\n * @private\n * @internal\n */\nfunction getTotalTimeout(methodName) {\n    var _a, _b, _c, _d;\n    return ((_d = (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.backoffSettings) === null || _c === void 0 ? void 0 : _c.totalTimeoutMillis) !== null && _d !== void 0 ? _d : 0);\n}\n/**\n * Returns the backoff setting from the service configuration.\n * @private\n * @internal\n */\nfunction getRetryParams(methodName) {\n    var _a, _b, _c;\n    return ((_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.backoffSettings) !== null && _c !== void 0 ? _c : require('google-gax/build/src/fallback').createDefaultBackoffSettings());\n}\n/**\n * Returns a promise with a void return type. The returned promise swallows all\n * errors and never throws.\n *\n * This is primarily used to wait for a promise to complete when the result of\n * the promise will be discarded.\n *\n * @private\n * @internal\n */\nfunction silencePromise(promise) {\n    return promise.then(() => { }, () => { });\n}\n/**\n * Wraps the provided error in a new error that includes the provided stack.\n *\n * Used to preserve stack traces across async calls.\n * @private\n * @internal\n */\nfunction wrapError(err, stack) {\n    err.stack += '\\nCaused by: ' + stack;\n    return err;\n}\n/**\n * Parses the value of the environment variable FIRESTORE_PREFER_REST, and\n * returns a value indicating if the environment variable enables or disables\n * preferRest.\n *\n * This function will warn to the console if the environment variable is set\n * to an unsupported value.\n *\n * @return `true` if the environment variable enables `preferRest`,\n * `false` if the environment variable disables `preferRest`, or `undefined`\n * if the environment variable is not set or is set to an unsupported value.\n *\n * @internal\n * @private\n */\nfunction tryGetPreferRestEnvironmentVariable() {\n    var _a;\n    const rawValue = (_a = process.env.FIRESTORE_PREFER_REST) === null || _a === void 0 ? void 0 : _a.trim().toLowerCase();\n    if (rawValue === undefined) {\n        return undefined;\n    }\n    else if (rawValue === '1' || rawValue === 'true') {\n        return true;\n    }\n    else if (rawValue === '0' || rawValue === 'false') {\n        return false;\n    }\n    else {\n        // eslint-disable-next-line no-console\n        console.warn(`An unsupported value was specified for the environment variable FIRESTORE_PREFER_REST. Value ${rawValue} is unsupported.`);\n        return undefined;\n    }\n}\n/**\n * Returns an array of values that are calculated by performing the given `fn`\n * on all keys in the given `obj` dictionary.\n *\n * @private\n * @internal\n */\nfunction mapToArray(obj, fn) {\n    const result = [];\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            result.push(fn(obj[key], key, obj));\n        }\n    }\n    return result;\n}\n/**\n * Verifies equality for an array of objects using the `isEqual` interface.\n *\n * @private\n * @internal\n * @param left Array of objects supporting `isEqual`.\n * @param right Array of objects supporting `isEqual`.\n * @return True if arrays are equal.\n */\nfunction isArrayEqual(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (let i = 0; i < left.length; ++i) {\n        if (!left[i].isEqual(right[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Verifies equality for an array of primitives.\n *\n * @private\n * @internal\n * @param left Array of primitives.\n * @param right Array of primitives.\n * @return True if arrays are equal.\n */\nfunction isPrimitiveArrayEqual(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n    for (let i = 0; i < left.length; ++i) {\n        if (left[i] !== right[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=util.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/timestamp.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Timestamp = void 0;\nconst validate_1 = require(\"./validate\");\n/*!\n * Number of nanoseconds in a millisecond.\n *\n * @type {number}\n */\nconst MS_TO_NANOS = 1000000;\n/*!\n * The minimum legal value for the \"seconds\" property of a Timestamp object.\n *\n * This value corresponds to 0001-01-01T00:00:00Z.\n *\n * @type {number}\n */\nconst MIN_SECONDS = -62135596800;\n/*!\n * The maximum legal value for the \"seconds\" property of a Timestamp object.\n *\n * This value corresponds to 9999-12-31T23:59:59.999999999Z.\n *\n * @type {number}\n */\nconst MAX_SECONDS = 253402300799;\n/**\n * A Timestamp represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time. It is encoded using the Proleptic Gregorian\n * Calendar which extends the Gregorian calendar backwards to year one. It is\n * encoded assuming all minutes are 60 seconds long, i.e. leap seconds are\n * \"smeared\" so that no leap second table is needed for interpretation. Range is\n * from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\n *\n * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto\n */\nclass Timestamp {\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({ updateTime:Firestore.Timestamp.now() });\n     *\n     * ```\n     * @return {Timestamp} A new `Timestamp` representing the current date.\n     */\n    static now() {\n        return Timestamp.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * let date = Date.parse('01 Jan 2000 00:00:00 GMT');\n     * documentRef.set({ startTime:Firestore.Timestamp.fromDate(date) });\n     *\n     * ```\n     * @param {Date} date The date to initialize the `Timestamp` from.\n     * @return {Timestamp} A new `Timestamp` representing the same point in time\n     * as the given date.\n     */\n    static fromDate(date) {\n        return Timestamp.fromMillis(date.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({ startTime:Firestore.Timestamp.fromMillis(42) });\n     *\n     * ```\n     * @param {number} milliseconds Number of milliseconds since Unix epoch\n     * 1970-01-01T00:00:00Z.\n     * @return {Timestamp}  A new `Timestamp` representing the same point in time\n     * as the given number of milliseconds.\n     */\n    static fromMillis(milliseconds) {\n        const seconds = Math.floor(milliseconds / 1000);\n        const nanos = Math.floor((milliseconds - seconds * 1000) * MS_TO_NANOS);\n        return new Timestamp(seconds, nanos);\n    }\n    /**\n     * Generates a `Timestamp` object from a Timestamp proto.\n     *\n     * @private\n     * @internal\n     * @param {Object} timestamp The `Timestamp` Protobuf object.\n     */\n    static fromProto(timestamp) {\n        return new Timestamp(Number(timestamp.seconds || 0), timestamp.nanos || 0);\n    }\n    /**\n     * Creates a new timestamp.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({ startTime:new Firestore.Timestamp(42, 0) });\n     *\n     * ```\n     * @param {number} seconds The number of seconds of UTC time since Unix epoch\n     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     * 9999-12-31T23:59:59Z inclusive.\n     * @param {number} nanoseconds The non-negative fractions of a second at\n     * nanosecond resolution. Negative second values with fractions must still\n     * have non-negative nanoseconds values that count forward in time. Must be\n     * from 0 to 999,999,999 inclusive.\n     */\n    constructor(seconds, nanoseconds) {\n        (0, validate_1.validateInteger)('seconds', seconds, {\n            minValue: MIN_SECONDS,\n            maxValue: MAX_SECONDS,\n        });\n        (0, validate_1.validateInteger)('nanoseconds', nanoseconds, {\n            minValue: 0,\n            maxValue: 999999999,\n        });\n        this._seconds = seconds;\n        this._nanoseconds = nanoseconds;\n    }\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   let updated = snap.updateTime;\n     *   console.log(`Updated at ${updated.seconds}s ${updated.nanoseconds}ns`);\n     * });\n     *\n     * ```\n     * @type {number}\n     */\n    get seconds() {\n        return this._seconds;\n    }\n    /**\n     * The non-negative fractions of a second at nanosecond resolution.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   let updated = snap.updateTime;\n     *   console.log(`Updated at ${updated.seconds}s ${updated.nanoseconds}ns`);\n     * });\n     *\n     * ```\n     * @type {number}\n     */\n    get nanoseconds() {\n        return this._nanoseconds;\n    }\n    /**\n     * Returns a new `Date` corresponding to this timestamp. This may lose\n     * precision.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   console.log(`Document updated at: ${snap.updateTime.toDate()}`);\n     * });\n     *\n     * ```\n     * @return {Date} JavaScript `Date` object representing the same point in time\n     * as this `Timestamp`, with millisecond precision.\n     */\n    toDate() {\n        return new Date(this._seconds * 1000 + Math.round(this._nanoseconds / MS_TO_NANOS));\n    }\n    /**\n     * Returns the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   let startTime = snap.get('startTime');\n     *   let endTime = snap.get('endTime');\n     *   console.log(`Duration: ${endTime - startTime}`);\n     * });\n     *\n     * ```\n     * @return {number} The point in time corresponding to this timestamp,\n     * represented as the number of milliseconds since Unix epoch\n     * 1970-01-01T00:00:00Z.\n     */\n    toMillis() {\n        return this._seconds * 1000 + Math.floor(this._nanoseconds / MS_TO_NANOS);\n    }\n    /**\n     * Returns 'true' if this `Timestamp` is equal to the provided one.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(snap => {\n     *   if (snap.createTime.isEqual(snap.updateTime)) {\n     *     console.log('Document is in its initial state.');\n     *   }\n     * });\n     *\n     * ```\n     * @param {any} other The `Timestamp` to compare against.\n     * @return {boolean} 'true' if this `Timestamp` is equal to the provided one.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof Timestamp &&\n                this._seconds === other.seconds &&\n                this._nanoseconds === other.nanoseconds));\n    }\n    /**\n     * Generates the Protobuf `Timestamp` object for this timestamp.\n     *\n     * @private\n     * @internal\n     * @returns {Object} The `Timestamp` Protobuf object.\n     */\n    toProto() {\n        const timestamp = {};\n        if (this.seconds) {\n            timestamp.seconds = this.seconds.toString();\n        }\n        if (this.nanoseconds) {\n            timestamp.nanos = this.nanoseconds;\n        }\n        return { timestampValue: timestamp };\n    }\n    /**\n     * Converts this object to a primitive `string`, which allows `Timestamp` objects to be compared\n     * using the `>`, `<=`, `>=` and `>` operators.\n     *\n     * @return {string} a string encoding of this object.\n     */\n    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n        // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n        // with zeroes to be a consistent length. Strings with this format then have a lexicographical\n        // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n        // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n        // which would affect its lexicographical ordering.\n        const adjustedSeconds = this.seconds - MIN_SECONDS;\n        // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n        const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n        const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n        return formattedSeconds + '.' + formattedNanoseconds;\n    }\n}\nexports.Timestamp = Timestamp;\n//# sourceMappingURL=timestamp.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 569, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/validate.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.customObjectMessage = customObjectMessage;\nexports.validateFunction = validateFunction;\nexports.validateObject = validateObject;\nexports.validateString = validateString;\nexports.validateHost = validateHost;\nexports.validateBoolean = validateBoolean;\nexports.validateNumber = validateNumber;\nexports.validateInteger = validateInteger;\nexports.validateTimestamp = validateTimestamp;\nexports.invalidArgumentMessage = invalidArgumentMessage;\nexports.validateOptional = validateOptional;\nexports.validateMinNumberOfArguments = validateMinNumberOfArguments;\nexports.validateMaxNumberOfArguments = validateMaxNumberOfArguments;\nexports.validateEnumValue = validateEnumValue;\nconst url_1 = require(\"url\");\nconst util_1 = require(\"./util\");\nconst timestamp_1 = require(\"./timestamp\");\n/**\n * Generates an error message to use with custom objects that cannot be\n * serialized.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value that failed serialization.\n * @param path The field path that the object is assigned to.\n */\nfunction customObjectMessage(arg, value, path) {\n    const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n    if ((0, util_1.isObject)(value)) {\n        // We use the base class name as the type name as the sentinel classes\n        // returned by the public FieldValue API are subclasses of FieldValue. By\n        // using the base name, we reduce the number of special cases below.\n        const typeName = value.constructor.name;\n        switch (typeName) {\n            case 'DocumentReference':\n            case 'FieldPath':\n            case 'FieldValue':\n            case 'GeoPoint':\n            case 'Timestamp':\n                return (`${invalidArgumentMessage(arg, 'Firestore document')} Detected an object of type \"${typeName}\" that doesn't match the ` +\n                    `expected instance${fieldPathMessage}. Please ensure that the ` +\n                    'Firestore types you are using are from the same NPM package.)');\n            case 'Object':\n                return `${invalidArgumentMessage(arg, 'Firestore document')} Invalid use of type \"${typeof value}\" as a Firestore argument${fieldPathMessage}.`;\n            default:\n                return (`${invalidArgumentMessage(arg, 'Firestore document')} Couldn't serialize object of type \"${typeName}\"${fieldPathMessage}. Firestore doesn't support JavaScript ` +\n                    'objects with custom prototypes (i.e. objects that were created ' +\n                    'via the \"new\" operator).');\n        }\n    }\n    else {\n        return `${invalidArgumentMessage(arg, 'Firestore document')} Input is not a plain JavaScript object${fieldPathMessage}.`;\n    }\n}\n/**\n * Validates that 'value' is a function.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the function can be omitted.\n */\nfunction validateFunction(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (!(0, util_1.isFunction)(value)) {\n            throw new Error(invalidArgumentMessage(arg, 'function'));\n        }\n    }\n}\n/**\n * Validates that 'value' is an object.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the object can be omitted.\n */\nfunction validateObject(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (!(0, util_1.isObject)(value)) {\n            throw new Error(invalidArgumentMessage(arg, 'object'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a string.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the string can be omitted.\n */\nfunction validateString(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'string') {\n            throw new Error(invalidArgumentMessage(arg, 'string'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a host.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the host can be omitted.\n */\nfunction validateHost(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        validateString(arg, value);\n        const urlString = `http://${value}/`;\n        let parsed;\n        try {\n            parsed = new url_1.URL(urlString);\n        }\n        catch (e) {\n            throw new Error(invalidArgumentMessage(arg, 'host'));\n        }\n        if (parsed.search !== '' ||\n            parsed.pathname !== '/' ||\n            parsed.username !== '') {\n            throw new Error(invalidArgumentMessage(arg, 'host'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a boolean.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the boolean can be omitted.\n */\nfunction validateBoolean(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'boolean') {\n            throw new Error(invalidArgumentMessage(arg, 'boolean'));\n        }\n    }\n}\n/**\n * Validates that 'value' is a number.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the number can be omitted.\n */\nfunction validateNumber(arg, value, options) {\n    const min = options !== undefined && options.minValue !== undefined\n        ? options.minValue\n        : -Infinity;\n    const max = options !== undefined && options.maxValue !== undefined\n        ? options.maxValue\n        : Infinity;\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'number' || isNaN(value)) {\n            throw new Error(invalidArgumentMessage(arg, 'number'));\n        }\n        else if (value < min || value > max) {\n            throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);\n        }\n    }\n}\n/**\n * Validates that 'value' is a integer.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the integer can be omitted.\n */\nfunction validateInteger(arg, value, options) {\n    const min = options !== undefined && options.minValue !== undefined\n        ? options.minValue\n        : -Infinity;\n    const max = options !== undefined && options.maxValue !== undefined\n        ? options.maxValue\n        : Infinity;\n    if (!validateOptional(value, options)) {\n        if (typeof value !== 'number' || isNaN(value) || value % 1 !== 0) {\n            throw new Error(invalidArgumentMessage(arg, 'integer'));\n        }\n        else if (value < min || value > max) {\n            throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);\n        }\n    }\n}\n/**\n * Validates that 'value' is a Timestamp.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the Timestamp can be omitted.\n */\nfunction validateTimestamp(arg, value, options) {\n    if (!validateOptional(value, options)) {\n        if (!(value instanceof timestamp_1.Timestamp)) {\n            throw new Error(invalidArgumentMessage(arg, 'Timestamp'));\n        }\n    }\n}\n/**\n * Generates an error message to use with invalid arguments.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param expectedType The expected input type.\n */\nfunction invalidArgumentMessage(arg, expectedType) {\n    return `${formatArgumentName(arg)} is not a valid ${expectedType}.`;\n}\n/**\n * Enforces the 'options.optional' constraint for 'value'.\n *\n * @private\n * @internal\n * @param value The input to validate.\n * @param options Whether the function can be omitted.\n * @return Whether the object is omitted and is allowed to be omitted.\n */\nfunction validateOptional(value, options) {\n    return (value === undefined && options !== undefined && options.optional === true);\n}\n/**\n * Formats the given word as plural conditionally given the preceding number.\n *\n * @private\n * @internal\n * @param num The number to use for formatting.\n * @param str The string to format.\n */\nfunction formatPlural(num, str) {\n    return `${num} ${str}` + (num === 1 ? '' : 's');\n}\n/**\n * Creates a descriptive name for the provided argument name or index.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @return Either the argument name or its index description.\n */\nfunction formatArgumentName(arg) {\n    return typeof arg === 'string'\n        ? `Value for argument \"${arg}\"`\n        : `Element at index ${arg}`;\n}\n/**\n * Verifies that 'args' has at least 'minSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param minSize The minimum number of elements to enforce.\n * @throws if the expectation is not met.\n */\nfunction validateMinNumberOfArguments(funcName, args, minSize) {\n    if (args.length < minSize) {\n        throw new Error(`Function \"${funcName}()\" requires at least ` +\n            `${formatPlural(minSize, 'argument')}.`);\n    }\n}\n/**\n * Verifies that 'args' has at most 'maxSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param maxSize The maximum number of elements to enforce.\n * @throws if the expectation is not met.\n */\nfunction validateMaxNumberOfArguments(funcName, args, maxSize) {\n    if (args.length > maxSize) {\n        throw new Error(`Function \"${funcName}()\" accepts at most ` +\n            `${formatPlural(maxSize, 'argument')}.`);\n    }\n}\n/**\n * Validates that the provided named option equals one of the expected values.\n *\n * @param arg The argument name or argument index (for varargs methods).).\n * @param value The input to validate.\n * @param allowedValues A list of expected values.\n * @param options Whether the input can be omitted.\n * @private\n * @internal\n */\nfunction validateEnumValue(arg, value, allowedValues, options) {\n    if (!validateOptional(value, options)) {\n        const expectedDescription = [];\n        for (const allowed of allowedValues) {\n            if (allowed === value) {\n                return;\n            }\n            expectedDescription.push(allowed);\n        }\n        throw new Error(`${formatArgumentName(arg)} is invalid. Acceptable values are: ${expectedDescription.join(', ')}`);\n    }\n}\n//# sourceMappingURL=validate.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 867, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/logger.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logger = logger;\nexports.setLogFunction = setLogFunction;\nexports.setLibVersion = setLibVersion;\nconst util = require(\"util\");\nconst validate_1 = require(\"./validate\");\n/*! The Firestore library version */\nlet libVersion;\n/*! The external function used to emit logs. */\nlet logFunction = null;\n/**\n * Log function to use for debug output. By default, we don't perform any\n * logging.\n *\n * @private\n * @internal\n */\nfunction logger(methodName, requestTag, logMessage, ...additionalArgs) {\n    requestTag = requestTag || '#####';\n    if (logFunction) {\n        const formattedMessage = util.format(logMessage, ...additionalArgs);\n        const time = new Date().toISOString();\n        logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` +\n            formattedMessage);\n    }\n}\n/**\n * Sets or disables the log function for all active Firestore instances.\n *\n * @param logger A log function that takes a message (such as `console.log`) or\n * `null` to turn off logging.\n */\nfunction setLogFunction(logger) {\n    if (logger !== null)\n        (0, validate_1.validateFunction)('logger', logger);\n    logFunction = logger;\n}\n/**\n * Sets the library version to be used in log messages.\n *\n * @private\n * @internal\n */\nfunction setLibVersion(version) {\n    libVersion = version;\n}\n//# sourceMappingURL=logger.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,MAAM,GAAG;AACjB,QAAQ,cAAc,GAAG;AACzB,QAAQ,aAAa,GAAG;AACxB,MAAM;AACN,MAAM;AACN,kCAAkC,GAClC,IAAI;AACJ,6CAA6C,GAC7C,IAAI,cAAc;AAClB;;;;;;CAMC,GACD,SAAS,OAAO,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,cAAc;IACjE,aAAa,cAAc;IAC3B,IAAI,aAAa;QACb,MAAM,mBAAmB,KAAK,MAAM,CAAC,eAAe;QACpD,MAAM,OAAO,IAAI,OAAO,WAAW;QACnC,YAAY,CAAC,WAAW,EAAE,WAAW,EAAE,EAAE,KAAK,CAAC,EAAE,WAAW,EAAE,EAAE,WAAW,GAAG,CAAC,GAC3E;IACR;AACJ;AACA;;;;;CAKC,GACD,SAAS,eAAe,MAAM;IAC1B,IAAI,WAAW,MACX,CAAC,GAAG,WAAW,gBAAgB,EAAE,UAAU;IAC/C,cAAc;AAClB;AACA;;;;;CAKC,GACD,SAAS,cAAc,OAAO;IAC1B,aAAa;AACjB,EACA,kCAAkC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 928, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/backoff.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExponentialBackoff = exports.delayExecution = exports.MAX_RETRY_ATTEMPTS = exports.DEFAULT_BACKOFF_FACTOR = exports.DEFAULT_BACKOFF_MAX_DELAY_MS = exports.DEFAULT_BACKOFF_INITIAL_DELAY_MS = void 0;\nexports.setTimeoutHandler = setTimeoutHandler;\nconst logger_1 = require(\"./logger\");\n/*\n * @module firestore/backoff\n * @private\n * @internal\n *\n * Contains backoff logic to facilitate RPC error handling. This class derives\n * its implementation from the Firestore Mobile Web Client.\n *\n * @see https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/remote/backoff.ts\n */\n/*!\n * The default initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nexports.DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n/*!\n * The default maximum backoff time in milliseconds.\n */\nexports.DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n/*!\n * The default factor to increase the backup by after each failed attempt.\n */\nexports.DEFAULT_BACKOFF_FACTOR = 1.5;\n/*!\n * The default jitter to distribute the backoff attempts by (0 means no\n * randomization, 1.0 means +/-50% randomization).\n */\nconst DEFAULT_JITTER_FACTOR = 1.0;\n/*!\n * The maximum number of retries that will be attempted by backoff\n * before stopping all retry attempts.\n */\nexports.MAX_RETRY_ATTEMPTS = 10;\n/*!\n * The timeout handler used by `ExponentialBackoff` and `BulkWriter`.\n */\nexports.delayExecution = setTimeout;\n/**\n * Allows overriding of the timeout handler used by the exponential backoff\n * implementation. If not invoked, we default to `setTimeout()`.\n *\n * Used only in testing.\n *\n * @private\n * @internal\n * @param {function} handler A handler than matches the API of `setTimeout()`.\n */\nfunction setTimeoutHandler(handler) {\n    exports.delayExecution = (f, ms) => {\n        handler(f, ms);\n        const timeout = {\n            hasRef: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            ref: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            refresh: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            unref: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            [Symbol.toPrimitive]: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n        };\n        // `NodeJS.Timeout` type signature change:\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/66176/files#diff-e838d0ace9cd5f6516bacfbd3ad00d02cd37bd60f9993ce6223f52d889a1fdbaR122-R126\n        //\n        // Adding `[Symbol.dispose](): void;` cannot be done on older versions of\n        // NodeJS. So we simply cast to `NodeJS.Timeout`.\n        return timeout;\n    };\n}\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a \"jitter\" (+/- 50% by default)  that is calculated and\n * added to the base delay. This prevents clients from accidentally\n * synchronizing their delays causing spikes of load to the backend.\n *\n * @private\n * @internal\n */\nclass ExponentialBackoff {\n    constructor(options = {}) {\n        /**\n         * The number of retries that has been attempted.\n         *\n         * @private\n         * @internal\n         */\n        this._retryCount = 0;\n        /**\n         * The backoff delay of the current attempt.\n         *\n         * @private\n         * @internal\n         */\n        this.currentBaseMs = 0;\n        /**\n         * Whether we are currently waiting for backoff to complete.\n         *\n         * @private\n         * @internal\n         */\n        this.awaitingBackoffCompletion = false;\n        this.initialDelayMs =\n            options.initialDelayMs !== undefined\n                ? options.initialDelayMs\n                : exports.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n        this.backoffFactor =\n            options.backoffFactor !== undefined\n                ? options.backoffFactor\n                : exports.DEFAULT_BACKOFF_FACTOR;\n        this.maxDelayMs =\n            options.maxDelayMs !== undefined\n                ? options.maxDelayMs\n                : exports.DEFAULT_BACKOFF_MAX_DELAY_MS;\n        this.jitterFactor =\n            options.jitterFactor !== undefined\n                ? options.jitterFactor\n                : DEFAULT_JITTER_FACTOR;\n    }\n    /**\n     * Resets the backoff delay and retry count.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     *\n     * @private\n     * @internal\n     */\n    reset() {\n        this._retryCount = 0;\n        this.currentBaseMs = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     *\n     * @private\n     * @internal\n     */\n    resetToMax() {\n        this.currentBaseMs = this.maxDelayMs;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     *\n     * @return A Promise that resolves when the current delay elapsed.\n     * @private\n     * @internal\n     */\n    backoffAndWait() {\n        if (this.awaitingBackoffCompletion) {\n            return Promise.reject(new Error('A backoff operation is already in progress.'));\n        }\n        if (this.retryCount > exports.MAX_RETRY_ATTEMPTS) {\n            return Promise.reject(new Error('Exceeded maximum number of retries allowed.'));\n        }\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            (0, logger_1.logger)('ExponentialBackoff.backoffAndWait', null, `Backing off for ${delayWithJitterMs} ms ` +\n                `(base delay: ${this.currentBaseMs} ms)`);\n        }\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        this.currentBaseMs = Math.max(this.currentBaseMs, this.initialDelayMs);\n        this.currentBaseMs = Math.min(this.currentBaseMs, this.maxDelayMs);\n        this._retryCount += 1;\n        return new Promise(resolve => {\n            this.awaitingBackoffCompletion = true;\n            (0, exports.delayExecution)(() => {\n                this.awaitingBackoffCompletion = false;\n                resolve();\n            }, delayWithJitterMs);\n        });\n    }\n    // Visible for testing.\n    get retryCount() {\n        return this._retryCount;\n    }\n    /**\n     * Returns a randomized \"jitter\" delay based on the current base and jitter\n     * factor.\n     *\n     * @returns {number} The jitter to apply based on the current delay.\n     * @private\n     * @internal\n     */\n    jitterDelayMs() {\n        return (Math.random() - 0.5) * this.jitterFactor * this.currentBaseMs;\n    }\n}\nexports.ExponentialBackoff = ExponentialBackoff;\n//# sourceMappingURL=backoff.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1129, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/rate-limiter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RateLimiter = void 0;\n/*!\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst assert = require(\"assert\");\nconst logger_1 = require(\"./logger\");\n/**\n * A helper that uses the Token Bucket algorithm to rate limit the number of\n * operations that can be made in a second.\n *\n * Before a given request containing a number of operations can proceed,\n * RateLimiter determines doing so stays under the provided rate limits. It can\n * also determine how much time is required before a request can be made.\n *\n * RateLimiter can also implement a gradually increasing rate limit. This is\n * used to enforce the 500/50/5 rule\n * (https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic).\n *\n * @private\n * @internal\n */\nclass RateLimiter {\n    /**\n     * @param initialCapacity Initial maximum number of operations per second.\n     * @param multiplier Rate by which to increase the capacity.\n     * @param multiplierMillis How often the capacity should increase in\n     * milliseconds.\n     * @param maximumCapacity Maximum number of allowed operations per second.\n     * The number of tokens added per second will never exceed this number.\n     * @param startTimeMillis The starting time in epoch milliseconds that the\n     * rate limit is based on. Used for testing the limiter.\n     */\n    constructor(initialCapacity, multiplier, multiplierMillis, maximumCapacity, startTimeMillis = Date.now()) {\n        this.initialCapacity = initialCapacity;\n        this.multiplier = multiplier;\n        this.multiplierMillis = multiplierMillis;\n        this.maximumCapacity = maximumCapacity;\n        this.startTimeMillis = startTimeMillis;\n        this.availableTokens = initialCapacity;\n        this.lastRefillTimeMillis = startTimeMillis;\n        this.previousCapacity = initialCapacity;\n    }\n    /**\n     * Tries to make the number of operations. Returns true if the request\n     * succeeded and false otherwise.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     * @internal\n     */\n    tryMakeRequest(numOperations, requestTimeMillis = Date.now()) {\n        this.refillTokens(requestTimeMillis);\n        if (numOperations <= this.availableTokens) {\n            this.availableTokens -= numOperations;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns the number of ms needed to make a request with the provided number\n     * of operations. Returns 0 if the request can be made with the existing\n     * capacity. Returns -1 if the request is not possible with the current\n     * capacity.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     * @internal\n     */\n    getNextRequestDelayMs(numOperations, requestTimeMillis = Date.now()) {\n        this.refillTokens(requestTimeMillis);\n        if (numOperations < this.availableTokens) {\n            return 0;\n        }\n        const capacity = this.calculateCapacity(requestTimeMillis);\n        if (capacity < numOperations) {\n            return -1;\n        }\n        const requiredTokens = numOperations - this.availableTokens;\n        return Math.ceil((requiredTokens * 1000) / capacity);\n    }\n    /**\n     * Refills the number of available tokens based on how much time has elapsed\n     * since the last time the tokens were refilled.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     * @internal\n     */\n    refillTokens(requestTimeMillis) {\n        if (requestTimeMillis >= this.lastRefillTimeMillis) {\n            const elapsedTime = requestTimeMillis - this.lastRefillTimeMillis;\n            const capacity = this.calculateCapacity(requestTimeMillis);\n            const tokensToAdd = Math.floor((elapsedTime * capacity) / 1000);\n            if (tokensToAdd > 0) {\n                this.availableTokens = Math.min(capacity, this.availableTokens + tokensToAdd);\n                this.lastRefillTimeMillis = requestTimeMillis;\n            }\n        }\n        else {\n            throw new Error('Request time should not be before the last token refill time.');\n        }\n    }\n    /**\n     * Calculates the maximum capacity based on the provided date.\n     *\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n    calculateCapacity(requestTimeMillis) {\n        assert(requestTimeMillis >= this.startTimeMillis, 'startTime cannot be after currentTime');\n        const millisElapsed = requestTimeMillis - this.startTimeMillis;\n        const operationsPerSecond = Math.min(Math.floor(Math.pow(this.multiplier, Math.floor(millisElapsed / this.multiplierMillis)) * this.initialCapacity), this.maximumCapacity);\n        if (operationsPerSecond !== this.previousCapacity) {\n            (0, logger_1.logger)('RateLimiter.calculateCapacity', null, `New request capacity: ${operationsPerSecond} operations per second.`);\n        }\n        this.previousCapacity = operationsPerSecond;\n        return operationsPerSecond;\n    }\n}\nexports.RateLimiter = RateLimiter;\n//# sourceMappingURL=rate-limiter.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,WAAW,GAAG,KAAK;AAC3B;;;;;;;;;;;;;;CAcC,GACD,MAAM;AACN,MAAM;AACN;;;;;;;;;;;;;;CAcC,GACD,MAAM;IACF;;;;;;;;;KASC,GACD,YAAY,eAAe,EAAE,UAAU,EAAE,gBAAgB,EAAE,eAAe,EAAE,kBAAkB,KAAK,GAAG,EAAE,CAAE;QACtG,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,oBAAoB,GAAG;QAC5B,IAAI,CAAC,gBAAgB,GAAG;IAC5B;IACA;;;;;;;;KAQC,GACD,eAAe,aAAa,EAAE,oBAAoB,KAAK,GAAG,EAAE,EAAE;QAC1D,IAAI,CAAC,YAAY,CAAC;QAClB,IAAI,iBAAiB,IAAI,CAAC,eAAe,EAAE;YACvC,IAAI,CAAC,eAAe,IAAI;YACxB,OAAO;QACX;QACA,OAAO;IACX;IACA;;;;;;;;;;KAUC,GACD,sBAAsB,aAAa,EAAE,oBAAoB,KAAK,GAAG,EAAE,EAAE;QACjE,IAAI,CAAC,YAAY,CAAC;QAClB,IAAI,gBAAgB,IAAI,CAAC,eAAe,EAAE;YACtC,OAAO;QACX;QACA,MAAM,WAAW,IAAI,CAAC,iBAAiB,CAAC;QACxC,IAAI,WAAW,eAAe;YAC1B,OAAO,CAAC;QACZ;QACA,MAAM,iBAAiB,gBAAgB,IAAI,CAAC,eAAe;QAC3D,OAAO,KAAK,IAAI,CAAC,AAAC,iBAAiB,OAAQ;IAC/C;IACA;;;;;;;;KAQC,GACD,aAAa,iBAAiB,EAAE;QAC5B,IAAI,qBAAqB,IAAI,CAAC,oBAAoB,EAAE;YAChD,MAAM,cAAc,oBAAoB,IAAI,CAAC,oBAAoB;YACjE,MAAM,WAAW,IAAI,CAAC,iBAAiB,CAAC;YACxC,MAAM,cAAc,KAAK,KAAK,CAAC,AAAC,cAAc,WAAY;YAC1D,IAAI,cAAc,GAAG;gBACjB,IAAI,CAAC,eAAe,GAAG,KAAK,GAAG,CAAC,UAAU,IAAI,CAAC,eAAe,GAAG;gBACjE,IAAI,CAAC,oBAAoB,GAAG;YAChC;QACJ,OACK;YACD,MAAM,IAAI,MAAM;QACpB;IACJ;IACA;;;;;KAKC,GACD,uBAAuB;IACvB,kBAAkB,iBAAiB,EAAE;QACjC,OAAO,qBAAqB,IAAI,CAAC,eAAe,EAAE;QAClD,MAAM,gBAAgB,oBAAoB,IAAI,CAAC,eAAe;QAC9D,MAAM,sBAAsB,KAAK,GAAG,CAAC,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,KAAK,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe;QAC1K,IAAI,wBAAwB,IAAI,CAAC,gBAAgB,EAAE;YAC/C,CAAC,GAAG,SAAS,MAAM,EAAE,iCAAiC,MAAM,CAAC,sBAAsB,EAAE,oBAAoB,uBAAuB,CAAC;QACrI;QACA,IAAI,CAAC,gBAAgB,GAAG;QACxB,OAAO;IACX;AACJ;AACA,QAAQ,WAAW,GAAG,aACtB,wCAAwC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1266, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/map-type.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VECTOR_MAP_VECTORS_KEY = exports.RESERVED_MAP_KEY_VECTOR_VALUE = exports.RESERVED_MAP_KEY = void 0;\nexports.RESERVED_MAP_KEY = '__type__';\nexports.RESERVED_MAP_KEY_VECTOR_VALUE = '__vector__';\nexports.VECTOR_MAP_VECTORS_KEY = 'value';\n//# sourceMappingURL=map-type.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,sBAAsB,GAAG,QAAQ,6BAA6B,GAAG,QAAQ,gBAAgB,GAAG,KAAK;AACzG,QAAQ,gBAAgB,GAAG;AAC3B,QAAQ,6BAA6B,GAAG;AACxC,QAAQ,sBAAsB,GAAG,SACjC,oCAAoC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1293, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/convert.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timestampFromJson = timestampFromJson;\nexports.detectValueType = detectValueType;\nexports.detectGoogleProtobufValueType = detectGoogleProtobufValueType;\nexports.valueFromJson = valueFromJson;\nexports.fieldsFromJson = fieldsFromJson;\nconst validate_1 = require(\"./validate\");\nconst map_type_1 = require(\"./map-type\");\n/*!\n * @module firestore/convert\n * @private\n * @internal\n *\n * This module contains utility functions to convert\n * `firestore.v1.Documents` from Proto3 JSON to their equivalent\n * representation in Protobuf JS. Protobuf JS is the only encoding supported by\n * this client, and dependencies that use Proto3 JSON (such as the Google Cloud\n * Functions SDK) are supported through this conversion and its usage in\n * {@see Firestore#snapshot_}.\n */\n/**\n * Converts an ISO 8601 or google.protobuf.Timestamp proto into Protobuf JS.\n *\n * @private\n * @internal\n * @param timestampValue The value to convert.\n * @param argumentName The argument name to use in the error message if the\n * conversion fails. If omitted, 'timestampValue' is used.\n * @return The value as expected by Protobuf JS or undefined if no input was\n * provided.\n */\nfunction timestampFromJson(timestampValue, argumentName) {\n    let timestampProto = {};\n    if (typeof timestampValue === 'string') {\n        const date = new Date(timestampValue);\n        const seconds = Math.floor(date.getTime() / 1000);\n        let nanos = 0;\n        if (timestampValue.length > 20) {\n            const nanoString = timestampValue.substring(20, timestampValue.length - 1);\n            const trailingZeroes = 9 - nanoString.length;\n            nanos = Number(nanoString) * Math.pow(10, trailingZeroes);\n        }\n        if (isNaN(seconds) || isNaN(nanos)) {\n            argumentName = argumentName || 'timestampValue';\n            throw new Error(`Specify a valid ISO 8601 timestamp for \"${argumentName}\".`);\n        }\n        timestampProto = {\n            seconds: seconds || undefined,\n            nanos: nanos || undefined,\n        };\n    }\n    else if (timestampValue !== undefined) {\n        (0, validate_1.validateObject)('timestampValue', timestampValue);\n        timestampProto = {\n            seconds: timestampValue.seconds || undefined,\n            nanos: timestampValue.nanos || undefined,\n        };\n    }\n    return timestampProto;\n}\n/**\n * Converts a Proto3 JSON 'bytesValue' field into Protobuf JS.\n *\n * @private\n * @internal\n * @param bytesValue The value to convert.\n * @return The value as expected by Protobuf JS.\n */\nfunction bytesFromJson(bytesValue) {\n    if (typeof bytesValue === 'string') {\n        return Buffer.from(bytesValue, 'base64');\n    }\n    else {\n        return bytesValue;\n    }\n}\n/**\n * Detects 'valueType' from a Proto3 JSON `firestore.v1.Value` proto.\n *\n * @private\n * @internal\n * @param proto The `firestore.v1.Value` proto.\n * @return The string value for 'valueType'.\n */\nfunction detectValueType(proto) {\n    var _a;\n    let valueType;\n    if (proto.valueType) {\n        valueType = proto.valueType;\n    }\n    else {\n        const detectedValues = [];\n        if (proto.stringValue !== undefined) {\n            detectedValues.push('stringValue');\n        }\n        if (proto.booleanValue !== undefined) {\n            detectedValues.push('booleanValue');\n        }\n        if (proto.integerValue !== undefined) {\n            detectedValues.push('integerValue');\n        }\n        if (proto.doubleValue !== undefined) {\n            detectedValues.push('doubleValue');\n        }\n        if (proto.timestampValue !== undefined) {\n            detectedValues.push('timestampValue');\n        }\n        if (proto.referenceValue !== undefined) {\n            detectedValues.push('referenceValue');\n        }\n        if (proto.arrayValue !== undefined) {\n            detectedValues.push('arrayValue');\n        }\n        if (proto.nullValue !== undefined) {\n            detectedValues.push('nullValue');\n        }\n        if (proto.mapValue !== undefined) {\n            detectedValues.push('mapValue');\n        }\n        if (proto.geoPointValue !== undefined) {\n            detectedValues.push('geoPointValue');\n        }\n        if (proto.bytesValue !== undefined) {\n            detectedValues.push('bytesValue');\n        }\n        if (detectedValues.length !== 1) {\n            throw new Error(`Unable to infer type value from '${JSON.stringify(proto)}'.`);\n        }\n        valueType = detectedValues[0];\n    }\n    // Special handling of mapValues used to represent other data types\n    if (valueType === 'mapValue') {\n        const fields = (_a = proto.mapValue) === null || _a === void 0 ? void 0 : _a.fields;\n        if (fields) {\n            const props = Object.keys(fields);\n            if (props.indexOf(map_type_1.RESERVED_MAP_KEY) !== -1 &&\n                detectValueType(fields[map_type_1.RESERVED_MAP_KEY]) === 'stringValue' &&\n                fields[map_type_1.RESERVED_MAP_KEY].stringValue === map_type_1.RESERVED_MAP_KEY_VECTOR_VALUE) {\n                valueType = 'vectorValue';\n            }\n        }\n    }\n    return valueType;\n}\n/**\n * Detects the value kind from a Proto3 JSON `google.protobuf.Value` proto.\n *\n * @private\n * @internal\n * @param proto The `firestore.v1.Value` proto.\n * @return The string value for 'valueType'.\n */\nfunction detectGoogleProtobufValueType(proto) {\n    const detectedValues = [];\n    if (proto.nullValue !== undefined) {\n        detectedValues.push('nullValue');\n    }\n    if (proto.numberValue !== undefined) {\n        detectedValues.push('numberValue');\n    }\n    if (proto.stringValue !== undefined) {\n        detectedValues.push('stringValue');\n    }\n    if (proto.boolValue !== undefined) {\n        detectedValues.push('boolValue');\n    }\n    if (proto.structValue !== undefined) {\n        detectedValues.push('structValue');\n    }\n    if (proto.listValue !== undefined) {\n        detectedValues.push('listValue');\n    }\n    if (detectedValues.length !== 1) {\n        throw new Error(`Unable to infer type value from '${JSON.stringify(proto)}'.`);\n    }\n    return detectedValues[0];\n}\n/**\n * Converts a `firestore.v1.Value` in Proto3 JSON encoding into the\n * Protobuf JS format expected by this client.\n *\n * @private\n * @internal\n * @param fieldValue The `firestore.v1.Value` in Proto3 JSON format.\n * @return The `firestore.v1.Value` in Protobuf JS format.\n */\nfunction valueFromJson(fieldValue) {\n    const valueType = detectValueType(fieldValue);\n    switch (valueType) {\n        case 'timestampValue':\n            return {\n                timestampValue: timestampFromJson(fieldValue.timestampValue),\n            };\n        case 'bytesValue':\n            return {\n                bytesValue: bytesFromJson(fieldValue.bytesValue),\n            };\n        case 'doubleValue':\n            return {\n                doubleValue: Number(fieldValue.doubleValue),\n            };\n        case 'arrayValue': {\n            const arrayValue = [];\n            if (Array.isArray(fieldValue.arrayValue.values)) {\n                for (const value of fieldValue.arrayValue.values) {\n                    arrayValue.push(valueFromJson(value));\n                }\n            }\n            return {\n                arrayValue: {\n                    values: arrayValue,\n                },\n            };\n        }\n        case 'mapValue':\n        case 'vectorValue': {\n            const mapValue = {};\n            const fields = fieldValue.mapValue.fields;\n            if (fields) {\n                for (const prop of Object.keys(fields)) {\n                    mapValue[prop] = valueFromJson(fieldValue.mapValue.fields[prop]);\n                }\n            }\n            return {\n                mapValue: {\n                    fields: mapValue,\n                },\n            };\n        }\n        default:\n            return fieldValue;\n    }\n}\n/**\n * Converts a map of IValues in Proto3 JSON encoding into the Protobuf JS format\n * expected by this client. This conversion creates a copy of the underlying\n * fields.\n *\n * @private\n * @internal\n * @param document An object with IValues in Proto3 JSON format.\n * @return The object in Protobuf JS format.\n */\nfunction fieldsFromJson(document) {\n    const result = {};\n    for (const prop of Object.keys(document)) {\n        result[prop] = valueFromJson(document[prop]);\n    }\n    return result;\n}\n//# sourceMappingURL=convert.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1556, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/geo-point.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GeoPoint = void 0;\nconst validate_1 = require(\"./validate\");\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as a latitude/longitude pair.\n *\n * @class\n */\nclass GeoPoint {\n    /**\n     * Creates a [GeoPoint]{@link GeoPoint}.\n     *\n     * @param {number} latitude The latitude as a number between -90 and 90.\n     * @param {number} longitude The longitude as a number between -180 and 180.\n     *\n     * @example\n     * ```\n     * let data = {\n     *   google: new Firestore.GeoPoint(37.422, 122.084)\n     * };\n     *\n     * firestore.doc('col/doc').set(data).then(() => {\n     *   console.log(`Location is ${data.google.latitude}, ` +\n     *     `${data.google.longitude}`);\n     * });\n     * ```\n     */\n    constructor(latitude, longitude) {\n        (0, validate_1.validateNumber)('latitude', latitude, { minValue: -90, maxValue: 90 });\n        (0, validate_1.validateNumber)('longitude', longitude, { minValue: -180, maxValue: 180 });\n        this._latitude = latitude;\n        this._longitude = longitude;\n    }\n    /**\n     * The latitude as a number between -90 and 90.\n     *\n     * @type {number}\n     * @name GeoPoint#latitude\n     * @readonly\n     */\n    get latitude() {\n        return this._latitude;\n    }\n    /**\n     * The longitude as a number between -180 and 180.\n     *\n     * @type {number}\n     * @name GeoPoint#longitude\n     * @readonly\n     */\n    get longitude() {\n        return this._longitude;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `GeoPoint` is equal to the provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof GeoPoint &&\n                this.latitude === other.latitude &&\n                this.longitude === other.longitude));\n    }\n    /**\n     * Converts the GeoPoint to a google.type.LatLng proto.\n     * @private\n     * @internal\n     */\n    toProto() {\n        return {\n            geoPointValue: {\n                latitude: this.latitude,\n                longitude: this.longitude,\n            },\n        };\n    }\n    /**\n     * Converts a google.type.LatLng proto to its GeoPoint representation.\n     * @private\n     * @internal\n     */\n    static fromProto(proto) {\n        return new GeoPoint(proto.latitude || 0, proto.longitude || 0);\n    }\n}\nexports.GeoPoint = GeoPoint;\n//# sourceMappingURL=geo-point.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,QAAQ,GAAG,KAAK;AACxB,MAAM;AACN;;;;;CAKC,GACD,MAAM;IACF;;;;;;;;;;;;;;;;;KAiBC,GACD,YAAY,QAAQ,EAAE,SAAS,CAAE;QAC7B,CAAC,GAAG,WAAW,cAAc,EAAE,YAAY,UAAU;YAAE,UAAU,CAAC;YAAI,UAAU;QAAG;QACnF,CAAC,GAAG,WAAW,cAAc,EAAE,aAAa,WAAW;YAAE,UAAU,CAAC;YAAK,UAAU;QAAI;QACvF,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,UAAU,GAAG;IACtB;IACA;;;;;;KAMC,GACD,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,SAAS;IACzB;IACA;;;;;;KAMC,GACD,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,UAAU;IAC1B;IACA;;;;;KAKC,GACD,QAAQ,KAAK,EAAE;QACX,OAAQ,IAAI,KAAK,SACZ,iBAAiB,YACd,IAAI,CAAC,QAAQ,KAAK,MAAM,QAAQ,IAChC,IAAI,CAAC,SAAS,KAAK,MAAM,SAAS;IAC9C;IACA;;;;KAIC,GACD,UAAU;QACN,OAAO;YACH,eAAe;gBACX,UAAU,IAAI,CAAC,QAAQ;gBACvB,WAAW,IAAI,CAAC,SAAS;YAC7B;QACJ;IACJ;IACA;;;;KAIC,GACD,OAAO,UAAU,KAAK,EAAE;QACpB,OAAO,IAAI,SAAS,MAAM,QAAQ,IAAI,GAAG,MAAM,SAAS,IAAI;IAChE;AACJ;AACA,QAAQ,QAAQ,GAAG,UACnB,qCAAqC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1663, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/path.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FieldPath = exports.QualifiedResourcePath = exports.ResourcePath = exports.DEFAULT_DATABASE_ID = void 0;\nexports.validateResourcePath = validateResourcePath;\nexports.validateFieldPath = validateFieldPath;\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/*!\n * The default database ID for this Firestore client. We do not yet expose the\n * ability to use different databases.\n */\nexports.DEFAULT_DATABASE_ID = '(default)';\n/*!\n * A regular expression to verify an absolute Resource Path in Firestore. It\n * extracts the project ID, the database name and the relative resource path\n * if available.\n *\n * @type {RegExp}\n */\nconst RESOURCE_PATH_RE = \n// Note: [\\s\\S] matches all characters including newlines.\n/^projects\\/([^/]*)\\/databases\\/([^/]*)(?:\\/documents\\/)?([\\s\\S]*)$/;\n/*!\n * A regular expression to verify whether a field name can be passed to the\n * backend without escaping.\n *\n * @type {RegExp}\n */\nconst UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/*!\n * A regular expression to verify field paths that are passed to the API as\n * strings. Field paths that do not match this expression have to be provided\n * as a [FieldPath]{@link FieldPath} object.\n *\n * @type {RegExp}\n */\nconst FIELD_PATH_RE = /^[^*~/[\\]]+$/;\n/**\n * An abstract class representing a Firestore path.\n *\n * Subclasses have to implement `split()` and `canonicalString()`.\n *\n * @private\n * @internal\n * @class\n */\nclass Path {\n    /**\n     * Creates a new Path with the given segments.\n     *\n     * @private\n     * @internal\n     * @private\n     * @param segments Sequence of parts of a path.\n     */\n    constructor(segments) {\n        this.segments = segments;\n    }\n    /**\n     * Returns the number of segments of this field path.\n     *\n     * @private\n     * @internal\n     */\n    get size() {\n        return this.segments.length;\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @internal\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    append(relativePath) {\n        if (relativePath instanceof Path) {\n            return this.construct(this.segments.concat(relativePath.segments));\n        }\n        return this.construct(this.segments.concat(this.split(relativePath)));\n    }\n    /**\n     * Returns the path of the parent node.\n     *\n     * @private\n     * @internal\n     * @returns The new path or null if we are already at the root.\n     */\n    parent() {\n        if (this.segments.length === 0) {\n            return null;\n        }\n        return this.construct(this.segments.slice(0, this.segments.length - 1));\n    }\n    /**\n     * Checks whether the current path is a prefix of the specified path.\n     *\n     * @private\n     * @internal\n     * @param other The path to check against.\n     * @returns 'true' iff the current path is a prefix match with 'other'.\n     */\n    isPrefixOf(other) {\n        if (other.segments.length < this.segments.length) {\n            return false;\n        }\n        for (let i = 0; i < this.segments.length; i++) {\n            if (this.segments[i] !== other.segments[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Compare the current path against another Path object.\n     *\n     * @private\n     * @internal\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n    compareTo(other) {\n        const len = Math.min(this.segments.length, other.segments.length);\n        for (let i = 0; i < len; i++) {\n            if (this.segments[i] < other.segments[i]) {\n                return -1;\n            }\n            if (this.segments[i] > other.segments[i]) {\n                return 1;\n            }\n        }\n        if (this.segments.length < other.segments.length) {\n            return -1;\n        }\n        if (this.segments.length > other.segments.length) {\n            return 1;\n        }\n        return 0;\n    }\n    /**\n     * Returns a copy of the underlying segments.\n     *\n     * @private\n     * @internal\n     * @returns A copy of the segments that make up this path.\n     */\n    toArray() {\n        return this.segments.slice();\n    }\n    /**\n     * Pops the last segment from this `Path` and returns a newly constructed\n     * `Path`.\n     *\n     * @private\n     * @internal\n     * @returns The newly created Path.\n     */\n    popLast() {\n        this.segments.pop();\n        return this.construct(this.segments);\n    }\n    /**\n     * Returns true if this `Path` is equal to the provided value.\n     *\n     * @private\n     * @internal\n     * @param other The value to compare against.\n     * @return true if this `Path` is equal to the provided value.\n     */\n    isEqual(other) {\n        return this === other || this.compareTo(other) === 0;\n    }\n}\n/**\n * A slash-separated path for navigating resources within the current Firestore\n * instance.\n *\n * @private\n * @internal\n */\nclass ResourcePath extends Path {\n    /**\n     * Constructs a ResourcePath.\n     *\n     * @private\n     * @internal\n     * @param segments Sequence of names of the parts of the path.\n     */\n    constructor(...segments) {\n        super(segments);\n    }\n    /**\n     * Indicates whether this path points to a document.\n     * @private\n     * @internal\n     */\n    get isDocument() {\n        return this.segments.length > 0 && this.segments.length % 2 === 0;\n    }\n    /**\n     * Indicates whether this path points to a collection.\n     * @private\n     * @internal\n     */\n    get isCollection() {\n        return this.segments.length % 2 === 1;\n    }\n    /**\n     * The last component of the path.\n     * @private\n     * @internal\n     */\n    get id() {\n        if (this.segments.length > 0) {\n            return this.segments[this.segments.length - 1];\n        }\n        return null;\n    }\n    /**\n     * Returns the location of this path relative to the root of the project's\n     * database.\n     * @private\n     * @internal\n     */\n    get relativeName() {\n        return this.segments.join('/');\n    }\n    /**\n     * Constructs a new instance of ResourcePath.\n     *\n     * @private\n     * @internal\n     * @param segments Sequence of parts of the path.\n     * @returns The newly created ResourcePath.\n     */\n    construct(segments) {\n        return new ResourcePath(...segments);\n    }\n    /**\n     * Splits a string into path segments, using slashes as separators.\n     *\n     * @private\n     * @internal\n     * @param relativePath The path to split.\n     * @returns The split path segments.\n     */\n    split(relativePath) {\n        // We may have an empty segment at the beginning or end if they had a\n        // leading or trailing slash (which we allow).\n        return relativePath.split('/').filter(segment => segment.length > 0);\n    }\n    /**\n     * Converts this path to a fully qualified ResourcePath.\n     *\n     * @private\n     * @internal\n     * @param projectId The project ID of the current Firestore project.\n     * @return A fully-qualified resource path pointing to the same element.\n     */\n    toQualifiedResourcePath(projectId, databaseId) {\n        return new QualifiedResourcePath(projectId, databaseId, ...this.segments);\n    }\n}\nexports.ResourcePath = ResourcePath;\n/**\n * A default instance pointing to the root collection.\n * @private\n * @internal\n */\nResourcePath.EMPTY = new ResourcePath();\n/**\n * A slash-separated path that includes a project and database ID for referring\n * to resources in any Firestore project.\n *\n * @private\n * @internal\n */\nclass QualifiedResourcePath extends ResourcePath {\n    /**\n     * Constructs a Firestore Resource Path.\n     *\n     * @private\n     * @internal\n     * @param projectId The Firestore project id.\n     * @param databaseId The Firestore database id.\n     * @param segments Sequence of names of the parts of the path.\n     */\n    constructor(projectId, databaseId, ...segments) {\n        super(...segments);\n        this.projectId = projectId;\n        this.databaseId = databaseId;\n    }\n    /**\n     * String representation of the path relative to the database root.\n     * @private\n     * @internal\n     */\n    get relativeName() {\n        return this.segments.join('/');\n    }\n    /**\n     * Creates a resource path from an absolute Firestore path.\n     *\n     * @private\n     * @internal\n     * @param absolutePath A string representation of a Resource Path.\n     * @returns The new ResourcePath.\n     */\n    static fromSlashSeparatedString(absolutePath) {\n        const elements = RESOURCE_PATH_RE.exec(absolutePath);\n        if (elements) {\n            const project = elements[1];\n            const database = elements[2];\n            const path = elements[3];\n            return new QualifiedResourcePath(project, database).append(path);\n        }\n        throw new Error(`Resource name '${absolutePath}' is not valid.`);\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @internal\n     * @param relativePath Relative path to append to the current path.\n     * @returns The new path.\n     */\n    append(relativePath) {\n        // `super.append()` calls `QualifiedResourcePath.construct()` when invoked\n        // from here and returns a QualifiedResourcePath.\n        return super.append(relativePath);\n    }\n    /**\n     * Create a child path beneath the current level.\n     *\n     * @private\n     * @internal\n     * @returns The new path.\n     */\n    parent() {\n        return super.parent();\n    }\n    /**\n     * String representation of a ResourcePath as expected by the API.\n     *\n     * @private\n     * @internal\n     * @returns The representation as expected by the API.\n     */\n    get formattedName() {\n        const components = [\n            'projects',\n            this.projectId,\n            'databases',\n            this.databaseId,\n            'documents',\n            ...this.segments,\n        ];\n        return components.join('/');\n    }\n    /**\n     * Constructs a new instance of ResourcePath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @internal\n     * @param segments Sequence of names of the parts of the path.\n     * @returns The newly created QualifiedResourcePath.\n     */\n    construct(segments) {\n        return new QualifiedResourcePath(this.projectId, this.databaseId, ...segments);\n    }\n    /**\n     * Convenience method to match the ResourcePath API. This method always\n     * returns the current instance.\n     *\n     * @private\n     * @internal\n     */\n    toQualifiedResourcePath() {\n        return this;\n    }\n    /**\n     * Compare the current path against another ResourcePath object.\n     *\n     * @private\n     * @internal\n     * @param other The path to compare to.\n     * @returns -1 if current < other, 1 if current > other, 0 if equal\n     */\n    compareTo(other) {\n        if (other instanceof QualifiedResourcePath) {\n            if (this.projectId < other.projectId) {\n                return -1;\n            }\n            if (this.projectId > other.projectId) {\n                return 1;\n            }\n            if (this.databaseId < other.databaseId) {\n                return -1;\n            }\n            if (this.databaseId > other.databaseId) {\n                return 1;\n            }\n        }\n        return super.compareTo(other);\n    }\n    /**\n     * Converts this ResourcePath to the Firestore Proto representation.\n     * @private\n     * @internal\n     */\n    toProto() {\n        return {\n            referenceValue: this.formattedName,\n        };\n    }\n}\nexports.QualifiedResourcePath = QualifiedResourcePath;\n/**\n * Validates that the given string can be used as a relative or absolute\n * resource path.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param resourcePath The path to validate.\n * @throws if the string can't be used as a resource path.\n */\nfunction validateResourcePath(arg, resourcePath) {\n    if (typeof resourcePath !== 'string' || resourcePath === '') {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'resource path')} Path must be a non-empty string.`);\n    }\n    if (resourcePath.indexOf('//') >= 0) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'resource path')} Paths must not contain //.`);\n    }\n}\n/**\n * A dot-separated path for navigating sub-objects (e.g. nested maps) within a document.\n *\n * @class\n */\nclass FieldPath extends Path {\n    /**\n     * Constructs a Firestore Field Path.\n     *\n     * @param {...string} segments Sequence of field names that form this path.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     * let fieldPath = new FieldPath('f.o.o', 'bar');\n     *\n     * query.where(fieldPath, '==', 42).get().then(snapshot => {\n     *   snapshot.forEach(document => {\n     *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);\n     *   });\n     * });\n     * ```\n     */\n    constructor(...segments) {\n        if (Array.isArray(segments[0])) {\n            throw new Error('The FieldPath constructor no longer supports an array as its first argument. ' +\n                'Please unpack your array and call FieldPath() with individual arguments.');\n        }\n        (0, validate_1.validateMinNumberOfArguments)('FieldPath', segments, 1);\n        for (let i = 0; i < segments.length; ++i) {\n            (0, validate_1.validateString)(i, segments[i]);\n            if (segments[i].length === 0) {\n                throw new Error(`Element at index ${i} should not be an empty string.`);\n            }\n        }\n        super(segments);\n    }\n    /**\n     * A special FieldPath value to refer to the ID of a document. It can be used\n     * in queries to sort or filter by the document ID.\n     *\n     * @returns {FieldPath}\n     */\n    static documentId() {\n        return FieldPath._DOCUMENT_ID;\n    }\n    /**\n     * Turns a field path argument into a [FieldPath]{@link FieldPath}.\n     * Supports FieldPaths as input (which are passed through) and dot-separated\n     * strings.\n     *\n     * @private\n     * @internal\n     * @param {string|FieldPath} fieldPath The FieldPath to create.\n     * @returns {FieldPath} A field path representation.\n     */\n    static fromArgument(fieldPath) {\n        // validateFieldPath() is used in all public API entry points to validate\n        // that fromArgument() is only called with a Field Path or a string.\n        return fieldPath instanceof FieldPath\n            ? fieldPath\n            : new FieldPath(...fieldPath.split('.'));\n    }\n    /**\n     * String representation of a FieldPath as expected by the API.\n     *\n     * @private\n     * @internal\n     * @override\n     * @returns {string} The representation as expected by the API.\n     */\n    get formattedName() {\n        return this.segments\n            .map(str => {\n            return UNESCAPED_FIELD_NAME_RE.test(str)\n                ? str\n                : '`' + str.replace('\\\\', '\\\\\\\\').replace('`', '\\\\`') + '`';\n        })\n            .join('.');\n    }\n    /**\n     * Returns a string representation of this path.\n     *\n     * @private\n     * @internal\n     * @returns A string representing this path.\n     */\n    toString() {\n        return this.formattedName;\n    }\n    /**\n     * Splits a string into path segments, using dots as separators.\n     *\n     * @private\n     * @internal\n     * @override\n     * @param {string} fieldPath The path to split.\n     * @returns {Array.<string>} - The split path segments.\n     */\n    split(fieldPath) {\n        return fieldPath.split('.');\n    }\n    /**\n     * Constructs a new instance of FieldPath. We need this instead of using\n     * the normal constructor because polymorphic 'this' doesn't work on static\n     * methods.\n     *\n     * @private\n     * @internal\n     * @override\n     * @param segments Sequence of field names.\n     * @returns The newly created FieldPath.\n     */\n    construct(segments) {\n        return new FieldPath(...segments);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldPath` is equal to the provided value.\n     */\n    isEqual(other) {\n        return super.isEqual(other);\n    }\n}\nexports.FieldPath = FieldPath;\n/**\n * A special sentinel value to refer to the ID of a document.\n *\n * @private\n * @internal\n */\nFieldPath._DOCUMENT_ID = new FieldPath('__name__');\n/**\n * Validates that the provided value can be used as a field path argument.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param fieldPath The value to verify.\n * @throws if the string can't be used as a field path.\n */\nfunction validateFieldPath(arg, fieldPath) {\n    if (fieldPath instanceof FieldPath) {\n        return;\n    }\n    if (fieldPath === undefined) {\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'field path') + ' The path cannot be omitted.');\n    }\n    if ((0, util_1.isObject)(fieldPath) && fieldPath.constructor.name === 'FieldPath') {\n        throw new Error((0, validate_1.customObjectMessage)(arg, fieldPath));\n    }\n    if (typeof fieldPath !== 'string') {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths can only be specified as strings or via a FieldPath object.`);\n    }\n    if (fieldPath.indexOf('..') >= 0) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths must not contain \"..\" in them.`);\n    }\n    if (fieldPath.startsWith('.') || fieldPath.endsWith('.')) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths must not start or end with \".\".`);\n    }\n    if (!FIELD_PATH_RE.test(fieldPath)) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'field path')} Paths can't be empty and must not contain\n    \"*~/[]\".`);\n    }\n}\n//# sourceMappingURL=path.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2233, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/serializer.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Serializer = void 0;\nexports.validateUserInput = validateUserInput;\nconst field_value_1 = require(\"./field-value\");\nconst convert_1 = require(\"./convert\");\nconst geo_point_1 = require(\"./geo-point\");\nconst index_1 = require(\"./index\");\nconst path_1 = require(\"./path\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst map_type_1 = require(\"./map-type\");\n/**\n * The maximum depth of a Firestore object.\n *\n * @private\n * @internal\n */\nconst MAX_DEPTH = 20;\n/**\n * Serializer that is used to convert between JavaScript types and their\n * Firestore Protobuf representation.\n *\n * @private\n * @internal\n */\nclass Serializer {\n    constructor(firestore) {\n        // Instead of storing the `firestore` object, we store just a reference to\n        // its `.doc()` method. This avoid a circular reference, which breaks\n        // JSON.stringify().\n        this.createReference = path => firestore.doc(path);\n        this.createInteger = n => firestore._settings.useBigInt ? BigInt(n) : Number(n);\n        this.allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n    }\n    /**\n     * Encodes a JavaScript object into the Firestore 'Fields' representation.\n     *\n     * @private\n     * @internal\n     * @param obj The object to encode.\n     * @returns The Firestore 'Fields' representation\n     */\n    encodeFields(obj) {\n        const fields = {};\n        for (const prop of Object.keys(obj)) {\n            const val = this.encodeValue(obj[prop]);\n            if (val) {\n                fields[prop] = val;\n            }\n        }\n        return fields;\n    }\n    /**\n     * Encodes a JavaScript value into the Firestore 'Value' representation.\n     *\n     * @private\n     * @internal\n     * @param val The object to encode\n     * @returns The Firestore Proto or null if we are deleting a field.\n     */\n    encodeValue(val) {\n        if (val instanceof field_value_1.FieldTransform) {\n            return null;\n        }\n        if (typeof val === 'string') {\n            return {\n                stringValue: val,\n            };\n        }\n        if (typeof val === 'boolean') {\n            return {\n                booleanValue: val,\n            };\n        }\n        if (typeof val === 'number') {\n            const isNegativeZero = val === 0 && 1 / val === 1 / -0;\n            if (Number.isSafeInteger(val) && !isNegativeZero) {\n                return {\n                    integerValue: val,\n                };\n            }\n            else {\n                return {\n                    doubleValue: val,\n                };\n            }\n        }\n        if (typeof val === 'bigint') {\n            return {\n                integerValue: val.toString(),\n            };\n        }\n        if (val instanceof Date) {\n            const timestamp = timestamp_1.Timestamp.fromDate(val);\n            return {\n                timestampValue: {\n                    seconds: timestamp.seconds,\n                    nanos: timestamp.nanoseconds,\n                },\n            };\n        }\n        if (isMomentJsType(val)) {\n            const timestamp = timestamp_1.Timestamp.fromDate(val.toDate());\n            return {\n                timestampValue: {\n                    seconds: timestamp.seconds,\n                    nanos: timestamp.nanoseconds,\n                },\n            };\n        }\n        if (val === null) {\n            return {\n                nullValue: 'NULL_VALUE',\n            };\n        }\n        if (val instanceof Buffer || val instanceof Uint8Array) {\n            return {\n                bytesValue: val,\n            };\n        }\n        if (val instanceof field_value_1.VectorValue) {\n            return val._toProto(this);\n        }\n        if ((0, util_1.isObject)(val)) {\n            const toProto = val['toProto'];\n            if (typeof toProto === 'function') {\n                return toProto.bind(val)();\n            }\n        }\n        if (Array.isArray(val)) {\n            const array = {\n                arrayValue: {},\n            };\n            if (val.length > 0) {\n                array.arrayValue.values = [];\n                for (let i = 0; i < val.length; ++i) {\n                    const enc = this.encodeValue(val[i]);\n                    if (enc) {\n                        array.arrayValue.values.push(enc);\n                    }\n                }\n            }\n            return array;\n        }\n        if (typeof val === 'object' && (0, util_1.isPlainObject)(val)) {\n            const map = {\n                mapValue: {},\n            };\n            // If we encounter an empty object, we always need to send it to make sure\n            // the server creates a map entry.\n            if (!(0, util_1.isEmpty)(val)) {\n                map.mapValue.fields = this.encodeFields(val);\n                if ((0, util_1.isEmpty)(map.mapValue.fields)) {\n                    return null;\n                }\n            }\n            return map;\n        }\n        if (val === undefined && this.allowUndefined) {\n            return null;\n        }\n        throw new Error(`Cannot encode value: ${val}`);\n    }\n    /**\n     * @private\n     */\n    encodeVector(rawVector) {\n        // A Firestore Vector is a map with reserved key/value pairs.\n        return {\n            mapValue: {\n                fields: {\n                    [map_type_1.RESERVED_MAP_KEY]: {\n                        stringValue: map_type_1.RESERVED_MAP_KEY_VECTOR_VALUE,\n                    },\n                    [map_type_1.VECTOR_MAP_VECTORS_KEY]: {\n                        arrayValue: {\n                            values: rawVector.map(value => {\n                                return {\n                                    doubleValue: value,\n                                };\n                            }),\n                        },\n                    },\n                },\n            },\n        };\n    }\n    /**\n     * Decodes a single Firestore 'Value' Protobuf.\n     *\n     * @private\n     * @internal\n     * @param proto A Firestore 'Value' Protobuf.\n     * @returns The converted JS type.\n     */\n    decodeValue(proto) {\n        const valueType = (0, convert_1.detectValueType)(proto);\n        switch (valueType) {\n            case 'stringValue': {\n                return proto.stringValue;\n            }\n            case 'booleanValue': {\n                return proto.booleanValue;\n            }\n            case 'integerValue': {\n                return this.createInteger(proto.integerValue);\n            }\n            case 'doubleValue': {\n                return proto.doubleValue;\n            }\n            case 'timestampValue': {\n                return timestamp_1.Timestamp.fromProto(proto.timestampValue);\n            }\n            case 'referenceValue': {\n                const resourcePath = path_1.QualifiedResourcePath.fromSlashSeparatedString(proto.referenceValue);\n                return this.createReference(resourcePath.relativeName);\n            }\n            case 'arrayValue': {\n                const array = [];\n                if (Array.isArray(proto.arrayValue.values)) {\n                    for (const value of proto.arrayValue.values) {\n                        array.push(this.decodeValue(value));\n                    }\n                }\n                return array;\n            }\n            case 'nullValue': {\n                return null;\n            }\n            case 'mapValue': {\n                const fields = proto.mapValue.fields;\n                if (fields) {\n                    const obj = {};\n                    for (const prop of Object.keys(fields)) {\n                        obj[prop] = this.decodeValue(fields[prop]);\n                    }\n                    return obj;\n                }\n                else {\n                    return {};\n                }\n            }\n            case 'vectorValue': {\n                const fields = proto.mapValue.fields;\n                return field_value_1.VectorValue._fromProto(fields[map_type_1.VECTOR_MAP_VECTORS_KEY]);\n            }\n            case 'geoPointValue': {\n                return geo_point_1.GeoPoint.fromProto(proto.geoPointValue);\n            }\n            case 'bytesValue': {\n                return proto.bytesValue;\n            }\n            default: {\n                throw new Error('Cannot decode type from Firestore Value: ' + JSON.stringify(proto));\n            }\n        }\n    }\n    /**\n     * Decodes a google.protobuf.Value\n     *\n     * @private\n     * @internal\n     * @param proto A Google Protobuf 'Value'.\n     * @returns The converted JS type.\n     */\n    decodeGoogleProtobufValue(proto) {\n        switch ((0, convert_1.detectGoogleProtobufValueType)(proto)) {\n            case 'nullValue': {\n                return null;\n            }\n            case 'numberValue': {\n                return proto.numberValue;\n            }\n            case 'stringValue': {\n                return proto.stringValue;\n            }\n            case 'boolValue': {\n                return proto.boolValue;\n            }\n            case 'listValue': {\n                return this.decodeGoogleProtobufList(proto.listValue);\n            }\n            case 'structValue': {\n                return this.decodeGoogleProtobufStruct(proto.structValue);\n            }\n            default: {\n                throw new Error('Cannot decode type from google.protobuf.Value: ' +\n                    JSON.stringify(proto));\n            }\n        }\n    }\n    /**\n     * Decodes a google.protobuf.ListValue\n     *\n     * @private\n     * @internal\n     * @param proto A Google Protobuf 'ListValue'.\n     * @returns The converted JS type.\n     */\n    decodeGoogleProtobufList(proto) {\n        const result = [];\n        if (proto && proto.values && Array.isArray(proto.values)) {\n            for (const value of proto.values) {\n                result.push(this.decodeGoogleProtobufValue(value));\n            }\n        }\n        return result;\n    }\n    /**\n     * Decodes a google.protobuf.Struct\n     *\n     * @private\n     * @internal\n     * @param proto A Google Protobuf 'Struct'.\n     * @returns The converted JS type.\n     */\n    decodeGoogleProtobufStruct(proto) {\n        const result = {};\n        if (proto && proto.fields) {\n            for (const prop of Object.keys(proto.fields)) {\n                result[prop] = this.decodeGoogleProtobufValue(proto.fields[prop]);\n            }\n        }\n        return result;\n    }\n}\nexports.Serializer = Serializer;\n/**\n * Validates a JavaScript value for usage as a Firestore value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value JavaScript value to validate.\n * @param desc A description of the expected type.\n * @param path The field path to validate.\n * @param options Validation options\n * @param level The current depth of the traversal. This is used to decide\n * whether undefined values or deletes are allowed.\n * @param inArray Whether we are inside an array.\n * @throws when the object is invalid.\n */\nfunction validateUserInput(arg, value, desc, options, path, level, inArray) {\n    if (path && path.size - 1 > MAX_DEPTH) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Input object is deeper than ${MAX_DEPTH} levels or contains a cycle.`);\n    }\n    level = level || 0;\n    inArray = inArray || false;\n    const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n    if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; ++i) {\n            validateUserInput(arg, value[i], desc, options, path ? path.append(String(i)) : new path_1.FieldPath(String(i)), level + 1, \n            /* inArray= */ true);\n        }\n    }\n    else if ((0, util_1.isPlainObject)(value)) {\n        for (const prop of Object.keys(value)) {\n            validateUserInput(arg, value[prop], desc, options, path ? path.append(new path_1.FieldPath(prop)) : new path_1.FieldPath(prop), level + 1, inArray);\n        }\n    }\n    else if (value === undefined) {\n        if (options.allowUndefined && level === 0) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} \"undefined\" values are only ignored inside of objects.`);\n        }\n        else if (!options.allowUndefined) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use \"undefined\" as a Firestore value${fieldPathMessage}. ` +\n                'If you want to ignore undefined values, enable `ignoreUndefinedProperties`.');\n        }\n    }\n    else if (value instanceof field_value_1.VectorValue) {\n        // OK\n    }\n    else if (value instanceof field_value_1.DeleteTransform) {\n        if (inArray) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n        }\n        else if (options.allowDeletes === 'none') {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` +\n                `or set() with {merge:true}${fieldPathMessage}.`);\n        }\n        else if (options.allowDeletes === 'root') {\n            if (level === 0) {\n                // Ok (update() with UpdateData).\n            }\n            else if (level === 1 && (path === null || path === void 0 ? void 0 : path.size) === 1) {\n                // Ok (update with varargs).\n            }\n            else {\n                throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` +\n                    `or set() with {merge:true}${fieldPathMessage}.`);\n            }\n        }\n    }\n    else if (value instanceof field_value_1.FieldTransform) {\n        if (inArray) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n        }\n        else if (!options.allowTransforms) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() can only be used in set(), create() or update()${fieldPathMessage}.`);\n        }\n    }\n    else if (value instanceof path_1.FieldPath) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use object of type \"FieldPath\" as a Firestore value${fieldPathMessage}.`);\n    }\n    else if (value instanceof index_1.DocumentReference) {\n        // Ok.\n    }\n    else if (value instanceof geo_point_1.GeoPoint) {\n        // Ok.\n    }\n    else if (value instanceof timestamp_1.Timestamp || value instanceof Date) {\n        // Ok.\n    }\n    else if (isMomentJsType(value)) {\n        // Ok.\n    }\n    else if (value instanceof Buffer || value instanceof Uint8Array) {\n        // Ok.\n    }\n    else if (value === null) {\n        // Ok.\n    }\n    else if (typeof value === 'object') {\n        throw new Error((0, validate_1.customObjectMessage)(arg, value, path));\n    }\n}\n/**\n * Returns true if value is a MomentJs date object.\n * @private\n * @internal\n */\nfunction isMomentJsType(value) {\n    return (typeof value === 'object' &&\n        value !== null &&\n        value.constructor &&\n        value.constructor.name === 'Moment' &&\n        typeof value.toDate === 'function');\n}\n//# sourceMappingURL=serializer.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2674, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/field-value.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteTransform = exports.FieldTransform = exports.FieldValue = exports.VectorValue = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\nconst serializer_1 = require(\"./serializer\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/**\n * Represent a vector type in Firestore documents.\n * Create an instance with {@link FieldValue.vector}.\n *\n * @class VectorValue\n */\nclass VectorValue {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(values) {\n        // Making a copy of the parameter.\n        this._values = (values || []).map(n => n);\n    }\n    /**\n     * Returns a copy of the raw number array form of the vector.\n     */\n    toArray() {\n        return this._values.map(n => n);\n    }\n    /**\n     * @private\n     * @internal\n     */\n    _toProto(serializer) {\n        return serializer.encodeVector(this._values);\n    }\n    /**\n     * @private\n     * @internal\n     */\n    static _fromProto(valueArray) {\n        var _a, _b;\n        const values = (_b = (_a = valueArray.arrayValue) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.map(v => {\n            return v.doubleValue;\n        });\n        return new VectorValue(values);\n    }\n    /**\n     * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.\n     */\n    isEqual(other) {\n        return (0, util_1.isPrimitiveArrayEqual)(this._values, other._values);\n    }\n}\nexports.VectorValue = VectorValue;\n/**\n * Sentinel values that can be used when writing documents with set(), create()\n * or update().\n *\n * @class FieldValue\n */\nclass FieldValue {\n    /** @private */\n    constructor() { }\n    /**\n     * Creates a new `VectorValue` constructed with a copy of the given array of numbers.\n     *\n     * @param values - Create a `VectorValue` instance with a copy of this array of numbers.\n     *\n     * @returns A new `VectorValue` constructed with a copy of the given array of numbers.\n     */\n    static vector(values) {\n        return new VectorValue(values);\n    }\n    /**\n     * Returns a sentinel for use with update() or set() with {merge:true} to mark\n     * a field for deletion.\n     *\n     * @returns {FieldValue} The sentinel value to use in your objects.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     * let data = { a: 'b', c: 'd' };\n     *\n     * documentRef.set(data).then(() => {\n     *   return documentRef.update({a: Firestore.FieldValue.delete()});\n     * }).then(() => {\n     *   // Document now only contains { c: 'd' }\n     * });\n     * ```\n     */\n    static delete() {\n        return DeleteTransform.DELETE_SENTINEL;\n    }\n    /**\n     * Returns a sentinel used with set(), create() or update() to include a\n     * server-generated timestamp in the written data.\n     *\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({\n     *   time: Firestore.FieldValue.serverTimestamp()\n     * }).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   console.log(`Server time set to ${doc.get('time')}`);\n     * });\n     * ```\n     */\n    static serverTimestamp() {\n        return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to increment the the field's current value by the\n     * given value.\n     *\n     * If either current field value or the operand uses floating point\n     * precision, both values will be interpreted as floating point numbers and\n     * all arithmetic will follow IEEE 754 semantics. Otherwise, integer\n     * precision is kept and the result is capped between -2^63 and 2^63-1.\n     *\n     * If the current field value is not of type 'number', or if the field does\n     * not yet exist, the transformation will set the field to the given value.\n     *\n     * @param {number} n The value to increment by.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'counter', Firestore.FieldValue.increment(1)\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('counter') was incremented\n     * });\n     * ```\n     */\n    static increment(n) {\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('FieldValue.increment', arguments, 1);\n        return new NumericIncrementTransform(n);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to union the given elements with any array value that\n     * already exists on the server. Each specified element that doesn't already\n     * exist in the array will be added to the end. If the field being modified is\n     * not already an array it will be overwritten with an array containing\n     * exactly the specified elements.\n     *\n     * @param {...*} elements The elements to union into the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayUnion('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') contains field 'foo'\n     * });\n     * ```\n     */\n    static arrayUnion(...elements) {\n        (0, validate_1.validateMinNumberOfArguments)('FieldValue.arrayUnion', elements, 1);\n        return new ArrayUnionTransform(elements);\n    }\n    /**\n     * Returns a special value that can be used with set(), create() or update()\n     * that tells the server to remove the given elements from any array value\n     * that already exists on the server. All instances of each element specified\n     * will be removed from the array. If the field being modified is not already\n     * an array it will be overwritten with an empty array.\n     *\n     * @param {...*} elements The elements to remove from the array.\n     * @return {FieldValue} The FieldValue sentinel for use in a call to set(),\n     * create() or update().\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update(\n     *   'array', Firestore.FieldValue.arrayRemove('foo')\n     * ).then(() => {\n     *   return documentRef.get();\n     * }).then(doc => {\n     *   // doc.get('array') no longer contains field 'foo'\n     * });\n     * ```\n     */\n    static arrayRemove(...elements) {\n        (0, validate_1.validateMinNumberOfArguments)('FieldValue.arrayRemove', elements, 1);\n        return new ArrayRemoveTransform(elements);\n    }\n    /**\n     * Returns true if this `FieldValue` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `FieldValue` is equal to the provided value.\n     *\n     * @example\n     * ```\n     * let fieldValues = [\n     *   Firestore.FieldValue.increment(-1.0),\n     *   Firestore.FieldValue.increment(-1),\n     *   Firestore.FieldValue.increment(-0.0),\n     *   Firestore.FieldValue.increment(-0),\n     *   Firestore.FieldValue.increment(0),\n     *   Firestore.FieldValue.increment(0.0),\n     *   Firestore.FieldValue.increment(1),\n     *   Firestore.FieldValue.increment(1.0)\n     * ];\n     *\n     * let equal = 0;\n     * for (let i = 0; i < fieldValues.length; ++i) {\n     *   for (let j = i + 1; j < fieldValues.length; ++j) {\n     *     if (fieldValues[i].isEqual(fieldValues[j])) {\n     *       ++equal;\n     *     }\n     *   }\n     * }\n     * console.log(`Found ${equal} equalities.`);\n     * ```\n     */\n    isEqual(other) {\n        return this === other;\n    }\n}\nexports.FieldValue = FieldValue;\n/**\n * An internal interface shared by all field transforms.\n *\n * A 'FieldTransform` subclass should implement '.includeInDocumentMask',\n * '.includeInDocumentTransform' and 'toProto' (if '.includeInDocumentTransform'\n * is 'true').\n *\n * @private\n * @internal\n * @abstract\n */\nclass FieldTransform extends FieldValue {\n}\nexports.FieldTransform = FieldTransform;\n/**\n * A transform that deletes a field from a Firestore document.\n *\n * @private\n * @internal\n */\nclass DeleteTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Deletes are included in document masks.\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return true;\n    }\n    /**\n     * Deletes are are omitted from document transforms.\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return false;\n    }\n    get methodName() {\n        return 'FieldValue.delete';\n    }\n    validate() { }\n    toProto() {\n        throw new Error('FieldValue.delete() should not be included in a FieldTransform');\n    }\n}\nexports.DeleteTransform = DeleteTransform;\n/**\n * Sentinel value for a field delete.\n * @private\n * @internal\n */\nDeleteTransform.DELETE_SENTINEL = new DeleteTransform();\n/**\n * A transform that sets a field to the Firestore server time.\n *\n * @private\n * @internal\n */\nclass ServerTimestampTransform extends FieldTransform {\n    constructor() {\n        super();\n    }\n    /**\n     * Server timestamps are omitted from document masks.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Server timestamps are included in document transforms.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.serverTimestamp';\n    }\n    validate() { }\n    toProto(serializer, fieldPath) {\n        return {\n            fieldPath: fieldPath.formattedName,\n            setToServerValue: 'REQUEST_TIME',\n        };\n    }\n}\n/**\n * Sentinel value for a server timestamp.\n *\n * @private\n * @internal\n */\nServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();\n/**\n * Increments a field value on the backend.\n *\n * @private\n * @internal\n */\nclass NumericIncrementTransform extends FieldTransform {\n    constructor(operand) {\n        super();\n        this.operand = operand;\n    }\n    /**\n     * Numeric transforms are omitted from document masks.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Numeric transforms are included in document transforms.\n     *\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.increment';\n    }\n    validate() {\n        (0, validate_1.validateNumber)('FieldValue.increment()', this.operand);\n    }\n    toProto(serializer, fieldPath) {\n        const encodedOperand = serializer.encodeValue(this.operand);\n        return { fieldPath: fieldPath.formattedName, increment: encodedOperand };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof NumericIncrementTransform &&\n                this.operand === other.operand));\n    }\n}\n/**\n * Transforms an array value via a union operation.\n *\n * @private\n * @internal\n */\nclass ArrayUnionTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayUnion';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            appendMissingElements: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayUnionTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Transforms an array value via a remove operation.\n *\n * @private\n * @internal\n */\nclass ArrayRemoveTransform extends FieldTransform {\n    constructor(elements) {\n        super();\n        this.elements = elements;\n    }\n    /**\n     * Array transforms are omitted from document masks.\n     * @private\n     * @internal\n     */\n    get includeInDocumentMask() {\n        return false;\n    }\n    /**\n     * Array transforms are included in document transforms.\n     * @private\n     * @internal\n     */\n    get includeInDocumentTransform() {\n        return true;\n    }\n    get methodName() {\n        return 'FieldValue.arrayRemove';\n    }\n    validate(allowUndefined) {\n        for (let i = 0; i < this.elements.length; ++i) {\n            validateArrayElement(i, this.elements[i], allowUndefined);\n        }\n    }\n    toProto(serializer, fieldPath) {\n        const encodedElements = serializer.encodeValue(this.elements).arrayValue;\n        return {\n            fieldPath: fieldPath.formattedName,\n            removeAllFromArray: encodedElements,\n        };\n    }\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof ArrayRemoveTransform &&\n                deepEqual(this.elements, other.elements)));\n    }\n}\n/**\n * Validates that `value` can be used as an element inside of an array. Certain\n * field values (such as ServerTimestamps) are rejected. Nested arrays are also\n * rejected.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateArrayElement(arg, value, allowUndefined) {\n    if (Array.isArray(value)) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'array element')} Nested arrays are not supported.`);\n    }\n    (0, serializer_1.validateUserInput)(arg, value, 'array element', \n    /*path=*/ { allowDeletes: 'none', allowTransforms: false, allowUndefined }, \n    /*path=*/ undefined, \n    /*level=*/ 0, \n    /*inArray=*/ true);\n}\n//# sourceMappingURL=field-value.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3165, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/types.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultConverter = defaultConverter;\n/**\n * A default converter to use when none is provided.\n *\n * By declaring the converter as a variable instead of creating the object\n * inside defaultConverter(), object equality when comparing default converters\n * is preserved.\n * @private\n * @internal\n */\nconst defaultConverterObj = {\n    toFirestore(modelObject) {\n        return modelObject;\n    },\n    fromFirestore(snapshot) {\n        return snapshot.data();\n    },\n};\n/**\n * A default converter to use when none is provided.\n * @private\n * @internal\n */\nfunction defaultConverter() {\n    return defaultConverterObj;\n}\n//# sourceMappingURL=types.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG;AAC3B;;;;;;;;CAQC,GACD,MAAM,sBAAsB;IACxB,aAAY,WAAW;QACnB,OAAO;IACX;IACA,eAAc,QAAQ;QAClB,OAAO,SAAS,IAAI;IACxB;AACJ;AACA;;;;CAIC,GACD,SAAS;IACL,OAAO;AACX,EACA,iCAAiC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3212, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/document-change.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DocumentChange = void 0;\n/**\n * A DocumentChange represents a change to the documents matching a query.\n * It contains the document affected and the type of change that occurred.\n *\n * @class DocumentChange\n */\nclass DocumentChange {\n    /**\n     * @private\n     *\n     * @param {string} type 'added' | 'removed' | 'modified'.\n     * @param {QueryDocumentSnapshot} document The document.\n     * @param {number} oldIndex The index in the documents array prior to this\n     * change.\n     * @param {number} newIndex The index in the documents array after this\n     * change.\n     */\n    constructor(type, document, oldIndex, newIndex) {\n        this._type = type;\n        this._document = document;\n        this._oldIndex = oldIndex;\n        this._newIndex = newIndex;\n    }\n    /**\n     * The type of change ('added', 'modified', or 'removed').\n     *\n     * @type {string}\n     * @name DocumentChange#type\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     * let docsArray = [];\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     console.log(`Type of change is ${change.type}`);\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * The document affected by this change.\n     *\n     * @type {QueryDocumentSnapshot}\n     * @name DocumentChange#doc\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     console.log(change.doc.data());\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get doc() {\n        return this._document;\n    }\n    /**\n     * The index of the changed document in the result set immediately prior to\n     * this DocumentChange (i.e. supposing that all prior DocumentChange objects\n     * have been applied). Is -1 for 'added' events.\n     *\n     * @type {number}\n     * @name DocumentChange#oldIndex\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     * let docsArray = [];\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     if (change.oldIndex !== -1) {\n     *       docsArray.splice(change.oldIndex, 1);\n     *     }\n     *     if (change.newIndex !== -1) {\n     *       docsArray.splice(change.newIndex, 0, change.doc);\n     *     }\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get oldIndex() {\n        return this._oldIndex;\n    }\n    /**\n     * The index of the changed document in the result set immediately after\n     * this DocumentChange (i.e. supposing that all prior DocumentChange\n     * objects and the current DocumentChange object have been applied).\n     * Is -1 for 'removed' events.\n     *\n     * @type {number}\n     * @name DocumentChange#newIndex\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     * let docsArray = [];\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   for (let change of querySnapshot.docChanges) {\n     *     if (change.oldIndex !== -1) {\n     *       docsArray.splice(change.oldIndex, 1);\n     *     }\n     *     if (change.newIndex !== -1) {\n     *       docsArray.splice(change.newIndex, 0, change.doc);\n     *     }\n     *   }\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    get newIndex() {\n        return this._newIndex;\n    }\n    /**\n     * Returns true if the data in this `DocumentChange` is equal to the provided\n     * value.\n     *\n     * @param {*} other The value to compare against.\n     * @return true if this `DocumentChange` is equal to the provided value.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof DocumentChange &&\n            this._type === other._type &&\n            this._oldIndex === other._oldIndex &&\n            this._newIndex === other._newIndex &&\n            this._document.isEqual(other._document));\n    }\n}\nexports.DocumentChange = DocumentChange;\n//# sourceMappingURL=document-change.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,KAAK;AAC9B;;;;;CAKC,GACD,MAAM;IACF;;;;;;;;;KASC,GACD,YAAY,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAE;QAC5C,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,SAAS,GAAG;IACrB;IACA;;;;;;;;;;;;;;;;;;;;;KAqBC,GACD,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,KAAK;IACrB;IACA;;;;;;;;;;;;;;;;;;;;KAoBC,GACD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,SAAS;IACzB;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BC,GACD,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,SAAS;IACzB;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA6BC,GACD,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,SAAS;IACzB;IACA;;;;;;KAMC,GACD,QAAQ,KAAK,EAAE;QACX,IAAI,IAAI,KAAK,OAAO;YAChB,OAAO;QACX;QACA,OAAQ,iBAAiB,kBACrB,IAAI,CAAC,KAAK,KAAK,MAAM,KAAK,IAC1B,IAAI,CAAC,SAAS,KAAK,MAAM,SAAS,IAClC,IAAI,CAAC,SAAS,KAAK,MAAM,SAAS,IAClC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,SAAS;IAC9C;AACJ;AACA,QAAQ,cAAc,GAAG,gBACzB,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3381, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/query-profile.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExplainResults = exports.ExplainMetrics = exports.ExecutionStats = exports.PlanSummary = void 0;\n/**\n * PlanSummary contains information about the planning stage of a query.\n *\n * @class PlanSummary\n */\nclass PlanSummary {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(indexesUsed) {\n        this.indexesUsed = indexesUsed;\n    }\n    /**\n     * @private\n     * @internal\n     */\n    static _fromProto(plan, serializer) {\n        const indexes = [];\n        if (plan && plan.indexesUsed) {\n            for (const index of plan.indexesUsed) {\n                indexes.push(serializer.decodeGoogleProtobufStruct(index));\n            }\n        }\n        return new PlanSummary(indexes);\n    }\n}\nexports.PlanSummary = PlanSummary;\n/**\n *  ExecutionStats contains information about the execution of a query.\n *\n * @class ExecutionStats\n */\nclass ExecutionStats {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(resultsReturned, executionDuration, readOperations, debugStats) {\n        this.resultsReturned = resultsReturned;\n        this.executionDuration = executionDuration;\n        this.readOperations = readOperations;\n        this.debugStats = debugStats;\n    }\n    /**\n     * @private\n     * @internal\n     */\n    static _fromProto(stats, serializer) {\n        var _a, _b;\n        if (stats) {\n            return new ExecutionStats(Number(stats.resultsReturned), {\n                seconds: Number((_a = stats.executionDuration) === null || _a === void 0 ? void 0 : _a.seconds),\n                nanoseconds: Number((_b = stats.executionDuration) === null || _b === void 0 ? void 0 : _b.nanos),\n            }, Number(stats.readOperations), serializer.decodeGoogleProtobufStruct(stats.debugStats));\n        }\n        return null;\n    }\n}\nexports.ExecutionStats = ExecutionStats;\n/**\n * ExplainMetrics contains information about planning and execution of a query.\n *\n * @class ExplainMetrics\n */\nclass ExplainMetrics {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(planSummary, executionStats) {\n        this.planSummary = planSummary;\n        this.executionStats = executionStats;\n    }\n    /**\n     * @private\n     * @internal\n     */\n    static _fromProto(metrics, serializer) {\n        return new ExplainMetrics(PlanSummary._fromProto(metrics.planSummary, serializer), ExecutionStats._fromProto(metrics.executionStats, serializer));\n    }\n}\nexports.ExplainMetrics = ExplainMetrics;\n/**\n * ExplainResults contains information about planning, execution, and results\n * of a query.\n *\n * @class ExplainResults\n */\nclass ExplainResults {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(metrics, snapshot) {\n        this.metrics = metrics;\n        this.snapshot = snapshot;\n    }\n}\nexports.ExplainResults = ExplainResults;\n//# sourceMappingURL=query-profile.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,QAAQ,cAAc,GAAG,QAAQ,cAAc,GAAG,QAAQ,WAAW,GAAG,KAAK;AACtG;;;;CAIC,GACD,MAAM;IACF;;;KAGC,GACD,YAAY,WAAW,CAAE;QACrB,IAAI,CAAC,WAAW,GAAG;IACvB;IACA;;;KAGC,GACD,OAAO,WAAW,IAAI,EAAE,UAAU,EAAE;QAChC,MAAM,UAAU,EAAE;QAClB,IAAI,QAAQ,KAAK,WAAW,EAAE;YAC1B,KAAK,MAAM,SAAS,KAAK,WAAW,CAAE;gBAClC,QAAQ,IAAI,CAAC,WAAW,0BAA0B,CAAC;YACvD;QACJ;QACA,OAAO,IAAI,YAAY;IAC3B;AACJ;AACA,QAAQ,WAAW,GAAG;AACtB;;;;CAIC,GACD,MAAM;IACF;;;KAGC,GACD,YAAY,eAAe,EAAE,iBAAiB,EAAE,cAAc,EAAE,UAAU,CAAE;QACxE,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,UAAU,GAAG;IACtB;IACA;;;KAGC,GACD,OAAO,WAAW,KAAK,EAAE,UAAU,EAAE;QACjC,IAAI,IAAI;QACR,IAAI,OAAO;YACP,OAAO,IAAI,eAAe,OAAO,MAAM,eAAe,GAAG;gBACrD,SAAS,OAAO,CAAC,KAAK,MAAM,iBAAiB,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,OAAO;gBAC9F,aAAa,OAAO,CAAC,KAAK,MAAM,iBAAiB,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,KAAK;YACpG,GAAG,OAAO,MAAM,cAAc,GAAG,WAAW,0BAA0B,CAAC,MAAM,UAAU;QAC3F;QACA,OAAO;IACX;AACJ;AACA,QAAQ,cAAc,GAAG;AACzB;;;;CAIC,GACD,MAAM;IACF;;;KAGC,GACD,YAAY,WAAW,EAAE,cAAc,CAAE;QACrC,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,cAAc,GAAG;IAC1B;IACA;;;KAGC,GACD,OAAO,WAAW,OAAO,EAAE,UAAU,EAAE;QACnC,OAAO,IAAI,eAAe,YAAY,UAAU,CAAC,QAAQ,WAAW,EAAE,aAAa,eAAe,UAAU,CAAC,QAAQ,cAAc,EAAE;IACzI;AACJ;AACA,QAAQ,cAAc,GAAG;AACzB;;;;;CAKC,GACD,MAAM;IACF;;;KAGC,GACD,YAAY,OAAO,EAAE,QAAQ,CAAE;QAC3B,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;IACpB;AACJ;AACA,QAAQ,cAAc,GAAG,gBACzB,yCAAyC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3494, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/vector-query-snapshot.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VectorQuerySnapshot = void 0;\nconst validate_1 = require(\"../validate\");\nconst util_1 = require(\"../util\");\n/**\n * A `VectorQuerySnapshot` contains zero or more `QueryDocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */\nclass VectorQuerySnapshot {\n    /**\n     * @private\n     * @internal\n     *\n     * @param _query - The originating query.\n     * @param _readTime - The time when this query snapshot was obtained.\n     * @param _size - The number of documents in the result set.\n     * @param docs - A callback returning a sorted array of documents matching\n     * this query\n     * @param changes - A callback returning a sorted array of document change\n     * events for this snapshot.\n     */\n    constructor(_query, _readTime, _size, docs, changes) {\n        this._query = _query;\n        this._readTime = _readTime;\n        this._size = _size;\n        this._materializedDocs = null;\n        this._materializedChanges = null;\n        this._docs = null;\n        this._changes = null;\n        this._docs = docs;\n        this._changes = changes;\n    }\n    /**\n     * The `VectorQuery` on which you called get() in order to get this\n     * `VectorQuerySnapshot`.\n     *\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"})\n     *   .get().then(querySnapshot => {\n     *     console.log(`Returned first batch of results`);\n     *     let query = querySnapshot.query;\n     *     return query.offset(10).get();\n     *   }).then(() => {\n     *   console.log(`Returned second batch of results`);\n     *   });\n     * ```\n     */\n    get query() {\n        return this._query;\n    }\n    /**\n     * An array of all the documents in this `VectorQuerySnapshot`.\n     *\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   let docs = querySnapshot.docs;\n     *   for (let doc of docs) {\n     *     console.log(`Document found at path: ${doc.ref.path}`);\n     *   }\n     * });\n     * ```\n     */\n    get docs() {\n        if (this._materializedDocs) {\n            return this._materializedDocs;\n        }\n        this._materializedDocs = this._docs();\n        this._docs = null;\n        return this._materializedDocs;\n    }\n    /**\n     * `true` if there are no documents in the `VectorQuerySnapshot`.\n     *\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   if (querySnapshot.empty) {\n     *     console.log('No documents found.');\n     *   }\n     * });\n     * ```\n     */\n    get empty() {\n        return this._size === 0;\n    }\n    /**\n     * The number of documents in the `VectorQuerySnapshot`.\n     *\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   console.log(`Found ${querySnapshot.size} documents.`);\n     * });\n     * ```\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * The time this `VectorQuerySnapshot` was obtained.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then((querySnapshot) => {\n     *   let readTime = querySnapshot.readTime;\n     *   console.log(`Query results returned at '${readTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get readTime() {\n        return this._readTime;\n    }\n    /**\n     * Returns an array of the documents changes since the last snapshot. If\n     * this is the first snapshot, all documents will be in the list as added\n     * changes.\n     *\n     * @returns An array of the documents changes since the last snapshot.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   let changes = querySnapshot.docChanges();\n     *   for (let change of changes) {\n     *     console.log(`A document was ${change.type}.`);\n     *   }\n     * });\n     * ```\n     */\n    docChanges() {\n        if (this._materializedChanges) {\n            return this._materializedChanges;\n        }\n        this._materializedChanges = this._changes();\n        this._changes = null;\n        return this._materializedChanges;\n    }\n    /**\n     * Enumerates all of the documents in the `VectorQuerySnapshot`. This is a convenience\n     * method for running the same callback on each {@link QueryDocumentSnapshot}\n     * that is returned.\n     *\n     * @param callback - A callback to be called with a\n     * {@link QueryDocumentSnapshot} for each document in\n     * the snapshot.\n     * @param thisArg - The `this` binding for the callback..\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col')\n     *   .findNearest(\"embedding\", [0, 0], {limit: 10, distanceMeasure: \"EUCLIDEAN\"});\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    forEach(callback, thisArg) {\n        (0, validate_1.validateFunction)('callback', callback);\n        for (const doc of this.docs) {\n            callback.call(thisArg, doc);\n        }\n    }\n    /**\n     * Returns true if the document data in this `VectorQuerySnapshot` is equal to the\n     * provided value.\n     *\n     * @param other - The value to compare against.\n     * @returns true if this `VectorQuerySnapshot` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        // Since the read time is different on every query read, we explicitly\n        // ignore all metadata in this comparison.\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof VectorQuerySnapshot)) {\n            return false;\n        }\n        if (this._size !== other._size) {\n            return false;\n        }\n        if (!this._query.isEqual(other._query)) {\n            return false;\n        }\n        if (this._materializedDocs && !this._materializedChanges) {\n            // If we have only materialized the documents, we compare them first.\n            return ((0, util_1.isArrayEqual)(this.docs, other.docs) &&\n                (0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()));\n        }\n        // Otherwise, we compare the changes first as we expect there to be fewer.\n        return ((0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()) &&\n            (0, util_1.isArrayEqual)(this.docs, other.docs));\n    }\n}\nexports.VectorQuerySnapshot = VectorQuerySnapshot;\n//# sourceMappingURL=vector-query-snapshot.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3733, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/vector-query.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VectorQuery = void 0;\nconst field_value_1 = require(\"../field-value\");\nconst path_1 = require(\"../path\");\nconst util_1 = require(\"../util\");\nconst query_util_1 = require(\"./query-util\");\nconst vector_query_snapshot_1 = require(\"./vector-query-snapshot\");\nconst query_profile_1 = require(\"../query-profile\");\n/**\n * A query that finds the documents whose vector fields are closest to a certain query vector.\n * Create an instance of `VectorQuery` with {@link Query.findNearest}.\n */\nclass VectorQuery {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(_query, _options) {\n        this._query = _query;\n        this._options = _options;\n        this._queryUtil = new query_util_1.QueryUtil(_query._firestore, _query._queryOptions, _query._serializer);\n    }\n    /** The query whose results participants in the vector search. Filtering\n     * performed by the query will apply before the vector search.\n     **/\n    get query() {\n        return this._query;\n    }\n    /**\n     * @private\n     * @internal\n     */\n    get _rawVectorField() {\n        return typeof this._options.vectorField === 'string'\n            ? this._options.vectorField\n            : this._options.vectorField.toString();\n    }\n    /**\n     * @private\n     * @internal\n     */\n    get _rawDistanceResultField() {\n        if (typeof this._options.distanceResultField === 'undefined')\n            return;\n        return typeof this._options.distanceResultField === 'string'\n            ? this._options.distanceResultField\n            : this._options.distanceResultField.toString();\n    }\n    /**\n     * @private\n     * @internal\n     */\n    get _rawQueryVector() {\n        return Array.isArray(this._options.queryVector)\n            ? this._options.queryVector\n            : this._options.queryVector.toArray();\n    }\n    /**\n     * Plans and optionally executes this vector search query. Returns a Promise that will be\n     * resolved with the planner information, statistics from the query execution (if any),\n     * and the query results (if any).\n     *\n     * @return A Promise that will be resolved with the planner information, statistics\n     *  from the query execution (if any), and the query results (if any).\n     */\n    async explain(options) {\n        if (options === undefined) {\n            options = {};\n        }\n        const { result, explainMetrics } = await this._getResponse(options);\n        if (!explainMetrics) {\n            throw new Error('No explain results');\n        }\n        return new query_profile_1.ExplainResults(explainMetrics, result || null);\n    }\n    /**\n     * Executes this vector search query.\n     *\n     * @returns A promise that will be resolved with the results of the query.\n     */\n    async get() {\n        const { result } = await this._getResponse();\n        if (!result) {\n            throw new Error('No VectorQuerySnapshot result');\n        }\n        return result;\n    }\n    _getResponse(explainOptions) {\n        return this._queryUtil._getResponse(this, \n        /*transactionOrReadTime*/ undefined, \n        // VectorQuery cannot be retried with cursors as they do not support cursors yet.\n        /*retryWithCursor*/ false, explainOptions);\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction ID.\n     *\n     * @param transactionId - A transaction ID.\n     * @private\n     * @internal\n     * @returns A stream of document results.\n     */\n    _stream(transactionId) {\n        return this._queryUtil._stream(this, transactionId, \n        /*retryWithCursor*/ false);\n    }\n    /**\n     * Internal method for serializing a query to its proto\n     * representation with an optional transaction id.\n     *\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    toProto(transactionOrReadTime, explainOptions) {\n        var _a, _b, _c;\n        const queryProto = this._query.toProto(transactionOrReadTime);\n        const queryVector = Array.isArray(this._options.queryVector)\n            ? new field_value_1.VectorValue(this._options.queryVector)\n            : this._options.queryVector;\n        queryProto.structuredQuery.findNearest = {\n            limit: { value: this._options.limit },\n            distanceMeasure: this._options.distanceMeasure,\n            vectorField: {\n                fieldPath: path_1.FieldPath.fromArgument(this._options.vectorField)\n                    .formattedName,\n            },\n            queryVector: queryVector._toProto(this._query._serializer),\n            distanceResultField: ((_a = this._options) === null || _a === void 0 ? void 0 : _a.distanceResultField)\n                ? path_1.FieldPath.fromArgument(this._options.distanceResultField)\n                    .formattedName\n                : undefined,\n            distanceThreshold: ((_b = this._options) === null || _b === void 0 ? void 0 : _b.distanceThreshold)\n                ? { value: (_c = this._options) === null || _c === void 0 ? void 0 : _c.distanceThreshold }\n                : undefined,\n        };\n        if (explainOptions) {\n            queryProto.explainOptions = explainOptions;\n        }\n        return queryProto;\n    }\n    /**\n     * Construct the resulting vector snapshot for this query with given documents.\n     *\n     * @private\n     * @internal\n     */\n    _createSnapshot(readTime, size, docs, changes) {\n        return new vector_query_snapshot_1.VectorQuerySnapshot(this, readTime, size, docs, changes);\n    }\n    /**\n     * Construct a new vector query whose result will start after To support stream().\n     * This now throws an exception because cursors are not supported from the backend for vector queries yet.\n     *\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    startAfter(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ...fieldValuesOrDocumentSnapshot) {\n        throw new Error('Unimplemented: Vector query does not support cursors yet.');\n    }\n    /**\n     * Compares this object with the given object for equality.\n     *\n     * This object is considered \"equal\" to the other object if and only if\n     * `other` performs the same vector distance search as this `VectorQuery` and\n     * the underlying Query of `other` compares equal to that of this object\n     * using `Query.isEqual()`.\n     *\n     * @param other - The object to compare to this object for equality.\n     * @returns `true` if this object is \"equal\" to the given object, as\n     * defined above, or `false` otherwise.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof VectorQuery)) {\n            return false;\n        }\n        if (!this.query.isEqual(other.query)) {\n            return false;\n        }\n        return (this._rawVectorField === other._rawVectorField &&\n            (0, util_1.isPrimitiveArrayEqual)(this._rawQueryVector, other._rawQueryVector) &&\n            this._options.limit === other._options.limit &&\n            this._options.distanceMeasure === other._options.distanceMeasure &&\n            this._options.distanceThreshold === other._options.distanceThreshold &&\n            this._rawDistanceResultField === other._rawDistanceResultField);\n    }\n}\nexports.VectorQuery = VectorQuery;\n//# sourceMappingURL=vector-query.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3915, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/types.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LimitType = void 0;\n/*!\n * Denotes whether a provided limit is applied to the beginning or the end of\n * the result set.\n */\nvar LimitType;\n(function (LimitType) {\n    LimitType[LimitType[\"First\"] = 0] = \"First\";\n    LimitType[LimitType[\"Last\"] = 1] = \"Last\";\n})(LimitType || (exports.LimitType = LimitType = {}));\n/**\n * onSnapshot() callback that receives a QuerySnapshot.\n *\n * @callback querySnapshotCallback\n * @param {QuerySnapshot} snapshot A query snapshot.\n */\n/**\n * onSnapshot() callback that receives a DocumentSnapshot.\n *\n * @callback documentSnapshotCallback\n * @param {DocumentSnapshot} snapshot A document snapshot.\n */\n/**\n * onSnapshot() callback that receives an error.\n *\n * @callback errorCallback\n * @param {Error} err An error from a listen.\n */\n//# sourceMappingURL=types.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,SAAS,GAAG,KAAK;AACzB;;;CAGC,GACD,IAAI;AACJ,CAAC,SAAU,SAAS;IAChB,SAAS,CAAC,SAAS,CAAC,QAAQ,GAAG,EAAE,GAAG;IACpC,SAAS,CAAC,SAAS,CAAC,OAAO,GAAG,EAAE,GAAG;AACvC,CAAC,EAAE,aAAa,CAAC,QAAQ,SAAS,GAAG,YAAY,CAAC,CAAC,IACnD;;;;;CAKC,IACD;;;;;CAKC,IACD;;;;;CAKC,IACD,iCAAiC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3962, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/constants.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_MESSAGE = exports.comparisonOperators = exports.directionOperators = void 0;\n/**\n * The direction of a `Query.orderBy()` clause is specified as 'desc' or 'asc'\n * (descending or ascending).\n *\n * @private\n * @internal\n */\nexports.directionOperators = {\n    asc: 'ASCENDING',\n    desc: 'DESCENDING',\n};\n/**\n * Filter conditions in a `Query.where()` clause are specified using the\n * strings '<', '<=', '==', '!=', '>=', '>', 'array-contains', 'in', 'not-in',\n * and 'array-contains-any'.\n *\n * @private\n * @internal\n */\nexports.comparisonOperators = {\n    '<': 'LESS_THAN',\n    '<=': 'LESS_THAN_OR_EQUAL',\n    '==': 'EQUAL',\n    '!=': 'NOT_EQUAL',\n    '>': 'GREATER_THAN',\n    '>=': 'GREATER_THAN_OR_EQUAL',\n    'array-contains': 'ARRAY_CONTAINS',\n    in: 'IN',\n    'not-in': 'NOT_IN',\n    'array-contains-any': 'ARRAY_CONTAINS_ANY',\n};\nexports.NOOP_MESSAGE = Symbol('a noop message');\n//# sourceMappingURL=constants.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,YAAY,GAAG,QAAQ,mBAAmB,GAAG,QAAQ,kBAAkB,GAAG,KAAK;AACvF;;;;;;CAMC,GACD,QAAQ,kBAAkB,GAAG;IACzB,KAAK;IACL,MAAM;AACV;AACA;;;;;;;CAOC,GACD,QAAQ,mBAAmB,GAAG;IAC1B,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,kBAAkB;IAClB,IAAI;IACJ,UAAU;IACV,sBAAsB;AAC1B;AACA,QAAQ,YAAY,GAAG,OAAO,mBAC9B,qCAAqC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4016, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/telemetry/trace-util.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ATTRIBUTE_KEY_ATTEMPTS_REMAINING = exports.ATTRIBUTE_KEY_ATTEMPTS_ALLOWED = exports.ATTRIBUTE_KEY_TRANSACTION_TYPE = exports.ATTRIBUTE_KEY_IS_RETRY_WITH_CURSOR = exports.ATTRIBUTE_KEY_NUM_RESPONSES = exports.ATTRIBUTE_KEY_IS_TRANSACTIONAL = exports.ATTRIBUTE_KEY_DOC_COUNT = exports.ATTRIBUTE_SETTINGS_PREFIX = exports.ATTRIBUTE_SERVICE_PREFIX = exports.SPAN_NAME_BULK_WRITER_COMMIT = exports.SPAN_NAME_PARTITION_QUERY = exports.SPAN_NAME_BATCH_COMMIT = exports.SPAN_NAME_TRANSACTION_COMMIT = exports.SPAN_NAME_TRANSACTION_ROLLBACK = exports.SPAN_NAME_TRANSACTION_GET_DOCUMENTS = exports.SPAN_NAME_TRANSACTION_GET_DOCUMENT = exports.SPAN_NAME_TRANSACTION_GET_AGGREGATION_QUERY = exports.SPAN_NAME_TRANSACTION_GET_QUERY = exports.SPAN_NAME_TRANSACTION_RUN = exports.SPAN_NAME_AGGREGATION_QUERY_GET = exports.SPAN_NAME_QUERY_GET = exports.SPAN_NAME_COL_REF_LIST_DOCUMENTS = exports.SPAN_NAME_COL_REF_ADD = exports.SPAN_NAME_DOC_REF_LIST_COLLECTIONS = exports.SPAN_NAME_DOC_REF_GET = exports.SPAN_NAME_DOC_REF_DELETE = exports.SPAN_NAME_DOC_REF_UPDATE = exports.SPAN_NAME_DOC_REF_SET = exports.SPAN_NAME_DOC_REF_CREATE = exports.SPAN_NAME_RUN_AGGREGATION_QUERY = exports.SPAN_NAME_RUN_QUERY = exports.SPAN_NAME_BATCH_GET_DOCUMENTS = exports.SERVICE = void 0;\n/**\n * Span names for instrumented operations.\n */\nexports.SERVICE = 'google.firestore.v1.Firestore/';\nexports.SPAN_NAME_BATCH_GET_DOCUMENTS = 'BatchGetDocuments';\nexports.SPAN_NAME_RUN_QUERY = 'RunQuery';\nexports.SPAN_NAME_RUN_AGGREGATION_QUERY = 'RunAggregationQuery';\nexports.SPAN_NAME_DOC_REF_CREATE = 'DocumentReference.Create';\nexports.SPAN_NAME_DOC_REF_SET = 'DocumentReference.Set';\nexports.SPAN_NAME_DOC_REF_UPDATE = 'DocumentReference.Update';\nexports.SPAN_NAME_DOC_REF_DELETE = 'DocumentReference.Delete';\nexports.SPAN_NAME_DOC_REF_GET = 'DocumentReference.Get';\nexports.SPAN_NAME_DOC_REF_LIST_COLLECTIONS = 'DocumentReference.ListCollections';\nexports.SPAN_NAME_COL_REF_ADD = 'CollectionReference.Add';\nexports.SPAN_NAME_COL_REF_LIST_DOCUMENTS = 'CollectionReference.ListDocuments';\nexports.SPAN_NAME_QUERY_GET = 'Query.Get';\nexports.SPAN_NAME_AGGREGATION_QUERY_GET = 'AggregationQuery.Get';\nexports.SPAN_NAME_TRANSACTION_RUN = 'Transaction.Run';\nexports.SPAN_NAME_TRANSACTION_GET_QUERY = 'Transaction.Get.Query';\nexports.SPAN_NAME_TRANSACTION_GET_AGGREGATION_QUERY = 'Transaction.Get.AggregationQuery';\nexports.SPAN_NAME_TRANSACTION_GET_DOCUMENT = 'Transaction.Get.Document';\nexports.SPAN_NAME_TRANSACTION_GET_DOCUMENTS = 'Transaction.Get.Documents';\nexports.SPAN_NAME_TRANSACTION_ROLLBACK = 'Transaction.Rollback';\nexports.SPAN_NAME_TRANSACTION_COMMIT = 'Transaction.Commit';\nexports.SPAN_NAME_BATCH_COMMIT = 'Batch.Commit';\nexports.SPAN_NAME_PARTITION_QUERY = 'PartitionQuery';\nexports.SPAN_NAME_BULK_WRITER_COMMIT = 'BulkWriter.Commit';\nexports.ATTRIBUTE_SERVICE_PREFIX = 'gcp.firestore';\nexports.ATTRIBUTE_SETTINGS_PREFIX = `${exports.ATTRIBUTE_SERVICE_PREFIX}.settings`;\nexports.ATTRIBUTE_KEY_DOC_COUNT = 'doc_count';\nexports.ATTRIBUTE_KEY_IS_TRANSACTIONAL = 'transactional';\nexports.ATTRIBUTE_KEY_NUM_RESPONSES = 'response_count';\nexports.ATTRIBUTE_KEY_IS_RETRY_WITH_CURSOR = 'retry_query_with_cursor';\nexports.ATTRIBUTE_KEY_TRANSACTION_TYPE = 'transaction_type';\nexports.ATTRIBUTE_KEY_ATTEMPTS_ALLOWED = 'attempts_allowed';\nexports.ATTRIBUTE_KEY_ATTEMPTS_REMAINING = 'attempts_remaining';\n//# sourceMappingURL=trace-util.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gCAAgC,GAAG,QAAQ,8BAA8B,GAAG,QAAQ,8BAA8B,GAAG,QAAQ,kCAAkC,GAAG,QAAQ,2BAA2B,GAAG,QAAQ,8BAA8B,GAAG,QAAQ,uBAAuB,GAAG,QAAQ,yBAAyB,GAAG,QAAQ,wBAAwB,GAAG,QAAQ,4BAA4B,GAAG,QAAQ,yBAAyB,GAAG,QAAQ,sBAAsB,GAAG,QAAQ,4BAA4B,GAAG,QAAQ,8BAA8B,GAAG,QAAQ,mCAAmC,GAAG,QAAQ,kCAAkC,GAAG,QAAQ,2CAA2C,GAAG,QAAQ,+BAA+B,GAAG,QAAQ,yBAAyB,GAAG,QAAQ,+BAA+B,GAAG,QAAQ,mBAAmB,GAAG,QAAQ,gCAAgC,GAAG,QAAQ,qBAAqB,GAAG,QAAQ,kCAAkC,GAAG,QAAQ,qBAAqB,GAAG,QAAQ,wBAAwB,GAAG,QAAQ,wBAAwB,GAAG,QAAQ,qBAAqB,GAAG,QAAQ,wBAAwB,GAAG,QAAQ,+BAA+B,GAAG,QAAQ,mBAAmB,GAAG,QAAQ,6BAA6B,GAAG,QAAQ,OAAO,GAAG,KAAK;AAC7uC;;CAEC,GACD,QAAQ,OAAO,GAAG;AAClB,QAAQ,6BAA6B,GAAG;AACxC,QAAQ,mBAAmB,GAAG;AAC9B,QAAQ,+BAA+B,GAAG;AAC1C,QAAQ,wBAAwB,GAAG;AACnC,QAAQ,qBAAqB,GAAG;AAChC,QAAQ,wBAAwB,GAAG;AACnC,QAAQ,wBAAwB,GAAG;AACnC,QAAQ,qBAAqB,GAAG;AAChC,QAAQ,kCAAkC,GAAG;AAC7C,QAAQ,qBAAqB,GAAG;AAChC,QAAQ,gCAAgC,GAAG;AAC3C,QAAQ,mBAAmB,GAAG;AAC9B,QAAQ,+BAA+B,GAAG;AAC1C,QAAQ,yBAAyB,GAAG;AACpC,QAAQ,+BAA+B,GAAG;AAC1C,QAAQ,2CAA2C,GAAG;AACtD,QAAQ,kCAAkC,GAAG;AAC7C,QAAQ,mCAAmC,GAAG;AAC9C,QAAQ,8BAA8B,GAAG;AACzC,QAAQ,4BAA4B,GAAG;AACvC,QAAQ,sBAAsB,GAAG;AACjC,QAAQ,yBAAyB,GAAG;AACpC,QAAQ,4BAA4B,GAAG;AACvC,QAAQ,wBAAwB,GAAG;AACnC,QAAQ,yBAAyB,GAAG,GAAG,QAAQ,wBAAwB,CAAC,SAAS,CAAC;AAClF,QAAQ,uBAAuB,GAAG;AAClC,QAAQ,8BAA8B,GAAG;AACzC,QAAQ,2BAA2B,GAAG;AACtC,QAAQ,kCAAkC,GAAG;AAC7C,QAAQ,8BAA8B,GAAG;AACzC,QAAQ,8BAA8B,GAAG;AACzC,QAAQ,gCAAgC,GAAG,sBAC3C,sCAAsC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4075, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/query-util.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryUtil = void 0;\nconst stream_1 = require(\"stream\");\nconst timestamp_1 = require(\"../timestamp\");\nconst document_1 = require(\"../document\");\nconst util_1 = require(\"../util\");\nconst document_change_1 = require(\"../document-change\");\nconst query_profile_1 = require(\"../query-profile\");\nconst logger_1 = require(\"../logger\");\nconst vector_query_1 = require(\"./vector-query\");\nconst types_1 = require(\"./types\");\nconst constants_1 = require(\"./constants\");\nconst trace_util_1 = require(\"../telemetry/trace-util\");\nclass QueryUtil {\n    constructor(\n    /** @private */\n    _firestore, \n    /** @private */\n    _queryOptions, \n    /** @private */\n    _serializer) {\n        this._firestore = _firestore;\n        this._queryOptions = _queryOptions;\n        this._serializer = _serializer;\n    }\n    _getResponse(query, transactionOrReadTime, retryWithCursor = true, explainOptions) {\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        return new Promise((resolve, reject) => {\n            const docs = [];\n            const output = {};\n            this._stream(query, transactionOrReadTime, retryWithCursor, explainOptions)\n                .on('error', err => {\n                reject((0, util_1.wrapError)(err, stack));\n            })\n                .on('data', (data) => {\n                if (data.transaction) {\n                    output.transaction = data.transaction;\n                }\n                if (data.readTime) {\n                    output.readTime = data.readTime;\n                }\n                if (data.explainMetrics) {\n                    output.explainMetrics = data.explainMetrics;\n                }\n                if (data.document) {\n                    docs.push(data.document);\n                }\n            })\n                .on('end', () => {\n                if (this._queryOptions.limitType === types_1.LimitType.Last) {\n                    // The results for limitToLast queries need to be flipped since\n                    // we reversed the ordering constraints before sending the query\n                    // to the backend.\n                    docs.reverse();\n                }\n                // Only return a snapshot when we have a readTime\n                // explain queries with analyze !== true will return no documents and no read time\n                const result = output.readTime\n                    ? query._createSnapshot(output.readTime, docs.length, () => docs, () => {\n                        const changes = [];\n                        for (let i = 0; i < docs.length; ++i) {\n                            changes.push(new document_change_1.DocumentChange('added', docs[i], -1, i));\n                        }\n                        return changes;\n                    })\n                    : undefined;\n                resolve({\n                    transaction: output.transaction,\n                    explainMetrics: output.explainMetrics,\n                    result,\n                });\n            });\n        });\n    }\n    // This method exists solely to enable unit tests to mock it.\n    _isPermanentRpcError(err, methodName) {\n        return (0, util_1.isPermanentRpcError)(err, methodName);\n    }\n    _hasRetryTimedOut(methodName, startTime) {\n        const totalTimeout = (0, util_1.getTotalTimeout)(methodName);\n        if (totalTimeout === 0) {\n            return false;\n        }\n        return Date.now() - startTime >= totalTimeout;\n    }\n    stream(query) {\n        if (this._queryOptions.limitType === types_1.LimitType.Last) {\n            throw new Error('Query results for queries that include limitToLast() ' +\n                'constraints cannot be streamed. Use Query.get() instead.');\n        }\n        const responseStream = this._stream(query);\n        const transform = new stream_1.Transform({\n            objectMode: true,\n            transform(chunk, encoding, callback) {\n                callback(undefined, chunk.document);\n            },\n        });\n        responseStream.pipe(transform);\n        responseStream.on('error', e => transform.destroy(e));\n        return transform;\n    }\n    _stream(query, transactionOrReadTime, retryWithCursor = true, explainOptions) {\n        const tag = (0, util_1.requestTag)();\n        const startTime = Date.now();\n        const isExplain = explainOptions !== undefined;\n        const methodName = 'runQuery';\n        let numDocumentsReceived = 0;\n        let lastReceivedDocument = null;\n        let backendStream;\n        const stream = new stream_1.Transform({\n            objectMode: true,\n            transform: (proto, enc, callback) => {\n                var _a;\n                if (proto === constants_1.NOOP_MESSAGE) {\n                    callback(undefined);\n                    return;\n                }\n                const output = {};\n                // Proto comes with zero-length buffer by default\n                if ((_a = proto.transaction) === null || _a === void 0 ? void 0 : _a.length) {\n                    output.transaction = proto.transaction;\n                }\n                if (proto.readTime) {\n                    output.readTime = timestamp_1.Timestamp.fromProto(proto.readTime);\n                }\n                if (proto.document) {\n                    const document = this._firestore.snapshot_(proto.document, proto.readTime);\n                    const finalDoc = new document_1.DocumentSnapshotBuilder(document.ref.withConverter(this._queryOptions.converter));\n                    // Recreate the QueryDocumentSnapshot with the DocumentReference\n                    // containing the original converter.\n                    finalDoc.fieldsProto = document._fieldsProto;\n                    finalDoc.readTime = document.readTime;\n                    finalDoc.createTime = document.createTime;\n                    finalDoc.updateTime = document.updateTime;\n                    lastReceivedDocument = finalDoc.build();\n                    output.document = lastReceivedDocument;\n                }\n                if (proto.explainMetrics) {\n                    output.explainMetrics = query_profile_1.ExplainMetrics._fromProto(proto.explainMetrics, this._serializer);\n                }\n                ++numDocumentsReceived;\n                callback(undefined, output);\n                if (proto.done) {\n                    (0, logger_1.logger)('QueryUtil._stream', tag, 'Trigger Logical Termination.');\n                    this._firestore._traceUtil\n                        .currentSpan()\n                        .addEvent(`Firestore.${methodName}: Received RunQueryResponse.Done.`);\n                    backendStream.unpipe(stream);\n                    backendStream.resume();\n                    backendStream.end();\n                    stream.end();\n                }\n            },\n        });\n        this._firestore\n            .initializeIfNeeded(tag)\n            .then(async () => {\n            // `toProto()` might throw an exception. We rely on the behavior of an\n            // async function to convert this exception into the rejected Promise we\n            // catch below.\n            let request = query.toProto(transactionOrReadTime, explainOptions);\n            let isRetryRequestWithCursor = false;\n            let streamActive;\n            do {\n                streamActive = new util_1.Deferred();\n                this._firestore._traceUtil\n                    .currentSpan()\n                    .addEvent(trace_util_1.SPAN_NAME_RUN_QUERY, {\n                    [trace_util_1.ATTRIBUTE_KEY_IS_TRANSACTIONAL]: !!request.transaction,\n                    [trace_util_1.ATTRIBUTE_KEY_IS_RETRY_WITH_CURSOR]: isRetryRequestWithCursor,\n                });\n                backendStream = await this._firestore.requestStream(methodName, \n                /* bidirectional= */ false, request, tag);\n                backendStream.on('error', err => {\n                    backendStream.unpipe(stream);\n                    // If a non-transactional query failed, attempt to restart.\n                    // Transactional queries are retried via the transaction runner.\n                    // Explain queries are not retried with a cursor. That would produce\n                    // incorrect/partial profiling results.\n                    if (!isExplain &&\n                        !transactionOrReadTime &&\n                        !this._isPermanentRpcError(err, methodName)) {\n                        (0, logger_1.logger)('QueryUtil._stream', tag, 'Query failed with retryable stream error:', err);\n                        this._firestore._traceUtil\n                            .currentSpan()\n                            .addEvent(`${trace_util_1.SPAN_NAME_RUN_QUERY}: Retryable Error.`, {\n                            'error.message': err.message,\n                        });\n                        // Enqueue a \"no-op\" write into the stream and wait for it to be\n                        // read by the downstream consumer. This ensures that all enqueued\n                        // results in the stream are consumed, which will give us an accurate\n                        // value for `lastReceivedDocument`.\n                        stream.write(constants_1.NOOP_MESSAGE, () => {\n                            if (this._hasRetryTimedOut(methodName, startTime)) {\n                                (0, logger_1.logger)('QueryUtil._stream', tag, 'Query failed with retryable stream error but the total retry timeout has exceeded.');\n                                stream.destroy(err);\n                                streamActive.resolve(/* active= */ false);\n                            }\n                            else if (lastReceivedDocument && retryWithCursor) {\n                                if (query instanceof vector_query_1.VectorQuery) {\n                                    throw new Error('Unimplemented: Vector query does not support cursors yet.');\n                                }\n                                (0, logger_1.logger)('Query._stream', tag, 'Query failed with retryable stream error and progress was made receiving ' +\n                                    'documents, so the stream is being retried.');\n                                isRetryRequestWithCursor = true;\n                                // Restart the query but use the last document we received as\n                                // the query cursor. Note that we do not use backoff here. The\n                                // call to `requestStream()` will backoff should the restart\n                                // fail before delivering any results.\n                                let newQuery;\n                                if (!this._queryOptions.limit) {\n                                    newQuery = query;\n                                }\n                                else {\n                                    const newLimit = this._queryOptions.limit - numDocumentsReceived;\n                                    if (this._queryOptions.limitType === undefined ||\n                                        this._queryOptions.limitType === types_1.LimitType.First) {\n                                        newQuery = query.limit(newLimit);\n                                    }\n                                    else {\n                                        newQuery = query.limitToLast(newLimit);\n                                    }\n                                }\n                                if (this._queryOptions.requireConsistency) {\n                                    request = newQuery\n                                        .startAfter(lastReceivedDocument)\n                                        .toProto(lastReceivedDocument.readTime);\n                                }\n                                else {\n                                    request = newQuery\n                                        .startAfter(lastReceivedDocument)\n                                        .toProto();\n                                }\n                                // Set lastReceivedDocument to null before each retry attempt to ensure the retry makes progress\n                                lastReceivedDocument = null;\n                                streamActive.resolve(/* active= */ true);\n                            }\n                            else {\n                                (0, logger_1.logger)('QueryUtil._stream', tag, `Query failed with retryable stream error however either retryWithCursor=\"${retryWithCursor}\", or ` +\n                                    'no progress was made receiving documents, so the stream is being closed.');\n                                stream.destroy(err);\n                                streamActive.resolve(/* active= */ false);\n                            }\n                        });\n                    }\n                    else {\n                        (0, logger_1.logger)('QueryUtil._stream', tag, 'Query failed with stream error:', err);\n                        this._firestore._traceUtil\n                            .currentSpan()\n                            .addEvent(`${trace_util_1.SPAN_NAME_RUN_QUERY}: Error.`, {\n                            'error.message': err.message,\n                        });\n                        stream.destroy(err);\n                        streamActive.resolve(/* active= */ false);\n                    }\n                });\n                backendStream.on('end', () => {\n                    streamActive.resolve(/* active= */ false);\n                });\n                backendStream.resume();\n                backendStream.pipe(stream);\n            } while (await streamActive.promise);\n        })\n            .catch(e => stream.destroy(e));\n        return stream;\n    }\n}\nexports.QueryUtil = QueryUtil;\n//# sourceMappingURL=query-util.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4327, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/field-order.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FieldOrder = void 0;\n/**\n * A Query order-by field.\n *\n * @private\n * @internal\n * @class\n */\nclass FieldOrder {\n    /**\n     * @param field The name of a document field (member) on which to order query\n     * results.\n     * @param direction One of 'ASCENDING' (default) or 'DESCENDING' to\n     * set the ordering direction to ascending or descending, respectively.\n     */\n    constructor(field, direction = 'ASCENDING') {\n        this.field = field;\n        this.direction = direction;\n    }\n    /**\n     * Generates the proto representation for this field order.\n     * @private\n     * @internal\n     */\n    toProto() {\n        return {\n            field: {\n                fieldPath: this.field.formattedName,\n            },\n            direction: this.direction,\n        };\n    }\n}\nexports.FieldOrder = FieldOrder;\n//# sourceMappingURL=field-order.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,UAAU,GAAG,KAAK;AAC1B;;;;;;CAMC,GACD,MAAM;IACF;;;;;KAKC,GACD,YAAY,KAAK,EAAE,YAAY,WAAW,CAAE;QACxC,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,SAAS,GAAG;IACrB;IACA;;;;KAIC,GACD,UAAU;QACN,OAAO;YACH,OAAO;gBACH,WAAW,IAAI,CAAC,KAAK,CAAC,aAAa;YACvC;YACA,WAAW,IAAI,CAAC,SAAS;QAC7B;IACJ;AACJ;AACA,QAAQ,UAAU,GAAG,YACrB,uCAAuC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4381, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/filter-internal.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilterInternal = void 0;\nclass FilterInternal {\n}\nexports.FilterInternal = FilterInternal;\n//# sourceMappingURL=filter-internal.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,KAAK;AAC9B,MAAM;AACN;AACA,QAAQ,cAAc,GAAG,gBACzB,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4408, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/field-filter-internal.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FieldFilterInternal = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\nconst filter_internal_1 = require(\"./filter-internal\");\n/**\n * A field constraint for a Query where clause.\n *\n * @private\n * @internal\n * @class\n */\nclass FieldFilterInternal extends filter_internal_1.FilterInternal {\n    getFlattenedFilters() {\n        return [this];\n    }\n    getFilters() {\n        return [this];\n    }\n    /**\n     * @param serializer The Firestore serializer\n     * @param field The path of the property value to compare.\n     * @param op A comparison operation.\n     * @param value The value to which to compare the field for inclusion in a\n     * query.\n     */\n    constructor(serializer, field, op, value) {\n        super();\n        this.serializer = serializer;\n        this.field = field;\n        this.op = op;\n        this.value = value;\n    }\n    /**\n     * Returns whether this FieldFilter uses an equals comparison.\n     *\n     * @private\n     * @internal\n     */\n    isInequalityFilter() {\n        switch (this.op) {\n            case 'GREATER_THAN':\n            case 'GREATER_THAN_OR_EQUAL':\n            case 'LESS_THAN':\n            case 'LESS_THAN_OR_EQUAL':\n            case 'NOT_EQUAL':\n            case 'NOT_IN':\n                return true;\n            default:\n                return false;\n        }\n    }\n    /**\n     * Generates the proto representation for this field filter.\n     *\n     * @private\n     * @internal\n     */\n    toProto() {\n        if (typeof this.value === 'number' && isNaN(this.value)) {\n            return {\n                unaryFilter: {\n                    field: {\n                        fieldPath: this.field.formattedName,\n                    },\n                    op: this.op === 'EQUAL' ? 'IS_NAN' : 'IS_NOT_NAN',\n                },\n            };\n        }\n        if (this.value === null) {\n            return {\n                unaryFilter: {\n                    field: {\n                        fieldPath: this.field.formattedName,\n                    },\n                    op: this.op === 'EQUAL' ? 'IS_NULL' : 'IS_NOT_NULL',\n                },\n            };\n        }\n        return {\n            fieldFilter: {\n                field: {\n                    fieldPath: this.field.formattedName,\n                },\n                op: this.op,\n                value: this.serializer.encodeValue(this.value),\n            },\n        };\n    }\n    isEqual(other) {\n        return (other instanceof FieldFilterInternal &&\n            this.field.isEqual(other.field) &&\n            this.op === other.op &&\n            deepEqual(this.value, other.value));\n    }\n}\nexports.FieldFilterInternal = FieldFilterInternal;\n//# sourceMappingURL=field-filter-internal.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,mBAAmB,GAAG,KAAK;AACnC,MAAM;AACN,MAAM;AACN;;;;;;CAMC,GACD,MAAM,4BAA4B,kBAAkB,cAAc;IAC9D,sBAAsB;QAClB,OAAO;YAAC,IAAI;SAAC;IACjB;IACA,aAAa;QACT,OAAO;YAAC,IAAI;SAAC;IACjB;IACA;;;;;;KAMC,GACD,YAAY,UAAU,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,CAAE;QACtC,KAAK;QACL,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,KAAK,GAAG;IACjB;IACA;;;;;KAKC,GACD,qBAAqB;QACjB,OAAQ,IAAI,CAAC,EAAE;YACX,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;gBACD,OAAO;YACX;gBACI,OAAO;QACf;IACJ;IACA;;;;;KAKC,GACD,UAAU;QACN,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,YAAY,MAAM,IAAI,CAAC,KAAK,GAAG;YACrD,OAAO;gBACH,aAAa;oBACT,OAAO;wBACH,WAAW,IAAI,CAAC,KAAK,CAAC,aAAa;oBACvC;oBACA,IAAI,IAAI,CAAC,EAAE,KAAK,UAAU,WAAW;gBACzC;YACJ;QACJ;QACA,IAAI,IAAI,CAAC,KAAK,KAAK,MAAM;YACrB,OAAO;gBACH,aAAa;oBACT,OAAO;wBACH,WAAW,IAAI,CAAC,KAAK,CAAC,aAAa;oBACvC;oBACA,IAAI,IAAI,CAAC,EAAE,KAAK,UAAU,YAAY;gBAC1C;YACJ;QACJ;QACA,OAAO;YACH,aAAa;gBACT,OAAO;oBACH,WAAW,IAAI,CAAC,KAAK,CAAC,aAAa;gBACvC;gBACA,IAAI,IAAI,CAAC,EAAE;gBACX,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK;YACjD;QACJ;IACJ;IACA,QAAQ,KAAK,EAAE;QACX,OAAQ,iBAAiB,uBACrB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,KAC9B,IAAI,CAAC,EAAE,KAAK,MAAM,EAAE,IACpB,UAAU,IAAI,CAAC,KAAK,EAAE,MAAM,KAAK;IACzC;AACJ;AACA,QAAQ,mBAAmB,GAAG,qBAC9B,iDAAiD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4523, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/composite-filter-internal.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompositeFilterInternal = void 0;\nconst filter_internal_1 = require(\"./filter-internal\");\nclass CompositeFilterInternal extends filter_internal_1.FilterInternal {\n    constructor(filters, operator) {\n        super();\n        this.filters = filters;\n        this.operator = operator;\n        // Memoized list of all field filters that can be found by traversing the tree of filters\n        // contained in this composite filter.\n        this.memoizedFlattenedFilters = null;\n    }\n    getFilters() {\n        return this.filters;\n    }\n    isConjunction() {\n        return this.operator === 'AND';\n    }\n    getFlattenedFilters() {\n        if (this.memoizedFlattenedFilters !== null) {\n            return this.memoizedFlattenedFilters;\n        }\n        this.memoizedFlattenedFilters = this.filters.reduce((allFilters, subfilter) => allFilters.concat(subfilter.getFlattenedFilters()), []);\n        return this.memoizedFlattenedFilters;\n    }\n    toProto() {\n        if (this.filters.length === 1) {\n            return this.filters[0].toProto();\n        }\n        const proto = {\n            compositeFilter: {\n                op: this.operator,\n                filters: this.filters.map(filter => filter.toProto()),\n            },\n        };\n        return proto;\n    }\n    isEqual(other) {\n        if (other instanceof CompositeFilterInternal) {\n            const otherFilters = other.getFilters();\n            return (this.operator === other.operator &&\n                this.getFilters().length === other.getFilters().length &&\n                this.getFilters().every((filter, index) => filter.isEqual(otherFilters[index])));\n        }\n        else {\n            return false;\n        }\n    }\n}\nexports.CompositeFilterInternal = CompositeFilterInternal;\n//# sourceMappingURL=composite-filter-internal.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,uBAAuB,GAAG,KAAK;AACvC,MAAM;AACN,MAAM,gCAAgC,kBAAkB,cAAc;IAClE,YAAY,OAAO,EAAE,QAAQ,CAAE;QAC3B,KAAK;QACL,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;QAChB,yFAAyF;QACzF,sCAAsC;QACtC,IAAI,CAAC,wBAAwB,GAAG;IACpC;IACA,aAAa;QACT,OAAO,IAAI,CAAC,OAAO;IACvB;IACA,gBAAgB;QACZ,OAAO,IAAI,CAAC,QAAQ,KAAK;IAC7B;IACA,sBAAsB;QAClB,IAAI,IAAI,CAAC,wBAAwB,KAAK,MAAM;YACxC,OAAO,IAAI,CAAC,wBAAwB;QACxC;QACA,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,YAAc,WAAW,MAAM,CAAC,UAAU,mBAAmB,KAAK,EAAE;QACrI,OAAO,IAAI,CAAC,wBAAwB;IACxC;IACA,UAAU;QACN,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,GAAG;YAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO;QAClC;QACA,MAAM,QAAQ;YACV,iBAAiB;gBACb,IAAI,IAAI,CAAC,QAAQ;gBACjB,SAAS,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA,SAAU,OAAO,OAAO;YACtD;QACJ;QACA,OAAO;IACX;IACA,QAAQ,KAAK,EAAE;QACX,IAAI,iBAAiB,yBAAyB;YAC1C,MAAM,eAAe,MAAM,UAAU;YACrC,OAAQ,IAAI,CAAC,QAAQ,KAAK,MAAM,QAAQ,IACpC,IAAI,CAAC,UAAU,GAAG,MAAM,KAAK,MAAM,UAAU,GAAG,MAAM,IACtD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC,QAAQ,QAAU,OAAO,OAAO,CAAC,YAAY,CAAC,MAAM;QACrF,OACK;YACD,OAAO;QACX;IACJ;AACJ;AACA,QAAQ,uBAAuB,GAAG,yBAClC,qDAAqD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4592, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/query-snapshot.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QuerySnapshot = void 0;\nconst validate_1 = require(\"../validate\");\nconst util_1 = require(\"../util\");\n/**\n * A QuerySnapshot contains zero or more\n * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} objects\n * representing the results of a query. The documents can be accessed as an\n * array via the [documents]{@link QuerySnapshot#documents} property\n * or enumerated using the [forEach]{@link QuerySnapshot#forEach}\n * method. The number of documents can be determined via the\n * [empty]{@link QuerySnapshot#empty} and\n * [size]{@link QuerySnapshot#size} properties.\n *\n * @class QuerySnapshot\n */\nclass QuerySnapshot {\n    /**\n     * @private\n     *\n     * @param _query The originating query.\n     * @param _readTime The time when this query snapshot was obtained.\n     * @param _size The number of documents in the result set.\n     * @param docs A callback returning a sorted array of documents matching\n     * this query\n     * @param changes A callback returning a sorted array of document change\n     * events for this snapshot.\n     */\n    constructor(_query, _readTime, _size, docs, changes) {\n        this._query = _query;\n        this._readTime = _readTime;\n        this._size = _size;\n        this._materializedDocs = null;\n        this._materializedChanges = null;\n        this._docs = null;\n        this._changes = null;\n        this._docs = docs;\n        this._changes = changes;\n    }\n    /**\n     * The query on which you called get() or onSnapshot() in order to get this\n     * QuerySnapshot.\n     *\n     * @type {Query}\n     * @name QuerySnapshot#query\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.limit(10).get().then(querySnapshot => {\n     *   console.log(`Returned first batch of results`);\n     *   let query = querySnapshot.query;\n     *   return query.offset(10).get();\n     * }).then(() => {\n     *   console.log(`Returned second batch of results`);\n     * });\n     * ```\n     */\n    get query() {\n        return this._query;\n    }\n    /**\n     * An array of all the documents in this QuerySnapshot.\n     *\n     * @type {Array.<QueryDocumentSnapshot>}\n     * @name QuerySnapshot#docs\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   let docs = querySnapshot.docs;\n     *   for (let doc of docs) {\n     *     console.log(`Document found at path: ${doc.ref.path}`);\n     *   }\n     * });\n     * ```\n     */\n    get docs() {\n        if (this._materializedDocs) {\n            return this._materializedDocs;\n        }\n        this._materializedDocs = this._docs();\n        this._docs = null;\n        return this._materializedDocs;\n    }\n    /**\n     * True if there are no documents in the QuerySnapshot.\n     *\n     * @type {boolean}\n     * @name QuerySnapshot#empty\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   if (querySnapshot.empty) {\n     *     console.log('No documents found.');\n     *   }\n     * });\n     * ```\n     */\n    get empty() {\n        return this._size === 0;\n    }\n    /**\n     * The number of documents in the QuerySnapshot.\n     *\n     * @type {number}\n     * @name QuerySnapshot#size\n     * @readonly\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   console.log(`Found ${querySnapshot.size} documents.`);\n     * });\n     * ```\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * The time this query snapshot was obtained.\n     *\n     * @type {Timestamp}\n     * @name QuerySnapshot#readTime\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then((querySnapshot) => {\n     *   let readTime = querySnapshot.readTime;\n     *   console.log(`Query results returned at '${readTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get readTime() {\n        return this._readTime;\n    }\n    /**\n     * Returns an array of the documents changes since the last snapshot. If\n     * this is the first snapshot, all documents will be in the list as added\n     * changes.\n     *\n     * @return {Array.<DocumentChange>}\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.onSnapshot(querySnapshot => {\n     *   let changes = querySnapshot.docChanges();\n     *   for (let change of changes) {\n     *     console.log(`A document was ${change.type}.`);\n     *   }\n     * });\n     * ```\n     */\n    docChanges() {\n        if (this._materializedChanges) {\n            return this._materializedChanges;\n        }\n        this._materializedChanges = this._changes();\n        this._changes = null;\n        return this._materializedChanges;\n    }\n    /**\n     * Enumerates all of the documents in the QuerySnapshot. This is a convenience\n     * method for running the same callback on each {@link QueryDocumentSnapshot}\n     * that is returned.\n     *\n     * @param {function} callback A callback to be called with a\n     * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} for each document in\n     * the snapshot.\n     * @param {*=} thisArg The `this` binding for the callback..\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    forEach(callback, thisArg) {\n        (0, validate_1.validateFunction)('callback', callback);\n        for (const doc of this.docs) {\n            callback.call(thisArg, doc);\n        }\n    }\n    /**\n     * Returns true if the document data in this `QuerySnapshot` is equal to the\n     * provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `QuerySnapshot` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        // Since the read time is different on every query read, we explicitly\n        // ignore all metadata in this comparison.\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof QuerySnapshot)) {\n            return false;\n        }\n        if (this._size !== other._size) {\n            return false;\n        }\n        if (!this._query.isEqual(other._query)) {\n            return false;\n        }\n        if (this._materializedDocs && !this._materializedChanges) {\n            // If we have only materialized the documents, we compare them first.\n            return ((0, util_1.isArrayEqual)(this.docs, other.docs) &&\n                (0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()));\n        }\n        // Otherwise, we compare the changes first as we expect there to be fewer.\n        return ((0, util_1.isArrayEqual)(this.docChanges(), other.docChanges()) &&\n            (0, util_1.isArrayEqual)(this.docs, other.docs));\n    }\n}\nexports.QuerySnapshot = QuerySnapshot;\n//# sourceMappingURL=query-snapshot.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4839, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/filter.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2023 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompositeFilter = exports.UnaryFilter = exports.Filter = void 0;\n/**\n * A `Filter` represents a restriction on one or more field values and can\n * be used to refine the results of a {@link Query}.\n * `Filters`s are created by invoking {@link Filter#where}, {@link Filter#or},\n * or {@link Filter#and} and can then be passed to {@link Query#where}\n * to create a new {@link Query} instance that also contains this `Filter`.\n */\nclass Filter {\n    /**\n     * Creates and returns a new [Filter]{@link Filter}, which can be\n     * applied to [Query.where()]{@link Query#where}, [Filter.or()]{@link Filter#or},\n     * or [Filter.and()]{@link Filter#and}. When applied to a [Query]{@link Query}\n     * it requires that documents must contain the specified field and that its value should\n     * satisfy the relation constraint provided.\n     *\n     * @param {string|FieldPath} fieldPath The name of a property value to compare.\n     * @param {string} opStr A comparison operation in the form of a string.\n     * Acceptable operator strings are \"<\", \"<=\", \"==\", \"!=\", \">=\", \">\", \"array-contains\",\n     * \"in\", \"not-in\", and \"array-contains-any\".\n     * @param {*} value The value to which to compare the field for inclusion in\n     * a query.\n     * @returns {Filter} The created Filter.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.where(Filter.where('foo', '==', 'bar')).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    static where(fieldPath, opStr, value) {\n        return new UnaryFilter(fieldPath, opStr, value);\n    }\n    /**\n     * Creates and returns a new [Filter]{@link Filter} that is a\n     * disjunction of the given {@link Filter}s. A disjunction filter includes\n     * a document if it satisfies any of the given {@link Filter}s.\n     *\n     * The returned Filter can be applied to [Query.where()]{@link Query#where},\n     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\n     * applied to a [Query]{@link Query} it requires that documents must satisfy\n     * one of the provided {@link Filter}s.\n     *\n     * @param {...Filter} filters  Optional. The {@link Filter}s\n     * for OR operation. These must be created with calls to {@link Filter#where},\n     * {@link Filter#or}, or {@link Filter#and}.\n     * @returns {Filter} The created {@link Filter}.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * // doc.foo == 'bar' || doc.baz > 0\n     * let orFilter = Filter.or(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\n     *\n     * collectionRef.where(orFilter).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    static or(...filters) {\n        return new CompositeFilter(filters, 'OR');\n    }\n    /**\n     * Creates and returns a new [Filter]{@link Filter} that is a\n     * conjunction of the given {@link Filter}s. A conjunction filter includes\n     * a document if it satisfies all of the given {@link Filter}s.\n     *\n     * The returned Filter can be applied to [Query.where()]{@link Query#where},\n     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When\n     * applied to a [Query]{@link Query} it requires that documents must satisfy\n     * one of the provided {@link Filter}s.\n     *\n     * @param {...Filter} filters  Optional. The {@link Filter}s\n     * for AND operation. These must be created with calls to {@link Filter#where},\n     * {@link Filter#or}, or {@link Filter#and}.\n     * @returns {Filter} The created {@link Filter}.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * // doc.foo == 'bar' && doc.baz > 0\n     * let andFilter = Filter.and(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));\n     *\n     * collectionRef.where(andFilter).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    static and(...filters) {\n        return new CompositeFilter(filters, 'AND');\n    }\n}\nexports.Filter = Filter;\n/**\n * A `UnaryFilter` represents a restriction on one field value and can\n * be used to refine the results of a {@link Query}.\n * `UnaryFilter`s are created by invoking {@link Filter#where} and can then\n * be passed to {@link Query#where} to create a new {@link Query} instance\n * that also contains this `UnaryFilter`.\n *\n * @private\n * @internal\n */\nclass UnaryFilter extends Filter {\n    /**\n     @private\n     @internal\n     */\n    constructor(field, operator, value) {\n        super();\n        this.field = field;\n        this.operator = operator;\n        this.value = value;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getField() {\n        return this.field;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getOperator() {\n        return this.operator;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getValue() {\n        return this.value;\n    }\n}\nexports.UnaryFilter = UnaryFilter;\n/**\n * A `CompositeFilter` is used to narrow the set of documents returned\n * by a Firestore query by performing the logical OR or AND of multiple\n * {@link Filters}s. `CompositeFilters`s are created by invoking {@link Filter#or}\n * or {@link Filter#and} and can then be passed to {@link Query#where}\n * to create a new query instance that also contains the `CompositeFilter`.\n *\n * @private\n * @internal\n */\nclass CompositeFilter extends Filter {\n    /**\n     @private\n     @internal\n     */\n    constructor(filters, operator) {\n        super();\n        this.filters = filters;\n        this.operator = operator;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getFilters() {\n        return this.filters;\n    }\n    /**\n     @private\n     @internal\n     */\n    _getOperator() {\n        return this.operator;\n    }\n}\nexports.CompositeFilter = CompositeFilter;\n//# sourceMappingURL=filter.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG,QAAQ,WAAW,GAAG,QAAQ,MAAM,GAAG,KAAK;AACtE;;;;;;CAMC,GACD,MAAM;IACF;;;;;;;;;;;;;;;;;;;;;;;;;KAyBC,GACD,OAAO,MAAM,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE;QAClC,OAAO,IAAI,YAAY,WAAW,OAAO;IAC7C;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BC,GACD,OAAO,GAAG,GAAG,OAAO,EAAE;QAClB,OAAO,IAAI,gBAAgB,SAAS;IACxC;IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BC,GACD,OAAO,IAAI,GAAG,OAAO,EAAE;QACnB,OAAO,IAAI,gBAAgB,SAAS;IACxC;AACJ;AACA,QAAQ,MAAM,GAAG;AACjB;;;;;;;;;CASC,GACD,MAAM,oBAAoB;IACtB;;;KAGC,GACD,YAAY,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAE;QAChC,KAAK;QACL,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,KAAK,GAAG;IACjB;IACA;;;KAGC,GACD,YAAY;QACR,OAAO,IAAI,CAAC,KAAK;IACrB;IACA;;;KAGC,GACD,eAAe;QACX,OAAO,IAAI,CAAC,QAAQ;IACxB;IACA;;;KAGC,GACD,YAAY;QACR,OAAO,IAAI,CAAC,KAAK;IACrB;AACJ;AACA,QAAQ,WAAW,GAAG;AACtB;;;;;;;;;CASC,GACD,MAAM,wBAAwB;IAC1B;;;KAGC,GACD,YAAY,OAAO,EAAE,QAAQ,CAAE;QAC3B,KAAK;QACL,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;IACpB;IACA;;;KAGC,GACD,cAAc;QACV,OAAO,IAAI,CAAC,OAAO;IACvB;IACA;;;KAGC,GACD,eAAe;QACX,OAAO,IAAI,CAAC,QAAQ;IACxB;AACJ;AACA,QAAQ,eAAe,GAAG,iBAC1B,kCAAkC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5033, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/helpers.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateQueryOrder = validateQueryOrder;\nexports.validateQueryOperator = validateQueryOperator;\nexports.validateDocumentReference = validateDocumentReference;\nexports.validateQueryValue = validateQueryValue;\nexports.coalesce = coalesce;\nconst validate_1 = require(\"../validate\");\nconst serializer_1 = require(\"../serializer\");\nconst document_reference_1 = require(\"./document-reference\");\nconst constants_1 = require(\"./constants\");\n/**\n * Validates the input string as a field order direction.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Order direction to validate.\n * @throws when the direction is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOrder(arg, op) {\n    // For backwards compatibility, we support both lower and uppercase values.\n    op = typeof op === 'string' ? op.toLowerCase() : op;\n    (0, validate_1.validateEnumValue)(arg, op, Object.keys(constants_1.directionOperators), { optional: true });\n    return op;\n}\n/**\n * Validates the input string as a field comparison operator.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Field comparison operator to validate.\n * @param fieldValue Value that is used in the filter.\n * @throws when the comparison operation is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\nfunction validateQueryOperator(arg, op, fieldValue) {\n    // For backwards compatibility, we support both `=` and `==` for \"equals\".\n    if (op === '=') {\n        op = '==';\n    }\n    (0, validate_1.validateEnumValue)(arg, op, Object.keys(constants_1.comparisonOperators));\n    if (typeof fieldValue === 'number' &&\n        isNaN(fieldValue) &&\n        op !== '==' &&\n        op !== '!=') {\n        throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on NaN.\");\n    }\n    if (fieldValue === null && op !== '==' && op !== '!=') {\n        throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on Null.\");\n    }\n    return op;\n}\n/**\n * Validates that 'value' is a DocumentReference.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @return the DocumentReference if valid\n */\nfunction validateDocumentReference(arg, value) {\n    if (!(value instanceof document_reference_1.DocumentReference)) {\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'DocumentReference'));\n    }\n    return value;\n}\n/**\n * Validates that 'value' can be used as a query value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\nfunction validateQueryValue(arg, value, allowUndefined) {\n    (0, serializer_1.validateUserInput)(arg, value, 'query constraint', {\n        allowDeletes: 'none',\n        allowTransforms: false,\n        allowUndefined,\n    });\n}\n/**\n * Returns the first non-undefined value or `undefined` if no such value exists.\n * @private\n * @internal\n */\nfunction coalesce(...values) {\n    return values.find(value => value !== undefined);\n}\n//# sourceMappingURL=helpers.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,kBAAkB,GAAG;AAC7B,QAAQ,qBAAqB,GAAG;AAChC,QAAQ,yBAAyB,GAAG;AACpC,QAAQ,kBAAkB,GAAG;AAC7B,QAAQ,QAAQ,GAAG;AACnB,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN;;;;;;;;;;CAUC,GACD,SAAS,mBAAmB,GAAG,EAAE,EAAE;IAC/B,2EAA2E;IAC3E,KAAK,OAAO,OAAO,WAAW,GAAG,WAAW,KAAK;IACjD,CAAC,GAAG,WAAW,iBAAiB,EAAE,KAAK,IAAI,OAAO,IAAI,CAAC,YAAY,kBAAkB,GAAG;QAAE,UAAU;IAAK;IACzG,OAAO;AACX;AACA;;;;;;;;;;;CAWC,GACD,SAAS,sBAAsB,GAAG,EAAE,EAAE,EAAE,UAAU;IAC9C,0EAA0E;IAC1E,IAAI,OAAO,KAAK;QACZ,KAAK;IACT;IACA,CAAC,GAAG,WAAW,iBAAiB,EAAE,KAAK,IAAI,OAAO,IAAI,CAAC,YAAY,mBAAmB;IACtF,IAAI,OAAO,eAAe,YACtB,MAAM,eACN,OAAO,QACP,OAAO,MAAM;QACb,MAAM,IAAI,MAAM;IACpB;IACA,IAAI,eAAe,QAAQ,OAAO,QAAQ,OAAO,MAAM;QACnD,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACX;AACA;;;;;;;;CAQC,GACD,SAAS,0BAA0B,GAAG,EAAE,KAAK;IACzC,IAAI,CAAC,CAAC,iBAAiB,qBAAqB,iBAAiB,GAAG;QAC5D,MAAM,IAAI,MAAM,CAAC,GAAG,WAAW,sBAAsB,EAAE,KAAK;IAChE;IACA,OAAO;AACX;AACA;;;;;;;;CAQC,GACD,SAAS,mBAAmB,GAAG,EAAE,KAAK,EAAE,cAAc;IAClD,CAAC,GAAG,aAAa,iBAAiB,EAAE,KAAK,OAAO,oBAAoB;QAChE,cAAc;QACd,iBAAiB;QACjB;IACJ;AACJ;AACA;;;;CAIC,GACD,SAAS,SAAS,GAAG,MAAM;IACvB,OAAO,OAAO,IAAI,CAAC,CAAA,QAAS,UAAU;AAC1C,EACA,mCAAmC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5144, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/aggregate.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2023 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregateField = exports.Aggregate = void 0;\nconst path_1 = require(\"./path\");\nconst assert = require(\"assert\");\n/**\n * Concrete implementation of the Aggregate type.\n */\nclass Aggregate {\n    constructor(alias, aggregateType, fieldPath) {\n        this.alias = alias;\n        this.aggregateType = aggregateType;\n        this.fieldPath = fieldPath;\n    }\n    /**\n     * Converts this object to the proto representation of an Aggregate.\n     * @internal\n     */\n    toProto() {\n        const proto = {};\n        if (this.aggregateType === 'count') {\n            proto.count = {};\n        }\n        else if (this.aggregateType === 'sum') {\n            assert(this.fieldPath !== undefined, 'Missing field path for sum aggregation.');\n            proto.sum = {\n                field: {\n                    fieldPath: path_1.FieldPath.fromArgument(this.fieldPath).formattedName,\n                },\n            };\n        }\n        else if (this.aggregateType === 'avg') {\n            assert(this.fieldPath !== undefined, 'Missing field path for average aggregation.');\n            proto.avg = {\n                field: {\n                    fieldPath: path_1.FieldPath.fromArgument(this.fieldPath).formattedName,\n                },\n            };\n        }\n        else {\n            throw new Error(`Aggregate type ${this.aggregateType} unimplemented.`);\n        }\n        proto.alias = this.alias;\n        return proto;\n    }\n}\nexports.Aggregate = Aggregate;\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\nclass AggregateField {\n    /**\n     * Create a new AggregateField<T>\n     * @param aggregateType Specifies the type of aggregation operation to perform.\n     * @param field Optionally specifies the field that is aggregated.\n     * @internal\n     */\n    constructor(aggregateType, field) {\n        this.aggregateType = aggregateType;\n        /** A type string to uniquely identify instances of this class. */\n        this.type = 'AggregateField';\n        this._field = field;\n    }\n    /**\n     * Compares this object with the given object for equality.\n     *\n     * This object is considered \"equal\" to the other object if and only if\n     * `other` performs the same kind of aggregation on the same field (if any).\n     *\n     * @param other The object to compare to this object for equality.\n     * @return `true` if this object is \"equal\" to the given object, as\n     * defined above, or `false` otherwise.\n     */\n    isEqual(other) {\n        return (other instanceof AggregateField &&\n            this.aggregateType === other.aggregateType &&\n            ((this._field === undefined && other._field === undefined) ||\n                (this._field !== undefined &&\n                    other._field !== undefined &&\n                    path_1.FieldPath.fromArgument(this._field).isEqual(path_1.FieldPath.fromArgument(other._field)))));\n    }\n    /**\n     * Create an AggregateField object that can be used to compute the count of\n     * documents in the result set of a query.\n     */\n    static count() {\n        return new AggregateField('count');\n    }\n    /**\n     * Create an AggregateField object that can be used to compute the average of\n     * a specified field over a range of documents in the result set of a query.\n     * @param field Specifies the field to average across the result set.\n     */\n    static average(field) {\n        return new AggregateField('avg', field);\n    }\n    /**\n     * Create an AggregateField object that can be used to compute the sum of\n     * a specified field over a range of documents in the result set of a query.\n     * @param field Specifies the field to sum across the result set.\n     */\n    static sum(field) {\n        return new AggregateField('sum', field);\n    }\n}\nexports.AggregateField = AggregateField;\n//# sourceMappingURL=aggregate.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,QAAQ,SAAS,GAAG,KAAK;AAClD,MAAM;AACN,MAAM;AACN;;CAEC,GACD,MAAM;IACF,YAAY,KAAK,EAAE,aAAa,EAAE,SAAS,CAAE;QACzC,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,SAAS,GAAG;IACrB;IACA;;;KAGC,GACD,UAAU;QACN,MAAM,QAAQ,CAAC;QACf,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS;YAChC,MAAM,KAAK,GAAG,CAAC;QACnB,OACK,IAAI,IAAI,CAAC,aAAa,KAAK,OAAO;YACnC,OAAO,IAAI,CAAC,SAAS,KAAK,WAAW;YACrC,MAAM,GAAG,GAAG;gBACR,OAAO;oBACH,WAAW,OAAO,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa;gBAC1E;YACJ;QACJ,OACK,IAAI,IAAI,CAAC,aAAa,KAAK,OAAO;YACnC,OAAO,IAAI,CAAC,SAAS,KAAK,WAAW;YACrC,MAAM,GAAG,GAAG;gBACR,OAAO;oBACH,WAAW,OAAO,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa;gBAC1E;YACJ;QACJ,OACK;YACD,MAAM,IAAI,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC;QACzE;QACA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK;QACxB,OAAO;IACX;AACJ;AACA,QAAQ,SAAS,GAAG;AACpB;;CAEC,GACD,MAAM;IACF;;;;;KAKC,GACD,YAAY,aAAa,EAAE,KAAK,CAAE;QAC9B,IAAI,CAAC,aAAa,GAAG;QACrB,gEAAgE,GAChE,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,MAAM,GAAG;IAClB;IACA;;;;;;;;;KASC,GACD,QAAQ,KAAK,EAAE;QACX,OAAQ,iBAAiB,kBACrB,IAAI,CAAC,aAAa,KAAK,MAAM,aAAa,IAC1C,CAAC,AAAC,IAAI,CAAC,MAAM,KAAK,aAAa,MAAM,MAAM,KAAK,aAC3C,IAAI,CAAC,MAAM,KAAK,aACb,MAAM,MAAM,KAAK,aACjB,OAAO,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,SAAS,CAAC,YAAY,CAAC,MAAM,MAAM,EAAG;IAChH;IACA;;;KAGC,GACD,OAAO,QAAQ;QACX,OAAO,IAAI,eAAe;IAC9B;IACA;;;;KAIC,GACD,OAAO,QAAQ,KAAK,EAAE;QAClB,OAAO,IAAI,eAAe,OAAO;IACrC;IACA;;;;KAIC,GACD,OAAO,IAAI,KAAK,EAAE;QACd,OAAO,IAAI,eAAe,OAAO;IACrC;AACJ;AACA,QAAQ,cAAc,GAAG,gBACzB,qCAAqC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5254, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/aggregate-query-snapshot.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregateQuerySnapshot = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\n/**\n * The results of executing an aggregation query.\n */\nclass AggregateQuerySnapshot {\n    /**\n     * @internal\n     *\n     * @param _query The query that was executed to produce this result.\n     * @param _readTime The time this snapshot was read.\n     * @param _data The results of the aggregations performed over the underlying\n     * query.\n     */\n    constructor(_query, _readTime, _data) {\n        this._query = _query;\n        this._readTime = _readTime;\n        this._data = _data;\n    }\n    /** The query that was executed to produce this result. */\n    get query() {\n        return this._query;\n    }\n    /** The time this snapshot was read. */\n    get readTime() {\n        return this._readTime;\n    }\n    /**\n     * Returns the results of the aggregations performed over the underlying\n     * query.\n     *\n     * The keys of the returned object will be the same as those of the\n     * `AggregateSpec` object specified to the aggregation method, and the\n     * values will be the corresponding aggregation result.\n     *\n     * @returns The results of the aggregations performed over the underlying\n     * query.\n     */\n    data() {\n        return this._data;\n    }\n    /**\n     * Compares this object with the given object for equality.\n     *\n     * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they\n     * have the same data and their underlying queries compare \"equal\" using\n     * `AggregateQuery.isEqual()`.\n     *\n     * @param other The object to compare to this object for equality.\n     * @return `true` if this object is \"equal\" to the given object, as\n     * defined above, or `false` otherwise.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof AggregateQuerySnapshot)) {\n            return false;\n        }\n        // Since the read time is different on every read, we explicitly ignore all\n        // document metadata in this comparison, just like\n        // `DocumentSnapshot.isEqual()` does.\n        if (!this.query.isEqual(other.query)) {\n            return false;\n        }\n        return deepEqual(this._data, other._data);\n    }\n}\nexports.AggregateQuerySnapshot = AggregateQuerySnapshot;\n//# sourceMappingURL=aggregate-query-snapshot.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,sBAAsB,GAAG,KAAK;AACtC,MAAM;AACN;;CAEC,GACD,MAAM;IACF;;;;;;;KAOC,GACD,YAAY,MAAM,EAAE,SAAS,EAAE,KAAK,CAAE;QAClC,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,KAAK,GAAG;IACjB;IACA,wDAAwD,GACxD,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,MAAM;IACtB;IACA,qCAAqC,GACrC,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,SAAS;IACzB;IACA;;;;;;;;;;KAUC,GACD,OAAO;QACH,OAAO,IAAI,CAAC,KAAK;IACrB;IACA;;;;;;;;;;KAUC,GACD,QAAQ,KAAK,EAAE;QACX,IAAI,IAAI,KAAK,OAAO;YAChB,OAAO;QACX;QACA,IAAI,CAAC,CAAC,iBAAiB,sBAAsB,GAAG;YAC5C,OAAO;QACX;QACA,2EAA2E;QAC3E,kDAAkD;QAClD,qCAAqC;QACrC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,GAAG;YAClC,OAAO;QACX;QACA,OAAO,UAAU,IAAI,CAAC,KAAK,EAAE,MAAM,KAAK;IAC5C;AACJ;AACA,QAAQ,sBAAsB,GAAG,wBACjC,oDAAoD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5340, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/aggregate-query.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AggregateQuery = void 0;\nconst assert = require(\"assert\");\nconst deepEqual = require(\"fast-deep-equal\");\nconst aggregate_1 = require(\"../aggregate\");\nconst timestamp_1 = require(\"../timestamp\");\nconst util_1 = require(\"../util\");\nconst query_profile_1 = require(\"../query-profile\");\nconst logger_1 = require(\"../logger\");\nconst aggregate_query_snapshot_1 = require(\"./aggregate-query-snapshot\");\nconst stream_1 = require(\"stream\");\nconst trace_util_1 = require(\"../telemetry/trace-util\");\n/**\n * A query that calculates aggregations over an underlying query.\n */\nclass AggregateQuery {\n    /**\n     * @internal\n     * @param _query The query whose aggregations will be calculated by this\n     * object.\n     * @param _aggregates The aggregations that will be performed by this query.\n     */\n    constructor(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _query, _aggregates) {\n        this._query = _query;\n        this._aggregates = _aggregates;\n        this.clientAliasToServerAliasMap = {};\n        this.serverAliasToClientAliasMap = {};\n        // Client-side aliases may be too long and exceed the 1500-byte string size limit.\n        // Such long strings do not need to be transferred over the wire either.\n        // The client maps the user's alias to a short form alias and send that to the server.\n        let aggregationNum = 0;\n        for (const clientAlias in this._aggregates) {\n            if (Object.prototype.hasOwnProperty.call(this._aggregates, clientAlias)) {\n                const serverAlias = `aggregate_${aggregationNum++}`;\n                this.clientAliasToServerAliasMap[clientAlias] = serverAlias;\n                this.serverAliasToClientAliasMap[serverAlias] = clientAlias;\n            }\n        }\n    }\n    /** The query whose aggregations will be calculated by this object. */\n    get query() {\n        return this._query;\n    }\n    /**\n     * Executes this query.\n     *\n     * @return A promise that will be resolved with the results of the query.\n     */\n    async get() {\n        return this._query._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_AGGREGATION_QUERY_GET, async () => {\n            const { result } = await this._get();\n            return result;\n        });\n    }\n    /**\n     * Internal get() method that accepts an optional transaction options and\n     * returns a snapshot with transaction and explain metadata.\n     *\n     * @private\n     * @internal\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     */\n    async _get(transactionOrReadTime) {\n        const response = await this._getResponse(transactionOrReadTime);\n        if (!response.result) {\n            throw new Error('No AggregateQuery results');\n        }\n        return response;\n    }\n    /**\n     * Internal get() method that accepts an optional transaction id, and returns\n     * transaction metadata.\n     *\n     * @private\n     * @internal\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     */\n    _getResponse(transactionOrReadTime, explainOptions) {\n        // Capture the error stack to preserve stack tracing across async calls.\n        const stack = Error().stack;\n        return new Promise((resolve, reject) => {\n            const output = {};\n            const stream = this._stream(transactionOrReadTime, explainOptions);\n            stream.on('error', err => {\n                reject((0, util_1.wrapError)(err, stack));\n            });\n            stream.on('data', (data) => {\n                if (data.transaction) {\n                    output.transaction = data.transaction;\n                }\n                if (data.explainMetrics) {\n                    output.explainMetrics = data.explainMetrics;\n                }\n                if (data.result) {\n                    output.result = data.result;\n                }\n            });\n            stream.on('end', () => {\n                stream.destroy();\n                resolve(output);\n            });\n        });\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction ID.\n     *\n     * BEWARE: If `transactionOrReadTime` is `ITransactionOptions`, then the first\n     * response in the stream will be a transaction response.\n     *\n     * @private\n     * @internal\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     * @param explainOptions Options to use for explaining the query (if any).\n     * @returns A stream of document results optionally preceded by a transaction response.\n     */\n    _stream(transactionOrReadTime, explainOptions) {\n        const tag = (0, util_1.requestTag)();\n        const firestore = this._query.firestore;\n        const stream = new stream_1.Transform({\n            objectMode: true,\n            transform: (proto, enc, callback) => {\n                var _a;\n                const output = {};\n                // Proto comes with zero-length buffer by default\n                if ((_a = proto.transaction) === null || _a === void 0 ? void 0 : _a.length) {\n                    output.transaction = proto.transaction;\n                }\n                if (proto.explainMetrics) {\n                    output.explainMetrics = query_profile_1.ExplainMetrics._fromProto(proto.explainMetrics, firestore._serializer);\n                }\n                if (proto.result) {\n                    const readTime = timestamp_1.Timestamp.fromProto(proto.readTime);\n                    const data = this.decodeResult(proto.result);\n                    output.result = new aggregate_query_snapshot_1.AggregateQuerySnapshot(this, readTime, data);\n                }\n                callback(undefined, output);\n            },\n        });\n        firestore\n            .initializeIfNeeded(tag)\n            .then(async () => {\n            // `toProto()` might throw an exception. We rely on the behavior of an\n            // async function to convert this exception into the rejected Promise we\n            // catch below.\n            const request = this.toProto(transactionOrReadTime, explainOptions);\n            const backendStream = await firestore.requestStream('runAggregationQuery', \n            /* bidirectional= */ false, request, tag);\n            stream.on('close', () => {\n                backendStream.resume();\n                backendStream.end();\n            });\n            backendStream.on('error', err => {\n                // TODO(group-by) When group-by queries are supported for aggregates\n                // consider implementing retries if the stream is making progress\n                // receiving results for groups. See the use of lastReceivedDocument\n                // in the retry strategy for runQuery.\n                // Also note that explain queries should not be retried.\n                backendStream.unpipe(stream);\n                (0, logger_1.logger)('AggregateQuery._stream', tag, 'AggregateQuery failed with stream error:', err);\n                this._query._firestore._traceUtil\n                    .currentSpan()\n                    .addEvent(`${trace_util_1.SPAN_NAME_RUN_AGGREGATION_QUERY}: Error.`, {\n                    'error.message': err.message,\n                });\n                stream.destroy(err);\n            });\n            backendStream.resume();\n            backendStream.pipe(stream);\n        })\n            .catch(e => stream.destroy(e));\n        return stream;\n    }\n    /**\n     * Internal method to decode values within result.\n     * @private\n     */\n    decodeResult(proto) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const data = {};\n        const fields = proto.aggregateFields;\n        if (fields) {\n            const serializer = this._query.firestore._serializer;\n            for (const prop of Object.keys(fields)) {\n                const alias = this.serverAliasToClientAliasMap[prop];\n                assert(alias !== null && alias !== undefined, `'${prop}' not present in server-client alias mapping.`);\n                if (this._aggregates[alias] === undefined) {\n                    throw new Error(`Unexpected alias [${prop}] in result aggregate result`);\n                }\n                data[alias] = serializer.decodeValue(fields[prop]);\n            }\n        }\n        return data;\n    }\n    /**\n     * Internal method for serializing a query to its RunAggregationQuery proto\n     * representation with an optional transaction id.\n     *\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    toProto(transactionOrReadTime, explainOptions) {\n        const queryProto = this._query.toProto();\n        const runQueryRequest = {\n            parent: queryProto.parent,\n            structuredAggregationQuery: {\n                structuredQuery: queryProto.structuredQuery,\n                aggregations: (0, util_1.mapToArray)(this._aggregates, (aggregate, clientAlias) => {\n                    const serverAlias = this.clientAliasToServerAliasMap[clientAlias];\n                    assert(serverAlias !== null && serverAlias !== undefined, `'${clientAlias}' not present in client-server alias mapping.`);\n                    return new aggregate_1.Aggregate(serverAlias, aggregate.aggregateType, aggregate._field).toProto();\n                }),\n            },\n        };\n        if (transactionOrReadTime instanceof Uint8Array) {\n            runQueryRequest.transaction = transactionOrReadTime;\n        }\n        else if (transactionOrReadTime instanceof timestamp_1.Timestamp) {\n            runQueryRequest.readTime = transactionOrReadTime;\n        }\n        else if (transactionOrReadTime) {\n            runQueryRequest.newTransaction = transactionOrReadTime;\n        }\n        if (explainOptions) {\n            runQueryRequest.explainOptions = explainOptions;\n        }\n        return runQueryRequest;\n    }\n    /**\n     * Compares this object with the given object for equality.\n     *\n     * This object is considered \"equal\" to the other object if and only if\n     * `other` performs the same aggregations as this `AggregateQuery` and\n     * the underlying Query of `other` compares equal to that of this object\n     * using `Query.isEqual()`.\n     *\n     * @param other The object to compare to this object for equality.\n     * @return `true` if this object is \"equal\" to the given object, as\n     * defined above, or `false` otherwise.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof AggregateQuery)) {\n            return false;\n        }\n        if (!this.query.isEqual(other.query)) {\n            return false;\n        }\n        return deepEqual(this._aggregates, other._aggregates);\n    }\n    /**\n     * Plans and optionally executes this query. Returns a Promise that will be\n     * resolved with the planner information, statistics from the query\n     * execution (if any), and the query results (if any).\n     *\n     * @return A Promise that will be resolved with the planner information,\n     * statistics from the query execution (if any), and the query results (if any).\n     */\n    async explain(options) {\n        const { result, explainMetrics } = await this._getResponse(undefined, options || {});\n        if (!explainMetrics) {\n            throw new Error('No explain results');\n        }\n        return new query_profile_1.ExplainResults(explainMetrics, result || null);\n    }\n}\nexports.AggregateQuery = AggregateQuery;\n//# sourceMappingURL=aggregate-query.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,KAAK;AAC9B,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN;;CAEC,GACD,MAAM;IACF;;;;;KAKC,GACD,YACA,8DAA8D;IAC9D,MAAM,EAAE,WAAW,CAAE;QACjB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,2BAA2B,GAAG,CAAC;QACpC,IAAI,CAAC,2BAA2B,GAAG,CAAC;QACpC,kFAAkF;QAClF,wEAAwE;QACxE,sFAAsF;QACtF,IAAI,iBAAiB;QACrB,IAAK,MAAM,eAAe,IAAI,CAAC,WAAW,CAAE;YACxC,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc;gBACrE,MAAM,cAAc,CAAC,UAAU,EAAE,kBAAkB;gBACnD,IAAI,CAAC,2BAA2B,CAAC,YAAY,GAAG;gBAChD,IAAI,CAAC,2BAA2B,CAAC,YAAY,GAAG;YACpD;QACJ;IACJ;IACA,oEAAoE,GACpE,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,MAAM;IACtB;IACA;;;;KAIC,GACD,MAAM,MAAM;QACR,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,aAAa,+BAA+B,EAAE;YACnG,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI;YAClC,OAAO;QACX;IACJ;IACA;;;;;;;;KAQC,GACD,MAAM,KAAK,qBAAqB,EAAE;QAC9B,MAAM,WAAW,MAAM,IAAI,CAAC,YAAY,CAAC;QACzC,IAAI,CAAC,SAAS,MAAM,EAAE;YAClB,MAAM,IAAI,MAAM;QACpB;QACA,OAAO;IACX;IACA;;;;;;;;KAQC,GACD,aAAa,qBAAqB,EAAE,cAAc,EAAE;QAChD,wEAAwE;QACxE,MAAM,QAAQ,QAAQ,KAAK;QAC3B,OAAO,IAAI,QAAQ,CAAC,SAAS;YACzB,MAAM,SAAS,CAAC;YAChB,MAAM,SAAS,IAAI,CAAC,OAAO,CAAC,uBAAuB;YACnD,OAAO,EAAE,CAAC,SAAS,CAAA;gBACf,OAAO,CAAC,GAAG,OAAO,SAAS,EAAE,KAAK;YACtC;YACA,OAAO,EAAE,CAAC,QAAQ,CAAC;gBACf,IAAI,KAAK,WAAW,EAAE;oBAClB,OAAO,WAAW,GAAG,KAAK,WAAW;gBACzC;gBACA,IAAI,KAAK,cAAc,EAAE;oBACrB,OAAO,cAAc,GAAG,KAAK,cAAc;gBAC/C;gBACA,IAAI,KAAK,MAAM,EAAE;oBACb,OAAO,MAAM,GAAG,KAAK,MAAM;gBAC/B;YACJ;YACA,OAAO,EAAE,CAAC,OAAO;gBACb,OAAO,OAAO;gBACd,QAAQ;YACZ;QACJ;IACJ;IACA;;;;;;;;;;;;KAYC,GACD,QAAQ,qBAAqB,EAAE,cAAc,EAAE;QAC3C,MAAM,MAAM,CAAC,GAAG,OAAO,UAAU;QACjC,MAAM,YAAY,IAAI,CAAC,MAAM,CAAC,SAAS;QACvC,MAAM,SAAS,IAAI,SAAS,SAAS,CAAC;YAClC,YAAY;YACZ,WAAW,CAAC,OAAO,KAAK;gBACpB,IAAI;gBACJ,MAAM,SAAS,CAAC;gBAChB,iDAAiD;gBACjD,IAAI,CAAC,KAAK,MAAM,WAAW,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,MAAM,EAAE;oBACzE,OAAO,WAAW,GAAG,MAAM,WAAW;gBAC1C;gBACA,IAAI,MAAM,cAAc,EAAE;oBACtB,OAAO,cAAc,GAAG,gBAAgB,cAAc,CAAC,UAAU,CAAC,MAAM,cAAc,EAAE,UAAU,WAAW;gBACjH;gBACA,IAAI,MAAM,MAAM,EAAE;oBACd,MAAM,WAAW,YAAY,SAAS,CAAC,SAAS,CAAC,MAAM,QAAQ;oBAC/D,MAAM,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,MAAM;oBAC3C,OAAO,MAAM,GAAG,IAAI,2BAA2B,sBAAsB,CAAC,IAAI,EAAE,UAAU;gBAC1F;gBACA,SAAS,WAAW;YACxB;QACJ;QACA,UACK,kBAAkB,CAAC,KACnB,IAAI,CAAC;YACN,sEAAsE;YACtE,wEAAwE;YACxE,eAAe;YACf,MAAM,UAAU,IAAI,CAAC,OAAO,CAAC,uBAAuB;YACpD,MAAM,gBAAgB,MAAM,UAAU,aAAa,CAAC,uBACpD,kBAAkB,GAAG,OAAO,SAAS;YACrC,OAAO,EAAE,CAAC,SAAS;gBACf,cAAc,MAAM;gBACpB,cAAc,GAAG;YACrB;YACA,cAAc,EAAE,CAAC,SAAS,CAAA;gBACtB,oEAAoE;gBACpE,iEAAiE;gBACjE,oEAAoE;gBACpE,sCAAsC;gBACtC,wDAAwD;gBACxD,cAAc,MAAM,CAAC;gBACrB,CAAC,GAAG,SAAS,MAAM,EAAE,0BAA0B,KAAK,4CAA4C;gBAChG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAC5B,WAAW,GACX,QAAQ,CAAC,GAAG,aAAa,+BAA+B,CAAC,QAAQ,CAAC,EAAE;oBACrE,iBAAiB,IAAI,OAAO;gBAChC;gBACA,OAAO,OAAO,CAAC;YACnB;YACA,cAAc,MAAM;YACpB,cAAc,IAAI,CAAC;QACvB,GACK,KAAK,CAAC,CAAA,IAAK,OAAO,OAAO,CAAC;QAC/B,OAAO;IACX;IACA;;;KAGC,GACD,aAAa,KAAK,EAAE;QAChB,8DAA8D;QAC9D,MAAM,OAAO,CAAC;QACd,MAAM,SAAS,MAAM,eAAe;QACpC,IAAI,QAAQ;YACR,MAAM,aAAa,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW;YACpD,KAAK,MAAM,QAAQ,OAAO,IAAI,CAAC,QAAS;gBACpC,MAAM,QAAQ,IAAI,CAAC,2BAA2B,CAAC,KAAK;gBACpD,OAAO,UAAU,QAAQ,UAAU,WAAW,CAAC,CAAC,EAAE,KAAK,6CAA6C,CAAC;gBACrG,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,WAAW;oBACvC,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,KAAK,4BAA4B,CAAC;gBAC3E;gBACA,IAAI,CAAC,MAAM,GAAG,WAAW,WAAW,CAAC,MAAM,CAAC,KAAK;YACrD;QACJ;QACA,OAAO;IACX;IACA;;;;;;;KAOC,GACD,QAAQ,qBAAqB,EAAE,cAAc,EAAE;QAC3C,MAAM,aAAa,IAAI,CAAC,MAAM,CAAC,OAAO;QACtC,MAAM,kBAAkB;YACpB,QAAQ,WAAW,MAAM;YACzB,4BAA4B;gBACxB,iBAAiB,WAAW,eAAe;gBAC3C,cAAc,CAAC,GAAG,OAAO,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW;oBAC/D,MAAM,cAAc,IAAI,CAAC,2BAA2B,CAAC,YAAY;oBACjE,OAAO,gBAAgB,QAAQ,gBAAgB,WAAW,CAAC,CAAC,EAAE,YAAY,6CAA6C,CAAC;oBACxH,OAAO,IAAI,YAAY,SAAS,CAAC,aAAa,UAAU,aAAa,EAAE,UAAU,MAAM,EAAE,OAAO;gBACpG;YACJ;QACJ;QACA,IAAI,iCAAiC,YAAY;YAC7C,gBAAgB,WAAW,GAAG;QAClC,OACK,IAAI,iCAAiC,YAAY,SAAS,EAAE;YAC7D,gBAAgB,QAAQ,GAAG;QAC/B,OACK,IAAI,uBAAuB;YAC5B,gBAAgB,cAAc,GAAG;QACrC;QACA,IAAI,gBAAgB;YAChB,gBAAgB,cAAc,GAAG;QACrC;QACA,OAAO;IACX;IACA;;;;;;;;;;;KAWC,GACD,QAAQ,KAAK,EAAE;QACX,IAAI,IAAI,KAAK,OAAO;YAChB,OAAO;QACX;QACA,IAAI,CAAC,CAAC,iBAAiB,cAAc,GAAG;YACpC,OAAO;QACX;QACA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,GAAG;YAClC,OAAO;QACX;QACA,OAAO,UAAU,IAAI,CAAC,WAAW,EAAE,MAAM,WAAW;IACxD;IACA;;;;;;;KAOC,GACD,MAAM,QAAQ,OAAO,EAAE;QACnB,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,WAAW,CAAC;QAClF,IAAI,CAAC,gBAAgB;YACjB,MAAM,IAAI,MAAM;QACpB;QACA,OAAO,IAAI,gBAAgB,cAAc,CAAC,gBAAgB,UAAU;IACxE;AACJ;AACA,QAAQ,cAAc,GAAG,gBACzB,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5616, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/order.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.primitiveComparator = primitiveComparator;\nexports.compareArrays = compareArrays;\nexports.compare = compare;\nconst convert_1 = require(\"./convert\");\nconst path_1 = require(\"./path\");\n/*!\n * The type order as defined by the backend.\n */\nvar TypeOrder;\n(function (TypeOrder) {\n    TypeOrder[TypeOrder[\"NULL\"] = 0] = \"NULL\";\n    TypeOrder[TypeOrder[\"BOOLEAN\"] = 1] = \"BOOLEAN\";\n    TypeOrder[TypeOrder[\"NUMBER\"] = 2] = \"NUMBER\";\n    TypeOrder[TypeOrder[\"TIMESTAMP\"] = 3] = \"TIMESTAMP\";\n    TypeOrder[TypeOrder[\"STRING\"] = 4] = \"STRING\";\n    TypeOrder[TypeOrder[\"BLOB\"] = 5] = \"BLOB\";\n    TypeOrder[TypeOrder[\"REF\"] = 6] = \"REF\";\n    TypeOrder[TypeOrder[\"GEO_POINT\"] = 7] = \"GEO_POINT\";\n    TypeOrder[TypeOrder[\"ARRAY\"] = 8] = \"ARRAY\";\n    TypeOrder[TypeOrder[\"VECTOR\"] = 9] = \"VECTOR\";\n    TypeOrder[TypeOrder[\"OBJECT\"] = 10] = \"OBJECT\";\n})(TypeOrder || (TypeOrder = {}));\n/*!\n * @private\n * @internal\n */\nfunction typeOrder(val) {\n    const valueType = (0, convert_1.detectValueType)(val);\n    switch (valueType) {\n        case 'nullValue':\n            return TypeOrder.NULL;\n        case 'integerValue':\n            return TypeOrder.NUMBER;\n        case 'doubleValue':\n            return TypeOrder.NUMBER;\n        case 'stringValue':\n            return TypeOrder.STRING;\n        case 'booleanValue':\n            return TypeOrder.BOOLEAN;\n        case 'arrayValue':\n            return TypeOrder.ARRAY;\n        case 'timestampValue':\n            return TypeOrder.TIMESTAMP;\n        case 'geoPointValue':\n            return TypeOrder.GEO_POINT;\n        case 'bytesValue':\n            return TypeOrder.BLOB;\n        case 'referenceValue':\n            return TypeOrder.REF;\n        case 'mapValue':\n            return TypeOrder.OBJECT;\n        case 'vectorValue':\n            return TypeOrder.VECTOR;\n        default:\n            throw new Error('Unexpected value type: ' + valueType);\n    }\n}\n/*!\n * @private\n * @internal\n */\nfunction primitiveComparator(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    if (left > right) {\n        return 1;\n    }\n    return 0;\n}\n/*!\n * Utility function to compare doubles (using Firestore semantics for NaN).\n * @private\n * @internal\n */\nfunction compareNumbers(left, right) {\n    if (left < right) {\n        return -1;\n    }\n    if (left > right) {\n        return 1;\n    }\n    if (left === right) {\n        return 0;\n    }\n    // one or both are NaN.\n    if (isNaN(left)) {\n        return isNaN(right) ? 0 : -1;\n    }\n    return 1;\n}\n/*!\n * @private\n * @internal\n */\nfunction compareNumberProtos(left, right) {\n    let leftValue, rightValue;\n    if (left.integerValue !== undefined) {\n        leftValue = Number(left.integerValue);\n    }\n    else {\n        leftValue = Number(left.doubleValue);\n    }\n    if (right.integerValue !== undefined) {\n        rightValue = Number(right.integerValue);\n    }\n    else {\n        rightValue = Number(right.doubleValue);\n    }\n    return compareNumbers(leftValue, rightValue);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareTimestamps(left, right) {\n    const seconds = primitiveComparator(left.seconds || 0, right.seconds || 0);\n    if (seconds !== 0) {\n        return seconds;\n    }\n    return primitiveComparator(left.nanos || 0, right.nanos || 0);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareBlobs(left, right) {\n    if (!(left instanceof Buffer) || !(right instanceof Buffer)) {\n        throw new Error('Blobs can only be compared if they are Buffers.');\n    }\n    return Buffer.compare(left, right);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareReferenceProtos(left, right) {\n    const leftPath = path_1.QualifiedResourcePath.fromSlashSeparatedString(left.referenceValue);\n    const rightPath = path_1.QualifiedResourcePath.fromSlashSeparatedString(right.referenceValue);\n    return leftPath.compareTo(rightPath);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareGeoPoints(left, right) {\n    return (primitiveComparator(left.latitude || 0, right.latitude || 0) ||\n        primitiveComparator(left.longitude || 0, right.longitude || 0));\n}\n/*!\n * @private\n * @internal\n */\nfunction compareArrays(left, right) {\n    for (let i = 0; i < left.length && i < right.length; i++) {\n        const valueComparison = compare(left[i], right[i]);\n        if (valueComparison !== 0) {\n            return valueComparison;\n        }\n    }\n    // If all the values matched so far, just check the length.\n    return primitiveComparator(left.length, right.length);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareObjects(left, right) {\n    // This requires iterating over the keys in the object in order and doing a\n    // deep comparison.\n    const leftKeys = Object.keys(left);\n    const rightKeys = Object.keys(right);\n    leftKeys.sort();\n    rightKeys.sort();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n        const keyComparison = primitiveComparator(leftKeys[i], rightKeys[i]);\n        if (keyComparison !== 0) {\n            return keyComparison;\n        }\n        const key = leftKeys[i];\n        const valueComparison = compare(left[key], right[key]);\n        if (valueComparison !== 0) {\n            return valueComparison;\n        }\n    }\n    // If all the keys matched so far, just check the length.\n    return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n/*!\n * @private\n * @internal\n */\nfunction compareVectors(left, right) {\n    var _a, _b, _c, _d, _e, _f;\n    // The vector is a map, but only vector value is compared.\n    const leftArray = (_c = (_b = (_a = left === null || left === void 0 ? void 0 : left['value']) === null || _a === void 0 ? void 0 : _a.arrayValue) === null || _b === void 0 ? void 0 : _b.values) !== null && _c !== void 0 ? _c : [];\n    const rightArray = (_f = (_e = (_d = right === null || right === void 0 ? void 0 : right['value']) === null || _d === void 0 ? void 0 : _d.arrayValue) === null || _e === void 0 ? void 0 : _e.values) !== null && _f !== void 0 ? _f : [];\n    const lengthCompare = primitiveComparator(leftArray.length, rightArray.length);\n    if (lengthCompare !== 0) {\n        return lengthCompare;\n    }\n    return compareArrays(leftArray, rightArray);\n}\n/*!\n * @private\n * @internal\n */\nfunction compare(left, right) {\n    // First compare the types.\n    const leftType = typeOrder(left);\n    const rightType = typeOrder(right);\n    const typeComparison = primitiveComparator(leftType, rightType);\n    if (typeComparison !== 0) {\n        return typeComparison;\n    }\n    // So they are the same type.\n    switch (leftType) {\n        case TypeOrder.NULL:\n            // Nulls are all equal.\n            return 0;\n        case TypeOrder.BOOLEAN:\n            return primitiveComparator(left.booleanValue, right.booleanValue);\n        case TypeOrder.STRING:\n            return primitiveComparator(left.stringValue, right.stringValue);\n        case TypeOrder.NUMBER:\n            return compareNumberProtos(left, right);\n        case TypeOrder.TIMESTAMP:\n            return compareTimestamps(left.timestampValue, right.timestampValue);\n        case TypeOrder.BLOB:\n            return compareBlobs(left.bytesValue, right.bytesValue);\n        case TypeOrder.REF:\n            return compareReferenceProtos(left, right);\n        case TypeOrder.GEO_POINT:\n            return compareGeoPoints(left.geoPointValue, right.geoPointValue);\n        case TypeOrder.ARRAY:\n            return compareArrays(left.arrayValue.values || [], right.arrayValue.values || []);\n        case TypeOrder.OBJECT:\n            return compareObjects(left.mapValue.fields || {}, right.mapValue.fields || {});\n        case TypeOrder.VECTOR:\n            return compareVectors(left.mapValue.fields || {}, right.mapValue.fields || {});\n        default:\n            throw new Error(`Encountered unknown type order: ${leftType}`);\n    }\n}\n//# sourceMappingURL=order.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5868, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/watch.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryWatch = exports.DocumentWatch = exports.WATCH_IDLE_TIMEOUT_MS = void 0;\nconst assert = require(\"assert\");\nconst rbtree = require(\"functional-red-black-tree\");\nconst google_gax_1 = require(\"google-gax\");\nconst backoff_1 = require(\"./backoff\");\nconst document_1 = require(\"./document\");\nconst document_change_1 = require(\"./document-change\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst timestamp_1 = require(\"./timestamp\");\nconst types_1 = require(\"./types\");\nconst util_1 = require(\"./util\");\n/*!\n * Target ID used by watch. Watch uses a fixed target id since we only support\n * one target per stream.\n * @type {number}\n */\nconst WATCH_TARGET_ID = 0x1;\n/*!\n * Idle timeout used to detect Watch streams that stall (see\n * https://github.com/googleapis/nodejs-firestore/issues/1057, b/156308554).\n * Under normal load, the Watch backend will send a TARGET_CHANGE message\n * roughly every 30 seconds. As discussed with the backend team, we reset the\n * Watch stream if we do not receive any message within 120 seconds.\n */\nexports.WATCH_IDLE_TIMEOUT_MS = 120 * 1000;\n/*!\n * Sentinel value for a document remove.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst REMOVED = {};\n/*!\n * The change type for document change events.\n */\n// tslint:disable-next-line:variable-name\nconst ChangeType = {\n    added: 'added',\n    modified: 'modified',\n    removed: 'removed',\n};\n/*!\n * The comparator used for document watches (which should always get called with\n * the same document).\n */\nconst DOCUMENT_WATCH_COMPARATOR = (doc1, doc2) => {\n    assert(doc1 === doc2, 'Document watches only support one document.');\n    return 0;\n};\nconst EMPTY_FUNCTION = () => { };\n/**\n * Watch provides listen functionality and exposes the 'onSnapshot' observer. It\n * can be used with a valid Firestore Listen target.\n *\n * @class\n * @private\n * @internal\n */\nclass Watch {\n    /**\n     * @private\n     * @internal\n     *\n     * @param firestore The Firestore Database client.\n     */\n    constructor(firestore, _converter = (0, types_1.defaultConverter)()) {\n        this._converter = _converter;\n        /**\n         * Indicates whether we are interested in data from the stream. Set to false in the\n         * 'unsubscribe()' callback.\n         * @private\n         * @internal\n         */\n        this.isActive = true;\n        /**\n         * The current stream to the backend.\n         * @private\n         * @internal\n         */\n        this.currentStream = null;\n        /**\n         * The server assigns and updates the resume token.\n         * @private\n         * @internal\n         */\n        this.resumeToken = undefined;\n        /**\n         * A map of document names to QueryDocumentSnapshots for the last sent snapshot.\n         * @private\n         * @internal\n         */\n        this.docMap = new Map();\n        /**\n         * The accumulated map of document changes (keyed by document name) for the\n         * current snapshot.\n         * @private\n         * @internal\n         */\n        this.changeMap = new Map();\n        /**\n         * The current state of the query results. *\n         * @private\n         * @internal\n         */\n        this.current = false;\n        /**\n         * We need this to track whether we've pushed an initial set of changes,\n         * since we should push those even when there are no changes, if there\n         * aren't docs.\n         * @private\n         * @internal\n         */\n        this.hasPushed = false;\n        this.firestore = firestore;\n        this.backoff = new backoff_1.ExponentialBackoff();\n        this.requestTag = (0, util_1.requestTag)();\n        this.onNext = EMPTY_FUNCTION;\n        this.onError = EMPTY_FUNCTION;\n    }\n    /**\n     * Starts a watch and attaches a listener for document change events.\n     *\n     * @private\n     * @internal\n     * @param onNext A callback to be called every time a new snapshot is\n     * available.\n     * @param onError A callback to be called if the listen fails or is cancelled.\n     * No further callbacks will occur.\n     *\n     * @returns An unsubscribe function that can be called to cancel the snapshot\n     * listener.\n     */\n    onSnapshot(onNext, onError) {\n        assert(this.onNext === EMPTY_FUNCTION, 'onNext should not already be defined.');\n        assert(this.onError === EMPTY_FUNCTION, 'onError should not already be defined.');\n        assert(this.docTree === undefined, 'docTree should not already be defined.');\n        this.onNext = onNext;\n        this.onError = onError;\n        this.docTree = rbtree(this.getComparator());\n        this.initStream();\n        const unsubscribe = () => {\n            (0, logger_1.logger)('Watch.onSnapshot', this.requestTag, 'Unsubscribe called');\n            // Prevent further callbacks.\n            this.onNext = () => { };\n            this.onError = () => { };\n            this.shutdown();\n        };\n        this.firestore.registerListener();\n        return unsubscribe;\n    }\n    /**\n     * Returns the current count of all documents, including the changes from\n     * the current changeMap.\n     * @private\n     * @internal\n     */\n    currentSize() {\n        const changes = this.extractCurrentChanges(timestamp_1.Timestamp.now());\n        return this.docMap.size + changes.adds.length - changes.deletes.length;\n    }\n    /**\n     * Splits up document changes into removals, additions, and updates.\n     * @private\n     * @internal\n     */\n    extractCurrentChanges(readTime) {\n        const deletes = [];\n        const adds = [];\n        const updates = [];\n        this.changeMap.forEach((value, name) => {\n            if (value === REMOVED) {\n                if (this.docMap.has(name)) {\n                    deletes.push(name);\n                }\n            }\n            else if (this.docMap.has(name)) {\n                value.readTime = readTime;\n                updates.push(value.build());\n            }\n            else {\n                value.readTime = readTime;\n                adds.push(value.build());\n            }\n        });\n        return { deletes, adds, updates };\n    }\n    /**\n     * Helper to clear the docs on RESET or filter mismatch.\n     * @private\n     * @internal\n     */\n    resetDocs() {\n        (0, logger_1.logger)('Watch.resetDocs', this.requestTag, 'Resetting documents');\n        this.changeMap.clear();\n        this.resumeToken = undefined;\n        this.docTree.forEach((snapshot) => {\n            // Mark each document as deleted. If documents are not deleted, they\n            // will be send again by the server.\n            this.changeMap.set(snapshot.ref.path, REMOVED);\n        });\n        this.current = false;\n    }\n    /**\n     * Closes the stream and calls onError() if the stream is still active.\n     * @private\n     * @internal\n     */\n    closeStream(err) {\n        if (this.isActive) {\n            (0, logger_1.logger)('Watch.closeStream', this.requestTag, 'Invoking onError: ', err);\n            this.onError(err);\n        }\n        this.shutdown();\n    }\n    /**\n     * Re-opens the stream unless the specified error is considered permanent.\n     * Clears the change map.\n     * @private\n     * @internal\n     */\n    maybeReopenStream(err) {\n        if (this.isActive && !this.isPermanentWatchError(err)) {\n            (0, logger_1.logger)('Watch.maybeReopenStream', this.requestTag, 'Stream ended, re-opening after retryable error:', err);\n            this.changeMap.clear();\n            if (this.isResourceExhaustedError(err)) {\n                this.backoff.resetToMax();\n            }\n            this.initStream();\n        }\n        else {\n            this.closeStream(err);\n        }\n    }\n    /**\n     * Cancels the current idle timeout and reschedules a new timer.\n     *\n     * @private\n     * @internal\n     */\n    resetIdleTimeout() {\n        if (this.idleTimeoutHandle) {\n            clearTimeout(this.idleTimeoutHandle);\n        }\n        this.idleTimeoutHandle = (0, backoff_1.delayExecution)(() => {\n            var _a;\n            (0, logger_1.logger)('Watch.resetIdleTimeout', this.requestTag, 'Resetting stream after idle timeout');\n            (_a = this.currentStream) === null || _a === void 0 ? void 0 : _a.end();\n            this.currentStream = null;\n            const error = new google_gax_1.GoogleError('Watch stream idle timeout');\n            error.code = google_gax_1.Status.UNKNOWN;\n            this.maybeReopenStream(error);\n        }, exports.WATCH_IDLE_TIMEOUT_MS);\n    }\n    /**\n     * Helper to restart the outgoing stream to the backend.\n     * @private\n     * @internal\n     */\n    resetStream() {\n        (0, logger_1.logger)('Watch.resetStream', this.requestTag, 'Restarting stream');\n        if (this.currentStream) {\n            this.currentStream.end();\n            this.currentStream = null;\n        }\n        this.initStream();\n    }\n    /**\n     * Initializes a new stream to the backend with backoff.\n     * @private\n     * @internal\n     */\n    initStream() {\n        this.backoff\n            .backoffAndWait()\n            .then(async () => {\n            if (!this.isActive) {\n                (0, logger_1.logger)('Watch.initStream', this.requestTag, 'Not initializing inactive stream');\n                return;\n            }\n            await this.firestore.initializeIfNeeded(this.requestTag);\n            const request = {};\n            request.database = this.firestore.formattedName;\n            request.addTarget = this.getTarget(this.resumeToken);\n            // Note that we need to call the internal _listen API to pass additional\n            // header values in readWriteStream.\n            return this.firestore\n                .requestStream('listen', \n            /* bidirectional= */ true, request, this.requestTag)\n                .then(backendStream => {\n                if (!this.isActive) {\n                    (0, logger_1.logger)('Watch.initStream', this.requestTag, 'Closing inactive stream');\n                    backendStream.emit('end');\n                    return;\n                }\n                (0, logger_1.logger)('Watch.initStream', this.requestTag, 'Opened new stream');\n                this.currentStream = backendStream;\n                this.resetIdleTimeout();\n                this.currentStream.on('data', (proto) => {\n                    this.resetIdleTimeout();\n                    this.onData(proto);\n                })\n                    .on('error', err => {\n                    if (this.currentStream === backendStream) {\n                        this.currentStream = null;\n                        this.maybeReopenStream(err);\n                    }\n                })\n                    .on('end', () => {\n                    if (this.currentStream === backendStream) {\n                        this.currentStream = null;\n                        const err = new google_gax_1.GoogleError('Stream ended unexpectedly');\n                        err.code = google_gax_1.Status.UNKNOWN;\n                        this.maybeReopenStream(err);\n                    }\n                });\n                this.currentStream.resume();\n            });\n        })\n            .catch(err => {\n            this.closeStream(err);\n        });\n    }\n    /**\n     * Handles 'data' events and closes the stream if the response type is\n     * invalid.\n     * @private\n     * @internal\n     */\n    onData(proto) {\n        if (proto.targetChange) {\n            (0, logger_1.logger)('Watch.onData', this.requestTag, 'Processing target change');\n            const change = proto.targetChange;\n            const noTargetIds = !change.targetIds || change.targetIds.length === 0;\n            if (change.targetChangeType === 'NO_CHANGE') {\n                if (noTargetIds && change.readTime && this.current) {\n                    // This means everything is up-to-date, so emit the current\n                    // set of docs as a snapshot, if there were changes.\n                    this.pushSnapshot(timestamp_1.Timestamp.fromProto(change.readTime), change.resumeToken);\n                }\n            }\n            else if (change.targetChangeType === 'ADD') {\n                if (WATCH_TARGET_ID !== change.targetIds[0]) {\n                    this.closeStream(Error('Unexpected target ID sent by server'));\n                }\n            }\n            else if (change.targetChangeType === 'REMOVE') {\n                let code = google_gax_1.Status.INTERNAL;\n                let message = 'internal error';\n                if (change.cause) {\n                    code = change.cause.code;\n                    message = change.cause.message;\n                }\n                // @todo: Surface a .code property on the exception.\n                this.closeStream(new Error('Error ' + code + ': ' + message));\n            }\n            else if (change.targetChangeType === 'RESET') {\n                // Whatever changes have happened so far no longer matter.\n                this.resetDocs();\n            }\n            else if (change.targetChangeType === 'CURRENT') {\n                this.current = true;\n            }\n            else {\n                this.closeStream(new Error('Unknown target change type: ' + JSON.stringify(change)));\n            }\n            if (change.resumeToken &&\n                this.affectsTarget(change.targetIds, WATCH_TARGET_ID)) {\n                this.backoff.reset();\n            }\n        }\n        else if (proto.documentChange) {\n            (0, logger_1.logger)('Watch.onData', this.requestTag, 'Processing change event');\n            // No other targetIds can show up here, but we still need to see\n            // if the targetId was in the added list or removed list.\n            const targetIds = proto.documentChange.targetIds || [];\n            const removedTargetIds = proto.documentChange.removedTargetIds || [];\n            let changed = false;\n            let removed = false;\n            for (let i = 0; i < targetIds.length; i++) {\n                if (targetIds[i] === WATCH_TARGET_ID) {\n                    changed = true;\n                }\n            }\n            for (let i = 0; i < removedTargetIds.length; i++) {\n                if (removedTargetIds[i] === WATCH_TARGET_ID) {\n                    removed = true;\n                }\n            }\n            const document = proto.documentChange.document;\n            const name = document.name;\n            const relativeName = path_1.QualifiedResourcePath.fromSlashSeparatedString(name).relativeName;\n            if (changed) {\n                (0, logger_1.logger)('Watch.onData', this.requestTag, 'Received document change');\n                const ref = this.firestore.doc(relativeName);\n                const snapshot = new document_1.DocumentSnapshotBuilder(ref.withConverter(this._converter));\n                snapshot.fieldsProto = document.fields || {};\n                snapshot.createTime = timestamp_1.Timestamp.fromProto(document.createTime);\n                snapshot.updateTime = timestamp_1.Timestamp.fromProto(document.updateTime);\n                this.changeMap.set(relativeName, snapshot);\n            }\n            else if (removed) {\n                (0, logger_1.logger)('Watch.onData', this.requestTag, 'Received document remove');\n                this.changeMap.set(relativeName, REMOVED);\n            }\n        }\n        else if (proto.documentDelete || proto.documentRemove) {\n            (0, logger_1.logger)('Watch.onData', this.requestTag, 'Processing remove event');\n            const name = (proto.documentDelete || proto.documentRemove).document;\n            const relativeName = path_1.QualifiedResourcePath.fromSlashSeparatedString(name).relativeName;\n            this.changeMap.set(relativeName, REMOVED);\n        }\n        else if (proto.filter) {\n            (0, logger_1.logger)('Watch.onData', this.requestTag, 'Processing filter update');\n            if (proto.filter.count !== this.currentSize()) {\n                // We need to remove all the current results.\n                this.resetDocs();\n                // The filter didn't match, so re-issue the query.\n                this.resetStream();\n            }\n        }\n        else {\n            this.closeStream(new Error('Unknown listen response type: ' + JSON.stringify(proto)));\n        }\n    }\n    /**\n     * Checks if the current target id is included in the list of target ids.\n     * If no targetIds are provided, returns true.\n     * @private\n     * @internal\n     */\n    affectsTarget(targetIds, currentId) {\n        if (targetIds === undefined || targetIds.length === 0) {\n            return true;\n        }\n        for (const targetId of targetIds) {\n            if (targetId === currentId) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Assembles a new snapshot from the current set of changes and invokes the\n     * user's callback. Clears the current changes on completion.\n     * @private\n     * @internal\n     */\n    pushSnapshot(readTime, nextResumeToken) {\n        const appliedChanges = this.computeSnapshot(readTime);\n        if (!this.hasPushed || appliedChanges.length > 0) {\n            (0, logger_1.logger)('Watch.pushSnapshot', this.requestTag, 'Sending snapshot with %d changes and %d documents', String(appliedChanges.length), this.docTree.length);\n            // We pass the current set of changes, even if `docTree` is modified later.\n            const currentTree = this.docTree;\n            this.onNext(readTime, currentTree.length, () => currentTree.keys, () => appliedChanges);\n            this.hasPushed = true;\n        }\n        this.changeMap.clear();\n        this.resumeToken = nextResumeToken;\n    }\n    /**\n     * Applies a document delete to the document tree and the document map.\n     * Returns the corresponding DocumentChange event.\n     * @private\n     * @internal\n     */\n    deleteDoc(name) {\n        assert(this.docMap.has(name), 'Document to delete does not exist');\n        const oldDocument = this.docMap.get(name);\n        const existing = this.docTree.find(oldDocument);\n        const oldIndex = existing.index;\n        this.docTree = existing.remove();\n        this.docMap.delete(name);\n        return new document_change_1.DocumentChange(ChangeType.removed, oldDocument, oldIndex, -1);\n    }\n    /**\n     * Applies a document add to the document tree and the document map. Returns\n     * the corresponding DocumentChange event.\n     * @private\n     * @internal\n     */\n    addDoc(newDocument) {\n        const name = newDocument.ref.path;\n        assert(!this.docMap.has(name), 'Document to add already exists');\n        this.docTree = this.docTree.insert(newDocument, null);\n        const newIndex = this.docTree.find(newDocument).index;\n        this.docMap.set(name, newDocument);\n        return new document_change_1.DocumentChange(ChangeType.added, newDocument, -1, newIndex);\n    }\n    /**\n     * Applies a document modification to the document tree and the document map.\n     * Returns the DocumentChange event for successful modifications.\n     * @private\n     * @internal\n     */\n    modifyDoc(newDocument) {\n        const name = newDocument.ref.path;\n        assert(this.docMap.has(name), 'Document to modify does not exist');\n        const oldDocument = this.docMap.get(name);\n        if (!oldDocument.updateTime.isEqual(newDocument.updateTime)) {\n            const removeChange = this.deleteDoc(name);\n            const addChange = this.addDoc(newDocument);\n            return new document_change_1.DocumentChange(ChangeType.modified, newDocument, removeChange.oldIndex, addChange.newIndex);\n        }\n        return null;\n    }\n    /**\n     * Applies the mutations in changeMap to both the document tree and the\n     * document lookup map. Modified docMap in-place and returns the updated\n     * state.\n     * @private\n     * @internal\n     */\n    computeSnapshot(readTime) {\n        const changeSet = this.extractCurrentChanges(readTime);\n        const appliedChanges = [];\n        // Process the sorted changes in the order that is expected by our clients\n        // (removals, additions, and then modifications). We also need to sort the\n        // individual changes to assure that oldIndex/newIndex keep incrementing.\n        changeSet.deletes.sort((name1, name2) => {\n            // Deletes are sorted based on the order of the existing document.\n            return this.getComparator()(this.docMap.get(name1), this.docMap.get(name2));\n        });\n        changeSet.deletes.forEach(name => {\n            const change = this.deleteDoc(name);\n            appliedChanges.push(change);\n        });\n        changeSet.adds.sort(this.getComparator());\n        changeSet.adds.forEach(snapshot => {\n            const change = this.addDoc(snapshot);\n            appliedChanges.push(change);\n        });\n        changeSet.updates.sort(this.getComparator());\n        changeSet.updates.forEach(snapshot => {\n            const change = this.modifyDoc(snapshot);\n            if (change) {\n                appliedChanges.push(change);\n            }\n        });\n        assert(this.docTree.length === this.docMap.size, 'The update document ' +\n            'tree and document map should have the same number of entries.');\n        return appliedChanges;\n    }\n    /**\n     * Determines whether a watch error is considered permanent and should not be\n     * retried. Errors that don't provide a GRPC error code are always considered\n     * transient in this context.\n     *\n     * @private\n     * @internal\n     * @param error An error object.\n     * @return Whether the error is permanent.\n     */\n    isPermanentWatchError(error) {\n        if (error.code === undefined) {\n            (0, logger_1.logger)('Watch.isPermanentError', this.requestTag, 'Unable to determine error code: ', error);\n            return false;\n        }\n        switch (error.code) {\n            case google_gax_1.Status.ABORTED:\n            case google_gax_1.Status.CANCELLED:\n            case google_gax_1.Status.UNKNOWN:\n            case google_gax_1.Status.DEADLINE_EXCEEDED:\n            case google_gax_1.Status.RESOURCE_EXHAUSTED:\n            case google_gax_1.Status.INTERNAL:\n            case google_gax_1.Status.UNAVAILABLE:\n            case google_gax_1.Status.UNAUTHENTICATED:\n                return false;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Determines whether we need to initiate a longer backoff due to system\n     * overload.\n     *\n     * @private\n     * @internal\n     * @param error A GRPC Error object that exposes an error code.\n     * @return Whether we need to back off our retries.\n     */\n    isResourceExhaustedError(error) {\n        return error.code === google_gax_1.Status.RESOURCE_EXHAUSTED;\n    }\n    /** Closes the stream and clears all timeouts. */\n    shutdown() {\n        var _a;\n        if (this.isActive) {\n            this.isActive = false;\n            if (this.idleTimeoutHandle) {\n                clearTimeout(this.idleTimeoutHandle);\n                this.idleTimeoutHandle = undefined;\n            }\n            this.firestore.unregisterListener();\n        }\n        (_a = this.currentStream) === null || _a === void 0 ? void 0 : _a.end();\n        this.currentStream = null;\n    }\n}\n/**\n * Creates a new Watch instance to listen on DocumentReferences.\n *\n * @private\n * @internal\n */\nclass DocumentWatch extends Watch {\n    constructor(firestore, ref) {\n        super(firestore, ref._converter);\n        this.ref = ref;\n    }\n    getComparator() {\n        return DOCUMENT_WATCH_COMPARATOR;\n    }\n    getTarget(resumeToken) {\n        const formattedName = this.ref.formattedName;\n        return {\n            documents: {\n                documents: [formattedName],\n            },\n            targetId: WATCH_TARGET_ID,\n            resumeToken,\n        };\n    }\n}\nexports.DocumentWatch = DocumentWatch;\n/**\n * Creates a new Watch instance to listen on Queries.\n *\n * @private\n * @internal\n */\nclass QueryWatch extends Watch {\n    constructor(firestore, query, converter) {\n        super(firestore, converter);\n        this.query = query;\n        this.comparator = query.comparator();\n    }\n    getComparator() {\n        return this.query.comparator();\n    }\n    getTarget(resumeToken) {\n        const query = this.query.toProto();\n        return { query, targetId: WATCH_TARGET_ID, resumeToken };\n    }\n}\nexports.QueryWatch = QueryWatch;\n//# sourceMappingURL=watch.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6487, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/query.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Query = void 0;\nconst stream_1 = require(\"stream\");\nconst query_util_1 = require(\"./query-util\");\nconst index_1 = require(\"../index\");\nconst field_order_1 = require(\"./field-order\");\nconst field_filter_internal_1 = require(\"./field-filter-internal\");\nconst composite_filter_internal_1 = require(\"./composite-filter-internal\");\nconst constants_1 = require(\"./constants\");\nconst document_reference_1 = require(\"./document-reference\");\nconst query_snapshot_1 = require(\"./query-snapshot\");\nconst serializer_1 = require(\"../serializer\");\nconst query_profile_1 = require(\"../query-profile\");\nconst filter_1 = require(\"../filter\");\nconst path_1 = require(\"../path\");\nconst helpers_1 = require(\"./helpers\");\nconst validate_1 = require(\"../validate\");\nconst types_1 = require(\"./types\");\nconst aggregate_query_1 = require(\"./aggregate-query\");\nconst vector_query_1 = require(\"./vector-query\");\nconst order_1 = require(\"../order\");\nconst types_2 = require(\"../types\");\nconst trace_util_1 = require(\"../telemetry/trace-util\");\n/**\n * A Query refers to a query which you can read or stream from. You can also\n * construct refined Query objects by adding filters and ordering.\n *\n * @class Query\n */\nclass Query {\n    /**\n     * @internal\n     * @private\n     *\n     * @param _firestore The Firestore Database client.\n     * @param _queryOptions Options that define the query.\n     */\n    constructor(\n    /**\n     * @internal\n     * @private\n     **/\n    _firestore, \n    /**\n     * @internal\n     * @private\n     **/\n    _queryOptions) {\n        this._firestore = _firestore;\n        this._queryOptions = _queryOptions;\n        this._serializer = new serializer_1.Serializer(_firestore);\n        this._allowUndefined =\n            !!this._firestore._settings.ignoreUndefinedProperties;\n        this._queryUtil = new query_util_1.QueryUtil(_firestore, _queryOptions, this._serializer);\n    }\n    /**\n     * Extracts field values from the DocumentSnapshot based on the provided\n     * field order.\n     *\n     * @private\n     * @internal\n     * @param documentSnapshot The document to extract the fields from.\n     * @param fieldOrders The field order that defines what fields we should\n     * extract.\n     * @return {Array.<*>} The field values to use.\n     */\n    static _extractFieldValues(documentSnapshot, fieldOrders) {\n        const fieldValues = [];\n        for (const fieldOrder of fieldOrders) {\n            if (index_1.FieldPath.documentId().isEqual(fieldOrder.field)) {\n                fieldValues.push(documentSnapshot.ref);\n            }\n            else {\n                const fieldValue = documentSnapshot.get(fieldOrder.field);\n                if (fieldValue === undefined) {\n                    throw new Error(`Field \"${fieldOrder.field}\" is missing in the provided DocumentSnapshot. ` +\n                        'Please provide a document that contains values for all specified ' +\n                        'orderBy() and where() constraints.');\n                }\n                else {\n                    fieldValues.push(fieldValue);\n                }\n            }\n        }\n        return fieldValues;\n    }\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name Query#firestore\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     * ```\n     */\n    get firestore() {\n        return this._firestore;\n    }\n    where(fieldPathOrFilter, opStr, value) {\n        let filter;\n        if (fieldPathOrFilter instanceof index_1.Filter) {\n            filter = fieldPathOrFilter;\n        }\n        else {\n            filter = index_1.Filter.where(fieldPathOrFilter, opStr, value);\n        }\n        if (this._queryOptions.startAt || this._queryOptions.endAt) {\n            throw new Error('Cannot specify a where() filter after calling startAt(), ' +\n                'startAfter(), endBefore() or endAt().');\n        }\n        const parsedFilter = this._parseFilter(filter);\n        if (parsedFilter.getFilters().length === 0) {\n            // Return the existing query if not adding any more filters (e.g. an empty composite filter).\n            return this;\n        }\n        const options = this._queryOptions.with({\n            filters: this._queryOptions.filters.concat(parsedFilter),\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * @internal\n     * @private\n     */\n    _parseFilter(filter) {\n        if (filter instanceof filter_1.UnaryFilter) {\n            return this._parseFieldFilter(filter);\n        }\n        return this._parseCompositeFilter(filter);\n    }\n    /**\n     * @internal\n     * @private\n     */\n    _parseFieldFilter(fieldFilterData) {\n        let value = fieldFilterData._getValue();\n        let operator = fieldFilterData._getOperator();\n        const fieldPath = fieldFilterData._getField();\n        (0, path_1.validateFieldPath)('fieldPath', fieldPath);\n        operator = (0, helpers_1.validateQueryOperator)('opStr', operator, value);\n        (0, helpers_1.validateQueryValue)('value', value, this._allowUndefined);\n        const path = index_1.FieldPath.fromArgument(fieldPath);\n        if (index_1.FieldPath.documentId().isEqual(path)) {\n            if (operator === 'array-contains' || operator === 'array-contains-any') {\n                throw new Error(`Invalid Query. You can't perform '${operator}' ` +\n                    'queries on FieldPath.documentId().');\n            }\n            else if (operator === 'in' || operator === 'not-in') {\n                if (!Array.isArray(value) || value.length === 0) {\n                    throw new Error(`Invalid Query. A non-empty array is required for '${operator}' filters.`);\n                }\n                value = value.map(el => this.validateReference(el));\n            }\n            else {\n                value = this.validateReference(value);\n            }\n        }\n        return new field_filter_internal_1.FieldFilterInternal(this._serializer, path, constants_1.comparisonOperators[operator], value);\n    }\n    /**\n     * @internal\n     * @private\n     */\n    _parseCompositeFilter(compositeFilterData) {\n        const parsedFilters = compositeFilterData\n            ._getFilters()\n            .map(filter => this._parseFilter(filter))\n            .filter(parsedFilter => parsedFilter.getFilters().length > 0);\n        // For composite filters containing 1 filter, return the only filter.\n        // For example: AND(FieldFilter1) == FieldFilter1\n        if (parsedFilters.length === 1) {\n            return parsedFilters[0];\n        }\n        return new composite_filter_internal_1.CompositeFilterInternal(parsedFilters, compositeFilterData._getOperator() === 'AND' ? 'AND' : 'OR');\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} instance that applies a\n     * field mask to the result and returns only the specified subset of fields.\n     * You can specify a list of field paths to return, or use an empty list to\n     * only return the references of matching documents.\n     *\n     * Queries that contain field masks cannot be listened to via `onSnapshot()`\n     * listeners.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {...(string|FieldPath)} fieldPaths The field paths to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     * let documentRef = collectionRef.doc('doc');\n     *\n     * return documentRef.set({x:10, y:5}).then(() => {\n     *   return collectionRef.where('x', '>', 5).select('y').get();\n     * }).then((res) => {\n     *   console.log(`y is ${res.docs[0].get('y')}.`);\n     * });\n     * ```\n     */\n    select(...fieldPaths) {\n        const fields = [];\n        if (fieldPaths.length === 0) {\n            fields.push({ fieldPath: index_1.FieldPath.documentId().formattedName });\n        }\n        else {\n            for (let i = 0; i < fieldPaths.length; ++i) {\n                (0, path_1.validateFieldPath)(i, fieldPaths[i]);\n                fields.push({\n                    fieldPath: index_1.FieldPath.fromArgument(fieldPaths[i]).formattedName,\n                });\n            }\n        }\n        // By specifying a field mask, the query result no longer conforms to type\n        // `T`. We there return `Query<DocumentData>`;\n        const options = this._queryOptions.with({\n            projection: { fields },\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that's additionally sorted\n     * by the specified field, optionally in descending order instead of\n     * ascending.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {string|FieldPath} fieldPath The field to sort by.\n     * @param {string=} directionStr Optional direction to sort by ('asc' or\n     * 'desc'). If not specified, order will be ascending.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.orderBy('foo', 'desc').get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    orderBy(fieldPath, directionStr) {\n        (0, path_1.validateFieldPath)('fieldPath', fieldPath);\n        directionStr = (0, helpers_1.validateQueryOrder)('directionStr', directionStr);\n        if (this._queryOptions.startAt || this._queryOptions.endAt) {\n            throw new Error('Cannot specify an orderBy() constraint after calling ' +\n                'startAt(), startAfter(), endBefore() or endAt().');\n        }\n        const newOrder = new field_order_1.FieldOrder(index_1.FieldPath.fromArgument(fieldPath), constants_1.directionOperators[directionStr || 'asc']);\n        const options = this._queryOptions.with({\n            fieldOrders: this._queryOptions.fieldOrders.concat(newOrder),\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that only returns the\n     * first matching documents.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the limit.\n     *\n     * @param {number} limit The maximum number of items to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(1).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    limit(limit) {\n        (0, validate_1.validateInteger)('limit', limit);\n        const options = this._queryOptions.with({\n            limit,\n            limitType: types_1.LimitType.First,\n        });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that only returns the\n     * last matching documents.\n     *\n     * You must specify at least one orderBy clause for limitToLast queries,\n     * otherwise an exception will be thrown during execution.\n     *\n     * Results for limitToLast queries cannot be streamed via the `stream()` API.\n     *\n     * @param limit The maximum number of items to return.\n     * @return The created Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limitToLast(1).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Last matching document is ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    limitToLast(limit) {\n        (0, validate_1.validateInteger)('limitToLast', limit);\n        const options = this._queryOptions.with({ limit, limitType: types_1.LimitType.Last });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Specifies the offset of the returned results.\n     *\n     * This function returns a new (immutable) instance of the\n     * [Query]{@link Query} (rather than modify the existing instance)\n     * to impose the offset.\n     *\n     * @param {number} offset The offset to apply to the Query results\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(10).offset(20).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    offset(offset) {\n        (0, validate_1.validateInteger)('offset', offset);\n        const options = this._queryOptions.with({ offset });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Returns a query that counts the documents in the result set of this\n     * query.\n     *\n     * The returned query, when executed, counts the documents in the result set\n     * of this query without actually downloading the documents.\n     *\n     * Using the returned query to count the documents is efficient because only\n     * the final count, not the documents' data, is downloaded. The returned\n     * query can count the documents in cases where the result set is\n     * prohibitively large to download entirely (thousands of documents).\n     *\n     * @return a query that counts the documents in the result set of this\n     * query. The count can be retrieved from `snapshot.data().count`, where\n     * `snapshot` is the `AggregateQuerySnapshot` resulting from running the\n     * returned query.\n     */\n    count() {\n        return this.aggregate({\n            count: index_1.AggregateField.count(),\n        });\n    }\n    /**\n     * Returns a query that can perform the given aggregations.\n     *\n     * The returned query, when executed, calculates the specified aggregations\n     * over the documents in the result set of this query without actually\n     * downloading the documents.\n     *\n     * Using the returned query to perform aggregations is efficient because only\n     * the final aggregation values, not the documents' data, is downloaded. The\n     * returned query can perform aggregations of the documents count the\n     * documents in cases where the result set is prohibitively large to download\n     * entirely (thousands of documents).\n     *\n     * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n     * to perform over the result set. The AggregateSpec specifies aliases for each\n     * aggregate, which can be used to retrieve the aggregate result.\n     * @example\n     * ```typescript\n     * const aggregateQuery = col.aggregate(query, {\n     *   countOfDocs: count(),\n     *   totalHours: sum('hours'),\n     *   averageScore: average('score')\n     * });\n     *\n     * const aggregateSnapshot = await aggregateQuery.get();\n     * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n     * const totalHours: number = aggregateSnapshot.data().totalHours;\n     * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n     * ```\n     */\n    aggregate(aggregateSpec) {\n        return new aggregate_query_1.AggregateQuery(this, aggregateSpec);\n    }\n    findNearest(vectorFieldOrOptions, queryVector, options) {\n        if (typeof vectorFieldOrOptions === 'string' ||\n            vectorFieldOrOptions instanceof index_1.FieldPath) {\n            const vqOptions = {\n                distanceMeasure: options.distanceMeasure,\n                limit: options.limit,\n                queryVector: queryVector,\n                vectorField: vectorFieldOrOptions,\n            };\n            return this._findNearest(vqOptions);\n        }\n        else {\n            return this._findNearest(vectorFieldOrOptions);\n        }\n    }\n    _findNearest(options) {\n        (0, path_1.validateFieldPath)('vectorField', options.vectorField);\n        if (options.limit <= 0) {\n            throw (0, validate_1.invalidArgumentMessage)('limit', 'positive limit number');\n        }\n        if ((Array.isArray(options.queryVector)\n            ? options.queryVector.length\n            : options.queryVector.toArray().length) === 0) {\n            throw (0, validate_1.invalidArgumentMessage)('queryVector', 'vector size must be larger than 0');\n        }\n        return new vector_query_1.VectorQuery(this, options);\n    }\n    /**\n     * Returns true if this `Query` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `Query` is equal to the provided value.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof Query && this._queryOptions.isEqual(other._queryOptions));\n    }\n    /**\n     * Returns the sorted array of inequality filter fields used in this query.\n     *\n     * @return An array of inequality filter fields sorted lexicographically by FieldPath.\n     */\n    getInequalityFilterFields() {\n        const inequalityFields = [];\n        for (const filter of this._queryOptions.filters) {\n            for (const subFilter of filter.getFlattenedFilters()) {\n                if (subFilter.isInequalityFilter()) {\n                    inequalityFields.push(subFilter.field);\n                }\n            }\n        }\n        return inequalityFields.sort((a, b) => a.compareTo(b));\n    }\n    /**\n     * Computes the backend ordering semantics for DocumentSnapshot cursors.\n     *\n     * @private\n     * @internal\n     * @param cursorValuesOrDocumentSnapshot The snapshot of the document or the\n     * set of field values to use as the boundary.\n     * @returns The implicit ordering semantics.\n     */\n    createImplicitOrderBy(cursorValuesOrDocumentSnapshot) {\n        // Add an implicit orderBy if the only cursor value is a DocumentSnapshot.\n        if (cursorValuesOrDocumentSnapshot.length !== 1 ||\n            !(cursorValuesOrDocumentSnapshot[0] instanceof index_1.DocumentSnapshot)) {\n            return this._queryOptions.fieldOrders;\n        }\n        const fieldOrders = this._queryOptions.fieldOrders.slice();\n        const fieldsNormalized = new Set([\n            ...fieldOrders.map(item => item.field.toString()),\n        ]);\n        /** The order of the implicit ordering always matches the last explicit order by. */\n        const lastDirection = fieldOrders.length === 0\n            ? constants_1.directionOperators.ASC\n            : fieldOrders[fieldOrders.length - 1].direction;\n        /**\n         * Any inequality fields not explicitly ordered should be implicitly ordered in a\n         * lexicographical order. When there are multiple inequality filters on the same field, the\n         * field should be added only once.\n         * Note: getInequalityFilterFields function sorts the key field before\n         * other fields. However, we want the key field to be sorted last.\n         */\n        const inequalityFields = this.getInequalityFilterFields();\n        for (const field of inequalityFields) {\n            if (!fieldsNormalized.has(field.toString()) &&\n                !field.isEqual(index_1.FieldPath.documentId())) {\n                fieldOrders.push(new field_order_1.FieldOrder(field, lastDirection));\n                fieldsNormalized.add(field.toString());\n            }\n        }\n        // Add the document key field to the last if it is not explicitly ordered.\n        if (!fieldsNormalized.has(index_1.FieldPath.documentId().toString())) {\n            fieldOrders.push(new field_order_1.FieldOrder(index_1.FieldPath.documentId(), lastDirection));\n        }\n        return fieldOrders;\n    }\n    /**\n     * Builds a Firestore 'Position' proto message.\n     *\n     * @private\n     * @internal\n     * @param {Array.<FieldOrder>} fieldOrders The field orders to use for this\n     * cursor.\n     * @param {Array.<DocumentSnapshot|*>} cursorValuesOrDocumentSnapshot The\n     * snapshot of the document or the set of field values to use as the boundary.\n     * @param before Whether the query boundary lies just before or after the\n     * provided data.\n     * @returns {Object} The proto message.\n     */\n    createCursor(fieldOrders, cursorValuesOrDocumentSnapshot, before) {\n        let fieldValues;\n        if (cursorValuesOrDocumentSnapshot.length === 1 &&\n            cursorValuesOrDocumentSnapshot[0] instanceof index_1.DocumentSnapshot) {\n            fieldValues = Query._extractFieldValues(cursorValuesOrDocumentSnapshot[0], fieldOrders);\n        }\n        else {\n            fieldValues = cursorValuesOrDocumentSnapshot;\n        }\n        if (fieldValues.length > fieldOrders.length) {\n            throw new Error('Too many cursor values specified. The specified ' +\n                'values must match the orderBy() constraints of the query.');\n        }\n        const options = { values: [], before };\n        for (let i = 0; i < fieldValues.length; ++i) {\n            let fieldValue = fieldValues[i];\n            if (index_1.FieldPath.documentId().isEqual(fieldOrders[i].field)) {\n                fieldValue = this.validateReference(fieldValue);\n            }\n            (0, helpers_1.validateQueryValue)(i, fieldValue, this._allowUndefined);\n            options.values.push(this._serializer.encodeValue(fieldValue));\n        }\n        return options;\n    }\n    /**\n     * Validates that a value used with FieldValue.documentId() is either a\n     * string or a DocumentReference that is part of the query`s result set.\n     * Throws a validation error or returns a DocumentReference that can\n     * directly be used in the Query.\n     *\n     * @param val The value to validate.\n     * @throws If the value cannot be used for this query.\n     * @return If valid, returns a DocumentReference that can be used with the\n     * query.\n     * @private\n     * @internal\n     */\n    validateReference(val) {\n        const basePath = this._queryOptions.allDescendants\n            ? this._queryOptions.parentPath\n            : this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n        let reference;\n        if (typeof val === 'string') {\n            const path = basePath.append(val);\n            if (this._queryOptions.allDescendants) {\n                if (!path.isDocument) {\n                    throw new Error('When querying a collection group and ordering by ' +\n                        'FieldPath.documentId(), the corresponding value must result in ' +\n                        `a valid document path, but '${val}' is not because it ` +\n                        'contains an odd number of segments.');\n                }\n            }\n            else if (val.indexOf('/') !== -1) {\n                throw new Error('When querying a collection and ordering by FieldPath.documentId(), ' +\n                    `the corresponding value must be a plain document ID, but '${val}' ` +\n                    'contains a slash.');\n            }\n            reference = new document_reference_1.DocumentReference(this._firestore, basePath.append(val), this._queryOptions.converter);\n        }\n        else if (val instanceof document_reference_1.DocumentReference) {\n            reference = val;\n            if (!basePath.isPrefixOf(reference._path)) {\n                throw new Error(`\"${reference.path}\" is not part of the query result set and ` +\n                    'cannot be used as a query boundary.');\n            }\n        }\n        else {\n            throw new Error('The corresponding value for FieldPath.documentId() must be a ' +\n                `string or a DocumentReference, but was \"${val}\".`);\n        }\n        if (!this._queryOptions.allDescendants &&\n            reference._path.parent().compareTo(basePath) !== 0) {\n            throw new Error('Only a direct child can be used as a query boundary. ' +\n                `Found: \"${reference.path}\".`);\n        }\n        return reference;\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start at or the field values to\n     * start this query at, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    startAt(...fieldValuesOrDocumentSnapshot) {\n        (0, validate_1.validateMinNumberOfArguments)('Query.startAt', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n        const options = this._queryOptions.with({ fieldOrders, startAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts after the\n     * provided set of field values relative to the order of the query. The order\n     * of the provided values must match the order of the order by clauses of the\n     * query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start after or the field values to\n     * start this query after, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAfter(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    startAfter(...fieldValuesOrDocumentSnapshot) {\n        (0, validate_1.validateMinNumberOfArguments)('Query.startAfter', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n        const options = this._queryOptions.with({ fieldOrders, startAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends before the set of\n     * field values relative to the order of the query. The order of the provided\n     * values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end before or the field values to\n     * end this query before, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endBefore(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    endBefore(...fieldValuesOrDocumentSnapshot) {\n        (0, validate_1.validateMinNumberOfArguments)('Query.endBefore', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n        const options = this._queryOptions.with({ fieldOrders, endAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end at or the field values to end\n     * this query at, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    endAt(...fieldValuesOrDocumentSnapshot) {\n        (0, validate_1.validateMinNumberOfArguments)('Query.endAt', fieldValuesOrDocumentSnapshot, 1);\n        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n        const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n        const options = this._queryOptions.with({ fieldOrders, endAt });\n        return new Query(this._firestore, options);\n    }\n    /**\n     * Executes the query and returns the results as a\n     * [QuerySnapshot]{@link QuerySnapshot}.\n     *\n     * @returns {Promise.<QuerySnapshot>} A Promise that resolves with the results\n     * of the Query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     * ```\n     */\n    async get() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_QUERY_GET, async () => {\n            const { result } = await this._get();\n            return result;\n        });\n    }\n    /**\n     * Plans and optionally executes this query. Returns a Promise that will be\n     * resolved with the planner information, statistics from the query execution (if any),\n     * and the query results (if any).\n     *\n     * @return A Promise that will be resolved with the planner information, statistics\n     *  from the query execution (if any), and the query results (if any).\n     */\n    async explain(options) {\n        if (options === undefined) {\n            options = {};\n        }\n        const { result, explainMetrics } = await this._getResponse(undefined, options);\n        if (!explainMetrics) {\n            throw new Error('No explain results');\n        }\n        return new query_profile_1.ExplainResults(explainMetrics, result || null);\n    }\n    /**\n     * Internal get() method that accepts an optional transaction options, and\n     * returns a query snapshot with transaction and explain metadata.\n     *\n     * @private\n     * @internal\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     */\n    async _get(transactionOrReadTime) {\n        const result = await this._getResponse(transactionOrReadTime);\n        if (!result.result) {\n            throw new Error('No QuerySnapshot result');\n        }\n        return result;\n    }\n    _getResponse(transactionOrReadTime, explainOptions) {\n        return this._queryUtil._getResponse(this, transactionOrReadTime, true, explainOptions);\n    }\n    /**\n     * Executes the query and streams the results as\n     * [QueryDocumentSnapshots]{@link QueryDocumentSnapshot}.\n     *\n     * @returns {Stream.<QueryDocumentSnapshot>} A stream of\n     * QueryDocumentSnapshots.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let count = 0;\n     *\n     * query.stream().on('data', (documentSnapshot) => {\n     *   console.log(`Found document with name '${documentSnapshot.id}'`);\n     *   ++count;\n     * }).on('end', () => {\n     *   console.log(`Total count is ${count}`);\n     * });\n     * ```\n     */\n    stream() {\n        return this._queryUtil.stream(this);\n    }\n    /**\n     * Executes the query and streams the results as the following object:\n     * {document?: DocumentSnapshot, metrics?: ExplainMetrics}\n     *\n     * The stream surfaces documents one at a time as they are received from the\n     * server, and at the end, it will surface the metrics associated with\n     * executing the query.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let count = 0;\n     *\n     * query.explainStream({analyze: true}).on('data', (data) => {\n     *   if (data.document) {\n     *     // Use data.document which is a DocumentSnapshot instance.\n     *     console.log(`Found document with name '${data.document.id}'`);\n     *     ++count;\n     *   }\n     *   if (data.metrics) {\n     *     // Use data.metrics which is an ExplainMetrics instance.\n     *   }\n     * }).on('end', () => {\n     *   console.log(`Received ${count} documents.`);\n     * });\n     * ```\n     */\n    explainStream(explainOptions) {\n        if (explainOptions === undefined) {\n            explainOptions = {};\n        }\n        if (this._queryOptions.limitType === types_1.LimitType.Last) {\n            throw new Error('Query results for queries that include limitToLast() ' +\n                'constraints cannot be streamed. Use Query.explain() instead.');\n        }\n        const responseStream = this._stream(undefined, explainOptions);\n        const transform = new stream_1.Transform({\n            objectMode: true,\n            transform(chunk, encoding, callback) {\n                if (chunk.document || chunk.explainMetrics) {\n                    callback(undefined, {\n                        document: chunk.document,\n                        metrics: chunk.explainMetrics,\n                    });\n                }\n            },\n        });\n        responseStream.pipe(transform);\n        responseStream.on('error', e => transform.destroy(e));\n        return transform;\n    }\n    /**\n     * Converts a QueryCursor to its proto representation.\n     *\n     * @param cursor The original cursor value\n     * @private\n     * @internal\n     */\n    toCursor(cursor) {\n        if (cursor) {\n            return cursor.before\n                ? { before: true, values: cursor.values }\n                : { values: cursor.values };\n        }\n        return undefined;\n    }\n    /**\n     * Internal method for serializing a query to its RunQuery proto\n     * representation with an optional transaction id or read time.\n     *\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     * @param explainOptions Options to use for explaining the query (if any).\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    toProto(transactionOrReadTime, explainOptions) {\n        const projectId = this.firestore.projectId;\n        const databaseId = this.firestore.databaseId;\n        const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId, databaseId);\n        const structuredQuery = this.toStructuredQuery();\n        // For limitToLast queries, the structured query has to be translated to a version with\n        // reversed ordered, and flipped startAt/endAt to work properly.\n        if (this._queryOptions.limitType === types_1.LimitType.Last) {\n            if (!this._queryOptions.hasFieldOrders()) {\n                throw new Error('limitToLast() queries require specifying at least one orderBy() clause.');\n            }\n            structuredQuery.orderBy = this._queryOptions.fieldOrders.map(order => {\n                // Flip the orderBy directions since we want the last results\n                const dir = order.direction === 'DESCENDING' ? 'ASCENDING' : 'DESCENDING';\n                return new field_order_1.FieldOrder(order.field, dir).toProto();\n            });\n            // Swap the cursors to match the now-flipped query ordering.\n            structuredQuery.startAt = this._queryOptions.endAt\n                ? this.toCursor({\n                    values: this._queryOptions.endAt.values,\n                    before: !this._queryOptions.endAt.before,\n                })\n                : undefined;\n            structuredQuery.endAt = this._queryOptions.startAt\n                ? this.toCursor({\n                    values: this._queryOptions.startAt.values,\n                    before: !this._queryOptions.startAt.before,\n                })\n                : undefined;\n        }\n        const runQueryRequest = {\n            parent: parentPath.formattedName,\n            structuredQuery,\n        };\n        if (transactionOrReadTime instanceof Uint8Array) {\n            runQueryRequest.transaction = transactionOrReadTime;\n        }\n        else if (transactionOrReadTime instanceof index_1.Timestamp) {\n            runQueryRequest.readTime = transactionOrReadTime.toProto().timestampValue;\n        }\n        else if (transactionOrReadTime) {\n            runQueryRequest.newTransaction = transactionOrReadTime;\n        }\n        if (explainOptions) {\n            runQueryRequest.explainOptions = explainOptions;\n        }\n        return runQueryRequest;\n    }\n    /**\n     * Converts current Query to an IBundledQuery.\n     *\n     * @private\n     * @internal\n     */\n    _toBundledQuery() {\n        const projectId = this.firestore.projectId;\n        const databaseId = this.firestore.databaseId;\n        const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId, databaseId);\n        const structuredQuery = this.toStructuredQuery();\n        const bundledQuery = {\n            parent: parentPath.formattedName,\n            structuredQuery,\n        };\n        if (this._queryOptions.limitType === types_1.LimitType.First) {\n            bundledQuery.limitType = 'FIRST';\n        }\n        else if (this._queryOptions.limitType === types_1.LimitType.Last) {\n            bundledQuery.limitType = 'LAST';\n        }\n        return bundledQuery;\n    }\n    toStructuredQuery() {\n        const structuredQuery = {\n            from: [{}],\n        };\n        if (this._queryOptions.allDescendants) {\n            structuredQuery.from[0].allDescendants = true;\n        }\n        // Kindless queries select all descendant documents, so we remove the\n        // collectionId field.\n        if (!this._queryOptions.kindless) {\n            structuredQuery.from[0].collectionId = this._queryOptions.collectionId;\n        }\n        if (this._queryOptions.filters.length >= 1) {\n            structuredQuery.where = new composite_filter_internal_1.CompositeFilterInternal(this._queryOptions.filters, 'AND').toProto();\n        }\n        if (this._queryOptions.hasFieldOrders()) {\n            structuredQuery.orderBy = this._queryOptions.fieldOrders.map(o => o.toProto());\n        }\n        structuredQuery.startAt = this.toCursor(this._queryOptions.startAt);\n        structuredQuery.endAt = this.toCursor(this._queryOptions.endAt);\n        if (this._queryOptions.limit) {\n            structuredQuery.limit = { value: this._queryOptions.limit };\n        }\n        structuredQuery.offset = this._queryOptions.offset;\n        structuredQuery.select = this._queryOptions.projection;\n        return structuredQuery;\n    }\n    /**\n     * @internal\n     * @private\n     * This method exists solely to maintain backward compatability.\n     */\n    _isPermanentRpcError(err, methodName) {\n        return this._queryUtil._isPermanentRpcError(err, methodName);\n    }\n    /**\n     * @internal\n     * @private\n     * This method exists solely to maintain backward compatability.\n     */\n    _hasRetryTimedOut(methodName, startTime) {\n        return this._queryUtil._hasRetryTimedOut(methodName, startTime);\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction ID.\n     *\n     * BEWARE: If `transactionOrReadTime` is `ITransactionOptions`, then the first\n     * response in the stream will be a transaction response.\n     *\n     * @param transactionOrReadTime A transaction ID, options to start a new\n     *  transaction, or timestamp to use as read time.\n     * @param explainOptions Options to use for explaining the query (if any).\n     * @private\n     * @internal\n     * @returns A stream of document results, optionally preceded by a transaction response.\n     */\n    _stream(transactionOrReadTime, explainOptions) {\n        return this._queryUtil._stream(this, transactionOrReadTime, true, explainOptions);\n    }\n    /**\n     * Attaches a listener for QuerySnapshot events.\n     *\n     * @param {querySnapshotCallback} onNext A callback to be called every time\n     * a new [QuerySnapshot]{@link QuerySnapshot} is available.\n     * @param {errorCallback=} onError A callback to be called if the listen\n     * fails or is cancelled. No further callbacks will occur.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   console.log(`Received query snapshot of size ${querySnapshot.size}`);\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    onSnapshot(onNext, onError) {\n        (0, validate_1.validateFunction)('onNext', onNext);\n        (0, validate_1.validateFunction)('onError', onError, { optional: true });\n        const watch = new (require('../watch').QueryWatch)(this.firestore, this, this._queryOptions.converter);\n        return watch.onSnapshot((readTime, size, docs, changes) => {\n            onNext(new query_snapshot_1.QuerySnapshot(this, readTime, size, docs, changes));\n        }, onError || console.error);\n    }\n    /**\n     * Returns a function that can be used to sort QueryDocumentSnapshots\n     * according to the sort criteria of this query.\n     *\n     * @private\n     * @internal\n     */\n    comparator() {\n        return (doc1, doc2) => {\n            // Add implicit sorting by name, using the last specified direction.\n            const lastDirection = this._queryOptions.hasFieldOrders()\n                ? this._queryOptions.fieldOrders[this._queryOptions.fieldOrders.length - 1].direction\n                : 'ASCENDING';\n            const orderBys = this._queryOptions.fieldOrders.concat(new field_order_1.FieldOrder(index_1.FieldPath.documentId(), lastDirection));\n            for (const orderBy of orderBys) {\n                let comp;\n                if (index_1.FieldPath.documentId().isEqual(orderBy.field)) {\n                    comp = doc1.ref._path.compareTo(doc2.ref._path);\n                }\n                else {\n                    const v1 = doc1.protoField(orderBy.field);\n                    const v2 = doc2.protoField(orderBy.field);\n                    if (v1 === undefined || v2 === undefined) {\n                        throw new Error('Trying to compare documents on fields that ' +\n                            \"don't exist. Please include the fields you are ordering on \" +\n                            'in your select() call.');\n                    }\n                    comp = (0, order_1.compare)(v1, v2);\n                }\n                if (comp !== 0) {\n                    const direction = orderBy.direction === 'ASCENDING' ? 1 : -1;\n                    return direction * comp;\n                }\n            }\n            return 0;\n        };\n    }\n    /**\n     * Applies a custom data converter to this Query, allowing you to use your\n     * own custom model objects with Firestore. When you call get() on the\n     * returned Query, the provided converter will convert between Firestore\n     * data of type `NewDbModelType` and your custom type `NewAppModelType`.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * ```\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * ```\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A Query that uses the provided converter.\n     */\n    withConverter(converter) {\n        return new Query(this.firestore, this._queryOptions.withConverter(converter !== null && converter !== void 0 ? converter : (0, types_2.defaultConverter)()));\n    }\n    /**\n     * Construct the resulting snapshot for this query with given documents.\n     *\n     * @private\n     * @internal\n     */\n    _createSnapshot(readTime, size, docs, changes) {\n        return new query_snapshot_1.QuerySnapshot(this, readTime, size, docs, changes);\n    }\n}\nexports.Query = Query;\n//# sourceMappingURL=query.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7580, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/query-options.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryOptions = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\nconst path_1 = require(\"../path\");\nconst types_1 = require(\"../types\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Internal class representing custom Query options.\n *\n * These options are immutable. Modified options can be created using `with()`.\n * @private\n * @internal\n */\nclass QueryOptions {\n    constructor(parentPath, collectionId, converter, allDescendants, filters, fieldOrders, startAt, endAt, limit, limitType, offset, projection, \n    // Whether to select all documents under `parentPath`. By default, only\n    // collections that match `collectionId` are selected.\n    kindless = false, \n    // Whether to require consistent documents when restarting the query. By\n    // default, restarting the query uses the readTime offset of the original\n    // query to provide consistent results.\n    requireConsistency = true) {\n        this.parentPath = parentPath;\n        this.collectionId = collectionId;\n        this.converter = converter;\n        this.allDescendants = allDescendants;\n        this.filters = filters;\n        this.fieldOrders = fieldOrders;\n        this.startAt = startAt;\n        this.endAt = endAt;\n        this.limit = limit;\n        this.limitType = limitType;\n        this.offset = offset;\n        this.projection = projection;\n        this.kindless = kindless;\n        this.requireConsistency = requireConsistency;\n    }\n    /**\n     * Returns query options for a collection group query.\n     * @private\n     * @internal\n     */\n    static forCollectionGroupQuery(collectionId, converter = (0, types_1.defaultConverter)()) {\n        return new QueryOptions(\n        /*parentPath=*/ path_1.ResourcePath.EMPTY, collectionId, converter, \n        /*allDescendants=*/ true, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n    }\n    /**\n     * Returns query options for a single-collection query.\n     * @private\n     * @internal\n     */\n    static forCollectionQuery(collectionRef, converter = (0, types_1.defaultConverter)()) {\n        return new QueryOptions(collectionRef.parent(), collectionRef.id, converter, \n        /*allDescendants=*/ false, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n    }\n    /**\n     * Returns query options for a query that fetches all descendants under the\n     * specified reference.\n     *\n     * @private\n     * @internal\n     */\n    static forKindlessAllDescendants(parent, id, requireConsistency = true) {\n        let options = new QueryOptions(parent, id, (0, types_1.defaultConverter)(), \n        /*allDescendants=*/ true, \n        /*fieldFilters=*/ [], \n        /*fieldOrders=*/ []);\n        options = options.with({\n            kindless: true,\n            requireConsistency,\n        });\n        return options;\n    }\n    /**\n     * Returns the union of the current and the provided options.\n     * @private\n     * @internal\n     */\n    with(settings) {\n        return new QueryOptions((0, helpers_1.coalesce)(settings.parentPath, this.parentPath), (0, helpers_1.coalesce)(settings.collectionId, this.collectionId), this.converter, (0, helpers_1.coalesce)(settings.allDescendants, this.allDescendants), (0, helpers_1.coalesce)(settings.filters, this.filters), (0, helpers_1.coalesce)(settings.fieldOrders, this.fieldOrders), (0, helpers_1.coalesce)(settings.startAt, this.startAt), (0, helpers_1.coalesce)(settings.endAt, this.endAt), (0, helpers_1.coalesce)(settings.limit, this.limit), (0, helpers_1.coalesce)(settings.limitType, this.limitType), (0, helpers_1.coalesce)(settings.offset, this.offset), (0, helpers_1.coalesce)(settings.projection, this.projection), (0, helpers_1.coalesce)(settings.kindless, this.kindless), (0, helpers_1.coalesce)(settings.requireConsistency, this.requireConsistency));\n    }\n    withConverter(converter) {\n        return new QueryOptions(this.parentPath, this.collectionId, converter, this.allDescendants, this.filters, this.fieldOrders, this.startAt, this.endAt, this.limit, this.limitType, this.offset, this.projection);\n    }\n    hasFieldOrders() {\n        return this.fieldOrders.length > 0;\n    }\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        return (other instanceof QueryOptions &&\n            this.parentPath.isEqual(other.parentPath) &&\n            this.filtersEqual(other.filters) &&\n            this.collectionId === other.collectionId &&\n            this.converter === other.converter &&\n            this.allDescendants === other.allDescendants &&\n            this.limit === other.limit &&\n            this.offset === other.offset &&\n            deepEqual(this.fieldOrders, other.fieldOrders) &&\n            deepEqual(this.startAt, other.startAt) &&\n            deepEqual(this.endAt, other.endAt) &&\n            deepEqual(this.projection, other.projection) &&\n            this.kindless === other.kindless &&\n            this.requireConsistency === other.requireConsistency);\n    }\n    filtersEqual(other) {\n        if (this.filters.length !== other.length) {\n            return false;\n        }\n        for (let i = 0; i < other.length; i++) {\n            if (!this.filters[i].isEqual(other[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.QueryOptions = QueryOptions;\n//# sourceMappingURL=query-options.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7696, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/collection-reference.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CollectionReference = void 0;\nconst path_1 = require(\"../path\");\nconst util_1 = require(\"../util\");\nconst write_batch_1 = require(\"../write-batch\");\nconst types_1 = require(\"../types\");\nconst query_1 = require(\"./query\");\nconst document_reference_1 = require(\"./document-reference\");\nconst query_options_1 = require(\"./query-options\");\nconst trace_util_1 = require(\"../telemetry/trace-util\");\n/**\n * A CollectionReference object can be used for adding documents, getting\n * document references, and querying for documents (using the methods\n * inherited from [Query]{@link Query}).\n *\n * @class CollectionReference\n * @extends Query\n */\nclass CollectionReference extends query_1.Query {\n    /**\n     * @private\n     *\n     * @param firestore The Firestore Database client.\n     * @param path The Path of this collection.\n     */\n    constructor(firestore, path, converter) {\n        super(firestore, query_options_1.QueryOptions.forCollectionQuery(path, converter));\n    }\n    /**\n     * Returns a resource path for this collection.\n     * @private\n     * @internal\n     */\n    get _resourcePath() {\n        return this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n    }\n    /**\n     * The last path element of the referenced collection.\n     *\n     * @type {string}\n     * @name CollectionReference#id\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * console.log(`ID of the subcollection: ${collectionRef.id}`);\n     * ```\n     */\n    get id() {\n        return this._queryOptions.collectionId;\n    }\n    /**\n     * A reference to the containing Document if this is a subcollection, else\n     * null.\n     *\n     * @type {DocumentReference|null}\n     * @name CollectionReference#parent\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * let documentRef = collectionRef.parent;\n     * console.log(`Parent name: ${documentRef.path}`);\n     * ```\n     */\n    get parent() {\n        if (this._queryOptions.parentPath.isDocument) {\n            return new document_reference_1.DocumentReference(this.firestore, this._queryOptions.parentPath);\n        }\n        return null;\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name CollectionReference#path\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * console.log(`Path of the subcollection: ${collectionRef.path}`);\n     * ```\n     */\n    get path() {\n        return this._resourcePath.relativeName;\n    }\n    /**\n     * Retrieves the list of documents in this collection.\n     *\n     * The document references returned may include references to \"missing\n     * documents\", i.e. document locations that have no document present but\n     * which contain subcollections with documents. Attempting to read such a\n     * document reference (e.g. via `.get()` or `.onSnapshot()`) will return a\n     * `DocumentSnapshot` whose `.exists` property is false.\n     *\n     * @return {Promise<DocumentReference[]>} The list of documents in this\n     * collection.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * return collectionRef.listDocuments().then(documentRefs => {\n     *    return firestore.getAll(...documentRefs);\n     * }).then(documentSnapshots => {\n     *    for (let documentSnapshot of documentSnapshots) {\n     *       if (documentSnapshot.exists) {\n     *         console.log(`Found document with data: ${documentSnapshot.id}`);\n     *       } else {\n     *         console.log(`Found missing document: ${documentSnapshot.id}`);\n     *       }\n     *    }\n     * });\n     * ```\n     */\n    listDocuments() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_COL_REF_LIST_DOCUMENTS, () => {\n            const tag = (0, util_1.requestTag)();\n            return this.firestore.initializeIfNeeded(tag).then(() => {\n                const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(this.firestore.projectId, this.firestore.databaseId);\n                const request = {\n                    parent: parentPath.formattedName,\n                    collectionId: this.id,\n                    showMissing: true,\n                    // Setting `pageSize` to an arbitrarily large value lets the backend cap\n                    // the page size (currently to 300). Note that the backend rejects\n                    // MAX_INT32 (b/146883794).\n                    pageSize: Math.pow(2, 16) - 1,\n                    mask: { fieldPaths: [] },\n                };\n                return this.firestore\n                    .request('listDocuments', request, tag)\n                    .then(documents => {\n                    // Note that the backend already orders these documents by name,\n                    // so we do not need to manually sort them.\n                    return documents.map(doc => {\n                        const path = path_1.QualifiedResourcePath.fromSlashSeparatedString(doc.name);\n                        return this.doc(path.id);\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path. If no path is specified, an\n     * automatically-generated unique ID will be used for the returned\n     * DocumentReference.\n     *\n     * @param {string=} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The `DocumentReference`\n     * instance.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     * let documentRefWithName = collectionRef.doc('doc');\n     * let documentRefWithAutoId = collectionRef.doc();\n     * console.log(`Reference with name: ${documentRefWithName.path}`);\n     * console.log(`Reference with auto-id: ${documentRefWithAutoId.path}`);\n     * ```\n     */\n    doc(documentPath) {\n        if (arguments.length === 0) {\n            documentPath = (0, util_1.autoId)();\n        }\n        else {\n            (0, path_1.validateResourcePath)('documentPath', documentPath);\n        }\n        const path = this._resourcePath.append(documentPath);\n        if (!path.isDocument) {\n            throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n        }\n        return new document_reference_1.DocumentReference(this.firestore, path, this._queryOptions.converter);\n    }\n    /**\n     * Add a new document to this collection with the specified data, assigning\n     * it a document ID automatically.\n     *\n     * @param {DocumentData} data An Object containing the data for the new\n     * document.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Promise.<DocumentReference>} A Promise resolved with a\n     * [DocumentReference]{@link DocumentReference} pointing to the\n     * newly created document.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name: ${documentReference.id}`);\n     * });\n     * ```\n     */\n    add(data) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_COL_REF_ADD, () => {\n            const firestoreData = this._queryOptions.converter.toFirestore(data);\n            (0, write_batch_1.validateDocumentData)('data', firestoreData, \n            /*allowDeletes=*/ false, this._allowUndefined);\n            const documentRef = this.doc();\n            return documentRef.create(data).then(() => documentRef);\n        });\n    }\n    /**\n     * Returns true if this `CollectionReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `CollectionReference` is equal to the\n     * provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof CollectionReference && super.isEqual(other)));\n    }\n    /**\n     * Applies a custom data converter to this CollectionReference, allowing you\n     * to use your own custom model objects with Firestore. When you call add() on\n     * the returned CollectionReference instance, the provided converter will\n     * convert between Firestore data of type `NewDbModelType` and your custom\n     * type `NewAppModelType`.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * ```\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * ```\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A CollectionReference that uses the provided converter.\n     */\n    withConverter(converter) {\n        return new CollectionReference(this.firestore, this._resourcePath, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());\n    }\n}\nexports.CollectionReference = CollectionReference;\n//# sourceMappingURL=collection-reference.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7978, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/reference/document-reference.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DocumentReference = void 0;\nconst index_1 = require(\"../index\");\nconst path_1 = require(\"../path\");\nconst types_1 = require(\"../types\");\nconst collection_reference_1 = require(\"./collection-reference\");\nconst util_1 = require(\"../util\");\nconst validate_1 = require(\"../validate\");\nconst document_1 = require(\"../document\");\nconst trace_util_1 = require(\"../telemetry/trace-util\");\n/**\n * A DocumentReference refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist. A DocumentReference can\n * also be used to create a\n * [CollectionReference]{@link CollectionReference} to a\n * subcollection.\n *\n * @class DocumentReference\n */\nclass DocumentReference {\n    /**\n     * @private\n     * @internal\n     * @param _firestore The Firestore Database client.\n     * @param _path The Path of this reference.\n     * @param _converter The converter to use when serializing data.\n     */\n    constructor(_firestore, \n    /**\n     * @private\n     * @internal\n     **/\n    _path, \n    /**\n     * @internal\n     * @private\n     **/\n    _converter = (0, types_1.defaultConverter)()) {\n        this._firestore = _firestore;\n        this._path = _path;\n        this._converter = _converter;\n    }\n    /**\n     * The string representation of the DocumentReference's location.\n     * @private\n     * @internal\n     * @type {string}\n     * @name DocumentReference#formattedName\n     */\n    get formattedName() {\n        const projectId = this.firestore.projectId;\n        const databaseId = this.firestore.databaseId;\n        return this._path.toQualifiedResourcePath(projectId, databaseId)\n            .formattedName;\n    }\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name DocumentReference#firestore\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     * ```\n     */\n    get firestore() {\n        return this._firestore;\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name DocumentReference#path\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document at '${documentReference.path}'`);\n     * });\n     * ```\n     */\n    get path() {\n        return this._path.relativeName;\n    }\n    /**\n     * The last path element of the referenced document.\n     *\n     * @type {string}\n     * @name DocumentReference#id\n     * @readonly\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name '${documentReference.id}'`);\n     * });\n     * ```\n     */\n    get id() {\n        return this._path.id;\n    }\n    /**\n     * Returns a resource path for this document.\n     * @private\n     * @internal\n     */\n    get _resourcePath() {\n        return this._path;\n    }\n    /**\n     * A reference to the collection to which this DocumentReference belongs.\n     *\n     * @name DocumentReference#parent\n     * @type {CollectionReference}\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     * let collectionRef = documentRef.parent;\n     *\n     * collectionRef.where('foo', '==', 'bar').get().then(results => {\n     *   console.log(`Found ${results.size} matches in parent collection`);\n     * }):\n     * ```\n     */\n    get parent() {\n        return new collection_reference_1.CollectionReference(this._firestore, this._path.parent(), this._converter);\n    }\n    /**\n     * Reads the document referred to by this DocumentReference.\n     *\n     * @returns {Promise.<DocumentSnapshot>} A Promise resolved with a\n     * DocumentSnapshot for the retrieved document on success. For missing\n     * documents, DocumentSnapshot.exists will be false. If the get() fails for\n     * other reasons, the Promise will be rejected.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log('Document retrieved successfully.');\n     *   }\n     * });\n     * ```\n     */\n    get() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_GET, () => {\n            return this._firestore.getAll(this).then(([result]) => result);\n        });\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} A reference to the new\n     * subcollection.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     * let subcollection = documentRef.collection('subcollection');\n     * console.log(`Path to subcollection: ${subcollection.path}`);\n     * ```\n     */\n    collection(collectionPath) {\n        (0, path_1.validateResourcePath)('collectionPath', collectionPath);\n        const path = this._path.append(collectionPath);\n        if (!path.isCollection) {\n            throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n        }\n        return new collection_reference_1.CollectionReference(this._firestore, path);\n    }\n    /**\n     * Fetches the subcollections that are direct children of this document.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found subcollection with id: ${collection.id}`);\n     *   }\n     * });\n     * ```\n     */\n    listCollections() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_LIST_COLLECTIONS, () => {\n            const tag = (0, util_1.requestTag)();\n            return this.firestore.initializeIfNeeded(tag).then(() => {\n                const request = {\n                    parent: this.formattedName,\n                    // Setting `pageSize` to an arbitrarily large value lets the backend cap\n                    // the page size (currently to 300). Note that the backend rejects\n                    // MAX_INT32 (b/146883794).\n                    pageSize: Math.pow(2, 16) - 1,\n                };\n                return this._firestore\n                    .request('listCollectionIds', request, tag)\n                    .then(collectionIds => {\n                    const collections = [];\n                    // We can just sort this list using the default comparator since it\n                    // will only contain collection ids.\n                    collectionIds.sort();\n                    for (const collectionId of collectionIds) {\n                        collections.push(this.collection(collectionId));\n                    }\n                    return collections;\n                });\n            });\n        });\n    }\n    /**\n     * Create a document with the provided object values. This will fail the write\n     * if a document exists at its location.\n     *\n     * @param {DocumentData} data An object that contains the fields and data to\n     * serialize as the document.\n     * @throws {Error} If the provided input is not a valid Firestore document or if the document already exists.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this create.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * documentRef.create({foo: 'bar'}).then((res) => {\n     *   console.log(`Document created at ${res.updateTime}`);\n     * }).catch((err) => {\n     *   console.log(`Failed to create document: ${err}`);\n     * });\n     * ```\n     */\n    create(data) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_CREATE, () => {\n            const writeBatch = new index_1.WriteBatch(this._firestore);\n            return writeBatch\n                .create(this, data)\n                .commit()\n                .then(([writeResult]) => writeResult);\n        });\n    }\n    /**\n     * Deletes the document referred to by this `DocumentReference`.\n     *\n     * A delete for a non-existing document is treated as a success (unless\n     * lastUptimeTime is provided).\n     *\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the delete if the\n     * document was last updated at a different time.\n     * @param {boolean=} precondition.exists If set, enforces that the target\n     * document must or must not exist.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * delete time.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.delete().then(() => {\n     *   console.log('Document successfully deleted.');\n     * });\n     * ```\n     */\n    delete(precondition) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_DELETE, () => {\n            const writeBatch = new index_1.WriteBatch(this._firestore);\n            return writeBatch\n                .delete(this, precondition)\n                .commit()\n                .then(([writeResult]) => writeResult);\n        });\n    }\n    /**\n     * Writes to the document referred to by this DocumentReference. If the\n     * document does not yet exist, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into an\n     * existing document.\n     *\n     * @param {T|Partial<AppModelType>} data A map of the fields and values for\n     * the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge If true, set() merges the values specified\n     * in its data argument. Fields omitted from this set() call remain untouched.\n     * If your input sets any field to an empty map, all nested fields are\n     * overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this set.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({foo: 'bar'}).then(res => {\n     *   console.log(`Document written at ${res.updateTime}`);\n     * });\n     * ```\n     */\n    set(data, options) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_SET, () => {\n            let writeBatch = new index_1.WriteBatch(this._firestore);\n            if (options) {\n                writeBatch = writeBatch.set(this, data, options);\n            }\n            else {\n                writeBatch = writeBatch.set(this, data);\n            }\n            return writeBatch.commit().then(([writeResult]) => writeResult);\n        });\n    }\n    /**\n     * Updates fields in the document referred to by this DocumentReference.\n     * If the document doesn't yet exist, the update fails and the returned\n     * Promise will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n     * fields and values with which to update the document or the path of the\n     * first field to update.\n     * @param {\n     * ...(*|string|FieldPath|Precondition)} preconditionOrValues An alternating\n     * list of field paths and values to update or a Precondition to restrict\n     * this update.\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {Promise.<WriteResult>} A Promise that resolves once the\n     * data has been successfully written to the backend.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update({foo: 'bar'}).then(res => {\n     *   console.log(`Document updated at ${res.updateTime}`);\n     * });\n     * ```\n     */\n    update(dataOrField, ...preconditionOrValues) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_DOC_REF_UPDATE, () => {\n            // eslint-disable-next-line prefer-rest-params\n            (0, validate_1.validateMinNumberOfArguments)('DocumentReference.update', arguments, 1);\n            const writeBatch = new index_1.WriteBatch(this._firestore);\n            return writeBatch\n                .update(this, dataOrField, ...preconditionOrValues)\n                .commit()\n                .then(([writeResult]) => writeResult);\n        });\n    }\n    /**\n     * Attaches a listener for DocumentSnapshot events.\n     *\n     * @param {documentSnapshotCallback} onNext A callback to be called every\n     * time a new `DocumentSnapshot` is available.\n     * @param {errorCallback=} onError A callback to be called if the listen fails\n     * or is cancelled. No further callbacks will occur. If unset, errors will be\n     * logged to the console.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * let unsubscribe = documentRef.onSnapshot(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(documentSnapshot.data());\n     *   }\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     * ```\n     */\n    onSnapshot(onNext, onError) {\n        (0, validate_1.validateFunction)('onNext', onNext);\n        (0, validate_1.validateFunction)('onError', onError, { optional: true });\n        const watch = new (require('../watch').DocumentWatch)(this.firestore, this);\n        return watch.onSnapshot((readTime, size, docs) => {\n            for (const document of docs()) {\n                if (document.ref.path === this.path) {\n                    onNext(document);\n                    return;\n                }\n            }\n            // The document is missing.\n            const ref = new DocumentReference(this._firestore, this._path, this._converter);\n            const document = new document_1.DocumentSnapshotBuilder(ref);\n            document.readTime = readTime;\n            onNext(document.build());\n        }, onError || console.error);\n    }\n    /**\n     * Returns true if this `DocumentReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `DocumentReference` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof DocumentReference &&\n                this._firestore === other._firestore &&\n                this._path.isEqual(other._path) &&\n                this._converter === other._converter));\n    }\n    /**\n     * Converts this DocumentReference to the Firestore Proto representation.\n     *\n     * @private\n     * @internal\n     */\n    toProto() {\n        return { referenceValue: this.formattedName };\n    }\n    /**\n     * Applies a custom data converter to this DocumentReference, allowing you to\n     * use your own custom model objects with Firestore. When you call set(),\n     * get(), etc. on the returned DocumentReference instance, the provided\n     * converter will convert between Firestore data of type `NewDbModelType` and\n     * your custom type `NewAppModelType`.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * ```\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * ```\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A DocumentReference that uses the provided converter.\n     */\n    withConverter(converter) {\n        return new DocumentReference(this.firestore, this._path, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());\n    }\n}\nexports.DocumentReference = DocumentReference;\n//# sourceMappingURL=document-reference.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8472, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/document.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Precondition = exports.DocumentTransform = exports.DocumentMask = exports.QueryDocumentSnapshot = exports.DocumentSnapshot = exports.DocumentSnapshotBuilder = void 0;\nconst deepEqual = require(\"fast-deep-equal\");\nconst assert = require(\"assert\");\nconst field_value_1 = require(\"./field-value\");\nconst path_1 = require(\"./path\");\nconst document_reference_1 = require(\"./reference/document-reference\");\nconst types_1 = require(\"./types\");\nconst util_1 = require(\"./util\");\n/**\n * Returns a builder for DocumentSnapshot and QueryDocumentSnapshot instances.\n * Invoke `.build()' to assemble the final snapshot.\n *\n * @private\n * @internal\n */\nclass DocumentSnapshotBuilder {\n    // We include the DocumentReference in the constructor in order to allow the\n    // DocumentSnapshotBuilder to be typed with <AppModelType, DbModelType> when\n    // it is constructed.\n    constructor(ref) {\n        this.ref = ref;\n    }\n    /**\n     * Builds the DocumentSnapshot.\n     *\n     * @private\n     * @internal\n     * @returns Returns either a QueryDocumentSnapshot (if `fieldsProto` was\n     * provided) or a DocumentSnapshot.\n     */\n    build() {\n        assert((this.fieldsProto !== undefined) === (this.createTime !== undefined), 'Create time should be set iff document exists.');\n        assert((this.fieldsProto !== undefined) === (this.updateTime !== undefined), 'Update time should be set iff document exists.');\n        return this.fieldsProto\n            ? new QueryDocumentSnapshot(this.ref, this.fieldsProto, this.readTime, this.createTime, this.updateTime)\n            : new DocumentSnapshot(this.ref, undefined, this.readTime);\n    }\n}\nexports.DocumentSnapshotBuilder = DocumentSnapshotBuilder;\n/**\n * A DocumentSnapshot is an immutable representation for a document in a\n * Firestore database. The data can be extracted with\n * [data()]{@link DocumentSnapshot#data} or\n * [get(fieldPath)]{@link DocumentSnapshot#get} to get a\n * specific field.\n *\n * <p>For a DocumentSnapshot that points to a non-existing document, any data\n * access will return 'undefined'. You can use the\n * [exists]{@link DocumentSnapshot#exists} property to explicitly verify a\n * document's existence.\n *\n * @class DocumentSnapshot\n */\nclass DocumentSnapshot {\n    /**\n     * @private\n     * @internal\n     *\n     * @param ref The reference to the document.\n     * @param _fieldsProto The fields of the Firestore `Document` Protobuf backing\n     * this document (or undefined if the document does not exist).\n     * @param readTime The time when this snapshot was read  (or undefined if\n     * the document exists only locally).\n     * @param createTime The time when the document was created (or undefined if\n     * the document does not exist).\n     * @param updateTime The time when the document was last updated (or undefined\n     * if the document does not exist).\n     */\n    constructor(ref, \n    /**\n     * @internal\n     * @private\n     **/\n    _fieldsProto, readTime, createTime, updateTime) {\n        this._fieldsProto = _fieldsProto;\n        this._ref = ref;\n        this._serializer = ref.firestore._serializer;\n        this._readTime = readTime;\n        this._createTime = createTime;\n        this._updateTime = updateTime;\n    }\n    /**\n     * Creates a DocumentSnapshot from an object.\n     *\n     * @private\n     * @internal\n     * @param ref The reference to the document.\n     * @param obj The object to store in the DocumentSnapshot.\n     * @return The created DocumentSnapshot.\n     */\n    static fromObject(ref, obj) {\n        const serializer = ref.firestore._serializer;\n        return new DocumentSnapshot(ref, serializer.encodeFields(obj));\n    }\n    /**\n     * Creates a DocumentSnapshot from an UpdateMap.\n     *\n     * This methods expands the top-level field paths in a JavaScript map and\n     * turns { foo.bar : foobar } into { foo { bar : foobar }}\n     *\n     * @private\n     * @internal\n     * @param ref The reference to the document.\n     * @param data The field/value map to expand.\n     * @return The created DocumentSnapshot.\n     */\n    static fromUpdateMap(ref, data) {\n        const serializer = ref\n            .firestore._serializer;\n        /**\n         * Merges 'value' at the field path specified by the path array into\n         * 'target'.\n         */\n        function merge(target, value, path, pos) {\n            const key = path[pos];\n            const isLast = pos === path.length - 1;\n            if (target[key] === undefined) {\n                if (isLast) {\n                    if (value instanceof field_value_1.FieldTransform) {\n                        // If there is already data at this path, we need to retain it.\n                        // Otherwise, we don't include it in the DocumentSnapshot.\n                        return !(0, util_1.isEmpty)(target) ? target : null;\n                    }\n                    // The merge is done.\n                    const leafNode = serializer.encodeValue(value);\n                    if (leafNode) {\n                        target[key] = leafNode;\n                    }\n                    return target;\n                }\n                else {\n                    // We need to expand the target object.\n                    const childNode = {\n                        mapValue: {\n                            fields: {},\n                        },\n                    };\n                    const nestedValue = merge(childNode.mapValue.fields, value, path, pos + 1);\n                    if (nestedValue) {\n                        childNode.mapValue.fields = nestedValue;\n                        target[key] = childNode;\n                        return target;\n                    }\n                    else {\n                        return !(0, util_1.isEmpty)(target) ? target : null;\n                    }\n                }\n            }\n            else {\n                assert(!isLast, \"Can't merge current value into a nested object\");\n                target[key].mapValue.fields = merge(target[key].mapValue.fields, value, path, pos + 1);\n                return target;\n            }\n        }\n        const res = {};\n        for (const [key, value] of data) {\n            const path = key.toArray();\n            merge(res, value, path, 0);\n        }\n        return new DocumentSnapshot(ref, res);\n    }\n    /**\n     * True if the document exists.\n     *\n     * @type {boolean}\n     * @name DocumentSnapshot#exists\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then((documentSnapshot) => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(`Data: ${JSON.stringify(documentSnapshot.data())}`);\n     *   }\n     * });\n     * ```\n     */\n    get exists() {\n        return this._fieldsProto !== undefined;\n    }\n    /**\n     * A [DocumentReference]{@link DocumentReference} for the document\n     * stored in this snapshot.\n     *\n     * @type {DocumentReference}\n     * @name DocumentSnapshot#ref\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then((documentSnapshot) => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(`Found document at '${documentSnapshot.ref.path}'`);\n     *   }\n     * });\n     * ```\n     */\n    get ref() {\n        return this._ref;\n    }\n    /**\n     * The ID of the document for which this DocumentSnapshot contains data.\n     *\n     * @type {string}\n     * @name DocumentSnapshot#id\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then((documentSnapshot) => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(`Document found with name '${documentSnapshot.id}'`);\n     *   }\n     * });\n     * ```\n     */\n    get id() {\n        return this._ref.id;\n    }\n    /**\n     * The time the document was created. Undefined for documents that don't\n     * exist.\n     *\n     * @type {Timestamp|undefined}\n     * @name DocumentSnapshot#createTime\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     let createTime = documentSnapshot.createTime;\n     *     console.log(`Document created at '${createTime.toDate()}'`);\n     *   }\n     * });\n     * ```\n     */\n    get createTime() {\n        return this._createTime;\n    }\n    /**\n     * The time the document was last updated (at the time the snapshot was\n     * generated). Undefined for documents that don't exist.\n     *\n     * @type {Timestamp|undefined}\n     * @name DocumentSnapshot#updateTime\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     let updateTime = documentSnapshot.updateTime;\n     *     console.log(`Document updated at '${updateTime.toDate()}'`);\n     *   }\n     * });\n     * ```\n     */\n    get updateTime() {\n        return this._updateTime;\n    }\n    /**\n     * The time this snapshot was read.\n     *\n     * @type {Timestamp}\n     * @name DocumentSnapshot#readTime\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   let readTime = documentSnapshot.readTime;\n     *   console.log(`Document read at '${readTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get readTime() {\n        if (this._readTime === undefined) {\n            throw new Error(\"Called 'readTime' on a local document\");\n        }\n        return this._readTime;\n    }\n    /**\n     * Retrieves all fields in the document as an object. Returns 'undefined' if\n     * the document doesn't exist.\n     *\n     * @returns {T|undefined} An object containing all fields in the document or\n     * 'undefined' if the document doesn't exist.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   let data = documentSnapshot.data();\n     *   console.log(`Retrieved data: ${JSON.stringify(data)}`);\n     * });\n     * ```\n     */\n    data() {\n        const fields = this._fieldsProto;\n        if (fields === undefined) {\n            return undefined;\n        }\n        // We only want to use the converter and create a new QueryDocumentSnapshot\n        // if a converter has been provided.\n        if (this.ref._converter !== (0, types_1.defaultConverter)()) {\n            const untypedReference = new document_reference_1.DocumentReference(this.ref.firestore, this.ref._path);\n            return this.ref._converter.fromFirestore(new QueryDocumentSnapshot(untypedReference, this._fieldsProto, this.readTime, this.createTime, this.updateTime));\n        }\n        else {\n            const obj = {};\n            for (const prop of Object.keys(fields)) {\n                obj[prop] = this._serializer.decodeValue(fields[prop]);\n            }\n            return obj;\n        }\n    }\n    /**\n     * Retrieves the field specified by `field`.\n     *\n     * @param {string|FieldPath} field The field path\n     * (e.g. 'foo' or 'foo.bar') to a specific field.\n     * @returns {*} The data at the specified field location or undefined if no\n     * such field exists.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({ a: { b: 'c' }}).then(() => {\n     *   return documentRef.get();\n     * }).then(documentSnapshot => {\n     *   let field = documentSnapshot.get('a.b');\n     *   console.log(`Retrieved field value: ${field}`);\n     * });\n     * ```\n     */\n    // We deliberately use `any` in the external API to not impose type-checking\n    // on end users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(field) {\n        (0, path_1.validateFieldPath)('field', field);\n        const protoField = this.protoField(field);\n        if (protoField === undefined) {\n            return undefined;\n        }\n        return this._serializer.decodeValue(protoField);\n    }\n    /**\n     * Retrieves the field specified by 'fieldPath' in its Protobuf JS\n     * representation.\n     *\n     * @private\n     * @internal\n     * @param field The path (e.g. 'foo' or 'foo.bar') to a specific field.\n     * @returns The Protobuf-encoded data at the specified field location or\n     * undefined if no such field exists.\n     */\n    protoField(field) {\n        let fields = this._fieldsProto;\n        if (fields === undefined) {\n            return undefined;\n        }\n        const components = path_1.FieldPath.fromArgument(field).toArray();\n        while (components.length > 1) {\n            fields = fields[components.shift()];\n            if (!fields || !fields.mapValue) {\n                return undefined;\n            }\n            fields = fields.mapValue.fields;\n        }\n        return fields[components[0]];\n    }\n    /**\n     * Convert a document snapshot to the Firestore 'Write' proto.\n     *\n     * @private\n     * @internal\n     */\n    toWriteProto() {\n        return {\n            update: {\n                name: this._ref.formattedName,\n                fields: this._fieldsProto,\n            },\n        };\n    }\n    /**\n     * Convert a document snapshot to the Firestore 'Document' proto.\n     *\n     * @private\n     * @internal\n     */\n    toDocumentProto() {\n        var _a, _b;\n        return {\n            name: this._ref.formattedName,\n            createTime: (_a = this.createTime) === null || _a === void 0 ? void 0 : _a.toProto().timestampValue,\n            updateTime: (_b = this.updateTime) === null || _b === void 0 ? void 0 : _b.toProto().timestampValue,\n            fields: this._fieldsProto,\n        };\n    }\n    /**\n     * Returns true if the document's data and path in this `DocumentSnapshot` is\n     * equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `DocumentSnapshot` is equal to the provided\n     * value.\n     */\n    isEqual(other) {\n        // Since the read time is different on every document read, we explicitly\n        // ignore all document metadata in this comparison.\n        return (this === other ||\n            (other instanceof DocumentSnapshot &&\n                this._ref.isEqual(other._ref) &&\n                deepEqual(this._fieldsProto, other._fieldsProto)));\n    }\n}\nexports.DocumentSnapshot = DocumentSnapshot;\n/**\n * A QueryDocumentSnapshot contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with [data()]{@link QueryDocumentSnapshot#data}\n * or [get()]{@link DocumentSnapshot#get} to get a specific field.\n *\n * A QueryDocumentSnapshot offers the same API surface as a\n * {@link DocumentSnapshot}. Since query results contain only existing\n * documents, the [exists]{@link DocumentSnapshot#exists} property will\n * always be true and [data()]{@link QueryDocumentSnapshot#data} will never\n * return 'undefined'.\n *\n * @class QueryDocumentSnapshot\n * @extends DocumentSnapshot\n */\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n    /**\n     * The time the document was created.\n     *\n     * @type {Timestamp}\n     * @name QueryDocumentSnapshot#createTime\n     * @readonly\n     * @override\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.get().forEach(snapshot => {\n     *   console.log(`Document created at '${snapshot.createTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get createTime() {\n        return super.createTime;\n    }\n    /**\n     * The time the document was last updated (at the time the snapshot was\n     * generated).\n     *\n     * @type {Timestamp}\n     * @name QueryDocumentSnapshot#updateTime\n     * @readonly\n     * @override\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.get().forEach(snapshot => {\n     *   console.log(`Document updated at '${snapshot.updateTime.toDate()}'`);\n     * });\n     * ```\n     */\n    get updateTime() {\n        return super.updateTime;\n    }\n    /**\n     * Retrieves all fields in the document as an object.\n     *\n     * @override\n     *\n     * @returns {T} An object containing all fields in the document.\n     *\n     * @example\n     * ```\n     * let query = firestore.collection('col');\n     *\n     * query.get().forEach(documentSnapshot => {\n     *   let data = documentSnapshot.data();\n     *   console.log(`Retrieved data: ${JSON.stringify(data)}`);\n     * });\n     * ```\n     */\n    data() {\n        const data = super.data();\n        if (!data) {\n            throw new Error('The data in a QueryDocumentSnapshot should always exist.');\n        }\n        return data;\n    }\n}\nexports.QueryDocumentSnapshot = QueryDocumentSnapshot;\n/**\n * A Firestore Document Mask contains the field paths affected by an update.\n *\n * @class\n * @private\n * @internal\n */\nclass DocumentMask {\n    /**\n     * @private\n     * @internal\n     * @private\n     *\n     * @param fieldPaths The field paths in this mask.\n     */\n    constructor(fieldPaths) {\n        this._sortedPaths = fieldPaths;\n        this._sortedPaths.sort((a, b) => a.compareTo(b));\n    }\n    /**\n     * Creates a document mask with the field paths of a document.\n     *\n     * @private\n     * @internal\n     * @param data A map with fields to modify. Only the keys are used to extract\n     * the document mask.\n     */\n    static fromUpdateMap(data) {\n        const fieldPaths = [];\n        data.forEach((value, key) => {\n            if (!(value instanceof field_value_1.FieldTransform) || value.includeInDocumentMask) {\n                fieldPaths.push(path_1.FieldPath.fromArgument(key));\n            }\n        });\n        return new DocumentMask(fieldPaths);\n    }\n    /**\n     * Creates a document mask from an array of field paths.\n     *\n     * @private\n     * @internal\n     * @param fieldMask A list of field paths.\n     */\n    static fromFieldMask(fieldMask) {\n        const fieldPaths = [];\n        for (const fieldPath of fieldMask) {\n            fieldPaths.push(path_1.FieldPath.fromArgument(fieldPath));\n        }\n        return new DocumentMask(fieldPaths);\n    }\n    /**\n     * Creates a document mask with the field names of a document.\n     *\n     * @private\n     * @internal\n     * @param data An object with fields to modify. Only the keys are used to\n     * extract the document mask.\n     */\n    static fromObject(data) {\n        const fieldPaths = [];\n        function extractFieldPaths(currentData, currentPath) {\n            let isEmpty = true;\n            for (const key of Object.keys(currentData)) {\n                isEmpty = false;\n                // We don't split on dots since fromObject is called with\n                // DocumentData.\n                const childSegment = new path_1.FieldPath(key);\n                const childPath = currentPath\n                    ? currentPath.append(childSegment)\n                    : childSegment;\n                const value = currentData[key];\n                if (value instanceof field_value_1.FieldTransform) {\n                    if (value.includeInDocumentMask) {\n                        fieldPaths.push(childPath);\n                    }\n                }\n                else if ((0, util_1.isPlainObject)(value)) {\n                    extractFieldPaths(value, childPath);\n                }\n                else if (value !== undefined) {\n                    // If the value is undefined it can never participate in the document\n                    // mask. With `ignoreUndefinedProperties` set to false,\n                    // `validateDocumentData` will reject an undefined value before even\n                    // computing the document mask.\n                    fieldPaths.push(childPath);\n                }\n            }\n            // Add a field path for an explicitly updated empty map.\n            if (currentPath && isEmpty) {\n                fieldPaths.push(currentPath);\n            }\n        }\n        extractFieldPaths(data);\n        return new DocumentMask(fieldPaths);\n    }\n    /**\n     * Returns true if this document mask contains no fields.\n     *\n     * @private\n     * @internal\n     * @return {boolean} Whether this document mask is empty.\n     */\n    get isEmpty() {\n        return this._sortedPaths.length === 0;\n    }\n    /**\n     * Removes the specified values from a sorted field path array.\n     *\n     * @private\n     * @internal\n     * @param input A sorted array of FieldPaths.\n     * @param values An array of FieldPaths to remove.\n     */\n    static removeFromSortedArray(input, values) {\n        for (let i = 0; i < input.length;) {\n            let removed = false;\n            for (const fieldPath of values) {\n                if (input[i].isEqual(fieldPath)) {\n                    input.splice(i, 1);\n                    removed = true;\n                    break;\n                }\n            }\n            if (!removed) {\n                ++i;\n            }\n        }\n    }\n    /**\n     * Removes the field path specified in 'fieldPaths' from this document mask.\n     *\n     * @private\n     * @internal\n     * @param fieldPaths An array of FieldPaths.\n     */\n    removeFields(fieldPaths) {\n        DocumentMask.removeFromSortedArray(this._sortedPaths, fieldPaths);\n    }\n    /**\n     * Returns whether this document mask contains 'fieldPath'.\n     *\n     * @private\n     * @internal\n     * @param fieldPath The field path to test.\n     * @return Whether this document mask contains 'fieldPath'.\n     */\n    contains(fieldPath) {\n        for (const sortedPath of this._sortedPaths) {\n            const cmp = sortedPath.compareTo(fieldPath);\n            if (cmp === 0) {\n                return true;\n            }\n            else if (cmp > 0) {\n                return false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Removes all properties from 'data' that are not contained in this document\n     * mask.\n     *\n     * @private\n     * @internal\n     * @param data An object to filter.\n     * @return A shallow copy of the object filtered by this document mask.\n     */\n    applyTo(data) {\n        /*!\n         * Applies this DocumentMask to 'data' and computes the list of field paths\n         * that were specified in the mask but are not present in 'data'.\n         */\n        const applyDocumentMask = data => {\n            const remainingPaths = this._sortedPaths.slice(0);\n            const processObject = (currentData, currentPath) => {\n                let result = null;\n                Object.keys(currentData).forEach(key => {\n                    const childPath = currentPath\n                        ? currentPath.append(key)\n                        : new path_1.FieldPath(key);\n                    if (this.contains(childPath)) {\n                        DocumentMask.removeFromSortedArray(remainingPaths, [childPath]);\n                        result = result || {};\n                        result[key] = currentData[key];\n                    }\n                    else if ((0, util_1.isObject)(currentData[key])) {\n                        const childObject = processObject(currentData[key], childPath);\n                        if (childObject) {\n                            result = result || {};\n                            result[key] = childObject;\n                        }\n                    }\n                });\n                return result;\n            };\n            // processObject() returns 'null' if the DocumentMask is empty.\n            const filteredData = processObject(data) || {};\n            return {\n                filteredData,\n                remainingPaths,\n            };\n        };\n        const result = applyDocumentMask(data);\n        if (result.remainingPaths.length !== 0) {\n            throw new Error(`Input data is missing for field \"${result.remainingPaths[0]}\".`);\n        }\n        return result.filteredData;\n    }\n    /**\n     * Converts a document mask to the Firestore 'DocumentMask' Proto.\n     *\n     * @private\n     * @internal\n     * @returns A Firestore 'DocumentMask' Proto.\n     */\n    toProto() {\n        if (this.isEmpty) {\n            return {};\n        }\n        const encodedPaths = [];\n        for (const fieldPath of this._sortedPaths) {\n            encodedPaths.push(fieldPath.formattedName);\n        }\n        return {\n            fieldPaths: encodedPaths,\n        };\n    }\n}\nexports.DocumentMask = DocumentMask;\n/**\n * A Firestore Document Transform.\n *\n * A DocumentTransform contains pending server-side transforms and their\n * corresponding field paths.\n *\n * @private\n * @internal\n * @class\n */\nclass DocumentTransform {\n    /**\n     * @private\n     * @internal\n     * @private\n     *\n     * @param ref The DocumentReference for this transform.\n     * @param transforms A Map of FieldPaths to FieldTransforms.\n     */\n    constructor(ref, transforms) {\n        this.ref = ref;\n        this.transforms = transforms;\n    }\n    /**\n     * Generates a DocumentTransform from a JavaScript object.\n     *\n     * @private\n     * @internal\n     * @param ref The `DocumentReference` to use for the DocumentTransform.\n     * @param obj The object to extract the transformations from.\n     * @returns The Document Transform.\n     */\n    static fromObject(ref, obj) {\n        const updateMap = new Map();\n        for (const prop of Object.keys(obj)) {\n            updateMap.set(new path_1.FieldPath(prop), obj[prop]);\n        }\n        return DocumentTransform.fromUpdateMap(ref, updateMap);\n    }\n    /**\n     * Generates a DocumentTransform from an Update Map.\n     *\n     * @private\n     * @internal\n     * @param ref The `DocumentReference` to use for the DocumentTransform.\n     * @param data The update data to extract the transformations from.\n     * @returns The Document Transform.\n     */\n    static fromUpdateMap(ref, data) {\n        const transforms = new Map();\n        function encode_(val, path, allowTransforms) {\n            if (val instanceof field_value_1.FieldTransform && val.includeInDocumentTransform) {\n                if (allowTransforms) {\n                    transforms.set(path, val);\n                }\n                else {\n                    throw new Error(`${val.methodName}() is not supported inside of array values.`);\n                }\n            }\n            else if (Array.isArray(val)) {\n                for (let i = 0; i < val.length; ++i) {\n                    // We need to verify that no array value contains a document transform\n                    encode_(val[i], path.append(String(i)), false);\n                }\n            }\n            else if ((0, util_1.isPlainObject)(val)) {\n                for (const prop of Object.keys(val)) {\n                    encode_(val[prop], path.append(new path_1.FieldPath(prop)), allowTransforms);\n                }\n            }\n        }\n        data.forEach((value, key) => {\n            encode_(value, path_1.FieldPath.fromArgument(key), true);\n        });\n        return new DocumentTransform(ref, transforms);\n    }\n    /**\n     * Whether this DocumentTransform contains any actionable transformations.\n     *\n     * @private\n     * @internal\n     */\n    get isEmpty() {\n        return this.transforms.size === 0;\n    }\n    /**\n     * Returns the array of fields in this DocumentTransform.\n     *\n     * @private\n     * @internal\n     */\n    get fields() {\n        return Array.from(this.transforms.keys());\n    }\n    /**\n     * Validates the user provided field values in this document transform.\n     * @private\n     * @internal\n     */\n    validate() {\n        const allowUndefined = !!this.ref.firestore._settings.ignoreUndefinedProperties;\n        this.transforms.forEach(transform => transform.validate(allowUndefined));\n    }\n    /**\n     * Converts a document transform to the Firestore 'FieldTransform' Proto.\n     *\n     * @private\n     * @internal\n     * @param serializer The Firestore serializer\n     * @returns A list of Firestore 'FieldTransform' Protos\n     */\n    toProto(serializer) {\n        return Array.from(this.transforms, ([path, transform]) => transform.toProto(serializer, path));\n    }\n}\nexports.DocumentTransform = DocumentTransform;\n/**\n * A Firestore Precondition encapsulates options for database writes.\n *\n * @private\n * @internal\n * @class\n */\nclass Precondition {\n    /**\n     * @private\n     * @internal\n     * @private\n     *\n     * @param options.exists - Whether the referenced document should exist in\n     * Firestore,\n     * @param options.lastUpdateTime - The last update time of the referenced\n     * document in Firestore.\n     * @param options\n     */\n    constructor(options) {\n        if (options !== undefined) {\n            this._exists = options.exists;\n            this._lastUpdateTime = options.lastUpdateTime;\n        }\n    }\n    /**\n     * Generates the Protobuf `Preconditon` object for this precondition.\n     *\n     * @private\n     * @internal\n     * @returns The `Preconditon` Protobuf object or 'null' if there are no\n     * preconditions.\n     */\n    toProto() {\n        if (this.isEmpty) {\n            return null;\n        }\n        const proto = {};\n        if (this._lastUpdateTime !== undefined) {\n            proto.updateTime = this._lastUpdateTime.toProto().timestampValue;\n        }\n        else {\n            proto.exists = this._exists;\n        }\n        return proto;\n    }\n    /**\n     * Whether this DocumentTransform contains any enforcement.\n     *\n     * @private\n     * @internal\n     */\n    get isEmpty() {\n        return this._exists === undefined && !this._lastUpdateTime;\n    }\n}\nexports.Precondition = Precondition;\n//# sourceMappingURL=document.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9344, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/write-batch.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WriteBatch = exports.WriteResult = void 0;\nexports.validateSetOptions = validateSetOptions;\nexports.validateDocumentData = validateDocumentData;\nexports.validateFieldValue = validateFieldValue;\nconst document_1 = require(\"./document\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst helpers_1 = require(\"./reference/helpers\");\nconst serializer_1 = require(\"./serializer\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst trace_util_1 = require(\"./telemetry/trace-util\");\n/**\n * A WriteResult wraps the write time set by the Firestore servers on sets(),\n * updates(), and creates().\n *\n * @class WriteResult\n */\nclass WriteResult {\n    /**\n     * @private\n     *\n     * @param _writeTime The time of the corresponding document write.\n     */\n    constructor(_writeTime) {\n        this._writeTime = _writeTime;\n    }\n    /**\n     * The write time as set by the Firestore servers.\n     *\n     * @type {Timestamp}\n     * @name WriteResult#writeTime\n     * @readonly\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({foo: 'bar'}).then(writeResult => {\n     *   console.log(`Document written at: ${writeResult.writeTime.toDate()}`);\n     * });\n     * ```\n     */\n    get writeTime() {\n        return this._writeTime;\n    }\n    /**\n     * Returns true if this `WriteResult` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return true if this `WriteResult` is equal to the provided value.\n     */\n    isEqual(other) {\n        return (this === other ||\n            (other instanceof WriteResult &&\n                this._writeTime.isEqual(other._writeTime)));\n    }\n}\nexports.WriteResult = WriteResult;\n/**\n * A Firestore WriteBatch that can be used to atomically commit multiple write\n * operations at once.\n *\n * @class WriteBatch\n */\nclass WriteBatch {\n    /**\n     * The number of writes in this batch.\n     * @private\n     * @internal\n     */\n    get _opCount() {\n        return this._ops.length;\n    }\n    /** @private */\n    constructor(firestore) {\n        /**\n         * An array of document paths and the corresponding write operations that are\n         * executed as part of the commit. The resulting `api.IWrite` will be sent to\n         * the backend.\n         *\n         * @private\n         * @internal\n         */\n        this._ops = [];\n        this._committed = false;\n        this._firestore = firestore;\n        this._serializer = new serializer_1.Serializer(firestore);\n        this._allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n    }\n    /**\n     * Checks if this write batch has any pending operations.\n     *\n     * @private\n     * @internal\n     */\n    get isEmpty() {\n        return this._ops.length === 0;\n    }\n    /**\n     * Throws an error if this batch has already been committed.\n     *\n     * @private\n     * @internal\n     */\n    verifyNotCommitted() {\n        if (this._committed) {\n            throw new Error('Cannot modify a WriteBatch that has been committed.');\n        }\n    }\n    /**\n     * Create a document with the provided object values. This will fail the batch\n     * if a document exists at its location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {T} data The object to serialize as the document.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * writeBatch.create(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    create(documentRef, data) {\n        const ref = (0, helpers_1.validateDocumentReference)('documentRef', documentRef);\n        const firestoreData = ref._converter.toFirestore(data);\n        validateDocumentData('data', firestoreData, \n        /* allowDeletes= */ false, this._allowUndefined);\n        this.verifyNotCommitted();\n        const transform = document_1.DocumentTransform.fromObject(ref, firestoreData);\n        transform.validate();\n        const precondition = new document_1.Precondition({ exists: false });\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromObject(ref, firestoreData);\n            const write = document.toWriteProto();\n            if (!transform.isEmpty) {\n                write.updateTransforms = transform.toProto(this._serializer);\n            }\n            write.currentDocument = precondition.toProto();\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Deletes a document from the database.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the batch if the\n     * document doesn't exist or was last updated at a different time.\n     * @param {boolean= } precondition.exists If set to true, enforces that the target\n     * document must or must not exist.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.delete(documentRef);\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    delete(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    documentRef, precondition) {\n        const ref = (0, helpers_1.validateDocumentReference)('documentRef', documentRef);\n        validateDeletePrecondition('precondition', precondition, { optional: true });\n        this.verifyNotCommitted();\n        const conditions = new document_1.Precondition(precondition);\n        const op = () => {\n            const write = { delete: ref.formattedName };\n            if (!conditions.isEmpty) {\n                write.currentDocument = conditions.toProto();\n            }\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Write to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document does not\n     * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions},\n     * the provided data can be merged into the existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T|Partial<T>} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call\n     * remain untouched. If your input sets any field to an empty map, all nested\n     * fields are overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is no\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    set(documentRef, data, options) {\n        validateSetOptions('options', options, { optional: true });\n        const mergeLeaves = options && 'merge' in options && options.merge;\n        const mergePaths = options && 'mergeFields' in options;\n        const ref = (0, helpers_1.validateDocumentReference)('documentRef', documentRef);\n        let firestoreData;\n        if (mergeLeaves || mergePaths) {\n            firestoreData = ref._converter.toFirestore(data, options);\n        }\n        else {\n            firestoreData = ref._converter.toFirestore(data);\n        }\n        validateDocumentData('data', firestoreData, \n        /* allowDeletes= */ !!(mergePaths || mergeLeaves), this._allowUndefined);\n        this.verifyNotCommitted();\n        let documentMask;\n        if (mergePaths) {\n            documentMask = document_1.DocumentMask.fromFieldMask(options.mergeFields);\n            firestoreData = documentMask.applyTo(firestoreData);\n        }\n        const transform = document_1.DocumentTransform.fromObject(ref, firestoreData);\n        transform.validate();\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromObject(ref, firestoreData);\n            if (mergePaths) {\n                documentMask.removeFields(transform.fields);\n            }\n            else if (mergeLeaves) {\n                documentMask = document_1.DocumentMask.fromObject(firestoreData);\n            }\n            const write = document.toWriteProto();\n            if (!transform.isEmpty) {\n                write.updateTransforms = transform.toProto(this._serializer);\n            }\n            if (mergePaths || mergeLeaves) {\n                write.updateMask = documentMask.toProto();\n            }\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Update fields of the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * doesn't yet exist, the update fails and the entire batch will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to restrict this update.\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {WriteBatch} This WriteBatch instance. Used for chaining\n     * method calls.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.update(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('WriteBatch.update', arguments, 2);\n        (0, helpers_1.validateDocumentReference)('documentRef', documentRef);\n        this.verifyNotCommitted();\n        const updateMap = new Map();\n        let precondition = new document_1.Precondition({ exists: true });\n        const argumentError = 'Update() requires either a single JavaScript ' +\n            'object or an alternating list of field/value pairs that can be ' +\n            'followed by an optional precondition.';\n        const usesVarargs = typeof dataOrField === 'string' || dataOrField instanceof path_1.FieldPath;\n        if (usesVarargs) {\n            const argumentOffset = 1; // Respect 'documentRef' in the error message\n            const fieldOrValues = [dataOrField, ...preconditionOrValues];\n            try {\n                for (let i = 0; i < fieldOrValues.length; i += 2) {\n                    if (i === fieldOrValues.length - 1) {\n                        const maybePrecondition = fieldOrValues[i];\n                        validateUpdatePrecondition(i + argumentOffset, maybePrecondition);\n                        precondition = new document_1.Precondition(maybePrecondition);\n                    }\n                    else {\n                        const maybeFieldPath = fieldOrValues[i];\n                        (0, path_1.validateFieldPath)(i + argumentOffset, maybeFieldPath);\n                        // Unlike the `validateMinNumberOfArguments` invocation above, this\n                        // validation can be triggered both from `WriteBatch.update()` and\n                        // `DocumentReference.update()`. Hence, we don't use the fully\n                        // qualified API name in the error message.\n                        (0, validate_1.validateMinNumberOfArguments)('update', fieldOrValues, i + 1);\n                        const fieldPath = path_1.FieldPath.fromArgument(maybeFieldPath);\n                        validateFieldValue(i + argumentOffset, fieldOrValues[i + 1], this._allowUndefined, fieldPath);\n                        updateMap.set(fieldPath, fieldOrValues[i + 1]);\n                    }\n                }\n            }\n            catch (err) {\n                (0, logger_1.logger)('WriteBatch.update', null, 'Varargs validation failed:', err);\n                // We catch the validation error here and re-throw to provide a better\n                // error message.\n                throw new Error(`${argumentError} ${err.message}`);\n            }\n        }\n        else {\n            try {\n                validateUpdateMap('dataOrField', dataOrField, this._allowUndefined);\n                // eslint-disable-next-line prefer-rest-params\n                (0, validate_1.validateMaxNumberOfArguments)('update', arguments, 3);\n                Object.entries(dataOrField).forEach(([key, value]) => {\n                    // Skip `undefined` values (can be hit if `ignoreUndefinedProperties`\n                    // is set)\n                    if (value !== undefined) {\n                        (0, path_1.validateFieldPath)(key, key);\n                        updateMap.set(path_1.FieldPath.fromArgument(key), value);\n                    }\n                });\n                if (preconditionOrValues.length > 0) {\n                    validateUpdatePrecondition('preconditionOrValues', preconditionOrValues[0]);\n                    precondition = new document_1.Precondition(preconditionOrValues[0]);\n                }\n            }\n            catch (err) {\n                (0, logger_1.logger)('WriteBatch.update', null, 'Non-varargs validation failed:', err);\n                // We catch the validation error here and prefix the error with a custom\n                // message to describe the usage of update() better.\n                throw new Error(`${argumentError} ${err.message}`);\n            }\n        }\n        validateNoConflictingFields('dataOrField', updateMap);\n        const transform = document_1.DocumentTransform.fromUpdateMap(documentRef, updateMap);\n        transform.validate();\n        const documentMask = document_1.DocumentMask.fromUpdateMap(updateMap);\n        const op = () => {\n            const document = document_1.DocumentSnapshot.fromUpdateMap(documentRef, updateMap);\n            const write = document.toWriteProto();\n            write.updateMask = documentMask.toProto();\n            if (!transform.isEmpty) {\n                write.updateTransforms = transform.toProto(this._serializer);\n            }\n            write.currentDocument = precondition.toProto();\n            return write;\n        };\n        this._ops.push({ docPath: documentRef.path, op });\n        return this;\n    }\n    /**\n     * Atomically commits all pending operations to the database and verifies all\n     * preconditions. Fails the entire write if any precondition is not met.\n     *\n     * @returns {Promise.<Array.<WriteResult>>} A Promise that resolves\n     * when this batch completes.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * writeBatch.set(documentRef, {foo: 'bar'});\n     *\n     * writeBatch.commit().then(() => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    commit() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_BATCH_COMMIT, async () => {\n            // Capture the error stack to preserve stack tracing across async calls.\n            const stack = Error().stack;\n            // Commits should also be retried when they fail with status code ABORTED.\n            const retryCodes = [10 /* StatusCode.ABORTED */, ...(0, util_1.getRetryCodes)('commit')];\n            return this._commit({ retryCodes })\n                .then(response => {\n                return (response.writeResults || []).map(writeResult => new WriteResult(timestamp_1.Timestamp.fromProto(writeResult.updateTime || response.commitTime)));\n            })\n                .catch(err => {\n                throw (0, util_1.wrapError)(err, stack);\n            });\n        }, {\n            [trace_util_1.ATTRIBUTE_KEY_IS_TRANSACTIONAL]: false,\n            [trace_util_1.ATTRIBUTE_KEY_DOC_COUNT]: this._opCount,\n        });\n    }\n    /**\n     * Commit method that takes an optional transaction ID.\n     *\n     * @private\n     * @internal\n     * @param commitOptions Options to use for this commit.\n     * @param commitOptions.transactionId The transaction ID of this commit.\n     * @param commitOptions.requestTag A unique client-assigned identifier for\n     * this request.\n     * @returns  A Promise that resolves when this batch completes.\n     */\n    async _commit(commitOptions) {\n        var _a;\n        // Note: We don't call `verifyNotCommitted()` to allow for retries.\n        this._committed = true;\n        const tag = (_a = commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.requestTag) !== null && _a !== void 0 ? _a : (0, util_1.requestTag)();\n        await this._firestore.initializeIfNeeded(tag);\n        // Note that the request may not always be of type ICommitRequest. This is\n        // just here to ensure type safety.\n        const request = {\n            database: this._firestore.formattedName,\n            writes: this._ops.map(op => op.op()),\n        };\n        if (commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.transactionId) {\n            request.transaction = commitOptions.transactionId;\n        }\n        (0, logger_1.logger)('WriteBatch.commit', tag, 'Sending %d writes', request.writes.length);\n        return this._firestore.request((commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.methodName) || 'commit', request, tag, commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.retryCodes);\n    }\n    /**\n     * Resets the WriteBatch and dequeues all pending operations.\n     * @private\n     * @internal\n     */\n    _reset() {\n        this._ops.splice(0);\n        this._committed = false;\n    }\n}\nexports.WriteBatch = WriteBatch;\n/**\n * Validates the use of 'value' as a Precondition and enforces that 'exists'\n * and 'lastUpdateTime' use valid types.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate\n * @param options Options describing other things for this function to validate.\n */\nfunction validatePrecondition(arg, value, options) {\n    if (typeof value !== 'object' || value === null) {\n        throw new Error('Input is not an object.');\n    }\n    const precondition = value;\n    let conditions = 0;\n    if (precondition.exists !== undefined) {\n        ++conditions;\n        if (typeof precondition.exists !== 'boolean') {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'precondition')} \"exists\" is not a boolean.'`);\n        }\n        if ((options === null || options === void 0 ? void 0 : options.allowedExistsValues) &&\n            options.allowedExistsValues.indexOf(precondition.exists) < 0) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'precondition')} ` +\n                `\"exists\" is not allowed to have the value ${precondition.exists} ` +\n                `(allowed values: ${options.allowedExistsValues.join(', ')})`);\n        }\n    }\n    if (precondition.lastUpdateTime !== undefined) {\n        ++conditions;\n        if (!(precondition.lastUpdateTime instanceof timestamp_1.Timestamp)) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'precondition')} \"lastUpdateTime\" is not a Firestore Timestamp.`);\n        }\n    }\n    if (conditions > 1) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'precondition')} Input specifies more than one precondition.`);\n    }\n}\n/**\n * Validates the use of 'value' as an update Precondition.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\nfunction validateUpdatePrecondition(arg, value, options) {\n    if (!(0, validate_1.validateOptional)(value, options)) {\n        validatePrecondition(arg, value, { allowedExistsValues: [true] });\n    }\n}\n/**\n * Validates the use of 'value' as a delete Precondition.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n */\nfunction validateDeletePrecondition(arg, value, options) {\n    if (!(0, validate_1.validateOptional)(value, options)) {\n        validatePrecondition(arg, value);\n    }\n}\n/**\n * Validates the use of 'value' as SetOptions and enforces that 'merge' is a\n * boolean.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The object to validate.\n * @param options Optional validation options specifying whether the value can\n * be omitted.\n * @throws if the input is not a valid SetOptions object.\n */\nfunction validateSetOptions(arg, value, options) {\n    if (!(0, validate_1.validateOptional)(value, options)) {\n        if (!(0, util_1.isObject)(value)) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'set() options argument')} Input is not an object.`);\n        }\n        const setOptions = value;\n        if ('mergeFields' in setOptions) {\n            for (let i = 0; i < setOptions.mergeFields.length; ++i) {\n                try {\n                    (0, path_1.validateFieldPath)(i, setOptions.mergeFields[i]);\n                }\n                catch (err) {\n                    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'set() options argument')} \"mergeFields\" is not valid: ${err.message}`);\n                }\n            }\n        }\n        if ('merge' in setOptions && 'mergeFields' in setOptions) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'set() options argument')} You cannot specify both \"merge\" and \"mergeFields\".`);\n        }\n    }\n}\n/**\n * Validates a JavaScript object for usage as a Firestore document.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowDeletes Whether to allow FieldValue.delete() sentinels.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @throws when the object is invalid.\n */\nfunction validateDocumentData(arg, obj, allowDeletes, allowUndefined) {\n    if (!(0, util_1.isPlainObject)(obj)) {\n        throw new Error((0, validate_1.customObjectMessage)(arg, obj));\n    }\n    (0, serializer_1.validateUserInput)(arg, obj, 'Firestore document', {\n        allowDeletes: allowDeletes ? 'all' : 'none',\n        allowTransforms: true,\n        allowUndefined,\n    });\n}\n/**\n * Validates that a value can be used as field value during an update.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param val The value to verify.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @param path The path to show in the error message.\n */\nfunction validateFieldValue(arg, val, allowUndefined, path) {\n    (0, serializer_1.validateUserInput)(arg, val, 'Firestore value', { allowDeletes: 'root', allowTransforms: true, allowUndefined }, path);\n}\n/**\n * Validates that the update data does not contain any ambiguous field\n * definitions (such as 'a.b' and 'a').\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param data An update map with field/value pairs.\n */\nfunction validateNoConflictingFields(arg, data) {\n    const fields = [];\n    data.forEach((value, key) => {\n        fields.push(key);\n    });\n    fields.sort((left, right) => left.compareTo(right));\n    for (let i = 1; i < fields.length; ++i) {\n        if (fields[i - 1].isPrefixOf(fields[i])) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'update map')} Field \"${fields[i - 1]}\" was specified multiple times.`);\n        }\n    }\n}\n/**\n * Validates that a JavaScript object is a map of field paths to field values.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param obj JavaScript object to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n * @throws when the object is invalid.\n */\nfunction validateUpdateMap(arg, obj, allowUndefined) {\n    if (!(0, util_1.isPlainObject)(obj)) {\n        throw new Error((0, validate_1.customObjectMessage)(arg, obj));\n    }\n    if (Object.keys(obj).length === 0) {\n        throw new Error('At least one field must be updated.');\n    }\n    validateFieldValue(arg, obj, allowUndefined);\n}\n//# sourceMappingURL=write-batch.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10011, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/bulk-writer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BulkWriter = exports.BulkWriterError = exports.DEFAULT_JITTER_FACTOR = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = exports.RETRY_MAX_BATCH_SIZE = void 0;\nconst assert = require(\"assert\");\nconst backoff_1 = require(\"./backoff\");\nconst rate_limiter_1 = require(\"./rate-limiter\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst write_batch_1 = require(\"./write-batch\");\nconst validate_1 = require(\"./validate\");\nconst logger_1 = require(\"./logger\");\nconst trace_util_1 = require(\"./telemetry/trace-util\");\n/*!\n * The maximum number of writes that can be in a single batch.\n */\nconst MAX_BATCH_SIZE = 20;\n/*!\n * The maximum number of writes can be can in a single batch that is being retried.\n */\nexports.RETRY_MAX_BATCH_SIZE = 10;\n/*!\n * The starting maximum number of operations per second as allowed by the\n * 500/50/5 rule.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = 500;\n/*!\n * The maximum number of operations per second as allowed by the 500/50/5 rule.\n * By default the rate limiter will not exceed this value.\n *\n * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.\n */\nexports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = 10000;\n/*!\n * The default jitter to apply to the exponential backoff used in retries. For\n * example, a factor of 0.3 means a 30% jitter is applied.\n */\nexports.DEFAULT_JITTER_FACTOR = 0.3;\n/*!\n * The rate by which to increase the capacity as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER = 1.5;\n/*!\n * How often the operations per second capacity should increase in milliseconds\n * as specified by the 500/50/5 rule.\n */\nconst RATE_LIMITER_MULTIPLIER_MILLIS = 5 * 60 * 1000;\n/*!\n * The default maximum number of pending operations that can be enqueued onto a\n * BulkWriter instance. An operation is considered pending if BulkWriter has\n * sent it via RPC and is awaiting the result. BulkWriter buffers additional\n * writes after this many pending operations in order to avoiding going OOM.\n */\nconst DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT = 500;\n/**\n * Represents a single write for BulkWriter, encapsulating operation dispatch\n * and error handling.\n * @private\n * @internal\n */\nclass BulkWriterOperation {\n    /**\n     * @param ref The document reference being written to.\n     * @param type The type of operation that created this write.\n     * @param sendFn A callback to invoke when the operation should be sent.\n     * @param errorFn The user provided global error callback.\n     * @param successFn The user provided global success callback.\n     */\n    constructor(ref, type, sendFn, errorFn, successFn) {\n        this.ref = ref;\n        this.type = type;\n        this.sendFn = sendFn;\n        this.errorFn = errorFn;\n        this.successFn = successFn;\n        this.deferred = new util_1.Deferred();\n        this.failedAttempts = 0;\n        this._backoffDuration = 0;\n        /** Whether flush() was called when this was the last enqueued operation. */\n        this._flushed = false;\n    }\n    get promise() {\n        return this.deferred.promise;\n    }\n    get backoffDuration() {\n        return this._backoffDuration;\n    }\n    markFlushed() {\n        this._flushed = true;\n    }\n    get flushed() {\n        return this._flushed;\n    }\n    onError(error) {\n        ++this.failedAttempts;\n        try {\n            const bulkWriterError = new BulkWriterError(error.code, error.message, this.ref, this.type, this.failedAttempts);\n            const shouldRetry = this.errorFn(bulkWriterError);\n            (0, logger_1.logger)('BulkWriter.errorFn', null, 'Ran error callback on error code:', error.code, ', shouldRetry:', shouldRetry, ' for document:', this.ref.path);\n            if (shouldRetry) {\n                this.lastStatus = error.code;\n                this.updateBackoffDuration();\n                this.sendFn(this);\n            }\n            else {\n                this.deferred.reject(bulkWriterError);\n            }\n        }\n        catch (userCallbackError) {\n            this.deferred.reject(userCallbackError);\n        }\n    }\n    updateBackoffDuration() {\n        if (this.lastStatus === 8 /* StatusCode.RESOURCE_EXHAUSTED */) {\n            this._backoffDuration = backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS;\n        }\n        else if (this._backoffDuration === 0) {\n            this._backoffDuration = backoff_1.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n        }\n        else {\n            this._backoffDuration *= backoff_1.DEFAULT_BACKOFF_FACTOR;\n        }\n    }\n    onSuccess(result) {\n        try {\n            this.successFn(this.ref, result);\n            this.deferred.resolve(result);\n        }\n        catch (userCallbackError) {\n            this.deferred.reject(userCallbackError);\n        }\n    }\n}\n/**\n * Used to represent a batch on the BatchQueue.\n *\n * @private\n * @internal\n */\nclass BulkCommitBatch extends write_batch_1.WriteBatch {\n    constructor(firestore, maxBatchSize) {\n        super(firestore);\n        // The set of document reference paths present in the WriteBatch.\n        this.docPaths = new Set();\n        // An array of pending write operations. Only contains writes that have not\n        // been resolved.\n        this.pendingOps = [];\n        this._maxBatchSize = maxBatchSize;\n    }\n    get maxBatchSize() {\n        return this._maxBatchSize;\n    }\n    setMaxBatchSize(size) {\n        assert(this.pendingOps.length <= size, 'New batch size cannot be less than the number of enqueued writes');\n        this._maxBatchSize = size;\n    }\n    has(documentRef) {\n        return this.docPaths.has(documentRef.path);\n    }\n    async bulkCommit(options = {}) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_BULK_WRITER_COMMIT, async () => {\n            var _a;\n            const tag = (_a = options === null || options === void 0 ? void 0 : options.requestTag) !== null && _a !== void 0 ? _a : (0, util_1.requestTag)();\n            // Capture the error stack to preserve stack tracing across async calls.\n            const stack = Error().stack;\n            let response;\n            try {\n                (0, logger_1.logger)('BulkCommitBatch.bulkCommit', tag, `Sending next batch with ${this._opCount} writes`);\n                const retryCodes = (0, util_1.getRetryCodes)('batchWrite');\n                response = await this._commit({ retryCodes, methodName: 'batchWrite', requestTag: tag });\n            }\n            catch (err) {\n                // Map the failure to each individual write's result.\n                const ops = Array.from({ length: this.pendingOps.length });\n                response = {\n                    writeResults: ops.map(() => {\n                        return {};\n                    }),\n                    status: ops.map(() => err),\n                };\n            }\n            for (let i = 0; i < (response.writeResults || []).length; ++i) {\n                // Since delete operations currently do not have write times, use a\n                // sentinel Timestamp value.\n                // TODO(b/158502664): Use actual delete timestamp.\n                const DELETE_TIMESTAMP_SENTINEL = timestamp_1.Timestamp.fromMillis(0);\n                const status = (response.status || [])[i];\n                if (status.code === 0 /* StatusCode.OK */) {\n                    const updateTime = timestamp_1.Timestamp.fromProto(response.writeResults[i].updateTime || DELETE_TIMESTAMP_SENTINEL);\n                    this.pendingOps[i].onSuccess(new write_batch_1.WriteResult(updateTime));\n                }\n                else {\n                    const error = new (require('google-gax/build/src/fallback').GoogleError)(status.message || undefined);\n                    error.code = status.code;\n                    this.pendingOps[i].onError((0, util_1.wrapError)(error, stack));\n                }\n            }\n        }, {\n            [trace_util_1.ATTRIBUTE_KEY_DOC_COUNT]: this._opCount,\n        });\n    }\n    /**\n     * Helper to update data structures associated with the operation and returns\n     * the result.\n     */\n    processLastOperation(op) {\n        assert(!this.docPaths.has(op.ref.path), 'Batch should not contain writes to the same document');\n        this.docPaths.add(op.ref.path);\n        this.pendingOps.push(op);\n    }\n}\n/**\n * Used to represent a buffered BulkWriterOperation.\n *\n * @private\n * @internal\n */\nclass BufferedOperation {\n    constructor(operation, sendFn) {\n        this.operation = operation;\n        this.sendFn = sendFn;\n    }\n}\n/**\n * The error thrown when a BulkWriter operation fails.\n *\n * @class BulkWriterError\n */\nclass BulkWriterError extends Error {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(\n    /** The status code of the error. */\n    code, \n    /** The error message of the error. */\n    message, \n    /** The document reference the operation was performed on. */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    documentRef, \n    /** The type of operation performed. */\n    operationType, \n    /** How many times this operation has been attempted unsuccessfully. */\n    failedAttempts) {\n        super(message);\n        this.code = code;\n        this.message = message;\n        this.documentRef = documentRef;\n        this.operationType = operationType;\n        this.failedAttempts = failedAttempts;\n    }\n}\nexports.BulkWriterError = BulkWriterError;\n/**\n * A Firestore BulkWriter that can be used to perform a large number of writes\n * in parallel.\n *\n * @class BulkWriter\n */\nclass BulkWriter {\n    // Visible for testing.\n    /**\n     * @private\n     * @internal\n     */\n    _getBufferedOperationsCount() {\n        return this._bufferedOperations.length;\n    }\n    // Visible for testing.\n    /**\n     * @private\n     * @internal\n     */\n    _setMaxBatchSize(size) {\n        assert(this._bulkCommitBatch.pendingOps.length === 0, 'BulkCommitBatch should be empty');\n        this._maxBatchSize = size;\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, size);\n    }\n    // Visible for testing.\n    /**\n     * @private\n     * @internal\n     */\n    _setMaxPendingOpCount(newMax) {\n        this._maxPendingOpCount = newMax;\n    }\n    /** @private */\n    constructor(firestore, options) {\n        var _a, _b;\n        this.firestore = firestore;\n        /**\n         * The maximum number of writes that can be in a single batch.\n         * Visible for testing.\n         * @private\n         * @internal\n         */\n        this._maxBatchSize = MAX_BATCH_SIZE;\n        /**\n         * The batch that is currently used to schedule operations. Once this batch\n         * reaches maximum capacity, a new batch is created.\n         * @private\n         * @internal\n         */\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\n        /**\n         * A pointer to the tail of all active BulkWriter operations. This pointer\n         * is advanced every time a new write is enqueued.\n         * @private\n         * @internal\n         */\n        this._lastOp = Promise.resolve();\n        /**\n         * Whether this BulkWriter instance has started to close. Afterwards, no\n         * new operations can be enqueued, except for retry operations scheduled by\n         * the error handler.\n         * @private\n         * @internal\n         */\n        this._closing = false;\n        /**\n         * The number of pending operations enqueued on this BulkWriter instance.\n         * An operation is considered pending if BulkWriter has sent it via RPC and\n         * is awaiting the result.\n         * @private\n         * @internal\n         */\n        this._pendingOpsCount = 0;\n        /**\n         * An array containing buffered BulkWriter operations after the maximum number\n         * of pending operations has been enqueued.\n         * @private\n         * @internal\n         */\n        this._bufferedOperations = [];\n        /**\n         * Whether a custom error handler has been set. BulkWriter only swallows\n         * errors if an error handler is set. Otherwise, an UnhandledPromiseRejection\n         * is thrown by Node if an operation promise is rejected without being\n         * handled.\n         * @private\n         * @internal\n         */\n        this._errorHandlerSet = false;\n        /**\n         * The maximum number of pending operations that can be enqueued onto this\n         * BulkWriter instance. Once the this number of writes have been enqueued,\n         * subsequent writes are buffered.\n         * @private\n         * @internal\n         */\n        this._maxPendingOpCount = DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT;\n        /**\n         * The user-provided callback to be run every time a BulkWriter operation\n         * successfully completes.\n         * @private\n         * @internal\n         */\n        this._successFn = () => { };\n        /**\n         * The user-provided callback to be run every time a BulkWriter operation\n         * fails.\n         * @private\n         * @internal\n         */\n        this._errorFn = error => {\n            const isRetryableDeleteError = error.operationType === 'delete' &&\n                error.code === 13 /* StatusCode.INTERNAL */;\n            const retryCodes = (0, util_1.getRetryCodes)('batchWrite');\n            return ((retryCodes.includes(error.code) || isRetryableDeleteError) &&\n                error.failedAttempts < backoff_1.MAX_RETRY_ATTEMPTS);\n        };\n        this.firestore._incrementBulkWritersCount();\n        validateBulkWriterOptions(options);\n        if ((options === null || options === void 0 ? void 0 : options.throttling) === false) {\n            this._rateLimiter = new rate_limiter_1.RateLimiter(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        }\n        else {\n            let startingRate = exports.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT;\n            let maxRate = exports.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT;\n            if (typeof (options === null || options === void 0 ? void 0 : options.throttling) !== 'boolean') {\n                if (((_a = options === null || options === void 0 ? void 0 : options.throttling) === null || _a === void 0 ? void 0 : _a.maxOpsPerSecond) !== undefined) {\n                    maxRate = options.throttling.maxOpsPerSecond;\n                }\n                if (((_b = options === null || options === void 0 ? void 0 : options.throttling) === null || _b === void 0 ? void 0 : _b.initialOpsPerSecond) !== undefined) {\n                    startingRate = options.throttling.initialOpsPerSecond;\n                }\n                // The initial validation step ensures that the maxOpsPerSecond is\n                // greater than initialOpsPerSecond. If this inequality is true, that\n                // means initialOpsPerSecond was not set and maxOpsPerSecond is less\n                // than the default starting rate.\n                if (maxRate < startingRate) {\n                    startingRate = maxRate;\n                }\n                // Ensure that the batch size is not larger than the number of allowed\n                // operations per second.\n                if (startingRate < this._maxBatchSize) {\n                    this._maxBatchSize = startingRate;\n                }\n            }\n            this._rateLimiter = new rate_limiter_1.RateLimiter(startingRate, RATE_LIMITER_MULTIPLIER, RATE_LIMITER_MULTIPLIER_MILLIS, maxRate);\n        }\n    }\n    /**\n     * Create a document with the provided data. This single operation will fail\n     * if a document exists at its location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {T} data The object to serialize as the document.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * bulkWriter\n     *  .create(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    create(documentRef, data) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'create', bulkCommitBatch => bulkCommitBatch.create(documentRef, data));\n    }\n    /**\n     * Delete a document from the database.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the batch if the\n     * document doesn't exist or was last updated at a different time.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the delete. If the delete fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * bulkWriter\n     *  .delete(documentRef)\n     *  .then(result => {\n     *    console.log('Successfully deleted document');\n     *  })\n     *  .catch(err => {\n     *    console.log('Delete failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    delete(documentRef, precondition) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'delete', bulkCommitBatch => bulkCommitBatch.delete(documentRef, precondition));\n    }\n    /**\n     * Write to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document does not\n     * exist yet, it will be created. If you pass [SetOptions]{@link SetOptions}.,\n     * the provided data can be merged into the existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call remain\n     * untouched. If your input sets any field to an empty map, all nested fields\n     * are overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided, set()\n     * only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * bulkWriter\n     *  .set(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    set(documentRef, data, options) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'set', bulkCommitBatch => {\n            if (options) {\n                return bulkCommitBatch.set(documentRef, data, options);\n            }\n            else {\n                return bulkCommitBatch.set(documentRef, data);\n            }\n        });\n    }\n    /**\n     * Update fields of the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document doesn't yet\n     * exist, the update fails and the entire batch will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n     * fields and values with which to update the document or the path of the\n     * first field to update.\n     * @param {...(Precondition|*|string|FieldPath)} preconditionOrValues - An\n     * alternating list of field paths and values to update or a Precondition to\n     * restrict this update\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {Promise<WriteResult>} A promise that resolves with the result of\n     * the write. If the write fails, the promise is rejected with a\n     * [BulkWriterError]{@link BulkWriterError}.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * bulkWriter\n     *  .update(documentRef, {foo: 'bar'})\n     *  .then(result => {\n     *    console.log('Successfully executed write at: ', result);\n     *  })\n     *  .catch(err => {\n     *    console.log('Write failed with: ', err);\n     *  });\n     * });\n     * ```\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        this._verifyNotClosed();\n        return this._enqueue(documentRef, 'update', bulkCommitBatch => bulkCommitBatch.update(documentRef, dataOrField, ...preconditionOrValues));\n    }\n    /**\n     * Callback function set by {@link BulkWriter#onWriteResult} that is run\n     * every time a {@link BulkWriter} operation successfully completes.\n     *\n     * @callback BulkWriter~successCallback\n     * @param {DocumentReference} documentRef The document reference the\n     * operation was performed on\n     * @param {WriteResult} result The server write time of the operation.\n     */\n    /**\n     * Attaches a listener that is run every time a BulkWriter operation\n     * successfully completes.\n     *\n     * @param {BulkWriter~successCallback} successCallback A callback to be\n     * called every time a BulkWriter operation successfully completes.\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter\n     *   .onWriteResult((documentRef, result) => {\n     *     console.log(\n     *       'Successfully executed write on document: ',\n     *       documentRef,\n     *       ' at: ',\n     *       result\n     *     );\n     *   });\n     * ```\n     */\n    onWriteResult(successCallback) {\n        this._successFn = successCallback;\n    }\n    /**\n     * Callback function set by {@link BulkWriter#onWriteError} that is run when\n     * a write fails in order to determine whether {@link BulkWriter} should\n     * retry the operation.\n     *\n     * @callback BulkWriter~shouldRetryCallback\n     * @param {BulkWriterError} error The error object with information about the\n     * operation and error.\n     * @returns {boolean} Whether or not to retry the failed operation. Returning\n     * `true` retries the operation. Returning `false` will stop the retry loop.\n     */\n    /**\n     * Attaches an error handler listener that is run every time a BulkWriter\n     * operation fails.\n     *\n     * BulkWriter has a default error handler that retries UNAVAILABLE and\n     * ABORTED errors up to a maximum of 10 failed attempts. When an error\n     * handler is specified, the default error handler will be overwritten.\n     *\n     * @param shouldRetryCallback {BulkWriter~shouldRetryCallback} A callback to\n     * be called every time a BulkWriter operation fails. Returning `true` will\n     * retry the operation. Returning `false` will stop the retry loop.\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter\n     *   .onWriteError((error) => {\n     *     if (\n     *       error.code === GrpcStatus.UNAVAILABLE &&\n     *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n     *     ) {\n     *       return true;\n     *     } else {\n     *       console.log('Failed write at document: ', error.documentRef);\n     *       return false;\n     *     }\n     *   });\n     * ```\n     */\n    onWriteError(shouldRetryCallback) {\n        this._errorHandlerSet = true;\n        this._errorFn = shouldRetryCallback;\n    }\n    /**\n     * Commits all writes that have been enqueued up to this point in parallel.\n     *\n     * Returns a Promise that resolves when all currently queued operations have\n     * been committed. The Promise will never be rejected since the results for\n     * each individual operation are conveyed via their individual Promises.\n     *\n     * The Promise resolves immediately if there are no pending writes. Otherwise,\n     * the Promise waits for all previously issued writes, but it does not wait\n     * for writes that were added after the method is called. If you want to wait\n     * for additional writes, call `flush()` again.\n     *\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\n     * up to this point have been committed.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(documentRef, {foo: 'bar'});\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\n     * bulkWriter.delete(documentRef3);\n     * await flush().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     * ```\n     */\n    flush() {\n        this._verifyNotClosed();\n        this._scheduleCurrentBatch(/* flush= */ true);\n        // Mark the most recent operation as flushed to ensure that the batch\n        // containing it will be sent once it's popped from the buffer.\n        if (this._bufferedOperations.length > 0) {\n            this._bufferedOperations[this._bufferedOperations.length - 1].operation.markFlushed();\n        }\n        return this._lastOp;\n    }\n    /**\n     * Commits all enqueued writes and marks the BulkWriter instance as closed.\n     *\n     * After calling `close()`, calling any method will throw an error. Any\n     * retries scheduled as part of an `onWriteError()` handler will be run\n     * before the `close()` promise resolves.\n     *\n     * Returns a Promise that resolves when there are no more pending writes. The\n     * Promise will never be rejected. Calling this method will send all requests.\n     * The promise resolves immediately if there are no pending writes.\n     *\n     * @return {Promise<void>} A promise that resolves when all enqueued writes\n     * up to this point have been committed.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(documentRef, {foo: 'bar'});\n     * bulkWriter.update(documentRef2, {foo: 'bar'});\n     * bulkWriter.delete(documentRef3);\n     * await close().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     * ```\n     */\n    close() {\n        this._verifyNotClosed();\n        this.firestore._decrementBulkWritersCount();\n        const flushPromise = this.flush();\n        this._closing = true;\n        return flushPromise;\n    }\n    /**\n     * Throws an error if the BulkWriter instance has been closed.\n     * @private\n     * @internal\n     */\n    _verifyNotClosed() {\n        if (this._closing) {\n            throw new Error('BulkWriter has already been closed.');\n        }\n    }\n    /**\n     * Sends the current batch and resets `this._bulkCommitBatch`.\n     *\n     * @param flush If provided, keeps re-sending operations until no more\n     * operations are enqueued. This allows retries to resolve as part of a\n     * `flush()` or `close()` call.\n     * @private\n     * @internal\n     */\n    _scheduleCurrentBatch(flush = false) {\n        if (this._bulkCommitBatch._opCount === 0)\n            return;\n        const pendingBatch = this._bulkCommitBatch;\n        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);\n        // Use the write with the longest backoff duration when determining backoff.\n        const highestBackoffDuration = pendingBatch.pendingOps.reduce((prev, cur) => (prev.backoffDuration > cur.backoffDuration ? prev : cur)).backoffDuration;\n        const backoffMsWithJitter = BulkWriter._applyJitter(highestBackoffDuration);\n        const delayedExecution = new util_1.Deferred();\n        if (backoffMsWithJitter > 0) {\n            (0, backoff_1.delayExecution)(() => delayedExecution.resolve(), backoffMsWithJitter);\n        }\n        else {\n            delayedExecution.resolve();\n        }\n        delayedExecution.promise.then(() => this._sendBatch(pendingBatch, flush));\n    }\n    /**\n     * Sends the provided batch once the rate limiter does not require any delay.\n     * @private\n     * @internal\n     */\n    async _sendBatch(batch, flush = false) {\n        const tag = (0, util_1.requestTag)();\n        // Send the batch if it is does not require any delay, or schedule another\n        // attempt after the appropriate timeout.\n        const underRateLimit = this._rateLimiter.tryMakeRequest(batch._opCount);\n        if (underRateLimit) {\n            await batch.bulkCommit({ requestTag: tag });\n            if (flush)\n                this._scheduleCurrentBatch(flush);\n        }\n        else {\n            const delayMs = this._rateLimiter.getNextRequestDelayMs(batch._opCount);\n            (0, logger_1.logger)('BulkWriter._sendBatch', tag, `Backing off for ${delayMs} seconds`);\n            (0, backoff_1.delayExecution)(() => this._sendBatch(batch, flush), delayMs);\n        }\n    }\n    /**\n     * Adds a 30% jitter to the provided backoff.\n     *\n     * @private\n     * @internal\n     */\n    static _applyJitter(backoffMs) {\n        if (backoffMs === 0)\n            return 0;\n        // Random value in [-0.3, 0.3].\n        const jitter = exports.DEFAULT_JITTER_FACTOR * (Math.random() * 2 - 1);\n        return Math.min(backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS, backoffMs + jitter * backoffMs);\n    }\n    /**\n     * Schedules and runs the provided operation on the next available batch.\n     * @private\n     * @internal\n     */\n    _enqueue(ref, type, enqueueOnBatchCallback) {\n        const bulkWriterOp = new BulkWriterOperation(ref, type, this._sendFn.bind(this, enqueueOnBatchCallback), this._errorFn.bind(this), this._successFn.bind(this));\n        // Swallow the error if the developer has set an error listener. This\n        // prevents UnhandledPromiseRejections from being thrown if a floating\n        // BulkWriter operation promise fails when an error handler is specified.\n        //\n        // This is done here in order to chain the caught promise onto `lastOp`,\n        // which ensures that flush() resolves after the operation promise.\n        const userPromise = bulkWriterOp.promise.catch(err => {\n            if (!this._errorHandlerSet) {\n                throw err;\n            }\n            else {\n                return bulkWriterOp.promise;\n            }\n        });\n        // Advance the `_lastOp` pointer. This ensures that `_lastOp` only resolves\n        // when both the previous and the current write resolve.\n        this._lastOp = this._lastOp.then(() => (0, util_1.silencePromise)(userPromise));\n        // Schedule the operation if the BulkWriter has fewer than the maximum\n        // number of allowed pending operations, or add the operation to the\n        // buffer.\n        if (this._pendingOpsCount < this._maxPendingOpCount) {\n            this._pendingOpsCount++;\n            this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n        }\n        else {\n            this._bufferedOperations.push(new BufferedOperation(bulkWriterOp, () => {\n                this._pendingOpsCount++;\n                this._sendFn(enqueueOnBatchCallback, bulkWriterOp);\n            }));\n        }\n        // Chain the BulkWriter operation promise with the buffer processing logic\n        // in order to ensure that it runs and that subsequent operations are\n        // enqueued before the next batch is scheduled in `_sendBatch()`.\n        return userPromise\n            .then(res => {\n            this._pendingOpsCount--;\n            this._processBufferedOps();\n            return res;\n        })\n            .catch(err => {\n            this._pendingOpsCount--;\n            this._processBufferedOps();\n            throw err;\n        });\n    }\n    /**\n     * Manages the pending operation counter and schedules the next BulkWriter\n     * operation if we're under the maximum limit.\n     * @private\n     * @internal\n     */\n    _processBufferedOps() {\n        if (this._pendingOpsCount < this._maxPendingOpCount &&\n            this._bufferedOperations.length > 0) {\n            const nextOp = this._bufferedOperations.shift();\n            nextOp.sendFn();\n        }\n    }\n    /**\n     * Schedules the provided operations on current BulkCommitBatch.\n     * Sends the BulkCommitBatch if it reaches maximum capacity.\n     *\n     * @private\n     * @internal\n     */\n    _sendFn(enqueueOnBatchCallback, op) {\n        // A backoff duration greater than 0 implies that this batch is a retry.\n        // Retried writes are sent with a batch size of 10 in order to guarantee\n        // that the batch is under the 10MiB limit.\n        if (op.backoffDuration > 0) {\n            if (this._bulkCommitBatch.pendingOps.length >= exports.RETRY_MAX_BATCH_SIZE) {\n                this._scheduleCurrentBatch(/* flush= */ false);\n            }\n            this._bulkCommitBatch.setMaxBatchSize(exports.RETRY_MAX_BATCH_SIZE);\n        }\n        if (this._bulkCommitBatch.has(op.ref)) {\n            // Create a new batch since the backend doesn't support batches with two\n            // writes to the same document.\n            this._scheduleCurrentBatch();\n        }\n        enqueueOnBatchCallback(this._bulkCommitBatch);\n        this._bulkCommitBatch.processLastOperation(op);\n        if (this._bulkCommitBatch._opCount === this._bulkCommitBatch.maxBatchSize) {\n            this._scheduleCurrentBatch();\n        }\n        else if (op.flushed) {\n            // If flush() was called before this operation was enqueued into a batch,\n            // we still need to schedule it.\n            this._scheduleCurrentBatch(/* flush= */ true);\n        }\n    }\n}\nexports.BulkWriter = BulkWriter;\n/**\n * Validates the use of 'value' as BulkWriterOptions.\n *\n * @private\n * @internal\n * @param value The BulkWriterOptions object to validate.\n * @throws if the input is not a valid BulkWriterOptions object.\n */\nfunction validateBulkWriterOptions(value) {\n    if ((0, validate_1.validateOptional)(value, { optional: true })) {\n        return;\n    }\n    const argName = 'options';\n    if (!(0, util_1.isObject)(value)) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, 'bulkWriter() options argument')} Input is not an object.`);\n    }\n    const options = value;\n    if (options.throttling === undefined ||\n        typeof options.throttling === 'boolean') {\n        return;\n    }\n    if (options.throttling.initialOpsPerSecond !== undefined) {\n        (0, validate_1.validateInteger)('initialOpsPerSecond', options.throttling.initialOpsPerSecond, {\n            minValue: 1,\n        });\n    }\n    if (options.throttling.maxOpsPerSecond !== undefined) {\n        (0, validate_1.validateInteger)('maxOpsPerSecond', options.throttling.maxOpsPerSecond, {\n            minValue: 1,\n        });\n        if (options.throttling.initialOpsPerSecond !== undefined &&\n            options.throttling.initialOpsPerSecond >\n                options.throttling.maxOpsPerSecond) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, 'bulkWriter() options argument')} \"maxOpsPerSecond\" cannot be less than \"initialOpsPerSecond\".`);\n        }\n    }\n}\n//# sourceMappingURL=bulk-writer.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10866, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/bundle.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BundleBuilder = void 0;\nconst document_1 = require(\"./document\");\nconst query_snapshot_1 = require(\"./reference/query-snapshot\");\nconst timestamp_1 = require(\"./timestamp\");\nconst validate_1 = require(\"./validate\");\nconst BUNDLE_VERSION = 1;\n/**\n * Builds a Firestore data bundle with results from the given document and query snapshots.\n */\nclass BundleBuilder {\n    constructor(bundleId) {\n        this.bundleId = bundleId;\n        // Resulting documents for the bundle, keyed by full document path.\n        this.documents = new Map();\n        // Named queries saved in the bundle, keyed by query name.\n        this.namedQueries = new Map();\n        // The latest read time among all bundled documents and queries.\n        this.latestReadTime = new timestamp_1.Timestamp(0, 0);\n    }\n    /**\n     * Adds a Firestore document snapshot or query snapshot to the bundle.\n     * Both the documents data and the query read time will be included in the bundle.\n     *\n     * @param {DocumentSnapshot | string} documentOrName A document snapshot to add or a name of a query.\n     * @param {Query=} querySnapshot A query snapshot to add to the bundle, if provided.\n     * @returns {BundleBuilder} This instance.\n     *\n     * @example\n     * ```\n     * const bundle = firestore.bundle('data-bundle');\n     * const docSnapshot = await firestore.doc('abc/123').get();\n     * const querySnapshot = await firestore.collection('coll').get();\n     *\n     * const bundleBuffer = bundle.add(docSnapshot) // Add a document\n     *                            .add('coll-query', querySnapshot) // Add a named query.\n     *                            .build()\n     * // Save `bundleBuffer` to CDN or stream it to clients.\n     * ```\n     */\n    add(documentOrName, querySnapshot) {\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('BundleBuilder.add', arguments, 1);\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMaxNumberOfArguments)('BundleBuilder.add', arguments, 2);\n        if (arguments.length === 1) {\n            validateDocumentSnapshot('documentOrName', documentOrName);\n            this.addBundledDocument(documentOrName);\n        }\n        else {\n            (0, validate_1.validateString)('documentOrName', documentOrName);\n            validateQuerySnapshot('querySnapshot', querySnapshot);\n            this.addNamedQuery(documentOrName, querySnapshot);\n        }\n        return this;\n    }\n    addBundledDocument(snap, queryName) {\n        const originalDocument = this.documents.get(snap.ref.path);\n        const originalQueries = originalDocument === null || originalDocument === void 0 ? void 0 : originalDocument.metadata.queries;\n        // Update with document built from `snap` because it is newer.\n        if (!originalDocument ||\n            timestamp_1.Timestamp.fromProto(originalDocument.metadata.readTime) < snap.readTime) {\n            const docProto = snap.toDocumentProto();\n            this.documents.set(snap.ref.path, {\n                document: snap.exists ? docProto : undefined,\n                metadata: {\n                    name: docProto.name,\n                    readTime: snap.readTime.toProto().timestampValue,\n                    exists: snap.exists,\n                },\n            });\n        }\n        // Update `queries` to include both original and `queryName`.\n        const newDocument = this.documents.get(snap.ref.path);\n        newDocument.metadata.queries = originalQueries || [];\n        if (queryName) {\n            newDocument.metadata.queries.push(queryName);\n        }\n        if (snap.readTime > this.latestReadTime) {\n            this.latestReadTime = snap.readTime;\n        }\n    }\n    addNamedQuery(name, querySnap) {\n        if (this.namedQueries.has(name)) {\n            throw new Error(`Query name conflict: ${name} has already been added.`);\n        }\n        this.namedQueries.set(name, {\n            name,\n            bundledQuery: querySnap.query._toBundledQuery(),\n            readTime: querySnap.readTime.toProto().timestampValue,\n        });\n        for (const snap of querySnap.docs) {\n            this.addBundledDocument(snap, name);\n        }\n        if (querySnap.readTime > this.latestReadTime) {\n            this.latestReadTime = querySnap.readTime;\n        }\n    }\n    /**\n     * Converts a IBundleElement to a Buffer whose content is the length prefixed JSON representation\n     * of the element.\n     * @private\n     * @internal\n     */\n    elementToLengthPrefixedBuffer(bundleElement) {\n        // Convert to a valid proto message object then take its JSON representation.\n        // This take cares of stuff like converting internal byte array fields\n        // to Base64 encodings.\n        // We lazy-load the Proto file to reduce cold-start times.\n        const message = require('../protos/firestore_v1_proto_api')\n            .firestore.BundleElement.fromObject(bundleElement)\n            .toJSON();\n        const buffer = Buffer.from(JSON.stringify(message), 'utf-8');\n        const lengthBuffer = Buffer.from(buffer.length.toString());\n        return Buffer.concat([lengthBuffer, buffer]);\n    }\n    build() {\n        let bundleBuffer = Buffer.alloc(0);\n        for (const namedQuery of this.namedQueries.values()) {\n            bundleBuffer = Buffer.concat([\n                bundleBuffer,\n                this.elementToLengthPrefixedBuffer({ namedQuery }),\n            ]);\n        }\n        for (const bundledDocument of this.documents.values()) {\n            const documentMetadata = bundledDocument.metadata;\n            bundleBuffer = Buffer.concat([\n                bundleBuffer,\n                this.elementToLengthPrefixedBuffer({ documentMetadata }),\n            ]);\n            // Write to the bundle if document exists.\n            const document = bundledDocument.document;\n            if (document) {\n                bundleBuffer = Buffer.concat([\n                    bundleBuffer,\n                    this.elementToLengthPrefixedBuffer({ document }),\n                ]);\n            }\n        }\n        const metadata = {\n            id: this.bundleId,\n            createTime: this.latestReadTime.toProto().timestampValue,\n            version: BUNDLE_VERSION,\n            totalDocuments: this.documents.size,\n            totalBytes: bundleBuffer.length,\n        };\n        // Prepends the metadata element to the bundleBuffer: `bundleBuffer` is the second argument to `Buffer.concat`.\n        bundleBuffer = Buffer.concat([\n            this.elementToLengthPrefixedBuffer({ metadata }),\n            bundleBuffer,\n        ]);\n        return bundleBuffer;\n    }\n}\nexports.BundleBuilder = BundleBuilder;\n/**\n * Convenient class to hold both the metadata and the actual content of a document to be bundled.\n * @private\n * @internal\n */\nclass BundledDocument {\n    constructor(metadata, document) {\n        this.metadata = metadata;\n        this.document = document;\n    }\n}\n/**\n * Validates that 'value' is DocumentSnapshot.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n */\nfunction validateDocumentSnapshot(arg, value) {\n    if (!(value instanceof document_1.DocumentSnapshot)) {\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'DocumentSnapshot'));\n    }\n}\n/**\n * Validates that 'value' is QuerySnapshot.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n */\nfunction validateQuerySnapshot(arg, value) {\n    if (!(value instanceof query_snapshot_1.QuerySnapshot)) {\n        throw new Error((0, validate_1.invalidArgumentMessage)(arg, 'QuerySnapshot'));\n    }\n}\n//# sourceMappingURL=bundle.js.map"],"names":[],"mappings":"AA8HuB;AA9HvB;AACA,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,aAAa,GAAG,KAAK;AAC7B,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM,iBAAiB;AACvB;;CAEC,GACD,MAAM;IACF,YAAY,QAAQ,CAAE;QAClB,IAAI,CAAC,QAAQ,GAAG;QAChB,mEAAmE;QACnE,IAAI,CAAC,SAAS,GAAG,IAAI;QACrB,0DAA0D;QAC1D,IAAI,CAAC,YAAY,GAAG,IAAI;QACxB,gEAAgE;QAChE,IAAI,CAAC,cAAc,GAAG,IAAI,YAAY,SAAS,CAAC,GAAG;IACvD;IACA;;;;;;;;;;;;;;;;;;;KAmBC,GACD,IAAI,cAAc,EAAE,aAAa,EAAE;QAC/B,8CAA8C;QAC9C,CAAC,GAAG,WAAW,4BAA4B,EAAE,qBAAqB,WAAW;QAC7E,8CAA8C;QAC9C,CAAC,GAAG,WAAW,4BAA4B,EAAE,qBAAqB,WAAW;QAC7E,IAAI,UAAU,MAAM,KAAK,GAAG;YACxB,yBAAyB,kBAAkB;YAC3C,IAAI,CAAC,kBAAkB,CAAC;QAC5B,OACK;YACD,CAAC,GAAG,WAAW,cAAc,EAAE,kBAAkB;YACjD,sBAAsB,iBAAiB;YACvC,IAAI,CAAC,aAAa,CAAC,gBAAgB;QACvC;QACA,OAAO,IAAI;IACf;IACA,mBAAmB,IAAI,EAAE,SAAS,EAAE;QAChC,MAAM,mBAAmB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI;QACzD,MAAM,kBAAkB,qBAAqB,QAAQ,qBAAqB,KAAK,IAAI,KAAK,IAAI,iBAAiB,QAAQ,CAAC,OAAO;QAC7H,8DAA8D;QAC9D,IAAI,CAAC,oBACD,YAAY,SAAS,CAAC,SAAS,CAAC,iBAAiB,QAAQ,CAAC,QAAQ,IAAI,KAAK,QAAQ,EAAE;YACrF,MAAM,WAAW,KAAK,eAAe;YACrC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,EAAE;gBAC9B,UAAU,KAAK,MAAM,GAAG,WAAW;gBACnC,UAAU;oBACN,MAAM,SAAS,IAAI;oBACnB,UAAU,KAAK,QAAQ,CAAC,OAAO,GAAG,cAAc;oBAChD,QAAQ,KAAK,MAAM;gBACvB;YACJ;QACJ;QACA,6DAA6D;QAC7D,MAAM,cAAc,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI;QACpD,YAAY,QAAQ,CAAC,OAAO,GAAG,mBAAmB,EAAE;QACpD,IAAI,WAAW;YACX,YAAY,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;QACtC;QACA,IAAI,KAAK,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE;YACrC,IAAI,CAAC,cAAc,GAAG,KAAK,QAAQ;QACvC;IACJ;IACA,cAAc,IAAI,EAAE,SAAS,EAAE;QAC3B,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO;YAC7B,MAAM,IAAI,MAAM,CAAC,qBAAqB,EAAE,KAAK,wBAAwB,CAAC;QAC1E;QACA,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM;YACxB;YACA,cAAc,UAAU,KAAK,CAAC,eAAe;YAC7C,UAAU,UAAU,QAAQ,CAAC,OAAO,GAAG,cAAc;QACzD;QACA,KAAK,MAAM,QAAQ,UAAU,IAAI,CAAE;YAC/B,IAAI,CAAC,kBAAkB,CAAC,MAAM;QAClC;QACA,IAAI,UAAU,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE;YAC1C,IAAI,CAAC,cAAc,GAAG,UAAU,QAAQ;QAC5C;IACJ;IACA;;;;;KAKC,GACD,8BAA8B,aAAa,EAAE;QACzC,6EAA6E;QAC7E,sEAAsE;QACtE,uBAAuB;QACvB,0DAA0D;QAC1D,MAAM,UAAU,2IACX,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,eACnC,MAAM;QACX,MAAM,SAAS,8JAAA,CAAA,SAAM,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,UAAU;QACpD,MAAM,eAAe,8JAAA,CAAA,SAAM,CAAC,IAAI,CAAC,OAAO,MAAM,CAAC,QAAQ;QACvD,OAAO,8JAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YAAC;YAAc;SAAO;IAC/C;IACA,QAAQ;QACJ,IAAI,eAAe,8JAAA,CAAA,SAAM,CAAC,KAAK,CAAC;QAChC,KAAK,MAAM,cAAc,IAAI,CAAC,YAAY,CAAC,MAAM,GAAI;YACjD,eAAe,8JAAA,CAAA,SAAM,CAAC,MAAM,CAAC;gBACzB;gBACA,IAAI,CAAC,6BAA6B,CAAC;oBAAE;gBAAW;aACnD;QACL;QACA,KAAK,MAAM,mBAAmB,IAAI,CAAC,SAAS,CAAC,MAAM,GAAI;YACnD,MAAM,mBAAmB,gBAAgB,QAAQ;YACjD,eAAe,8JAAA,CAAA,SAAM,CAAC,MAAM,CAAC;gBACzB;gBACA,IAAI,CAAC,6BAA6B,CAAC;oBAAE;gBAAiB;aACzD;YACD,0CAA0C;YAC1C,MAAM,WAAW,gBAAgB,QAAQ;YACzC,IAAI,UAAU;gBACV,eAAe,8JAAA,CAAA,SAAM,CAAC,MAAM,CAAC;oBACzB;oBACA,IAAI,CAAC,6BAA6B,CAAC;wBAAE;oBAAS;iBACjD;YACL;QACJ;QACA,MAAM,WAAW;YACb,IAAI,IAAI,CAAC,QAAQ;YACjB,YAAY,IAAI,CAAC,cAAc,CAAC,OAAO,GAAG,cAAc;YACxD,SAAS;YACT,gBAAgB,IAAI,CAAC,SAAS,CAAC,IAAI;YACnC,YAAY,aAAa,MAAM;QACnC;QACA,+GAA+G;QAC/G,eAAe,8JAAA,CAAA,SAAM,CAAC,MAAM,CAAC;YACzB,IAAI,CAAC,6BAA6B,CAAC;gBAAE;YAAS;YAC9C;SACH;QACD,OAAO;IACX;AACJ;AACA,QAAQ,aAAa,GAAG;AACxB;;;;CAIC,GACD,MAAM;IACF,YAAY,QAAQ,EAAE,QAAQ,CAAE;QAC5B,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,QAAQ,GAAG;IACpB;AACJ;AACA;;;;;;;CAOC,GACD,SAAS,yBAAyB,GAAG,EAAE,KAAK;IACxC,IAAI,CAAC,CAAC,iBAAiB,WAAW,gBAAgB,GAAG;QACjD,MAAM,IAAI,MAAM,CAAC,GAAG,WAAW,sBAAsB,EAAE,KAAK;IAChE;AACJ;AACA;;;;;;;CAOC,GACD,SAAS,sBAAsB,GAAG,EAAE,KAAK;IACrC,IAAI,CAAC,CAAC,iBAAiB,iBAAiB,aAAa,GAAG;QACpD,MAAM,IAAI,MAAM,CAAC,GAAG,WAAW,sBAAsB,EAAE,KAAK;IAChE;AACJ,EACA,kCAAkC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11081, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/document-reader.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2021 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DocumentReader = void 0;\nconst document_1 = require(\"./document\");\nconst util_1 = require(\"./util\");\nconst logger_1 = require(\"./logger\");\nconst timestamp_1 = require(\"./timestamp\");\n/**\n * A wrapper around BatchGetDocumentsRequest that retries request upon stream\n * failure and returns ordered results.\n *\n * @private\n * @internal\n */\nclass DocumentReader {\n    /**\n     * Creates a new DocumentReader that fetches the provided documents (via\n     * `get()`).\n     *\n     * @param firestore The Firestore instance to use.\n     * @param allDocuments The documents to get.\n     * @param fieldMask An optional field mask to apply to this read\n     * @param transactionOrReadTime An optional transaction ID to use for this\n     * read or options for beginning a new transaction with this read\n     */\n    constructor(firestore, allDocuments, fieldMask, transactionOrReadTime) {\n        this.firestore = firestore;\n        this.allDocuments = allDocuments;\n        this.fieldMask = fieldMask;\n        this.transactionOrReadTime = transactionOrReadTime;\n        this.outstandingDocuments = new Set();\n        this.retrievedDocuments = new Map();\n        for (const docRef of this.allDocuments) {\n            this.outstandingDocuments.add(docRef.formattedName);\n        }\n    }\n    /**\n     * Invokes the BatchGetDocuments RPC and returns the results as an array of\n     * documents.\n     *\n     * @param requestTag A unique client-assigned identifier for this request.\n     */\n    async get(requestTag) {\n        const { result } = await this._get(requestTag);\n        return result;\n    }\n    /**\n     * Invokes the BatchGetDocuments RPC and returns the results with transaction\n     * metadata.\n     *\n     * @param requestTag A unique client-assigned identifier for this request.\n     */\n    async _get(requestTag) {\n        await this.fetchDocuments(requestTag);\n        // BatchGetDocuments doesn't preserve document order. We use the request\n        // order to sort the resulting documents.\n        const orderedDocuments = [];\n        for (const docRef of this.allDocuments) {\n            const document = this.retrievedDocuments.get(docRef.formattedName);\n            if (document !== undefined) {\n                // Recreate the DocumentSnapshot with the DocumentReference\n                // containing the original converter.\n                const finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n                finalDoc.fieldsProto = document._fieldsProto;\n                finalDoc.readTime = document.readTime;\n                finalDoc.createTime = document.createTime;\n                finalDoc.updateTime = document.updateTime;\n                orderedDocuments.push(finalDoc.build());\n            }\n            else {\n                throw new Error(`Did not receive document for \"${docRef.path}\".`);\n            }\n        }\n        return {\n            result: orderedDocuments,\n            transaction: this.retrievedTransactionId,\n        };\n    }\n    async fetchDocuments(requestTag) {\n        var _a;\n        if (!this.outstandingDocuments.size) {\n            return;\n        }\n        const request = {\n            database: this.firestore.formattedName,\n            documents: Array.from(this.outstandingDocuments),\n        };\n        if (this.transactionOrReadTime instanceof Uint8Array) {\n            request.transaction = this.transactionOrReadTime;\n        }\n        else if (this.transactionOrReadTime instanceof timestamp_1.Timestamp) {\n            request.readTime = this.transactionOrReadTime.toProto().timestampValue;\n        }\n        else if (this.transactionOrReadTime) {\n            request.newTransaction = this.transactionOrReadTime;\n        }\n        if (this.fieldMask) {\n            const fieldPaths = this.fieldMask.map(fieldPath => fieldPath.formattedName);\n            request.mask = { fieldPaths };\n        }\n        let resultCount = 0;\n        try {\n            const stream = await this.firestore.requestStream('batchGetDocuments', \n            /* bidirectional= */ false, request, requestTag);\n            stream.resume();\n            for await (const response of stream) {\n                // Proto comes with zero-length buffer by default\n                if ((_a = response.transaction) === null || _a === void 0 ? void 0 : _a.length) {\n                    this.retrievedTransactionId = response.transaction;\n                }\n                let snapshot;\n                if (response.found) {\n                    (0, logger_1.logger)('DocumentReader.fetchDocuments', requestTag, 'Received document: %s', response.found.name);\n                    snapshot = this.firestore.snapshot_(response.found, response.readTime);\n                }\n                else if (response.missing) {\n                    (0, logger_1.logger)('DocumentReader.fetchDocuments', requestTag, 'Document missing: %s', response.missing);\n                    snapshot = this.firestore.snapshot_(response.missing, response.readTime);\n                }\n                if (snapshot) {\n                    const path = snapshot.ref.formattedName;\n                    this.outstandingDocuments.delete(path);\n                    this.retrievedDocuments.set(path, snapshot);\n                    ++resultCount;\n                }\n            }\n        }\n        catch (error) {\n            const shouldRetry = \n            // Transactional reads are retried via the transaction runner.\n            !request.transaction &&\n                !request.newTransaction &&\n                // Only retry if we made progress.\n                resultCount > 0 &&\n                // Don't retry permanent errors.\n                error.code !== undefined &&\n                !(0, util_1.isPermanentRpcError)(error, 'batchGetDocuments');\n            (0, logger_1.logger)('DocumentReader.fetchDocuments', requestTag, 'BatchGetDocuments failed with error: %s. Retrying: %s', error, shouldRetry);\n            if (shouldRetry) {\n                return this.fetchDocuments(requestTag);\n            }\n            else {\n                throw error;\n            }\n        }\n        finally {\n            (0, logger_1.logger)('DocumentReader.fetchDocuments', requestTag, 'Received %d results', resultCount);\n        }\n    }\n}\nexports.DocumentReader = DocumentReader;\n//# sourceMappingURL=document-reader.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11238, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/pool.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientPool = exports.CLIENT_TERMINATED_ERROR_MSG = void 0;\nconst assert = require(\"assert\");\nconst logger_1 = require(\"./logger\");\nconst util_1 = require(\"./util\");\nexports.CLIENT_TERMINATED_ERROR_MSG = 'The client has already been terminated';\n/**\n * An auto-resizing pool that distributes concurrent operations over multiple\n * clients of type `T`.\n *\n * ClientPool is used within Firestore to manage a pool of GAPIC clients and\n * automatically initializes multiple clients if we issue more than 100\n * concurrent operations.\n *\n * @private\n * @internal\n */\nclass ClientPool {\n    /**\n     * @param concurrentOperationLimit The number of operations that each client\n     * can handle.\n     * @param maxIdleClients The maximum number of idle clients to keep before\n     * garbage collecting.\n     * @param clientFactory A factory function called as needed when new clients\n     * are required.\n     * @param clientDestructor A cleanup function that is called when a client is\n     * disposed of.\n     */\n    constructor(concurrentOperationLimit, maxIdleClients, clientFactory, clientDestructor = () => Promise.resolve()) {\n        this.concurrentOperationLimit = concurrentOperationLimit;\n        this.maxIdleClients = maxIdleClients;\n        this.clientFactory = clientFactory;\n        this.clientDestructor = clientDestructor;\n        this.grpcEnabled = false;\n        /**\n         * Stores each active clients and how many operations it has outstanding.\n         */\n        this.activeClients = new Map();\n        /**\n         * A set of clients that have seen RST_STREAM errors (see\n         * https://github.com/googleapis/nodejs-firestore/issues/1023) and should\n         * no longer be used.\n         */\n        this.failedClients = new Set();\n        /**\n         * Whether the Firestore instance has been terminated. Once terminated, the\n         * ClientPool can longer schedule new operations.\n         */\n        this.terminated = false;\n        /**\n         * Deferred promise that is resolved when there are no active operations on\n         * the client pool after terminate() has been called.\n         */\n        this.terminateDeferred = new util_1.Deferred();\n    }\n    /**\n     * Returns an already existing client if it has less than the maximum number\n     * of concurrent operations or initializes and returns a new client.\n     *\n     * @private\n     * @internal\n     */\n    acquire(requestTag, requiresGrpc) {\n        let selectedClient = null;\n        let selectedClientRequestCount = -1;\n        // Transition to grpc when we see the first operation that requires grpc.\n        this.grpcEnabled = this.grpcEnabled || requiresGrpc;\n        // Require a grpc client for this operation if we have transitioned to grpc.\n        requiresGrpc = requiresGrpc || this.grpcEnabled;\n        for (const [client, metadata] of this.activeClients) {\n            // Use the \"most-full\" client that can still accommodate the request\n            // in order to maximize the number of idle clients as operations start to\n            // complete.\n            if (!this.failedClients.has(client) &&\n                metadata.activeRequestCount > selectedClientRequestCount &&\n                metadata.activeRequestCount < this.concurrentOperationLimit &&\n                (metadata.grpcEnabled || !requiresGrpc)) {\n                selectedClient = client;\n                selectedClientRequestCount = metadata.activeRequestCount;\n            }\n        }\n        if (selectedClient) {\n            (0, logger_1.logger)('ClientPool.acquire', requestTag, 'Re-using existing client with %s remaining operations', this.concurrentOperationLimit - selectedClientRequestCount);\n        }\n        else {\n            (0, logger_1.logger)('ClientPool.acquire', requestTag, 'Creating a new client (requiresGrpc: %s)', requiresGrpc);\n            selectedClient = this.clientFactory(requiresGrpc);\n            selectedClientRequestCount = 0;\n            assert(!this.activeClients.has(selectedClient), 'The provided client factory returned an existing instance');\n        }\n        this.activeClients.set(selectedClient, {\n            grpcEnabled: requiresGrpc,\n            activeRequestCount: selectedClientRequestCount + 1,\n        });\n        return selectedClient;\n    }\n    /**\n     * Reduces the number of operations for the provided client, potentially\n     * removing it from the pool of active clients.\n     * @private\n     * @internal\n     */\n    async release(requestTag, client) {\n        const metadata = this.activeClients.get(client);\n        assert(metadata && metadata.activeRequestCount > 0, 'No active requests');\n        this.activeClients.set(client, {\n            grpcEnabled: metadata.grpcEnabled,\n            activeRequestCount: metadata.activeRequestCount - 1,\n        });\n        if (this.terminated && this.opCount === 0) {\n            this.terminateDeferred.resolve();\n        }\n        if (this.shouldGarbageCollectClient(client)) {\n            this.activeClients.delete(client);\n            this.failedClients.delete(client);\n            await this.clientDestructor(client);\n            (0, logger_1.logger)('ClientPool.release', requestTag, 'Garbage collected 1 client');\n        }\n    }\n    /**\n     * Given the current operation counts, determines if the given client should\n     * be garbage collected.\n     * @private\n     * @internal\n     */\n    shouldGarbageCollectClient(client) {\n        const clientMetadata = this.activeClients.get(client);\n        if (clientMetadata.activeRequestCount !== 0) {\n            // Don't garbage collect clients that have active requests.\n            return false;\n        }\n        if (this.grpcEnabled !== clientMetadata.grpcEnabled) {\n            // We are transitioning to GRPC. Garbage collect REST clients.\n            return true;\n        }\n        // Idle clients that have received RST_STREAM errors are always garbage\n        // collected.\n        if (this.failedClients.has(client)) {\n            return true;\n        }\n        // Otherwise, only garbage collect if we have too much idle capacity (e.g.\n        // more than 100 idle capacity with default settings).\n        let idleCapacityCount = 0;\n        for (const [, metadata] of this.activeClients) {\n            idleCapacityCount +=\n                this.concurrentOperationLimit - metadata.activeRequestCount;\n        }\n        return (idleCapacityCount > this.maxIdleClients * this.concurrentOperationLimit);\n    }\n    /**\n     * The number of currently registered clients.\n     *\n     * @return Number of currently registered clients.\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n    get size() {\n        return this.activeClients.size;\n    }\n    /**\n     * The number of currently active operations.\n     *\n     * @return Number of currently active operations.\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n    get opCount() {\n        let activeOperationCount = 0;\n        this.activeClients.forEach(metadata => (activeOperationCount += metadata.activeRequestCount));\n        return activeOperationCount;\n    }\n    /**\n     * The currently active clients.\n     *\n     * @return The currently active clients.\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n    get _activeClients() {\n        return this.activeClients;\n    }\n    /**\n     * Runs the provided operation in this pool. This function may create an\n     * additional client if all existing clients already operate at the concurrent\n     * operation limit.\n     *\n     * @param requestTag A unique client-assigned identifier for this operation.\n     * @param op A callback function that returns a Promise. The client T will\n     * be returned to the pool when callback finishes.\n     * @return A Promise that resolves with the result of `op`.\n     * @private\n     * @internal\n     */\n    run(requestTag, requiresGrpc, op) {\n        if (this.terminated) {\n            return Promise.reject(new Error(exports.CLIENT_TERMINATED_ERROR_MSG));\n        }\n        const client = this.acquire(requestTag, requiresGrpc);\n        return op(client)\n            .catch(async (err) => {\n            var _a;\n            if ((_a = err.message) === null || _a === void 0 ? void 0 : _a.match(/RST_STREAM/)) {\n                // Once a client has seen a RST_STREAM error, the GRPC channel can\n                // no longer be used. We mark the client as failed, which ensures that\n                // we open a new GRPC channel for the next request.\n                this.failedClients.add(client);\n            }\n            await this.release(requestTag, client);\n            return Promise.reject(err);\n        })\n            .then(async (res) => {\n            await this.release(requestTag, client);\n            return res;\n        });\n    }\n    async terminate() {\n        this.terminated = true;\n        // Wait for all pending operations to complete before terminating.\n        if (this.opCount > 0) {\n            (0, logger_1.logger)('ClientPool.terminate', \n            /* requestTag= */ null, 'Waiting for %s pending operations to complete before terminating', this.opCount);\n            await this.terminateDeferred.promise;\n        }\n        for (const [client] of this.activeClients) {\n            this.activeClients.delete(client);\n            await this.clientDestructor(client);\n        }\n    }\n}\nexports.ClientPool = ClientPool;\n//# sourceMappingURL=pool.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11472, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/transaction.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = void 0;\nexports.parseGetAllArguments = parseGetAllArguments;\nconst backoff_1 = require(\"./backoff\");\nconst index_1 = require(\"./index\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst aggregate_query_1 = require(\"./reference/aggregate-query\");\nconst document_reference_1 = require(\"./reference/document-reference\");\nconst query_1 = require(\"./reference/query\");\nconst helpers_1 = require(\"./reference/helpers\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst document_reader_1 = require(\"./document-reader\");\nconst trace_util_1 = require(\"./telemetry/trace-util\");\n/*!\n * Error message for transactional reads that were executed after performing\n * writes.\n */\nconst READ_AFTER_WRITE_ERROR_MSG = 'Firestore transactions require all reads to be executed before all writes.';\nconst READ_ONLY_WRITE_ERROR_MSG = 'Firestore read-only transactions cannot execute writes.';\n/**\n * A reference to a transaction.\n *\n * The Transaction object passed to a transaction's updateFunction provides\n * the methods to read and write data within the transaction context. See\n * [runTransaction()]{@link Firestore#runTransaction}.\n *\n * @class Transaction\n */\nclass Transaction {\n    /**\n     * @private\n     *\n     * @param firestore The Firestore Database client.\n     * @param requestTag A unique client-assigned identifier for the scope of\n     * this transaction.\n     * @param transactionOptions The user-defined options for this transaction.\n     */\n    constructor(firestore, requestTag, transactionOptions) {\n        this._maxAttempts = index_1.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n        this._firestore = firestore;\n        this._requestTag = requestTag;\n        if (transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.readOnly) {\n            // Avoid initialising write batch and backoff unnecessarily for read-only transactions\n            this._maxAttempts = 1;\n            this._readOnlyReadTime = transactionOptions.readTime;\n        }\n        else {\n            this._maxAttempts =\n                (transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.maxAttempts) || index_1.DEFAULT_MAX_TRANSACTION_ATTEMPTS;\n            this._writeBatch = firestore.batch();\n            this._backoff = new backoff_1.ExponentialBackoff();\n        }\n    }\n    /**\n     * Retrieve a document or a query result from the database. Holds a\n     * pessimistic lock on all returned documents.\n     *\n     * @param {DocumentReference|Query} refOrQuery The document or query to\n     * return.\n     * @returns {Promise} A Promise that resolves with a DocumentSnapshot or\n     * QuerySnapshot for the returned documents.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     * ```\n     */\n    get(refOrQuery) {\n        if (this._writeBatch && !this._writeBatch.isEmpty) {\n            throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n        }\n        if (refOrQuery instanceof document_reference_1.DocumentReference) {\n            return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_GET_DOCUMENT, () => {\n                return this.withLazyStartedTransaction(refOrQuery, this.getSingleFn);\n            });\n        }\n        if (refOrQuery instanceof query_1.Query || refOrQuery instanceof aggregate_query_1.AggregateQuery) {\n            return this._firestore._traceUtil.startActiveSpan(refOrQuery instanceof query_1.Query\n                ? trace_util_1.SPAN_NAME_TRANSACTION_GET_QUERY\n                : trace_util_1.SPAN_NAME_TRANSACTION_GET_AGGREGATION_QUERY, () => {\n                return this.withLazyStartedTransaction(refOrQuery, this.getQueryFn);\n            });\n        }\n        throw new Error('Value for argument \"refOrQuery\" must be a DocumentReference, Query, or AggregateQuery.');\n    }\n    /**\n     * Retrieves multiple documents from Firestore. Holds a pessimistic lock on\n     * all returned documents.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * ```\n     * let firstDoc = firestore.doc('col/doc1');\n     * let secondDoc = firestore.doc('col/doc2');\n     * let resultDoc = firestore.doc('col/doc3');\n     *\n     * firestore.runTransaction(transaction => {\n     *   return transaction.getAll(firstDoc, secondDoc).then(docs => {\n     *     transaction.set(resultDoc, {\n     *       sum: docs[0].get('count') + docs[1].get('count')\n     *     });\n     *   });\n     * });\n     * ```\n     */\n    getAll(...documentRefsOrReadOptions) {\n        if (this._writeBatch && !this._writeBatch.isEmpty) {\n            throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n        }\n        (0, validate_1.validateMinNumberOfArguments)('Transaction.getAll', documentRefsOrReadOptions, 1);\n        return this.withLazyStartedTransaction(parseGetAllArguments(documentRefsOrReadOptions), this.getBatchFn);\n    }\n    /**\n     * Create the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The operation will\n     * fail the transaction if a document exists at the specified location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {DocumentData} data The object data to serialize as the document.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (!doc.exists) {\n     *       transaction.create(documentRef, { foo: 'bar' });\n     *     }\n     *   });\n     * });\n     * ```\n     */\n    create(documentRef, data) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        this._writeBatch.create(documentRef, data);\n        return this;\n    }\n    /**\n     * Writes to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * does not exist yet, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into the\n     * existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T|Partial<T>} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call remain\n     * untouched. If your input sets any field to an empty map, all nested fields\n     * are overwritten.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched. If your input sets any field to\n     * an empty map, all nested fields are overwritten.\n     * @throws {Error} If the provided input is not a valid Firestore document.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.set(documentRef, { foo: 'bar' });\n     *   return Promise.resolve();\n     * });\n     * ```\n     */\n    set(documentRef, data, options) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        if (options) {\n            this._writeBatch.set(documentRef, data, options);\n        }\n        else {\n            this._writeBatch.set(documentRef, data);\n        }\n        return this;\n    }\n    /**\n     * Updates fields in the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The update will\n     * fail if applied to a document that does not exist.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to to enforce on this update.\n     * @throws {Error} If the provided input is not valid Firestore data.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     * ```\n     */\n    update(documentRef, dataOrField, ...preconditionOrValues) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        // eslint-disable-next-line prefer-rest-params\n        (0, validate_1.validateMinNumberOfArguments)('Transaction.update', arguments, 2);\n        this._writeBatch.update(documentRef, dataOrField, ...preconditionOrValues);\n        return this;\n    }\n    /**\n     * Deletes the document referred to by the provided [DocumentReference]\n     * {@link DocumentReference}.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the transaction if the\n     * document doesn't exist or was last updated at a different time.\n     * @param {boolean=} precondition.exists If set, enforces that the target\n     * document must or must not exist.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * ```\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.delete(documentRef);\n     *   return Promise.resolve();\n     * });\n     * ```\n     */\n    delete(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    documentRef, precondition) {\n        if (!this._writeBatch) {\n            throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n        }\n        this._writeBatch.delete(documentRef, precondition);\n        return this;\n    }\n    /**\n     * Commits all queued-up changes in this transaction and releases all locks.\n     *\n     * @private\n     * @internal\n     */\n    async commit() {\n        var _a;\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_COMMIT, async () => {\n            if (!this._writeBatch) {\n                throw new Error(READ_ONLY_WRITE_ERROR_MSG);\n            }\n            // If we have not performed any reads in this particular attempt\n            // then the writes will be atomically committed without a transaction ID\n            let transactionId;\n            if (this._transactionIdPromise) {\n                transactionId = await this._transactionIdPromise;\n            }\n            else if (this._writeBatch.isEmpty) {\n                // If we have not started a transaction (no reads) and we have no writes\n                // then the commit is a no-op (success)\n                return;\n            }\n            await this._writeBatch._commit({\n                transactionId,\n                requestTag: this._requestTag,\n            });\n            this._transactionIdPromise = undefined;\n            this._prevTransactionId = transactionId;\n        }, {\n            [trace_util_1.ATTRIBUTE_KEY_IS_TRANSACTIONAL]: true,\n            [trace_util_1.ATTRIBUTE_KEY_DOC_COUNT]: (_a = this._writeBatch) === null || _a === void 0 ? void 0 : _a._opCount,\n        });\n    }\n    /**\n     * Releases all locks and rolls back this transaction. The rollback process\n     * is completed asynchronously and this function resolves before the operation\n     * is completed.\n     *\n     * @private\n     * @internal\n     */\n    async rollback() {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_ROLLBACK, async () => {\n            // No need to roll back if we have not lazily started the transaction\n            // or if we are read only\n            if (!this._transactionIdPromise || !this._writeBatch) {\n                return;\n            }\n            let transactionId;\n            try {\n                transactionId = await this._transactionIdPromise;\n            }\n            catch (_a) {\n                // This means the initial read operation rejected\n                // and we do not have a transaction ID to roll back\n                this._transactionIdPromise = undefined;\n                return;\n            }\n            const request = {\n                database: this._firestore.formattedName,\n                transaction: transactionId,\n            };\n            this._transactionIdPromise = undefined;\n            this._prevTransactionId = transactionId;\n            // We don't need to wait for rollback to completed before continuing.\n            // If there are any locks held, then rollback will eventually release them.\n            // Rollback can be done concurrently thereby reducing latency caused by\n            // otherwise blocking.\n            this._firestore\n                .request('rollback', request, this._requestTag)\n                .catch(err => {\n                (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Best effort to rollback failed with error:', err);\n            });\n        });\n    }\n    /**\n     * Executes `updateFunction()` and commits the transaction with retry.\n     *\n     * @private\n     * @internal\n     * @param updateFunction The user function to execute within the transaction\n     * context.\n     */\n    async runTransaction(updateFunction) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_RUN, async (span) => {\n            // No backoff is set for readonly transactions (i.e. attempts == 1)\n            if (!this._writeBatch) {\n                return this.runTransactionOnce(updateFunction);\n            }\n            let lastError = undefined;\n            for (let attempt = 0; attempt < this._maxAttempts; ++attempt) {\n                span.setAttributes({\n                    [trace_util_1.ATTRIBUTE_KEY_TRANSACTION_TYPE]: this._writeBatch\n                        ? 'READ_WRITE'\n                        : 'READ_ONLY',\n                    [trace_util_1.ATTRIBUTE_KEY_ATTEMPTS_ALLOWED]: this._maxAttempts,\n                    [trace_util_1.ATTRIBUTE_KEY_ATTEMPTS_REMAINING]: this._maxAttempts - attempt - 1,\n                });\n                try {\n                    if (lastError) {\n                        (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Retrying transaction after error:', lastError);\n                        span.addEvent('Initiate transaction retry');\n                    }\n                    this._writeBatch._reset();\n                    await maybeBackoff(this._backoff, lastError);\n                    return await this.runTransactionOnce(updateFunction);\n                }\n                catch (err) {\n                    lastError = err;\n                    if (!isRetryableTransactionError(err)) {\n                        break;\n                    }\n                }\n            }\n            (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Transaction not eligible for retry, returning error: %s', lastError);\n            return Promise.reject(lastError);\n        });\n    }\n    /**\n     * Make single attempt to execute `updateFunction()` and commit the\n     * transaction. Will rollback upon error.\n     *\n     * @private\n     * @internal\n     * @param updateFunction The user function to execute within the transaction\n     * context.\n     */\n    async runTransactionOnce(updateFunction) {\n        try {\n            const promise = updateFunction(this);\n            if (!(promise instanceof Promise)) {\n                throw new Error('You must return a Promise in your transaction()-callback.');\n            }\n            const result = await promise;\n            if (this._writeBatch) {\n                await this.commit();\n            }\n            return result;\n        }\n        catch (err) {\n            (0, logger_1.logger)('Firestore.runTransaction', this._requestTag, 'Rolling back transaction after callback error:', err);\n            await this.rollback();\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Given a function that performs a read operation, ensures that the first one\n     * is provided with new transaction options and all subsequent ones are queued\n     * upon the resulting transaction ID.\n     */\n    withLazyStartedTransaction(param, resultFn) {\n        if (this._transactionIdPromise) {\n            // Simply queue this subsequent read operation after the first read\n            // operation has resolved and we don't expect a transaction ID in the\n            // response because we are not starting a new transaction\n            return this._transactionIdPromise\n                .then(opts => resultFn.call(this, param, opts))\n                .then(r => r.result);\n        }\n        else {\n            if (this._readOnlyReadTime) {\n                // We do not start a transaction for read-only transactions\n                // do not set _prevTransactionId\n                return resultFn\n                    .call(this, param, this._readOnlyReadTime)\n                    .then(r => r.result);\n            }\n            else {\n                // This is the first read of the transaction so we create the appropriate\n                // options for lazily starting the transaction inside this first read op\n                const opts = {};\n                if (this._writeBatch) {\n                    opts.readWrite = this._prevTransactionId\n                        ? { retryTransaction: this._prevTransactionId }\n                        : {};\n                }\n                else {\n                    opts.readOnly = {};\n                }\n                const resultPromise = resultFn.call(this, param, opts);\n                // Ensure the _transactionIdPromise is set synchronously so that\n                // subsequent operations will not race to start another transaction\n                this._transactionIdPromise = resultPromise.then(r => {\n                    if (!r.transaction) {\n                        // Illegal state\n                        // The read operation was provided with new transaction options but did not return a transaction ID\n                        // Rejecting here will cause all queued reads to reject\n                        throw new Error('Transaction ID was missing from server response');\n                    }\n                    return r.transaction;\n                });\n                return resultPromise.then(r => r.result);\n            }\n        }\n    }\n    async getSingleFn(document, opts) {\n        const documentReader = new document_reader_1.DocumentReader(this._firestore, [document], undefined, opts);\n        const { transaction, result: [result], } = await documentReader._get(this._requestTag);\n        return { transaction, result };\n    }\n    async getBatchFn({ documents, fieldMask, }, opts) {\n        return this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_TRANSACTION_GET_DOCUMENTS, async () => {\n            const documentReader = new document_reader_1.DocumentReader(this._firestore, documents, fieldMask, opts);\n            return documentReader._get(this._requestTag);\n        });\n    }\n    async getQueryFn(query, opts) {\n        return query._get(opts);\n    }\n}\nexports.Transaction = Transaction;\n/**\n * Parses the arguments for the `getAll()` call supported by both the Firestore\n * and Transaction class.\n *\n * @private\n * @internal\n * @param documentRefsOrReadOptions An array of document references followed by\n * an optional ReadOptions object.\n */\nfunction parseGetAllArguments(documentRefsOrReadOptions) {\n    let documents;\n    let readOptions = undefined;\n    if (Array.isArray(documentRefsOrReadOptions[0])) {\n        throw new Error('getAll() no longer accepts an array as its first argument. ' +\n            'Please unpack your array and call getAll() with individual arguments.');\n    }\n    if (documentRefsOrReadOptions.length > 0 &&\n        (0, util_1.isPlainObject)(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {\n        readOptions = documentRefsOrReadOptions.pop();\n        documents = documentRefsOrReadOptions;\n    }\n    else {\n        documents = documentRefsOrReadOptions;\n    }\n    for (let i = 0; i < documents.length; ++i) {\n        (0, helpers_1.validateDocumentReference)(i, documents[i]);\n    }\n    validateReadOptions('options', readOptions, { optional: true });\n    const fieldMask = readOptions && readOptions.fieldMask\n        ? readOptions.fieldMask.map(fieldPath => path_1.FieldPath.fromArgument(fieldPath))\n        : undefined;\n    return { fieldMask, documents };\n}\n/**\n * Validates the use of 'options' as ReadOptions and enforces that 'fieldMask'\n * is an array of strings or field paths.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the ReadOptions can be omitted.\n */\nfunction validateReadOptions(arg, value, options) {\n    if (!(0, validate_1.validateOptional)(value, options)) {\n        if (!(0, util_1.isObject)(value)) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} Input is not an object.'`);\n        }\n        const options = value;\n        if (options.fieldMask !== undefined) {\n            if (!Array.isArray(options.fieldMask)) {\n                throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} \"fieldMask\" is not an array.`);\n            }\n            for (let i = 0; i < options.fieldMask.length; ++i) {\n                try {\n                    (0, path_1.validateFieldPath)(i, options.fieldMask[i]);\n                }\n                catch (err) {\n                    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, 'read option')} \"fieldMask\" is not valid: ${err.message}`);\n                }\n            }\n        }\n    }\n}\nfunction isRetryableTransactionError(error) {\n    if (error.code !== undefined) {\n        // This list is based on https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/core/transaction_runner.ts#L112\n        switch (error.code) {\n            case 10 /* StatusCode.ABORTED */:\n            case 1 /* StatusCode.CANCELLED */:\n            case 2 /* StatusCode.UNKNOWN */:\n            case 4 /* StatusCode.DEADLINE_EXCEEDED */:\n            case 13 /* StatusCode.INTERNAL */:\n            case 14 /* StatusCode.UNAVAILABLE */:\n            case 16 /* StatusCode.UNAUTHENTICATED */:\n            case 8 /* StatusCode.RESOURCE_EXHAUSTED */:\n                return true;\n            case 3 /* StatusCode.INVALID_ARGUMENT */:\n                // The Firestore backend uses \"INVALID_ARGUMENT\" for transactions\n                // IDs that have expired. While INVALID_ARGUMENT is generally not\n                // retryable, we retry this specific case.\n                return !!error.message.match(/transaction has expired/);\n            default:\n                return false;\n        }\n    }\n    return false;\n}\n/**\n * Delays further operations based on the provided error.\n *\n * @private\n * @internal\n * @return A Promise that resolves after the delay expired.\n */\nasync function maybeBackoff(backoff, error) {\n    if ((error === null || error === void 0 ? void 0 : error.code) === 8 /* StatusCode.RESOURCE_EXHAUSTED */) {\n        backoff.resetToMax();\n    }\n    await backoff.backoffAndWait();\n}\n//# sourceMappingURL=transaction.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12062, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/query-partition.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryPartition = void 0;\nconst field_order_1 = require(\"./reference/field-order\");\nconst query_1 = require(\"./reference/query\");\nconst query_options_1 = require(\"./reference/query-options\");\nconst path_1 = require(\"./path\");\nconst serializer_1 = require(\"./serializer\");\n/**\n * A split point that can be used in a query as a starting and/or end point for\n * the query results. The cursors returned by {@link #startAt} and {@link\n * #endBefore} can only be used in a query that matches the constraint of query\n * that produced this partition.\n *\n * @class QueryPartition\n */\nclass QueryPartition {\n    /** @private */\n    constructor(_firestore, _collectionId, _converter, _startAt, _endBefore) {\n        this._firestore = _firestore;\n        this._collectionId = _collectionId;\n        this._converter = _converter;\n        this._startAt = _startAt;\n        this._endBefore = _endBefore;\n        this._serializer = new serializer_1.Serializer(_firestore);\n    }\n    /**\n     * The cursor that defines the first result for this partition or `undefined`\n     * if this is the first partition. The cursor value must be\n     * destructured when passed to `startAt()` (for example with\n     * `query.startAt(...queryPartition.startAt)`).\n     *\n     * @example\n     * ```\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   let partitionedQuery = query.orderBy(FieldPath.documentId());\n     *   if (partition.startAt) {\n     *     partitionedQuery = partitionedQuery.startAt(...partition.startAt);\n     *   }\n     *   if (partition.endBefore) {\n     *     partitionedQuery = partitionedQuery.endBefore(...partition.endBefore);\n     *   }\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * ```\n     * @type {Array<*>}\n     * @return {Array<*>} A cursor value that can be used with {@link\n     * Query#startAt} or `undefined` if this is the first partition.\n     */\n    get startAt() {\n        if (this._startAt && !this._memoizedStartAt) {\n            this._memoizedStartAt = this._startAt.map(v => this._serializer.decodeValue(v));\n        }\n        return this._memoizedStartAt;\n    }\n    /**\n     * The cursor that defines the first result after this partition or\n     * `undefined` if this is the last partition.  The cursor value must be\n     * destructured when passed to `endBefore()` (for example with\n     * `query.endBefore(...queryPartition.endBefore)`).\n     *\n     * @example\n     * ```\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   let partitionedQuery = query.orderBy(FieldPath.documentId());\n     *   if (partition.startAt) {\n     *     partitionedQuery = partitionedQuery.startAt(...partition.startAt);\n     *   }\n     *   if (partition.endBefore) {\n     *     partitionedQuery = partitionedQuery.endBefore(...partition.endBefore);\n     *   }\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * ```\n     * @type {Array<*>}\n     * @return {Array<*>} A cursor value that can be used with {@link\n     * Query#endBefore} or `undefined` if this is the last partition.\n     */\n    get endBefore() {\n        if (this._endBefore && !this._memoizedEndBefore) {\n            this._memoizedEndBefore = this._endBefore.map(v => this._serializer.decodeValue(v));\n        }\n        return this._memoizedEndBefore;\n    }\n    /**\n     * Returns a query that only encapsulates the documents for this partition.\n     *\n     * @example\n     * ```\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   const partitionedQuery = partition.toQuery();\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * ```\n     * @return {Query<T>} A query partitioned by a {@link Query#startAt} and\n     * {@link Query#endBefore} cursor.\n     */\n    toQuery() {\n        // Since the api.Value to JavaScript type conversion can be lossy (unless\n        // `useBigInt` is used), we pass the original protobuf representation to the\n        // created query.\n        let queryOptions = query_options_1.QueryOptions.forCollectionGroupQuery(this._collectionId, this._converter);\n        queryOptions = queryOptions.with({\n            fieldOrders: [new field_order_1.FieldOrder(path_1.FieldPath.documentId())],\n        });\n        if (this._startAt !== undefined) {\n            queryOptions = queryOptions.with({\n                startAt: { before: true, values: this._startAt },\n            });\n        }\n        if (this._endBefore !== undefined) {\n            queryOptions = queryOptions.with({\n                endAt: { before: true, values: this._endBefore },\n            });\n        }\n        return new query_1.Query(this._firestore, queryOptions);\n    }\n}\nexports.QueryPartition = QueryPartition;\n//# sourceMappingURL=query-partition.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,KAAK;AAC9B,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN;;;;;;;CAOC,GACD,MAAM;IACF,aAAa,GACb,YAAY,UAAU,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAE;QACrE,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,WAAW,GAAG,IAAI,aAAa,UAAU,CAAC;IACnD;IACA;;;;;;;;;;;;;;;;;;;;;;;;;KAyBC,GACD,IAAI,UAAU;QACV,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACzC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA,IAAK,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;QAChF;QACA,OAAO,IAAI,CAAC,gBAAgB;IAChC;IACA;;;;;;;;;;;;;;;;;;;;;;;;;KAyBC,GACD,IAAI,YAAY;QACZ,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC7C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA,IAAK,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;QACpF;QACA,OAAO,IAAI,CAAC,kBAAkB;IAClC;IACA;;;;;;;;;;;;;;;KAeC,GACD,UAAU;QACN,yEAAyE;QACzE,4EAA4E;QAC5E,iBAAiB;QACjB,IAAI,eAAe,gBAAgB,YAAY,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU;QAC3G,eAAe,aAAa,IAAI,CAAC;YAC7B,aAAa;gBAAC,IAAI,cAAc,UAAU,CAAC,OAAO,SAAS,CAAC,UAAU;aAAI;QAC9E;QACA,IAAI,IAAI,CAAC,QAAQ,KAAK,WAAW;YAC7B,eAAe,aAAa,IAAI,CAAC;gBAC7B,SAAS;oBAAE,QAAQ;oBAAM,QAAQ,IAAI,CAAC,QAAQ;gBAAC;YACnD;QACJ;QACA,IAAI,IAAI,CAAC,UAAU,KAAK,WAAW;YAC/B,eAAe,aAAa,IAAI,CAAC;gBAC7B,OAAO;oBAAE,QAAQ;oBAAM,QAAQ,IAAI,CAAC,UAAU;gBAAC;YACnD;QACJ;QACA,OAAO,IAAI,QAAQ,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE;IAC9C;AACJ;AACA,QAAQ,cAAc,GAAG,gBACzB,2CAA2C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12214, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/collection-group.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CollectionGroup = void 0;\nconst query_partition_1 = require(\"./query-partition\");\nconst util_1 = require(\"./util\");\nconst logger_1 = require(\"./logger\");\nconst query_1 = require(\"./reference/query\");\nconst query_options_1 = require(\"./reference/query-options\");\nconst path_1 = require(\"./path\");\nconst validate_1 = require(\"./validate\");\nconst types_1 = require(\"./types\");\nconst order_1 = require(\"./order\");\nconst trace_util_1 = require(\"./telemetry/trace-util\");\n/**\n * A `CollectionGroup` refers to all documents that are contained in a\n * collection or subcollection with a specific collection ID.\n *\n * @class CollectionGroup\n */\nclass CollectionGroup extends query_1.Query {\n    /** @private */\n    constructor(firestore, collectionId, converter) {\n        super(firestore, query_options_1.QueryOptions.forCollectionGroupQuery(collectionId, converter));\n    }\n    /**\n     * Partitions a query by returning partition cursors that can be used to run\n     * the query in parallel. The returned cursors are split points that can be\n     * used as starting and end points for individual query invocations.\n     *\n     * @example\n     * ```\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   const partitionedQuery = partition.toQuery();\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * ```\n     * @param {number} desiredPartitionCount The desired maximum number of\n     * partition points. The number must be strictly positive. The actual number\n     * of partitions returned may be fewer.\n     * @return {AsyncIterable<QueryPartition>} An AsyncIterable of\n     * `QueryPartition`s.\n     */\n    async *getPartitions(desiredPartitionCount) {\n        const partitions = [];\n        await this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_PARTITION_QUERY, async () => {\n            var _a;\n            (0, validate_1.validateInteger)('desiredPartitionCount', desiredPartitionCount, {\n                minValue: 1,\n            });\n            const tag = (0, util_1.requestTag)();\n            await this.firestore.initializeIfNeeded(tag);\n            if (desiredPartitionCount > 1) {\n                // Partition queries require explicit ordering by __name__.\n                const queryWithDefaultOrder = this.orderBy(path_1.FieldPath.documentId());\n                const request = queryWithDefaultOrder.toProto();\n                // Since we are always returning an extra partition (with an empty endBefore\n                // cursor), we reduce the desired partition count by one.\n                request.partitionCount = desiredPartitionCount - 1;\n                const stream = await this.firestore.requestStream('partitionQueryStream', \n                /* bidirectional= */ false, request, tag);\n                stream.resume();\n                for await (const currentCursor of stream) {\n                    partitions.push((_a = currentCursor.values) !== null && _a !== void 0 ? _a : []);\n                }\n            }\n            (0, logger_1.logger)('Firestore.getPartitions', tag, 'Received %d partitions', partitions.length);\n            // Sort the partitions as they may not be ordered if responses are paged.\n            partitions.sort((l, r) => (0, order_1.compareArrays)(l, r));\n        });\n        for (let i = 0; i < partitions.length; ++i) {\n            yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, i > 0 ? partitions[i - 1] : undefined, partitions[i]);\n        }\n        // Return the extra partition with the empty cursor.\n        yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, partitions.pop(), undefined);\n    }\n    withConverter(converter) {\n        return new CollectionGroup(this.firestore, this._queryOptions.collectionId, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());\n    }\n}\nexports.CollectionGroup = CollectionGroup;\n//# sourceMappingURL=collection-group.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG,KAAK;AAC/B,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN;;;;;CAKC,GACD,MAAM,wBAAwB,QAAQ,KAAK;IACvC,aAAa,GACb,YAAY,SAAS,EAAE,YAAY,EAAE,SAAS,CAAE;QAC5C,KAAK,CAAC,WAAW,gBAAgB,YAAY,CAAC,uBAAuB,CAAC,cAAc;IACxF;IACA;;;;;;;;;;;;;;;;;;;;KAoBC,GACD,OAAO,cAAc,qBAAqB,EAAE;QACxC,MAAM,aAAa,EAAE;QACrB,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,aAAa,yBAAyB,EAAE;YACrF,IAAI;YACJ,CAAC,GAAG,WAAW,eAAe,EAAE,yBAAyB,uBAAuB;gBAC5E,UAAU;YACd;YACA,MAAM,MAAM,CAAC,GAAG,OAAO,UAAU;YACjC,MAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC;YACxC,IAAI,wBAAwB,GAAG;gBAC3B,2DAA2D;gBAC3D,MAAM,wBAAwB,IAAI,CAAC,OAAO,CAAC,OAAO,SAAS,CAAC,UAAU;gBACtE,MAAM,UAAU,sBAAsB,OAAO;gBAC7C,4EAA4E;gBAC5E,yDAAyD;gBACzD,QAAQ,cAAc,GAAG,wBAAwB;gBACjD,MAAM,SAAS,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,wBAClD,kBAAkB,GAAG,OAAO,SAAS;gBACrC,OAAO,MAAM;gBACb,WAAW,MAAM,iBAAiB,OAAQ;oBACtC,WAAW,IAAI,CAAC,CAAC,KAAK,cAAc,MAAM,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,EAAE;gBACnF;YACJ;YACA,CAAC,GAAG,SAAS,MAAM,EAAE,2BAA2B,KAAK,0BAA0B,WAAW,MAAM;YAChG,yEAAyE;YACzE,WAAW,IAAI,CAAC,CAAC,GAAG,IAAM,CAAC,GAAG,QAAQ,aAAa,EAAE,GAAG;QAC5D;QACA,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,EAAE,EAAG;YACxC,MAAM,IAAI,kBAAkB,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,IAAI,UAAU,CAAC,IAAI,EAAE,GAAG,WAAW,UAAU,CAAC,EAAE;QACnL;QACA,oDAAoD;QACpD,MAAM,IAAI,kBAAkB,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,WAAW,GAAG,IAAI;IACjJ;IACA,cAAc,SAAS,EAAE;QACrB,OAAO,IAAI,gBAAgB,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,QAAQ,cAAc,KAAK,IAAI,YAAY,CAAC,GAAG,QAAQ,gBAAgB;IACrK;AACJ;AACA,QAAQ,eAAe,GAAG,iBAC1B,4CAA4C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12314, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/recursive-delete.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RecursiveDelete = exports.RECURSIVE_DELETE_MIN_PENDING_OPS = exports.RECURSIVE_DELETE_MAX_PENDING_OPS = exports.REFERENCE_NAME_MIN_ID = void 0;\nconst assert = require(\"assert\");\nconst _1 = require(\".\");\nconst util_1 = require(\"./util\");\nconst query_options_1 = require(\"./reference/query-options\");\n/*!\n * Datastore allowed numeric IDs where Firestore only allows strings. Numeric\n * IDs are exposed to Firestore as __idNUM__, so this is the lowest possible\n * negative numeric value expressed in that format.\n *\n * This constant is used to specify startAt/endAt values when querying for all\n * descendants in a single collection.\n */\nexports.REFERENCE_NAME_MIN_ID = '__id-9223372036854775808__';\n/*!\n * The query limit used for recursive deletes when fetching all descendants of\n * the specified reference to delete. This is done to prevent the query stream\n * from streaming documents faster than Firestore can delete.\n */\n// Visible for testing.\nexports.RECURSIVE_DELETE_MAX_PENDING_OPS = 5000;\n/*!\n * The number of pending BulkWriter operations at which RecursiveDelete\n * starts the next limit query to fetch descendants. By starting the query\n * while there are pending operations, Firestore can improve BulkWriter\n * throughput. This helps prevent BulkWriter from idling while Firestore\n * fetches the next query.\n */\nexports.RECURSIVE_DELETE_MIN_PENDING_OPS = 1000;\n/**\n * Class used to store state required for running a recursive delete operation.\n * Each recursive delete call should use a new instance of the class.\n * @private\n * @internal\n */\nclass RecursiveDelete {\n    /**\n     *\n     * @param firestore The Firestore instance to use.\n     * @param writer The BulkWriter instance to use for delete operations.\n     * @param ref The document or collection reference to recursively delete.\n     * @param maxLimit The query limit to use when fetching descendants\n     * @param minLimit The number of pending BulkWriter operations at which\n     * RecursiveDelete starts the next limit query to fetch descendants.\n     */\n    constructor(firestore, writer, ref, maxLimit, minLimit) {\n        this.firestore = firestore;\n        this.writer = writer;\n        this.ref = ref;\n        this.maxLimit = maxLimit;\n        this.minLimit = minLimit;\n        /**\n         * The number of deletes that failed with a permanent error.\n         * @private\n         * @internal\n         */\n        this.errorCount = 0;\n        /**\n         * Whether there are still documents to delete that still need to be fetched.\n         * @private\n         * @internal\n         */\n        this.documentsPending = true;\n        /**\n         * Whether run() has been called.\n         * @private\n         * @internal\n         */\n        this.started = false;\n        /**\n         * A deferred promise that resolves when the recursive delete operation\n         * is completed.\n         * @private\n         * @internal\n         */\n        this.completionDeferred = new util_1.Deferred();\n        /**\n         * Whether a query stream is currently in progress. Only one stream can be\n         * run at a time.\n         * @private\n         * @internal\n         */\n        this.streamInProgress = false;\n        /**\n         * The number of pending BulkWriter operations. Used to determine when the\n         * next query can be run.\n         * @private\n         * @internal\n         */\n        this.pendingOpsCount = 0;\n        this.errorStack = '';\n        this.maxPendingOps = maxLimit;\n        this.minPendingOps = minLimit;\n    }\n    /**\n     * Recursively deletes the reference provided in the class constructor.\n     * Returns a promise that resolves when all descendants have been deleted, or\n     * if an error occurs.\n     */\n    run() {\n        assert(!this.started, 'RecursiveDelete.run() should only be called once.');\n        // Capture the error stack to preserve stack tracing across async calls.\n        this.errorStack = Error().stack;\n        this.writer._verifyNotClosed();\n        this.setupStream();\n        return this.completionDeferred.promise;\n    }\n    /**\n     * Creates a query stream and attaches event handlers to it.\n     * @private\n     * @internal\n     */\n    setupStream() {\n        const stream = this.getAllDescendants(this.ref instanceof _1.CollectionReference\n            ? this.ref\n            : this.ref);\n        this.streamInProgress = true;\n        let streamedDocsCount = 0;\n        stream\n            .on('error', err => {\n            err.code = 14 /* StatusCode.UNAVAILABLE */;\n            err.stack = 'Failed to fetch children documents: ' + err.stack;\n            this.lastError = err;\n            this.onQueryEnd();\n        })\n            .on('data', (snap) => {\n            streamedDocsCount++;\n            this.lastDocumentSnap = snap;\n            this.deleteRef(snap.ref);\n        })\n            .on('end', () => {\n            this.streamInProgress = false;\n            // If there are fewer than the number of documents specified in the\n            // limit() field, we know that the query is complete.\n            if (streamedDocsCount < this.minPendingOps) {\n                this.onQueryEnd();\n            }\n            else if (this.pendingOpsCount === 0) {\n                this.setupStream();\n            }\n        });\n    }\n    /**\n     * Retrieves all descendant documents nested under the provided reference.\n     * @param ref The reference to fetch all descendants for.\n     * @private\n     * @internal\n     * @return {Stream<QueryDocumentSnapshot>} Stream of descendant documents.\n     */\n    getAllDescendants(ref) {\n        // The parent is the closest ancestor document to the location we're\n        // deleting. If we are deleting a document, the parent is the path of that\n        // document. If we are deleting a collection, the parent is the path of the\n        // document containing that collection (or the database root, if it is a\n        // root collection).\n        let parentPath = ref._resourcePath;\n        if (ref instanceof _1.CollectionReference) {\n            parentPath = parentPath.popLast();\n        }\n        const collectionId = ref instanceof _1.CollectionReference\n            ? ref.id\n            : ref.parent.id;\n        let query = new _1.Query(this.firestore, query_options_1.QueryOptions.forKindlessAllDescendants(parentPath, collectionId, \n        /* requireConsistency= */ false));\n        // Query for names only to fetch empty snapshots.\n        query = query.select(_1.FieldPath.documentId()).limit(this.maxPendingOps);\n        if (ref instanceof _1.CollectionReference) {\n            // To find all descendants of a collection reference, we need to use a\n            // composite filter that captures all documents that start with the\n            // collection prefix. The MIN_KEY constant represents the minimum key in\n            // this collection, and a null byte + the MIN_KEY represents the minimum\n            // key is the next possible collection.\n            const nullChar = String.fromCharCode(0);\n            const startAt = collectionId + '/' + exports.REFERENCE_NAME_MIN_ID;\n            const endAt = collectionId + nullChar + '/' + exports.REFERENCE_NAME_MIN_ID;\n            query = query\n                .where(_1.FieldPath.documentId(), '>=', startAt)\n                .where(_1.FieldPath.documentId(), '<', endAt);\n        }\n        if (this.lastDocumentSnap) {\n            query = query.startAfter(this.lastDocumentSnap);\n        }\n        return query.stream();\n    }\n    /**\n     * Called when all descendants of the provided reference have been streamed\n     * or if a permanent error occurs during the stream. Deletes the developer\n     * provided reference and wraps any errors that occurred.\n     * @private\n     * @internal\n     */\n    onQueryEnd() {\n        this.documentsPending = false;\n        if (this.ref instanceof _1.DocumentReference) {\n            this.writer.delete(this.ref).catch(err => this.incrementErrorCount(err));\n        }\n        this.writer.flush().then(async () => {\n            var _a;\n            if (this.lastError === undefined) {\n                this.completionDeferred.resolve();\n            }\n            else {\n                let error = new (require('google-gax/build/src/fallback').GoogleError)(`${this.errorCount} ` +\n                    `${this.errorCount !== 1 ? 'deletes' : 'delete'} ` +\n                    'failed. The last delete failed with: ');\n                if (this.lastError.code !== undefined) {\n                    error.code = this.lastError.code;\n                }\n                error = (0, util_1.wrapError)(error, this.errorStack);\n                // Wrap the BulkWriter error last to provide the full stack trace.\n                this.completionDeferred.reject(this.lastError.stack\n                    ? (0, util_1.wrapError)(error, (_a = this.lastError.stack) !== null && _a !== void 0 ? _a : '')\n                    : error);\n            }\n        });\n    }\n    /**\n     * Deletes the provided reference and starts the next stream if conditions\n     * are met.\n     * @private\n     * @internal\n     */\n    deleteRef(docRef) {\n        this.pendingOpsCount++;\n        this.writer\n            .delete(docRef)\n            .catch(err => {\n            this.incrementErrorCount(err);\n        })\n            .then(() => {\n            this.pendingOpsCount--;\n            // We wait until the previous stream has ended in order to sure the\n            // startAfter document is correct. Starting the next stream while\n            // there are pending operations allows Firestore to maximize\n            // BulkWriter throughput.\n            if (this.documentsPending &&\n                !this.streamInProgress &&\n                this.pendingOpsCount < this.minPendingOps) {\n                this.setupStream();\n            }\n        });\n    }\n    incrementErrorCount(err) {\n        this.errorCount++;\n        this.lastError = err;\n    }\n}\nexports.RecursiveDelete = RecursiveDelete;\n//# sourceMappingURL=recursive-delete.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG,QAAQ,gCAAgC,GAAG,QAAQ,gCAAgC,GAAG,QAAQ,qBAAqB,GAAG,KAAK;AACrJ,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN;;;;;;;CAOC,GACD,QAAQ,qBAAqB,GAAG;AAChC;;;;CAIC,GACD,uBAAuB;AACvB,QAAQ,gCAAgC,GAAG;AAC3C;;;;;;CAMC,GACD,QAAQ,gCAAgC,GAAG;AAC3C;;;;;CAKC,GACD,MAAM;IACF;;;;;;;;KAQC,GACD,YAAY,SAAS,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAE;QACpD,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,QAAQ,GAAG;QAChB;;;;SAIC,GACD,IAAI,CAAC,UAAU,GAAG;QAClB;;;;SAIC,GACD,IAAI,CAAC,gBAAgB,GAAG;QACxB;;;;SAIC,GACD,IAAI,CAAC,OAAO,GAAG;QACf;;;;;SAKC,GACD,IAAI,CAAC,kBAAkB,GAAG,IAAI,OAAO,QAAQ;QAC7C;;;;;SAKC,GACD,IAAI,CAAC,gBAAgB,GAAG;QACxB;;;;;SAKC,GACD,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,aAAa,GAAG;IACzB;IACA;;;;KAIC,GACD,MAAM;QACF,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE;QACtB,wEAAwE;QACxE,IAAI,CAAC,UAAU,GAAG,QAAQ,KAAK;QAC/B,IAAI,CAAC,MAAM,CAAC,gBAAgB;QAC5B,IAAI,CAAC,WAAW;QAChB,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO;IAC1C;IACA;;;;KAIC,GACD,cAAc;QACV,MAAM,SAAS,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,YAAY,GAAG,mBAAmB,GAC1E,IAAI,CAAC,GAAG,GACR,IAAI,CAAC,GAAG;QACd,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,oBAAoB;QACxB,OACK,EAAE,CAAC,SAAS,CAAA;YACb,IAAI,IAAI,GAAG,GAAG,0BAA0B;YACxC,IAAI,KAAK,GAAG,yCAAyC,IAAI,KAAK;YAC9D,IAAI,CAAC,SAAS,GAAG;YACjB,IAAI,CAAC,UAAU;QACnB,GACK,EAAE,CAAC,QAAQ,CAAC;YACb;YACA,IAAI,CAAC,gBAAgB,GAAG;YACxB,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG;QAC3B,GACK,EAAE,CAAC,OAAO;YACX,IAAI,CAAC,gBAAgB,GAAG;YACxB,mEAAmE;YACnE,qDAAqD;YACrD,IAAI,oBAAoB,IAAI,CAAC,aAAa,EAAE;gBACxC,IAAI,CAAC,UAAU;YACnB,OACK,IAAI,IAAI,CAAC,eAAe,KAAK,GAAG;gBACjC,IAAI,CAAC,WAAW;YACpB;QACJ;IACJ;IACA;;;;;;KAMC,GACD,kBAAkB,GAAG,EAAE;QACnB,oEAAoE;QACpE,0EAA0E;QAC1E,2EAA2E;QAC3E,wEAAwE;QACxE,oBAAoB;QACpB,IAAI,aAAa,IAAI,aAAa;QAClC,IAAI,eAAe,GAAG,mBAAmB,EAAE;YACvC,aAAa,WAAW,OAAO;QACnC;QACA,MAAM,eAAe,eAAe,GAAG,mBAAmB,GACpD,IAAI,EAAE,GACN,IAAI,MAAM,CAAC,EAAE;QACnB,IAAI,QAAQ,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,YAAY,CAAC,yBAAyB,CAAC,YAAY,cAC5G,uBAAuB,GAAG;QAC1B,iDAAiD;QACjD,QAAQ,MAAM,MAAM,CAAC,GAAG,SAAS,CAAC,UAAU,IAAI,KAAK,CAAC,IAAI,CAAC,aAAa;QACxE,IAAI,eAAe,GAAG,mBAAmB,EAAE;YACvC,sEAAsE;YACtE,mEAAmE;YACnE,wEAAwE;YACxE,wEAAwE;YACxE,uCAAuC;YACvC,MAAM,WAAW,OAAO,YAAY,CAAC;YACrC,MAAM,UAAU,eAAe,MAAM,QAAQ,qBAAqB;YAClE,MAAM,QAAQ,eAAe,WAAW,MAAM,QAAQ,qBAAqB;YAC3E,QAAQ,MACH,KAAK,CAAC,GAAG,SAAS,CAAC,UAAU,IAAI,MAAM,SACvC,KAAK,CAAC,GAAG,SAAS,CAAC,UAAU,IAAI,KAAK;QAC/C;QACA,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,QAAQ,MAAM,UAAU,CAAC,IAAI,CAAC,gBAAgB;QAClD;QACA,OAAO,MAAM,MAAM;IACvB;IACA;;;;;;KAMC,GACD,aAAa;QACT,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,IAAI,CAAC,GAAG,YAAY,GAAG,iBAAiB,EAAE;YAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA,MAAO,IAAI,CAAC,mBAAmB,CAAC;QACvE;QACA,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;YACrB,IAAI;YACJ,IAAI,IAAI,CAAC,SAAS,KAAK,WAAW;gBAC9B,IAAI,CAAC,kBAAkB,CAAC,OAAO;YACnC,OACK;gBACD,IAAI,QAAQ,IAAK,+GAAyC,WAAW,CAAE,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GACxF,GAAG,IAAI,CAAC,UAAU,KAAK,IAAI,YAAY,SAAS,CAAC,CAAC,GAClD;gBACJ,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,WAAW;oBACnC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI;gBACpC;gBACA,QAAQ,CAAC,GAAG,OAAO,SAAS,EAAE,OAAO,IAAI,CAAC,UAAU;gBACpD,kEAAkE;gBAClE,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,GAC7C,CAAC,GAAG,OAAO,SAAS,EAAE,OAAO,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,MAC1F;YACV;QACJ;IACJ;IACA;;;;;KAKC,GACD,UAAU,MAAM,EAAE;QACd,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,MAAM,CACN,MAAM,CAAC,QACP,KAAK,CAAC,CAAA;YACP,IAAI,CAAC,mBAAmB,CAAC;QAC7B,GACK,IAAI,CAAC;YACN,IAAI,CAAC,eAAe;YACpB,mEAAmE;YACnE,iEAAiE;YACjE,4DAA4D;YAC5D,yBAAyB;YACzB,IAAI,IAAI,CAAC,gBAAgB,IACrB,CAAC,IAAI,CAAC,gBAAgB,IACtB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,EAAE;gBAC3C,IAAI,CAAC,WAAW;YACpB;QACJ;IACJ;IACA,oBAAoB,GAAG,EAAE;QACrB,IAAI,CAAC,UAAU;QACf,IAAI,CAAC,SAAS,GAAG;IACrB;AACJ;AACA,QAAQ,eAAe,GAAG,iBAC1B,4CAA4C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12534, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/telemetry/span.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Span = void 0;\n/**\n * @private\n * @internal\n */\nclass Span {\n    constructor(span) {\n        this.span = span;\n    }\n    end() {\n        var _a;\n        (_a = this.span) === null || _a === void 0 ? void 0 : _a.end();\n    }\n    addEvent(name, attributes) {\n        var _a;\n        this.span = (_a = this.span) === null || _a === void 0 ? void 0 : _a.addEvent(name, attributes);\n        return this;\n    }\n    setAttributes(attributes) {\n        var _a;\n        this.span = (_a = this.span) === null || _a === void 0 ? void 0 : _a.setAttributes(attributes);\n        return this;\n    }\n}\nexports.Span = Span;\n//# sourceMappingURL=span.js.map"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,IAAI,GAAG,KAAK;AACpB;;;CAGC,GACD,MAAM;IACF,YAAY,IAAI,CAAE;QACd,IAAI,CAAC,IAAI,GAAG;IAChB;IACA,MAAM;QACF,IAAI;QACJ,CAAC,KAAK,IAAI,CAAC,IAAI,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,GAAG;IAChE;IACA,SAAS,IAAI,EAAE,UAAU,EAAE;QACvB,IAAI;QACJ,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,IAAI,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,QAAQ,CAAC,MAAM;QACpF,OAAO,IAAI;IACf;IACA,cAAc,UAAU,EAAE;QACtB,IAAI;QACJ,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,IAAI,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,aAAa,CAAC;QACnF,OAAO,IAAI;IACf;AACJ;AACA,QAAQ,IAAI,GAAG,MACf,gCAAgC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12581, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/telemetry/disabled-trace-util.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DisabledTraceUtil = void 0;\nconst span_1 = require(\"./span\");\n/**\n * @private\n * @internal\n */\nclass DisabledTraceUtil {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startSpan(name) {\n        return new span_1.Span();\n    }\n    startActiveSpan(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    name, fn, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    attributes) {\n        const emptySpan = new span_1.Span();\n        return fn(emptySpan);\n    }\n    currentSpan() {\n        return new span_1.Span();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    recordProjectId(projectId) { }\n}\nexports.DisabledTraceUtil = DisabledTraceUtil;\n//# sourceMappingURL=disabled-trace-util.js.map"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iBAAiB,GAAG,KAAK;AACjC,MAAM;AACN;;;CAGC,GACD,MAAM;IACF,6DAA6D;IAC7D,UAAU,IAAI,EAAE;QACZ,OAAO,IAAI,OAAO,IAAI;IAC1B;IACA,gBACA,6DAA6D;IAC7D,IAAI,EAAE,EAAE,EACR,6DAA6D;IAC7D,UAAU,EAAE;QACR,MAAM,YAAY,IAAI,OAAO,IAAI;QACjC,OAAO,GAAG;IACd;IACA,cAAc;QACV,OAAO,IAAI,OAAO,IAAI;IAC1B;IACA,6DAA6D;IAC7D,gBAAgB,SAAS,EAAE,CAAE;AACjC;AACA,QAAQ,iBAAiB,GAAG,mBAC5B,+CAA+C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12618, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/v1/firestore_admin_client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirestoreAdminClient = void 0;\nconst jsonProtos = require(\"../../protos/admin_v1.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/firestore_admin_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./firestore_admin_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore Admin API.\n *\n *  This API provides several administrative services for Cloud Firestore.\n *\n *  Project, Database, Namespace, Collection, Collection Group, and Document are\n *  used as defined in the Google Cloud Firestore API.\n *\n *  Operation: An Operation represents work being performed in the background.\n *\n *  The index service manages Cloud Firestore indexes.\n *\n *  Index creation is performed asynchronously.\n *  An Operation resource is created for each such asynchronous operation.\n *  The state of the operation (including any errors encountered)\n *  may be queried via the Operation resource.\n *\n *  The Operations collection provides a record of actions performed for the\n *  specified Project (including any Operations in progress). Operations are not\n *  created directly but through calls on other collections or resources.\n *\n *  An Operation that is done may be deleted so that it is no longer listed as\n *  part of the Operation collection. Operations are garbage collected after\n *  30 days. By default, ListOperations will only return in progress and failed\n *  operations. To list completed operation, issue a ListOperations request with\n *  the filter `done: true`.\n *\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\n *  service `google.longrunning.Operations`.\n * @class\n * @memberof v1\n */\nclass FirestoreAdminClient {\n    /**\n     * Construct an instance of FirestoreAdminClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new FirestoreAdminClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b, _c, _d, _e;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\n            throw new Error('Please set either universe_domain or universeDomain, but not both.');\n        }\n        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\n            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\n            : undefined;\n        this._universeDomain =\n            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\n        this._servicePath = 'firestore.' + this._universeDomain;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\n        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== this._servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = require('google-gax');\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = this._servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === this._servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process === 'object' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            backupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/backups/{backup}'),\n            backupSchedulePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/backupSchedules/{backup_schedule}'),\n            collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n            databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n            fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n            indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}'),\n            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n            listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields'),\n        };\n        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const lroOptions = {\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        };\n        if (opts.fallback) {\n            lroOptions.protoJson = protoFilesRoot;\n            lroOptions.httpRules = [\n                {\n                    selector: 'google.longrunning.Operations.CancelOperation',\n                    post: '/v1/{name=projects/*/databases/*/operations/*}:cancel',\n                    body: '*',\n                },\n                {\n                    selector: 'google.longrunning.Operations.DeleteOperation',\n                    delete: '/v1/{name=projects/*/databases/*/operations/*}',\n                },\n                {\n                    selector: 'google.longrunning.Operations.GetOperation',\n                    get: '/v1/{name=projects/*/databases/*/operations/*}',\n                },\n                {\n                    selector: 'google.longrunning.Operations.ListOperations',\n                    get: '/v1/{name=projects/*/databases/*}/operations',\n                },\n            ];\n        }\n        this.operationsClient = this._gaxModule\n            .lro(lroOptions)\n            .operationsClient(opts);\n        const createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n        const createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n        const updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n        const updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n        const exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n        const exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n        const importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n        const importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n        const bulkDeleteDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.BulkDeleteDocumentsResponse');\n        const bulkDeleteDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.BulkDeleteDocumentsMetadata');\n        const createDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n        const createDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.CreateDatabaseMetadata');\n        const updateDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n        const updateDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.UpdateDatabaseMetadata');\n        const deleteDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n        const deleteDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.DeleteDatabaseMetadata');\n        const restoreDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n        const restoreDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.RestoreDatabaseMetadata');\n        this.descriptors.longrunning = {\n            createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n            updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n            exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n            importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata)),\n            bulkDeleteDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, bulkDeleteDocumentsResponse.decode.bind(bulkDeleteDocumentsResponse), bulkDeleteDocumentsMetadata.decode.bind(bulkDeleteDocumentsMetadata)),\n            createDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createDatabaseResponse.decode.bind(createDatabaseResponse), createDatabaseMetadata.decode.bind(createDatabaseMetadata)),\n            updateDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDatabaseResponse.decode.bind(updateDatabaseResponse), updateDatabaseMetadata.decode.bind(updateDatabaseMetadata)),\n            deleteDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteDatabaseResponse.decode.bind(deleteDatabaseResponse), deleteDatabaseMetadata.decode.bind(deleteDatabaseMetadata)),\n            restoreDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, restoreDatabaseResponse.decode.bind(restoreDatabaseResponse), restoreDatabaseMetadata.decode.bind(restoreDatabaseMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreAdminStub) {\n            return this.firestoreAdminStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.admin.v1.FirestoreAdmin.\n        this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreAdminStubMethods = [\n            'createIndex',\n            'listIndexes',\n            'getIndex',\n            'deleteIndex',\n            'getField',\n            'updateField',\n            'listFields',\n            'exportDocuments',\n            'importDocuments',\n            'bulkDeleteDocuments',\n            'createDatabase',\n            'getDatabase',\n            'listDatabases',\n            'updateDatabase',\n            'deleteDatabase',\n            'getBackup',\n            'listBackups',\n            'deleteBackup',\n            'restoreDatabase',\n            'createBackupSchedule',\n            'getBackupSchedule',\n            'listBackupSchedules',\n            'updateBackupSchedule',\n            'deleteBackupSchedule',\n        ];\n        for (const methodName of firestoreAdminStubMethods) {\n            const callPromise = this.firestoreAdminStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.longrunning[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreAdminStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    get apiEndpoint() {\n        return this._servicePath;\n    }\n    get universeDomain() {\n        return this._universeDomain;\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    getIndex(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getIndex(request, options, callback);\n    }\n    deleteIndex(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteIndex(request, options, callback);\n    }\n    getField(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getField(request, options, callback);\n    }\n    getDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getDatabase(request, options, callback);\n    }\n    listDatabases(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listDatabases(request, options, callback);\n    }\n    getBackup(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getBackup(request, options, callback);\n    }\n    listBackups(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listBackups(request, options, callback);\n    }\n    deleteBackup(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteBackup(request, options, callback);\n    }\n    createBackupSchedule(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createBackupSchedule(request, options, callback);\n    }\n    getBackupSchedule(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getBackupSchedule(request, options, callback);\n    }\n    listBackupSchedules(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listBackupSchedules(request, options, callback);\n    }\n    updateBackupSchedule(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'backup_schedule.name': (_a = request.backupSchedule.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateBackupSchedule(request, options, callback);\n    }\n    deleteBackupSchedule(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteBackupSchedule(request, options, callback);\n    }\n    createIndex(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createIndex(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `createIndex()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.create_index.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_CreateIndex_async\n     */\n    async checkCreateIndexProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createIndex, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    updateField(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'field.name': (_a = request.field.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateField(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `updateField()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.update_field.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateField_async\n     */\n    async checkUpdateFieldProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateField, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    exportDocuments(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.exportDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `exportDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.export_documents.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ExportDocuments_async\n     */\n    async checkExportDocumentsProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportDocuments, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    importDocuments(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.importDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `importDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.import_documents.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ImportDocuments_async\n     */\n    async checkImportDocumentsProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importDocuments, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    bulkDeleteDocuments(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.bulkDeleteDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `bulkDeleteDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.bulk_delete_documents.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_BulkDeleteDocuments_async\n     */\n    async checkBulkDeleteDocumentsProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.bulkDeleteDocuments, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    createDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createDatabase(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `createDatabase()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.create_database.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_CreateDatabase_async\n     */\n    async checkCreateDatabaseProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createDatabase, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    updateDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'database.name': (_a = request.database.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateDatabase(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `updateDatabase()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.update_database.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateDatabase_async\n     */\n    async checkUpdateDatabaseProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDatabase, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    deleteDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteDatabase(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `deleteDatabase()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.delete_database.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_DeleteDatabase_async\n     */\n    async checkDeleteDatabaseProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDatabase, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    restoreDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.restoreDatabase(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `restoreDatabase()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.restore_database.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_RestoreDatabase_async\n     */\n    async checkRestoreDatabaseProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.restoreDatabase, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    listIndexes(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listIndexes(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes},\n     *   that may be used to get the next page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.admin.v1.Index|Index} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listIndexesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listIndexesStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listIndexes'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);\n    }\n    /**\n     * Equivalent to `listIndexes`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes},\n     *   that may be used to get the next page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.admin.v1.Index|Index}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.list_indexes.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ListIndexes_async\n     */\n    listIndexesAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listIndexes'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls['listIndexes'], request, callSettings);\n    }\n    listFields(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listFields(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}\n     *   only supports listing fields that have been explicitly overridden. To issue\n     *   this query, call\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}\n     *   with a filter that includes `indexConfig.usesAncestorConfig:false` or\n     *   `ttlConfig:*`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields},\n     *   that may be used to get the next page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.admin.v1.Field|Field} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listFieldsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listFieldsStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listFields'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);\n    }\n    /**\n     * Equivalent to `listFields`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}\n     *   only supports listing fields that have been explicitly overridden. To issue\n     *   this query, call\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}\n     *   with a filter that includes `indexConfig.usesAncestorConfig:false` or\n     *   `ttlConfig:*`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link protos.google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields},\n     *   that may be used to get the next page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.admin.v1.Field|Field}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.list_fields.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ListFields_async\n     */\n    listFieldsAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listFields'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls['listFields'], request, callSettings);\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const [response] = await client.getLocation(request);\n     * ```\n     */\n    getLocation(request, options, callback) {\n        return this.locationsClient.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service. Returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     * ```\n     */\n    listLocationsAsync(request, options) {\n        return this.locationsClient.listLocationsAsync(request, options);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See {@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n     *   for the details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     *   {@link google.longrunning.Operation | google.longrunning.Operation}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * {@link google.longrunning.Operation | google.longrunning.Operation}.\n     * The promise has a method named \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     * ```\n     */\n    getOperation(request, options, callback) {\n        return this.operationsClient.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.\n     *\n     * For-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See {@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * for await (const response of client.listOperationsAsync(request));\n     * // doThingsWith(response)\n     * ```\n     */\n    listOperationsAsync(request, options) {\n        return this.operationsClient.listOperationsAsync(request, options);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See {@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     * ```\n     */\n    cancelOperation(request, options, callback) {\n        return this.operationsClient.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See {@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n     * for the details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     * ```\n     */\n    deleteOperation(request, options, callback) {\n        return this.operationsClient.deleteOperation(request, options, callback);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified backup resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} backup\n     * @returns {string} Resource name string.\n     */\n    backupPath(project, location, backup) {\n        return this.pathTemplates.backupPathTemplate.render({\n            project: project,\n            location: location,\n            backup: backup,\n        });\n    }\n    /**\n     * Parse the project from Backup resource.\n     *\n     * @param {string} backupName\n     *   A fully-qualified path representing Backup resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromBackupName(backupName) {\n        return this.pathTemplates.backupPathTemplate.match(backupName).project;\n    }\n    /**\n     * Parse the location from Backup resource.\n     *\n     * @param {string} backupName\n     *   A fully-qualified path representing Backup resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromBackupName(backupName) {\n        return this.pathTemplates.backupPathTemplate.match(backupName).location;\n    }\n    /**\n     * Parse the backup from Backup resource.\n     *\n     * @param {string} backupName\n     *   A fully-qualified path representing Backup resource.\n     * @returns {string} A string representing the backup.\n     */\n    matchBackupFromBackupName(backupName) {\n        return this.pathTemplates.backupPathTemplate.match(backupName).backup;\n    }\n    /**\n     * Return a fully-qualified backupSchedule resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} backup_schedule\n     * @returns {string} Resource name string.\n     */\n    backupSchedulePath(project, database, backupSchedule) {\n        return this.pathTemplates.backupSchedulePathTemplate.render({\n            project: project,\n            database: database,\n            backup_schedule: backupSchedule,\n        });\n    }\n    /**\n     * Parse the project from BackupSchedule resource.\n     *\n     * @param {string} backupScheduleName\n     *   A fully-qualified path representing BackupSchedule resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromBackupScheduleName(backupScheduleName) {\n        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).project;\n    }\n    /**\n     * Parse the database from BackupSchedule resource.\n     *\n     * @param {string} backupScheduleName\n     *   A fully-qualified path representing BackupSchedule resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromBackupScheduleName(backupScheduleName) {\n        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).database;\n    }\n    /**\n     * Parse the backup_schedule from BackupSchedule resource.\n     *\n     * @param {string} backupScheduleName\n     *   A fully-qualified path representing BackupSchedule resource.\n     * @returns {string} A string representing the backup_schedule.\n     */\n    matchBackupScheduleFromBackupScheduleName(backupScheduleName) {\n        return this.pathTemplates.backupSchedulePathTemplate.match(backupScheduleName).backup_schedule;\n    }\n    /**\n     * Return a fully-qualified collectionGroup resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @returns {string} Resource name string.\n     */\n    collectionGroupPath(project, database, collection) {\n        return this.pathTemplates.collectionGroupPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n        });\n    }\n    /**\n     * Parse the project from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n    }\n    /**\n     * Parse the database from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n    }\n    /**\n     * Parse the collection from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n    }\n    /**\n     * Return a fully-qualified database resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @returns {string} Resource name string.\n     */\n    databasePath(project, database) {\n        return this.pathTemplates.databasePathTemplate.render({\n            project: project,\n            database: database,\n        });\n    }\n    /**\n     * Parse the project from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromDatabaseName(databaseName) {\n        return this.pathTemplates.databasePathTemplate.match(databaseName).project;\n    }\n    /**\n     * Parse the database from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromDatabaseName(databaseName) {\n        return this.pathTemplates.databasePathTemplate.match(databaseName).database;\n    }\n    /**\n     * Return a fully-qualified field resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} field\n     * @returns {string} Resource name string.\n     */\n    fieldPath(project, database, collection, field) {\n        return this.pathTemplates.fieldPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n            field: field,\n        });\n    }\n    /**\n     * Parse the project from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).project;\n    }\n    /**\n     * Parse the database from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).database;\n    }\n    /**\n     * Parse the collection from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;\n    }\n    /**\n     * Parse the field from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the field.\n     */\n    matchFieldFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).field;\n    }\n    /**\n     * Return a fully-qualified index resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} index\n     * @returns {string} Resource name string.\n     */\n    indexPath(project, database, collection, index) {\n        return this.pathTemplates.indexPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n            index: index,\n        });\n    }\n    /**\n     * Parse the project from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).project;\n    }\n    /**\n     * Parse the database from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).database;\n    }\n    /**\n     * Parse the collection from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).collection;\n    }\n    /**\n     * Parse the index from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the index.\n     */\n    matchIndexFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).index;\n    }\n    /**\n     * Return a fully-qualified location resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    locationPath(project, location) {\n        return this.pathTemplates.locationPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).project;\n    }\n    /**\n     * Parse the location from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).location;\n    }\n    /**\n     * Return a fully-qualified project resource name string.\n     *\n     * @param {string} project\n     * @returns {string} Resource name string.\n     */\n    projectPath(project) {\n        return this.pathTemplates.projectPathTemplate.render({\n            project: project,\n        });\n    }\n    /**\n     * Parse the project from Project resource.\n     *\n     * @param {string} projectName\n     *   A fully-qualified path representing Project resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectName(projectName) {\n        return this.pathTemplates.projectPathTemplate.match(projectName).project;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.firestoreAdminStub && !this._terminated) {\n            return this.firestoreAdminStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n                this.locationsClient.close();\n                this.operationsClient.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreAdminClient = FirestoreAdminClient;\n//# sourceMappingURL=firestore_admin_client.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14302, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/v1/firestore_client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirestoreClient = void 0;\nconst stream_1 = require(\"stream\");\nconst jsonProtos = require(\"../../protos/v1.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/firestore_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./firestore_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\n *  document database that simplifies storing, syncing, and querying data for\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\n *  live synchronization and offline support, while its security features and\n *  integrations with Firebase and Google Cloud Platform accelerate building\n *  truly serverless apps.\n * @class\n * @memberof v1\n */\nclass FirestoreClient {\n    /**\n     * Construct an instance of FirestoreClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new FirestoreClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b, _c, _d, _e;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\n            throw new Error('Please set either universe_domain or universeDomain, but not both.');\n        }\n        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\n            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\n            : undefined;\n        this._universeDomain =\n            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\n        this._servicePath = 'firestore.' + this._universeDomain;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\n        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== this._servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = require('google-gax');\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = this._servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === this._servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process === 'object' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n            partitionQuery: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),\n            listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this.descriptors.stream = {\n            batchGetDocuments: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            runQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            runAggregationQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            write: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            listen: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1.Firestore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreStub) {\n            return this.firestoreStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.v1.Firestore.\n        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.v1.Firestore')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.v1.Firestore, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreStubMethods = [\n            'getDocument',\n            'listDocuments',\n            'updateDocument',\n            'deleteDocument',\n            'batchGetDocuments',\n            'beginTransaction',\n            'commit',\n            'rollback',\n            'runQuery',\n            'runAggregationQuery',\n            'partitionQuery',\n            'write',\n            'listen',\n            'listCollectionIds',\n            'batchWrite',\n            'createDocument',\n        ];\n        for (const methodName of firestoreStubMethods) {\n            const callPromise = this.firestoreStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    if (methodName in this.descriptors.stream) {\n                        const stream = new stream_1.PassThrough();\n                        setImmediate(() => {\n                            stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));\n                        });\n                        return stream;\n                    }\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    get apiEndpoint() {\n        return this._servicePath;\n    }\n    get universeDomain() {\n        return this._universeDomain;\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    getDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getDocument(request, options, callback);\n    }\n    updateDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'document.name': (_a = request.document.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateDocument(request, options, callback);\n    }\n    deleteDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteDocument(request, options, callback);\n    }\n    beginTransaction(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.beginTransaction(request, options, callback);\n    }\n    commit(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.commit(request, options, callback);\n    }\n    rollback(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.rollback(request, options, callback);\n    }\n    batchWrite(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchWrite(request, options, callback);\n    }\n    createDocument(request, optionsOrCallback, callback) {\n        var _a, _b;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1.BatchGetDocumentsResponse|BatchGetDocumentsResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.batch_get_documents.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_BatchGetDocuments_async\n     */\n    batchGetDocuments(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Run the query within an already active transaction.\n     *\n     *   The value here is the opaque transaction ID to execute the query in.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {google.firestore.v1.ExplainOptions} [request.explainOptions]\n     *   Optional. Explain options for the query. If set, additional query\n     *   statistics will be returned. If not, only query results will be returned.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1.RunQueryResponse|RunQueryResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.run_query.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_RunQuery_async\n     */\n    runQuery(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Runs an aggregation query.\n     *\n     * Rather than producing {@link protos.google.firestore.v1.Document|Document} results like\n     * {@link protos.google.firestore.v1.Firestore.RunQuery|Firestore.RunQuery}, this API\n     * allows running an aggregation to produce a series of\n     * {@link protos.google.firestore.v1.AggregationResult|AggregationResult} server-side.\n     *\n     * High-Level Example:\n     *\n     * ```\n     * -- Return the number of documents in table given a filter.\n     * SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );\n     * ```\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1.StructuredAggregationQuery} request.structuredAggregationQuery\n     *   An aggregation query.\n     * @param {Buffer} request.transaction\n     *   Run the aggregation within an already active transaction.\n     *\n     *   The value here is the opaque transaction ID to execute the query in.\n     * @param {google.firestore.v1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction as part of the query, defaulting to read-only.\n     *\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Executes the query at the given timestamp.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {google.firestore.v1.ExplainOptions} [request.explainOptions]\n     *   Optional. Explain options for the query. If set, additional query\n     *   statistics will be returned. If not, only query results will be returned.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1.RunAggregationQueryResponse|RunAggregationQueryResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.run_aggregation_query.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_RunAggregationQuery_async\n     */\n    runAggregationQuery(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.runAggregationQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order. This method is\n     * only available via gRPC or WebChannel (not REST).\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing {@link protos.google.firestore.v1.WriteRequest|WriteRequest} for write() method, and\n     *   will emit objects representing {@link protos.google.firestore.v1.WriteResponse|WriteResponse} on 'data' event asynchronously.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.write.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_Write_async\n     */\n    write(options) {\n        this.initialize();\n        return this.innerApiCalls.write(null, options);\n    }\n    /**\n     * Listens to changes. This method is only available via gRPC or WebChannel\n     * (not REST).\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing {@link protos.google.firestore.v1.ListenRequest|ListenRequest} for write() method, and\n     *   will emit objects representing {@link protos.google.firestore.v1.ListenResponse|ListenResponse} on 'data' event asynchronously.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.listen.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_Listen_async\n     */\n    listen(options) {\n        this.initialize();\n        return this.innerApiCalls.listen(null, options);\n    }\n    listDocuments(request, optionsOrCallback, callback) {\n        var _a, _b;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} [request.collectionId]\n     *   Optional. The collection ID, relative to `parent`, to list.\n     *\n     *   For example: `chatrooms` or `messages`.\n     *\n     *   This is optional, and when not provided, Firestore will list documents\n     *   from all collections under the provided `parent`.\n     * @param {number} [request.pageSize]\n     *   Optional. The maximum number of documents to return in a single response.\n     *\n     *   Firestore may return fewer than this value.\n     * @param {string} [request.pageToken]\n     *   Optional. A page token, received from a previous `ListDocuments` response.\n     *\n     *   Provide this to retrieve the subsequent page. When paginating, all other\n     *   parameters (with the exception of `page_size`) must match the values set\n     *   in the request that generated the page token.\n     * @param {string} [request.orderBy]\n     *   Optional. The optional ordering of the documents to return.\n     *\n     *   For example: `priority desc, __name__ desc`.\n     *\n     *   This mirrors the {@link protos.google.firestore.v1.StructuredQuery.order_by|`ORDER BY`}\n     *   used in Firestore queries but in a string representation. When absent,\n     *   documents are ordered based on `__name__ ASC`.\n     * @param {google.firestore.v1.DocumentMask} [request.mask]\n     *   Optional. The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Perform the read as part of an already active transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Perform the read at the provided time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents.\n     *\n     *   A document is missing if it does not exist, but there are sub-documents\n     *   nested underneath it. When true, such missing documents will be returned\n     *   with a key but will not have fields,\n     *   {@link protos.google.firestore.v1.Document.create_time|`create_time`}, or\n     *   {@link protos.google.firestore.v1.Document.update_time|`update_time`} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1.Document|Document} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listDocumentsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listDocumentsStream(request, options) {\n        var _a, _b;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        const defaultCallSettings = this._defaults['listDocuments'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Equivalent to `listDocuments`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} [request.collectionId]\n     *   Optional. The collection ID, relative to `parent`, to list.\n     *\n     *   For example: `chatrooms` or `messages`.\n     *\n     *   This is optional, and when not provided, Firestore will list documents\n     *   from all collections under the provided `parent`.\n     * @param {number} [request.pageSize]\n     *   Optional. The maximum number of documents to return in a single response.\n     *\n     *   Firestore may return fewer than this value.\n     * @param {string} [request.pageToken]\n     *   Optional. A page token, received from a previous `ListDocuments` response.\n     *\n     *   Provide this to retrieve the subsequent page. When paginating, all other\n     *   parameters (with the exception of `page_size`) must match the values set\n     *   in the request that generated the page token.\n     * @param {string} [request.orderBy]\n     *   Optional. The optional ordering of the documents to return.\n     *\n     *   For example: `priority desc, __name__ desc`.\n     *\n     *   This mirrors the {@link protos.google.firestore.v1.StructuredQuery.order_by|`ORDER BY`}\n     *   used in Firestore queries but in a string representation. When absent,\n     *   documents are ordered based on `__name__ ASC`.\n     * @param {google.firestore.v1.DocumentMask} [request.mask]\n     *   Optional. The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Perform the read as part of an already active transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Perform the read at the provided time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents.\n     *\n     *   A document is missing if it does not exist, but there are sub-documents\n     *   nested underneath it. When true, such missing documents will be returned\n     *   with a key but will not have fields,\n     *   {@link protos.google.firestore.v1.Document.create_time|`create_time`}, or\n     *   {@link protos.google.firestore.v1.Document.update_time|`update_time`} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.v1.Document|Document}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.list_documents.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_ListDocuments_async\n     */\n    listDocumentsAsync(request, options) {\n        var _a, _b;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        const defaultCallSettings = this._defaults['listDocuments'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n    }\n    partitionQuery(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.partitionQuery(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1.Cursor|Cursor} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `partitionQueryAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    partitionQueryStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['partitionQuery'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);\n    }\n    /**\n     * Equivalent to `partitionQuery`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.v1.Cursor|Cursor}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.partition_query.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_PartitionQuery_async\n     */\n    partitionQueryAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['partitionQuery'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls['partitionQuery'], request, callSettings);\n    }\n    listCollectionIds(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link protos.google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listCollectionIdsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listCollectionIdsStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listCollectionIds'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Equivalent to `listCollectionIds`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link protos.google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *\n     *   This must be a microsecond precision timestamp within the past one hour,\n     *   or if Point-in-Time Recovery is enabled, can additionally be a whole\n     *   minute timestamp within the past 7 days.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   string. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore.list_collection_ids.js</caption>\n     * region_tag:firestore_v1_generated_Firestore_ListCollectionIds_async\n     */\n    listCollectionIdsAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listCollectionIds'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const [response] = await client.getLocation(request);\n     * ```\n     */\n    getLocation(request, options, callback) {\n        return this.locationsClient.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service. Returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example\n     * ```\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     * ```\n     */\n    listLocationsAsync(request, options) {\n        return this.locationsClient.listLocationsAsync(request, options);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.firestoreStub && !this._terminated) {\n            return this.firestoreStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n                this.locationsClient.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreClient = FirestoreClient;\n//# sourceMappingURL=firestore_client.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15511, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/v1/index.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirestoreAdminClient = exports.FirestoreClient = void 0;\nconst firestore_admin_client_1 = require(\"./firestore_admin_client\");\nObject.defineProperty(exports, \"FirestoreAdminClient\", { enumerable: true, get: function () { return firestore_admin_client_1.FirestoreAdminClient; } });\nconst firestore_client_1 = require(\"./firestore_client\");\nObject.defineProperty(exports, \"FirestoreClient\", { enumerable: true, get: function () { return firestore_client_1.FirestoreClient; } });\n// Doing something really horrible for reverse compatibility with original JavaScript exports\nconst existingExports = module.exports;\nmodule.exports = firestore_client_1.FirestoreClient;\nmodule.exports = Object.assign(module.exports, existingExports);\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"AAAA;AACA,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,QAAQ,eAAe,GAAG,KAAK;AAC9D,MAAM;AACN,OAAO,cAAc,CAAC,SAAS,wBAAwB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,yBAAyB,oBAAoB;IAAE;AAAE;AACtJ,MAAM;AACN,OAAO,cAAc,CAAC,SAAS,mBAAmB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,mBAAmB,eAAe;IAAE;AAAE;AACtI,6FAA6F;AAC7F,MAAM,kBAAkB,OAAO,OAAO;AACtC,OAAO,OAAO,GAAG,mBAAmB,eAAe;AACnD,OAAO,OAAO,GAAG,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE,kBAC/C,iCAAiC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15552, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/telemetry/enabled-trace-util.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnabledTraceUtil = void 0;\nconst api_1 = require(\"@opentelemetry/api\");\nconst span_1 = require(\"./span\");\nconst trace_util_1 = require(\"./trace-util\");\nconst firestore_client_config_json_1 = require(\"../v1/firestore_client_config.json\");\nconst v1_1 = require(\"../v1\");\nconst path_1 = require(\"../path\");\nconst index_1 = require(\"../index\");\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\n/**\n * @private\n * @internal\n */\nclass EnabledTraceUtil {\n    constructor(settings) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n        let provider = (_a = settings.openTelemetry) === null || _a === void 0 ? void 0 : _a.tracerProvider;\n        // If a TracerProvider has not been given to us, we try to use the global one.\n        if (!provider) {\n            const { trace } = require('@opentelemetry/api');\n            provider = trace.getTracerProvider();\n        }\n        // At this point provider is guaranteed to be defined because\n        // `trace.getTracerProvider()` does not return null or undefined.\n        this.tracerProvider = provider;\n        const libVersion = require('../../../package.json').version;\n        const libName = require('../../../package.json').name;\n        try {\n            this.tracer = this.tracerProvider.getTracer(libName, libVersion);\n        }\n        catch (e) {\n            throw new Error(\"The object provided for 'tracerProvider' does not conform to the TracerProvider interface.\");\n        }\n        this.settingsAttributes = {};\n        this.settingsAttributes['otel.scope.name'] = libName;\n        this.settingsAttributes['otel.scope.version'] = libVersion;\n        if (settings.projectId) {\n            this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.project_id`] =\n                settings.projectId;\n        }\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.database_id`] =\n            settings.databaseId || path_1.DEFAULT_DATABASE_ID;\n        const host = (_c = (_b = settings.servicePath) !== null && _b !== void 0 ? _b : settings.host) !== null && _c !== void 0 ? _c : 'firestore.googleapis.com';\n        const port = (_d = settings.port) !== null && _d !== void 0 ? _d : v1_1.FirestoreClient.port;\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.host`] =\n            `${host}:${port}`;\n        if (settings.preferRest !== undefined) {\n            this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.prefer_REST`] =\n                settings.preferRest;\n        }\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.max_idle_channels`] =\n            (_e = settings.maxIdleChannels) !== null && _e !== void 0 ? _e : index_1.DEFAULT_MAX_IDLE_CHANNELS;\n        const defaultRetrySettings = serviceConfig.retry_params.default;\n        const customRetrySettings = (_j = (_h = (_g = (_f = settings.clientConfig) === null || _f === void 0 ? void 0 : _f.interfaces) === null || _g === void 0 ? void 0 : _g['google.firestore.v1.Firestore']) === null || _h === void 0 ? void 0 : _h['retry_params']) === null || _j === void 0 ? void 0 : _j['default'];\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.initial_retry_delay`] = this.millisToSecondString((_k = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.initial_retry_delay_millis) !== null && _k !== void 0 ? _k : defaultRetrySettings.initial_retry_delay_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.initial_rpc_timeout`] = this.millisToSecondString((_l = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.initial_rpc_timeout_millis) !== null && _l !== void 0 ? _l : defaultRetrySettings.initial_rpc_timeout_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.total_timeout`] =\n            this.millisToSecondString((_m = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.total_timeout_millis) !== null && _m !== void 0 ? _m : defaultRetrySettings.total_timeout_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.max_retry_delay`] =\n            this.millisToSecondString((_o = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.max_retry_delay_millis) !== null && _o !== void 0 ? _o : defaultRetrySettings.max_retry_delay_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.max_rpc_timeout`] =\n            this.millisToSecondString((_p = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.max_rpc_timeout_millis) !== null && _p !== void 0 ? _p : defaultRetrySettings.max_rpc_timeout_millis);\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.retry_delay_multiplier`] =\n            (_q = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.retry_delay_multiplier.toString()) !== null && _q !== void 0 ? _q : defaultRetrySettings.retry_delay_multiplier.toString();\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.rpc_timeout_multiplier`] =\n            (_r = customRetrySettings === null || customRetrySettings === void 0 ? void 0 : customRetrySettings.rpc_timeout_multiplier.toString()) !== null && _r !== void 0 ? _r : defaultRetrySettings.rpc_timeout_multiplier.toString();\n    }\n    recordProjectId(projectId) {\n        this.settingsAttributes[`${trace_util_1.ATTRIBUTE_SETTINGS_PREFIX}.project_id`] =\n            projectId;\n        this.currentSpan().setAttributes(this.settingsAttributes);\n    }\n    millisToSecondString(millis) {\n        return `${millis / 1000}s`;\n    }\n    endSpan(otelSpan, error) {\n        otelSpan.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: error.message,\n        });\n        otelSpan.recordException(error);\n        otelSpan.end();\n    }\n    startActiveSpan(name, fn, attributes) {\n        return this.tracer.startActiveSpan(name, {\n            attributes: attributes,\n        }, (otelSpan) => {\n            this.addCommonAttributes(otelSpan);\n            // Note that if `fn` returns a `Promise`, we want the otelSpan to end\n            // after the `Promise` has resolved, NOT after the `fn` has returned.\n            // Therefore, we should not use a `finally` clause to end the otelSpan.\n            try {\n                let result = fn(new span_1.Span(otelSpan));\n                if (result instanceof Promise) {\n                    result = result\n                        .then(value => {\n                        otelSpan.end();\n                        return value;\n                    })\n                        .catch(error => {\n                        this.endSpan(otelSpan, error);\n                        // Returns a Promise.reject the same as the underlying function.\n                        return Promise.reject(error);\n                    });\n                }\n                else {\n                    otelSpan.end();\n                }\n                return result;\n            }\n            catch (error) {\n                this.endSpan(otelSpan, error);\n                // Re-throw the exception to maintain normal error handling.\n                throw error;\n            }\n        });\n    }\n    startSpan(name) {\n        const otelSpan = this.tracer.startSpan(name, undefined, api_1.context.active());\n        this.addCommonAttributes(otelSpan);\n        return new span_1.Span(otelSpan);\n    }\n    currentSpan() {\n        return new span_1.Span(api_1.trace.getActiveSpan());\n    }\n    addCommonAttributes(otelSpan) {\n        otelSpan.setAttributes(this.settingsAttributes);\n    }\n}\nexports.EnabledTraceUtil = EnabledTraceUtil;\n//# sourceMappingURL=enabled-trace-util.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15693, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/v1beta1/firestore_client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirestoreClient = void 0;\nconst stream_1 = require(\"stream\");\nconst jsonProtos = require(\"../../protos/v1beta1.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1beta1/firestore_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./firestore_client_config.json\");\n// tslint:disable deprecation\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL\n *  document database that simplifies storing, syncing, and querying data for\n *  your mobile, web, and IoT apps at global scale. Its client libraries provide\n *  live synchronization and offline support, while its security features and\n *  integrations with Firebase and Google Cloud Platform (GCP) accelerate\n *  building truly serverless apps.\n * @class\n * @deprecated Use v1/firestore_client instead.\n * @memberof v1beta1\n */\nclass FirestoreClient {\n    /**\n     * Construct an instance of FirestoreClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new FirestoreClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b, _c, _d, _e;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&\n            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {\n            throw new Error('Please set either universe_domain or universeDomain, but not both.');\n        }\n        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'\n            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']\n            : undefined;\n        this._universeDomain =\n            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';\n        this._servicePath = 'firestore.' + this._universeDomain;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};\n        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== this._servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = require('google-gax');\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = this._servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === this._servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process === 'object' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n            partitionQuery: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),\n            listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),\n        };\n        // Some of the methods on this service provide streaming responses.\n        // Provide descriptors for these.\n        this.descriptors.stream = {\n            batchGetDocuments: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            runQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            write: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n            listen: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, !!opts.fallback, !!opts.gaxServerStreamingRetries),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1beta1.Firestore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreStub) {\n            return this.firestoreStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.v1beta1.Firestore.\n        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.v1beta1.Firestore')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.v1beta1.Firestore, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreStubMethods = [\n            'getDocument',\n            'listDocuments',\n            'updateDocument',\n            'deleteDocument',\n            'batchGetDocuments',\n            'beginTransaction',\n            'commit',\n            'rollback',\n            'runQuery',\n            'partitionQuery',\n            'write',\n            'listen',\n            'listCollectionIds',\n            'batchWrite',\n            'createDocument',\n        ];\n        for (const methodName of firestoreStubMethods) {\n            const callPromise = this.firestoreStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    if (methodName in this.descriptors.stream) {\n                        const stream = new stream_1.PassThrough();\n                        setImmediate(() => {\n                            stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));\n                        });\n                        return stream;\n                    }\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.stream[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath.\n     * @deprecated Use the apiEndpoint method of the client instance.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        if (typeof process === 'object' &&\n            typeof process.emitWarning === 'function') {\n            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');\n        }\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    get apiEndpoint() {\n        return this._servicePath;\n    }\n    get universeDomain() {\n        return this._universeDomain;\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    getDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getDocument(request, options, callback);\n    }\n    updateDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'document.name': (_a = request.document.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateDocument(request, options, callback);\n    }\n    deleteDocument(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteDocument(request, options, callback);\n    }\n    beginTransaction(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.beginTransaction(request, options, callback);\n    }\n    commit(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.commit(request, options, callback);\n    }\n    rollback(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.rollback(request, options, callback);\n    }\n    batchWrite(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchWrite(request, options, callback);\n    }\n    createDocument(request, optionsOrCallback, callback) {\n        var _a, _b;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1beta1.BatchGetDocumentsResponse|BatchGetDocumentsResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.batch_get_documents.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_BatchGetDocuments_async\n     */\n    batchGetDocuments(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits {@link protos.google.firestore.v1beta1.RunQueryResponse|RunQueryResponse} on 'data' event.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.run_query.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_RunQuery_async\n     */\n    runQuery(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing {@link protos.google.firestore.v1beta1.WriteRequest|WriteRequest} for write() method, and\n     *   will emit objects representing {@link protos.google.firestore.v1beta1.WriteResponse|WriteResponse} on 'data' event asynchronously.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.write.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_Write_async\n     */\n    write(options) {\n        this.initialize();\n        return this.innerApiCalls.write(null, options);\n    }\n    /**\n     * Listens to changes.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing {@link protos.google.firestore.v1beta1.ListenRequest|ListenRequest} for write() method, and\n     *   will emit objects representing {@link protos.google.firestore.v1beta1.ListenResponse|ListenResponse} on 'data' event asynchronously.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.listen.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_Listen_async\n     */\n    listen(options) {\n        this.initialize();\n        return this.innerApiCalls.listen(null, options);\n    }\n    listDocuments(request, optionsOrCallback, callback) {\n        var _a, _b;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link protos.google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link protos.google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1beta1.Document|Document} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listDocumentsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listDocumentsStream(request, options) {\n        var _a, _b;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        const defaultCallSettings = this._defaults['listDocuments'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Equivalent to `listDocuments`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 270 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link protos.google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link protos.google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.v1beta1.Document|Document}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.list_documents.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_ListDocuments_async\n     */\n    listDocumentsAsync(request, options) {\n        var _a, _b;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',\n            });\n        const defaultCallSettings = this._defaults['listDocuments'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n    }\n    partitionQuery(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.partitionQuery(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link protos.google.firestore.v1beta1.Cursor|Cursor} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `partitionQueryAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    partitionQueryStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['partitionQuery'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);\n    }\n    /**\n     * Equivalent to `partitionQuery`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents`.\n     *   Document resource names are not supported; only database resource names\n     *   can be specified.\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     *   Query must specify collection with all descendants and be ordered by name\n     *   ascending. Other filters, order bys, limits, offsets, and start/end\n     *   cursors are not supported.\n     * @param {number} request.partitionCount\n     *   The desired maximum number of partition points.\n     *   The partitions may be returned across multiple pages of results.\n     *   The number must be positive. The actual number of partitions\n     *   returned may be fewer.\n     *\n     *   For example, this may be set to one fewer than the number of parallel\n     *   queries to be run, or in running a data pipeline job, one fewer than the\n     *   number of workers or compute instances available.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous call to\n     *   PartitionQuery that may be used to get an additional set of results.\n     *   There are no ordering guarantees between sets of results. Thus, using\n     *   multiple sets of results will require merging the different result sets.\n     *\n     *   For example, two subsequent calls using a page_token may return:\n     *\n     *    * cursor B, cursor M, cursor Q\n     *    * cursor A, cursor U, cursor W\n     *\n     *   To obtain a complete result set ordered with respect to the results of the\n     *   query supplied to PartitionQuery, the results sets should be merged:\n     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W\n     * @param {number} request.pageSize\n     *   The maximum number of partitions to return in this call, subject to\n     *   `partition_count`.\n     *\n     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call\n     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`\n     *   if more results exist. A second call to PartitionQuery will return up to\n     *   2 partitions, to complete the total of 10 specified in `partition_count`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link protos.google.firestore.v1beta1.Cursor|Cursor}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.partition_query.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_PartitionQuery_async\n     */\n    partitionQueryAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['partitionQuery'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls['partitionQuery'], request, callSettings);\n    }\n    listCollectionIds(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link protos.google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listCollectionIdsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     */\n    listCollectionIdsStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listCollectionIds'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Equivalent to `listCollectionIds`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link protos.google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   string. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1beta1/firestore.list_collection_ids.js</caption>\n     * region_tag:firestore_v1beta1_generated_Firestore_ListCollectionIds_async\n     */\n    listCollectionIdsAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listCollectionIds'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.firestoreStub && !this._terminated) {\n            return this.firestoreStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreClient = FirestoreClient;\n//# sourceMappingURL=firestore_client.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16702, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/v1beta1/index.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirestoreClient = void 0;\n// tslint:disable deprecation\nconst firestore_client_1 = require(\"./firestore_client\");\nObject.defineProperty(exports, \"FirestoreClient\", { enumerable: true, get: function () { return firestore_client_1.FirestoreClient; } });\n// Doing something really horrible for reverse compatibility with original JavaScript exports\nconst existingExports = module.exports;\nmodule.exports = firestore_client_1.FirestoreClient;\nmodule.exports = Object.assign(module.exports, existingExports);\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"AAAA;AACA,4BAA4B;AAC5B,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,EAAE;AACF,4EAA4E;AAC5E,iEAAiE;AACjE,qDAAqD;AACrD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG,KAAK;AAC/B,6BAA6B;AAC7B,MAAM;AACN,OAAO,cAAc,CAAC,SAAS,mBAAmB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,mBAAmB,eAAe;IAAE;AAAE;AACtI,6FAA6F;AAC7F,MAAM,kBAAkB,OAAO,OAAO;AACtC,OAAO,OAAO,GAAG,mBAAmB,eAAe;AACnD,OAAO,OAAO,GAAG,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE,kBAC/C,iCAAiC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16741, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/%40google-cloud/firestore/build/src/index.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Firestore = exports.DEFAULT_MAX_IDLE_CHANNELS = exports.DEFAULT_MAX_TRANSACTION_ATTEMPTS = exports.MAX_REQUEST_RETRIES = exports.AggregateField = exports.Aggregate = exports.setLogFunction = exports.QueryPartition = exports.CollectionGroup = exports.GeoPoint = exports.FieldPath = exports.DocumentChange = exports.Timestamp = exports.Transaction = exports.WriteResult = exports.WriteBatch = exports.Filter = exports.VectorValue = exports.FieldValue = exports.QueryDocumentSnapshot = exports.DocumentSnapshot = exports.BulkWriter = exports.Query = exports.QuerySnapshot = exports.DocumentReference = exports.CollectionReference = void 0;\nconst stream_1 = require(\"stream\");\nconst url_1 = require(\"url\");\nconst backoff_1 = require(\"./backoff\");\nconst bulk_writer_1 = require(\"./bulk-writer\");\nconst bundle_1 = require(\"./bundle\");\nconst convert_1 = require(\"./convert\");\nconst document_reader_1 = require(\"./document-reader\");\nconst document_1 = require(\"./document\");\nconst logger_1 = require(\"./logger\");\nconst path_1 = require(\"./path\");\nconst pool_1 = require(\"./pool\");\nconst collection_reference_1 = require(\"./reference/collection-reference\");\nconst document_reference_1 = require(\"./reference/document-reference\");\nconst serializer_1 = require(\"./serializer\");\nconst timestamp_1 = require(\"./timestamp\");\nconst transaction_1 = require(\"./transaction\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\nconst write_batch_1 = require(\"./write-batch\");\nconst firestore_client_config_json_1 = require(\"./v1/firestore_client_config.json\");\nconst serviceConfig = firestore_client_config_json_1.interfaces['google.firestore.v1.Firestore'];\nconst collection_group_1 = require(\"./collection-group\");\nObject.defineProperty(exports, \"CollectionGroup\", { enumerable: true, get: function () { return collection_group_1.CollectionGroup; } });\nconst recursive_delete_1 = require(\"./recursive-delete\");\nconst trace_util_1 = require(\"./telemetry/trace-util\");\nconst disabled_trace_util_1 = require(\"./telemetry/disabled-trace-util\");\nconst enabled_trace_util_1 = require(\"./telemetry/enabled-trace-util\");\nvar collection_reference_2 = require(\"./reference/collection-reference\");\nObject.defineProperty(exports, \"CollectionReference\", { enumerable: true, get: function () { return collection_reference_2.CollectionReference; } });\nvar document_reference_2 = require(\"./reference/document-reference\");\nObject.defineProperty(exports, \"DocumentReference\", { enumerable: true, get: function () { return document_reference_2.DocumentReference; } });\nvar query_snapshot_1 = require(\"./reference/query-snapshot\");\nObject.defineProperty(exports, \"QuerySnapshot\", { enumerable: true, get: function () { return query_snapshot_1.QuerySnapshot; } });\nvar query_1 = require(\"./reference/query\");\nObject.defineProperty(exports, \"Query\", { enumerable: true, get: function () { return query_1.Query; } });\nvar bulk_writer_2 = require(\"./bulk-writer\");\nObject.defineProperty(exports, \"BulkWriter\", { enumerable: true, get: function () { return bulk_writer_2.BulkWriter; } });\nvar document_2 = require(\"./document\");\nObject.defineProperty(exports, \"DocumentSnapshot\", { enumerable: true, get: function () { return document_2.DocumentSnapshot; } });\nObject.defineProperty(exports, \"QueryDocumentSnapshot\", { enumerable: true, get: function () { return document_2.QueryDocumentSnapshot; } });\nvar field_value_1 = require(\"./field-value\");\nObject.defineProperty(exports, \"FieldValue\", { enumerable: true, get: function () { return field_value_1.FieldValue; } });\nObject.defineProperty(exports, \"VectorValue\", { enumerable: true, get: function () { return field_value_1.VectorValue; } });\nvar filter_1 = require(\"./filter\");\nObject.defineProperty(exports, \"Filter\", { enumerable: true, get: function () { return filter_1.Filter; } });\nvar write_batch_2 = require(\"./write-batch\");\nObject.defineProperty(exports, \"WriteBatch\", { enumerable: true, get: function () { return write_batch_2.WriteBatch; } });\nObject.defineProperty(exports, \"WriteResult\", { enumerable: true, get: function () { return write_batch_2.WriteResult; } });\nvar transaction_2 = require(\"./transaction\");\nObject.defineProperty(exports, \"Transaction\", { enumerable: true, get: function () { return transaction_2.Transaction; } });\nvar timestamp_2 = require(\"./timestamp\");\nObject.defineProperty(exports, \"Timestamp\", { enumerable: true, get: function () { return timestamp_2.Timestamp; } });\nvar document_change_1 = require(\"./document-change\");\nObject.defineProperty(exports, \"DocumentChange\", { enumerable: true, get: function () { return document_change_1.DocumentChange; } });\nvar path_2 = require(\"./path\");\nObject.defineProperty(exports, \"FieldPath\", { enumerable: true, get: function () { return path_2.FieldPath; } });\nvar geo_point_1 = require(\"./geo-point\");\nObject.defineProperty(exports, \"GeoPoint\", { enumerable: true, get: function () { return geo_point_1.GeoPoint; } });\nvar query_partition_1 = require(\"./query-partition\");\nObject.defineProperty(exports, \"QueryPartition\", { enumerable: true, get: function () { return query_partition_1.QueryPartition; } });\nvar logger_2 = require(\"./logger\");\nObject.defineProperty(exports, \"setLogFunction\", { enumerable: true, get: function () { return logger_2.setLogFunction; } });\nvar aggregate_1 = require(\"./aggregate\");\nObject.defineProperty(exports, \"Aggregate\", { enumerable: true, get: function () { return aggregate_1.Aggregate; } });\nObject.defineProperty(exports, \"AggregateField\", { enumerable: true, get: function () { return aggregate_1.AggregateField; } });\nconst libVersion = require('../../package.json').version;\n(0, logger_1.setLibVersion)(libVersion);\n/*!\n * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS\n */\n/**\n * @namespace google.protobuf\n */\n/**\n * @namespace google.rpc\n */\n/**\n * @namespace google.longrunning\n */\n/**\n * @namespace google.firestore.v1\n */\n/**\n * @namespace google.firestore.v1beta1\n */\n/**\n * @namespace google.firestore.admin.v1\n */\n/*!\n * HTTP header for the resource prefix to improve routing and project isolation\n * by the backend.\n */\nconst CLOUD_RESOURCE_HEADER = 'google-cloud-resource-prefix';\n/**\n * The maximum number of times to retry idempotent requests.\n * @private\n */\nexports.MAX_REQUEST_RETRIES = 5;\n/**\n * The maximum number of times to attempt a transaction before failing.\n * @private\n */\nexports.DEFAULT_MAX_TRANSACTION_ATTEMPTS = 5;\n/*!\n * The default number of idle GRPC channel to keep.\n */\nexports.DEFAULT_MAX_IDLE_CHANNELS = 1;\n/*!\n * The maximum number of concurrent requests supported by a single GRPC channel,\n * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent\n * operations, we need to use more than one GAPIC client since these clients\n * multiplex all requests over a single channel.\n */\nconst MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;\n/**\n * Document data (e.g. for use with\n * [set()]{@link DocumentReference#set}) consisting of fields mapped\n * to values.\n *\n * @typedef {Object.<string, *>} DocumentData\n */\n/**\n * Converter used by [withConverter()]{@link Query#withConverter} to transform\n * user objects of type `AppModelType` into Firestore data of type\n * `DbModelType`.\n *\n * Using the converter allows you to specify generic type arguments when storing\n * and retrieving objects from Firestore.\n *\n * @example\n * ```\n * class Post {\n *   constructor(readonly title: string, readonly author: string) {}\n *\n *   toString(): string {\n *     return this.title + ', by ' + this.author;\n *   }\n * }\n *\n * const postConverter = {\n *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n *     return {title: post.title, author: post.author};\n *   },\n *   fromFirestore(\n *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n *   ): Post {\n *     const data = snapshot.data();\n *     return new Post(data.title, data.author);\n *   }\n * };\n *\n * const postSnap = await Firestore()\n *   .collection('posts')\n *   .withConverter(postConverter)\n *   .doc().get();\n * const post = postSnap.data();\n * if (post !== undefined) {\n *   post.title; // string\n *   post.toString(); // Should be defined\n *   post.someNonExistentProperty; // TS error\n * }\n *\n * ```\n * @property {Function} toFirestore Called by the Firestore SDK to convert a\n * custom model object of type `AppModelType` into a plain Javascript object\n * (suitable for writing directly to the Firestore database).\n * @property {Function} fromFirestore Called by the Firestore SDK to convert\n * Firestore data into an object of type `AppModelType`.\n * @typedef {Object} FirestoreDataConverter\n */\n/**\n * Update data (for use with [update]{@link DocumentReference#update})\n * that contains paths mapped to values. Fields that contain dots\n * reference nested fields within the document.\n *\n * You can update a top-level field in your document by using the field name\n * as a key (e.g. `foo`). The provided value completely replaces the contents\n * for this field.\n *\n * You can also update a nested field directly by using its field path as a key\n * (e.g. `foo.bar`). This nested field update replaces the contents at `bar`\n * but does not modify other data under `foo`.\n *\n * @example\n * ```\n * const documentRef = firestore.doc('coll/doc');\n * documentRef.set({a1: {a2: 'val'}, b1: {b2: 'val'}, c1: {c2: 'val'}});\n * documentRef.update({\n *  b1: {b3: 'val'},\n *  'c1.c3': 'val',\n * });\n * // Value is {a1: {a2: 'val'}, b1: {b3: 'val'}, c1: {c2: 'val', c3: 'val'}}\n *\n * ```\n * @typedef {Object.<string, *>} UpdateData\n */\n/**\n * An options object that configures conditional behavior of\n * [update()]{@link DocumentReference#update} and\n * [delete()]{@link DocumentReference#delete} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, [BulkWriter]{@link BulkWriter}, and\n * [Transaction]{@link Transaction}. Using Preconditions, these calls\n * can be restricted to only apply to documents that match the specified\n * conditions.\n *\n * @example\n * ```\n * const documentRef = firestore.doc('coll/doc');\n *\n * documentRef.get().then(snapshot => {\n *   const updateTime = snapshot.updateTime;\n *\n *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);\n *   return documentRef.delete({ lastUpdateTime: updateTime });\n * });\n *\n * ```\n * @property {Timestamp} lastUpdateTime The update time to enforce. If set,\n *  enforces that the document was last updated at lastUpdateTime. Fails the\n *  operation if the document was last updated at a different time.\n * @property {boolean} exists If set, enforces that the target document must\n * or must not exist.\n * @typedef {Object} Precondition\n */\n/**\n * An options object that configures the behavior of\n * [set()]{@link DocumentReference#set} calls in\n * [DocumentReference]{@link DocumentReference},\n * [WriteBatch]{@link WriteBatch}, and\n * [Transaction]{@link Transaction}. These calls can be\n * configured to perform granular merges instead of overwriting the target\n * documents in their entirety by providing a SetOptions object with\n * { merge : true }.\n *\n * @property {boolean} merge Changes the behavior of a set() call to only\n * replace the values specified in its data argument. Fields omitted from the\n * set() call remain untouched.\n * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of\n * set() calls to only replace the specified field paths. Any field path that is\n * not specified is ignored and remains untouched.\n * It is an error to pass a SetOptions object to a set() call that is missing a\n * value for any of the fields specified here.\n * @typedef {Object} SetOptions\n */\n/**\n * An options object that can be used to configure the behavior of\n * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these\n * calls can be configured to only return a subset of fields.\n *\n * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields\n * to return and reduces the amount of data transmitted by the backend.\n * Adding a field mask does not filter results. Documents do not need to\n * contain values for all the fields in the mask to be part of the result set.\n * @typedef {Object} ReadOptions\n */\n/**\n * An options object to configure throttling on BulkWriter.\n *\n * Whether to disable or configure throttling. By default, throttling is\n * enabled. `throttling` can be set to either a boolean or a config object.\n * Setting it to `true` will use default values. You can override the defaults\n * by setting it to `false` to disable throttling, or by setting the config\n * values to enable throttling with the provided values.\n *\n * @property {boolean|Object} throttling Whether to disable or enable\n * throttling. Throttling is enabled by default, if the field is set to `true`\n * or if any custom throttling options are provided. `{ initialOpsPerSecond:\n * number }` sets the initial maximum number of operations per second allowed by\n * the throttler. If `initialOpsPerSecond` is not set, the default is 500\n * operations per second. `{ maxOpsPerSecond: number }` sets the maximum number\n * of operations per second allowed by the throttler. If `maxOpsPerSecond` is\n * not set, no maximum is enforced.\n * @typedef {Object} BulkWriterOptions\n */\n/**\n * An error thrown when a BulkWriter operation fails.\n *\n * The error used by {@link BulkWriter~shouldRetryCallback} set in\n * {@link BulkWriter#onWriteError}.\n *\n * @property {GrpcStatus} code The status code of the error.\n * @property {string} message The error message of the error.\n * @property {DocumentReference} documentRef The document reference the\n * operation was performed on.\n * @property {'create' | 'set' | 'update' | 'delete'} operationType The type\n * of operation performed.\n * @property {number} failedAttempts How many times this operation has been\n * attempted unsuccessfully.\n * @typedef {Error} BulkWriterError\n */\n/**\n * Status codes returned by GRPC operations.\n *\n * @see https://github.com/grpc/grpc/blob/master/doc/statuscodes.md\n *\n * @enum {number}\n * @typedef {Object} GrpcStatus\n */\n/**\n * The Firestore client represents a Firestore Database and is the entry point\n * for all Firestore operations.\n *\n * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}\n *\n * @class\n *\n * @example Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/firestore\n *\n * ```\n * @example Import the client library\n * ```\n * var Firestore = require('@google-cloud/firestore');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * var firestore = new Firestore();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * var firestore = new Firestore({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\nclass Firestore {\n    /**\n     * Lazy-load the Firestore's default BulkWriter.\n     *\n     * @private\n     * @internal\n     */\n    getBulkWriter() {\n        if (!this._bulkWriter) {\n            this._bulkWriter = this.bulkWriter();\n        }\n        return this._bulkWriter;\n    }\n    /**\n     * @param {Object=} settings [Configuration object](#/docs).\n     * @param {string=} settings.projectId The project ID from the Google\n     * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the\n     * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in\n     * environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}\n     * @param {string=} settings.keyFilename Local file containing the Service\n     * Account credentials as downloaded from the Google Developers Console. Can\n     * be omitted in environments that support\n     * {@link https://cloud.google.com/docs/authentication Application Default\n     * Credentials}. To configure Firestore with custom credentials, use\n     * `settings.credentials` and provide the `client_email` and `private_key` of\n     * your service account.\n     * @param {{client_email:string=, private_key:string=}=} settings.credentials\n     * The `client_email` and `private_key` properties of the service account\n     * to use with your Firestore project. Can be omitted in environments that\n     * support {@link https://cloud.google.com/docs/authentication Application\n     * Default Credentials}. If your credentials are stored in a JSON file, you\n     * can specify a `keyFilename` instead.\n     * @param {string=} settings.host The host to connect to.\n     * @param {boolean=} settings.ssl Whether to use SSL when connecting.\n     * @param {number=} settings.maxIdleChannels The maximum number of idle GRPC\n     * channels to keep. A smaller number of idle channels reduces memory usage\n     * but increases request latency for clients with fluctuating request rates.\n     * If set to 0, shuts down all GRPC channels when the client becomes idle.\n     * Defaults to 1.\n     * @param {boolean=} settings.ignoreUndefinedProperties Whether to skip nested\n     * properties that are set to `undefined` during object serialization. If set\n     * to `true`, these properties are skipped and not written to Firestore. If\n     * set `false` or omitted, the SDK throws an exception when it encounters\n     * properties of type `undefined`.\n     * @param {boolean=} settings.preferRest Whether to force the use of HTTP/1.1 REST\n     * transport until a method that requires gRPC is called. When a method requires gRPC,\n     * this Firestore client will load dependent gRPC libraries and then use gRPC transport\n     * for communication from that point forward. Currently the only operation\n     * that requires gRPC is creating a snapshot listener with the method\n     * `DocumentReference<T>.onSnapshot()`, `CollectionReference<T>.onSnapshot()`, or\n     * `Query<T>.onSnapshot()`. If specified, this setting value will take precedent over the\n     * environment variable `FIRESTORE_PREFER_REST`. If not specified, the\n     * SDK will use the value specified in the environment variable `FIRESTORE_PREFER_REST`.\n     * Valid values of `FIRESTORE_PREFER_REST` are `true` ('1') or `false` (`0`). Values are\n     * not case-sensitive. Any other value for the environment variable will be ignored and\n     * a warning will be logged to the console.\n     */\n    constructor(settings) {\n        /**\n         * The configuration options for the GAPIC client.\n         * @private\n         * @internal\n         */\n        this._settings = {};\n        /**\n         * Whether the initialization settings can still be changed by invoking\n         * `settings()`.\n         * @private\n         * @internal\n         */\n        this._settingsFrozen = false;\n        /**\n         * The serializer to use for the Protobuf transformation.\n         * @private\n         * @internal\n         */\n        this._serializer = null;\n        /**\n         * The project ID for this client.\n         *\n         * The project ID is auto-detected during the first request unless a project\n         * ID is passed to the constructor (or provided via `.settings()`).\n         * @private\n         * @internal\n         */\n        this._projectId = undefined;\n        /**\n         * The database ID provided via `.settings()`.\n         *\n         * @private\n         * @internal\n         */\n        this._databaseId = undefined;\n        /**\n         * Count of listeners that have been registered on the client.\n         *\n         * The client can only be terminated when there are no pending writes or\n         * registered listeners.\n         * @private\n         * @internal\n         */\n        this.registeredListenersCount = 0;\n        /**\n         * Number of pending operations on the client.\n         *\n         * The client can only be terminated when there are no pending writes or\n         * registered listeners.\n         * @private\n         * @internal\n         */\n        this.bulkWritersCount = 0;\n        const libraryHeader = {\n            libName: 'gccl',\n            libVersion,\n        };\n        if (settings && settings.firebaseVersion) {\n            libraryHeader.libVersion += ' fire/' + settings.firebaseVersion;\n        }\n        if (settings && settings.firebaseAdminVersion) {\n            libraryHeader.libVersion +=\n                ' fire-admin/' + settings.firebaseAdminVersion;\n        }\n        this.validateAndApplySettings({ ...settings, ...libraryHeader });\n        this._traceUtil = this.newTraceUtilInstance(this._settings);\n        const retryConfig = serviceConfig.retry_params.default;\n        this._backoffSettings = {\n            initialDelayMs: retryConfig.initial_retry_delay_millis,\n            maxDelayMs: retryConfig.max_retry_delay_millis,\n            backoffFactor: retryConfig.retry_delay_multiplier,\n        };\n        const maxIdleChannels = this._settings.maxIdleChannels === undefined\n            ? exports.DEFAULT_MAX_IDLE_CHANNELS\n            : this._settings.maxIdleChannels;\n        this._clientPool = new pool_1.ClientPool(MAX_CONCURRENT_REQUESTS_PER_CLIENT, maxIdleChannels, \n        /* clientFactory= */ (requiresGrpc) => {\n            var _a;\n            let client;\n            // Use the rest fallback if enabled and if the method does not require GRPC\n            const useFallback = !this._settings.preferRest || requiresGrpc ? false : 'rest';\n            let gax;\n            if (useFallback) {\n                if (!this._gaxFallback) {\n                    gax = this._gaxFallback = require('google-gax/build/src/fallback');\n                }\n                else {\n                    gax = this._gaxFallback;\n                }\n            }\n            else {\n                if (!this._gax) {\n                    gax = this._gax = require('google-gax');\n                }\n                else {\n                    gax = this._gax;\n                }\n            }\n            if (this._settings.ssl === false) {\n                const grpcModule = (_a = this._settings.grpc) !== null && _a !== void 0 ? _a : require('google-gax').grpc;\n                const sslCreds = grpcModule.credentials.createInsecure();\n                const settings = {\n                    sslCreds,\n                    ...this._settings,\n                    fallback: useFallback,\n                };\n                // Since `ssl === false`, if we're using the GAX fallback then\n                // also set the `protocol` option for GAX fallback to force http\n                if (useFallback) {\n                    settings.protocol = 'http';\n                }\n                client = new module.exports.v1(settings, gax);\n            }\n            else {\n                client = new module.exports.v1({\n                    ...this._settings,\n                    fallback: useFallback,\n                }, gax);\n            }\n            (0, logger_1.logger)('clientFactory', null, 'Initialized Firestore GAPIC Client (useFallback: %s)', useFallback);\n            return client;\n        }, \n        /* clientDestructor= */ client => client.close());\n        (0, logger_1.logger)('Firestore', null, 'Initialized Firestore');\n    }\n    /**\n     * Specifies custom settings to be used to configure the `Firestore`\n     * instance. Can only be invoked once and before any other Firestore method.\n     *\n     * If settings are provided via both `settings()` and the `Firestore`\n     * constructor, both settings objects are merged and any settings provided via\n     * `settings()` take precedence.\n     *\n     * @param {object} settings The settings to use for all Firestore operations.\n     */\n    settings(settings) {\n        (0, validate_1.validateObject)('settings', settings);\n        (0, validate_1.validateString)('settings.projectId', settings.projectId, { optional: true });\n        (0, validate_1.validateString)('settings.databaseId', settings.databaseId, {\n            optional: true,\n        });\n        if (this._settingsFrozen) {\n            throw new Error('Firestore has already been initialized. You can only call ' +\n                'settings() once, and only before calling any other methods on a ' +\n                'Firestore object.');\n        }\n        const mergedSettings = { ...this._settings, ...settings };\n        this.validateAndApplySettings(mergedSettings);\n        this._traceUtil = this.newTraceUtilInstance(this._settings);\n        this._settingsFrozen = true;\n    }\n    validateAndApplySettings(settings) {\n        var _a;\n        if (settings.projectId !== undefined) {\n            (0, validate_1.validateString)('settings.projectId', settings.projectId);\n            this._projectId = settings.projectId;\n        }\n        if (settings.databaseId !== undefined) {\n            (0, validate_1.validateString)('settings.databaseId', settings.databaseId);\n            this._databaseId = settings.databaseId;\n        }\n        let url = null;\n        // If preferRest is not specified in settings, but is set as environment variable,\n        // then use the environment variable value.\n        const preferRestEnvValue = (0, util_1.tryGetPreferRestEnvironmentVariable)();\n        if (settings.preferRest === undefined && preferRestEnvValue !== undefined) {\n            settings = {\n                ...settings,\n                preferRest: preferRestEnvValue,\n            };\n        }\n        // If the environment variable is set, it should always take precedence\n        // over any user passed in settings.\n        if (process.env.FIRESTORE_EMULATOR_HOST) {\n            (0, validate_1.validateHost)('FIRESTORE_EMULATOR_HOST', process.env.FIRESTORE_EMULATOR_HOST);\n            settings = {\n                ...settings,\n                host: process.env.FIRESTORE_EMULATOR_HOST,\n                ssl: false,\n            };\n            url = new url_1.URL(`http://${settings.host}`);\n        }\n        else if (settings.host !== undefined) {\n            (0, validate_1.validateHost)('settings.host', settings.host);\n            url = new url_1.URL(`http://${settings.host}`);\n        }\n        // Only store the host if a valid value was provided in `host`.\n        if (url !== null) {\n            if ((settings.servicePath !== undefined &&\n                settings.servicePath !== url.hostname) ||\n                (settings.apiEndpoint !== undefined &&\n                    settings.apiEndpoint !== url.hostname)) {\n                // eslint-disable-next-line no-console\n                console.warn(`The provided host (${url.hostname}) in \"settings\" does not ` +\n                    `match the existing host (${(_a = settings.servicePath) !== null && _a !== void 0 ? _a : settings.apiEndpoint}). Using the provided host.`);\n            }\n            settings.servicePath = url.hostname;\n            if (url.port !== '' && settings.port === undefined) {\n                settings.port = Number(url.port);\n            }\n            // We need to remove the `host` and `apiEndpoint` setting, in case a user\n            // calls `settings()`, which will compare the the provided `host` to the\n            // existing hostname stored on `servicePath`.\n            delete settings.host;\n            delete settings.apiEndpoint;\n        }\n        if (settings.ssl !== undefined) {\n            (0, validate_1.validateBoolean)('settings.ssl', settings.ssl);\n        }\n        if (settings.maxIdleChannels !== undefined) {\n            (0, validate_1.validateInteger)('settings.maxIdleChannels', settings.maxIdleChannels, {\n                minValue: 0,\n            });\n        }\n        this._settings = settings;\n        this._settings.toJSON = function () {\n            const temp = Object.assign({}, this);\n            if (temp.credentials) {\n                temp.credentials = { private_key: '***', client_email: '***' };\n            }\n            return temp;\n        };\n        this._serializer = new serializer_1.Serializer(this);\n    }\n    newTraceUtilInstance(settings) {\n        let createEnabledInstance = true;\n        // The environment variable can override options to enable/disable telemetry collection.\n        if ('FIRESTORE_ENABLE_TRACING' in process.env) {\n            const enableTracingEnvVar = process.env.FIRESTORE_ENABLE_TRACING.toLowerCase();\n            if (enableTracingEnvVar === 'on' || enableTracingEnvVar === 'true') {\n                createEnabledInstance = true;\n            }\n            if (enableTracingEnvVar === 'off' || enableTracingEnvVar === 'false') {\n                createEnabledInstance = false;\n            }\n        }\n        if (createEnabledInstance) {\n            return new enabled_trace_util_1.EnabledTraceUtil(settings);\n        }\n        else {\n            return new disabled_trace_util_1.DisabledTraceUtil();\n        }\n    }\n    /**\n     * Returns the Project ID for this Firestore instance. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     * @internal\n     */\n    get projectId() {\n        if (this._projectId === undefined) {\n            throw new Error('INTERNAL ERROR: Client is not yet ready to issue requests.');\n        }\n        return this._projectId;\n    }\n    /**\n     * Returns the Database ID for this Firestore instance.\n     */\n    get databaseId() {\n        return this._databaseId || path_1.DEFAULT_DATABASE_ID;\n    }\n    /**\n     * Returns the root path of the database. Validates that\n     * `initializeIfNeeded()` was called before.\n     *\n     * @private\n     * @internal\n     */\n    get formattedName() {\n        return `projects/${this.projectId}/databases/${this.databaseId}`;\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path.\n     *\n     * @param {string} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The\n     * [DocumentReference]{@link DocumentReference} instance.\n     *\n     * @example\n     * ```\n     * let documentRef = firestore.doc('collection/document');\n     * console.log(`Path of document is ${documentRef.path}`);\n     * ```\n     */\n    doc(documentPath) {\n        (0, path_1.validateResourcePath)('documentPath', documentPath);\n        const path = path_1.ResourcePath.EMPTY.append(documentPath);\n        if (!path.isDocument) {\n            throw new Error(`Value for argument \"documentPath\" must point to a document, but was \"${documentPath}\". Your path does not contain an even number of components.`);\n        }\n        return new document_reference_1.DocumentReference(this, path);\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} The\n     * [CollectionReference]{@link CollectionReference} instance.\n     *\n     * @example\n     * ```\n     * let collectionRef = firestore.collection('collection');\n     *\n     * // Add a document with an auto-generated ID.\n     * collectionRef.add({foo: 'bar'}).then((documentRef) => {\n     *   console.log(`Added document at ${documentRef.path})`);\n     * });\n     * ```\n     */\n    collection(collectionPath) {\n        (0, path_1.validateResourcePath)('collectionPath', collectionPath);\n        const path = path_1.ResourcePath.EMPTY.append(collectionPath);\n        if (!path.isCollection) {\n            throw new Error(`Value for argument \"collectionPath\" must point to a collection, but was \"${collectionPath}\". Your path does not contain an odd number of components.`);\n        }\n        return new collection_reference_1.CollectionReference(this, path);\n    }\n    /**\n     * Creates and returns a new Query that includes all documents in the\n     * database that are contained in a collection or subcollection with the\n     * given collectionId.\n     *\n     * @param {string} collectionId Identifies the collections to query over.\n     * Every collection or subcollection with this ID as the last segment of its\n     * path will be included. Cannot contain a slash.\n     * @returns {CollectionGroup} The created CollectionGroup.\n     *\n     * @example\n     * ```\n     * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});\n     * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});\n     *\n     * Promise.all([docA, docB]).then(() => {\n     *    let query = firestore.collectionGroup('mygroup');\n     *    query = query.where('foo', '==', 'bar');\n     *    return query.get().then(snapshot => {\n     *       console.log(`Found ${snapshot.size} documents.`);\n     *    });\n     * });\n     * ```\n     */\n    collectionGroup(collectionId) {\n        if (collectionId.indexOf('/') !== -1) {\n            throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);\n        }\n        return new collection_group_1.CollectionGroup(this, collectionId, /* converter= */ undefined);\n    }\n    /**\n     * Creates a [WriteBatch]{@link WriteBatch}, used for performing\n     * multiple writes as a single atomic operation.\n     *\n     * @returns {WriteBatch} A WriteBatch that operates on this Firestore\n     * client.\n     *\n     * @example\n     * ```\n     * let writeBatch = firestore.batch();\n     *\n     * // Add two documents in an atomic batch.\n     * let data = { foo: 'bar' };\n     * writeBatch.set(firestore.doc('col/doc1'), data);\n     * writeBatch.set(firestore.doc('col/doc2'), data);\n     *\n     * writeBatch.commit().then(res => {\n     *   console.log('Successfully executed batch.');\n     * });\n     * ```\n     */\n    batch() {\n        return new write_batch_1.WriteBatch(this);\n    }\n    /**\n     * Creates a [BulkWriter]{@link BulkWriter}, used for performing\n     * multiple writes in parallel. Gradually ramps up writes as specified\n     * by the 500/50/5 rule.\n     *\n     * If you pass [BulkWriterOptions]{@link BulkWriterOptions}, you can\n     * configure the throttling rates for the created BulkWriter.\n     *\n     * @see [500/50/5 Documentation]{@link https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic}\n     *\n     * @param {BulkWriterOptions=} options BulkWriter options.\n     * @returns {BulkWriter} A BulkWriter that operates on this Firestore\n     * client.\n     *\n     * @example\n     * ```\n     * let bulkWriter = firestore.bulkWriter();\n     *\n     * bulkWriter.create(firestore.doc('col/doc1'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Added document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.update(firestore.doc('col/doc2'), {foo: 'bar'})\n     *   .then(res => {\n     *     console.log(`Updated document at ${res.writeTime}`);\n     *   });\n     * bulkWriter.delete(firestore.doc('col/doc3'))\n     *   .then(res => {\n     *     console.log(`Deleted document at ${res.writeTime}`);\n     *   });\n     * await bulkWriter.close().then(() => {\n     *   console.log('Executed all writes');\n     * });\n     * ```\n     */\n    bulkWriter(options) {\n        return new bulk_writer_1.BulkWriter(this, options);\n    }\n    /** @private */\n    snapshot_(documentOrName, readTime, encoding) {\n        // TODO: Assert that Firestore Project ID is valid.\n        let convertTimestamp;\n        let convertFields;\n        if (encoding === undefined || encoding === 'protobufJS') {\n            convertTimestamp = data => data;\n            convertFields = data => data;\n        }\n        else if (encoding === 'json') {\n            // Google Cloud Functions calls us with Proto3 JSON format data, which we\n            // must convert to Protobuf JS.\n            convertTimestamp = convert_1.timestampFromJson;\n            convertFields = convert_1.fieldsFromJson;\n        }\n        else {\n            throw new Error('Unsupported encoding format. Expected \"json\" or \"protobufJS\", ' +\n                `but was \"${encoding}\".`);\n        }\n        let ref;\n        let document;\n        if (typeof documentOrName === 'string') {\n            ref = new document_reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n        }\n        else {\n            ref = new document_reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));\n            document = new document_1.DocumentSnapshotBuilder(ref);\n            document.fieldsProto = documentOrName.fields\n                ? convertFields(documentOrName.fields)\n                : {};\n            document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, 'documentOrName.createTime'));\n            document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, 'documentOrName.updateTime'));\n        }\n        if (readTime) {\n            document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, 'readTime'));\n        }\n        return document.build();\n    }\n    /**\n     * Creates a new `BundleBuilder` instance to package selected Firestore data into\n     * a bundle.\n     *\n     * @param bundleId. The id of the bundle. When loaded on clients, client SDKs use this id\n     * and the timestamp associated with the built bundle to tell if it has been loaded already.\n     * If not specified, a random identifier will be used.\n     */\n    bundle(name) {\n        return new bundle_1.BundleBuilder(name || (0, util_1.autoId)());\n    }\n    /**\n     * Function executed by {@link Firestore#runTransaction} within the transaction\n     * context.\n     *\n     * @callback Firestore~updateFunction\n     * @template T\n     * @param {Transaction} transaction The transaction object for this\n     * transaction.\n     * @returns {Promise<T>} The promise returned at the end of the transaction.\n     * This promise will be returned by {@link Firestore#runTransaction} if the\n     * transaction completed successfully.\n     */\n    /**\n     * Options object for {@link Firestore#runTransaction} to configure a\n     * read-only transaction.\n     *\n     * @param {true} readOnly Set to true to indicate a read-only transaction.\n     * @param {Timestamp=} readTime If specified, documents are read at the given\n     * time. This may not be more than 60 seconds in the past from when the\n     * request is processed by the server.\n     * @typedef {Object} Firestore~ReadOnlyTransactionOptions\n     */\n    /**\n     * Options object for {@link Firestore#runTransaction} to configure a\n     * read-write transaction.\n     *\n     * @param {false=} readOnly Set to false or omit to indicate a read-write\n     * transaction.\n     * @param {number=} maxAttempts The maximum number of attempts for this\n     * transaction. Defaults to 5.\n     * @typedef {Object} Firestore~ReadWriteTransactionOptions\n     */\n    /**\n     * Executes the given updateFunction and commits the changes applied within\n     * the transaction.\n     *\n     * You can use the transaction object passed to 'updateFunction' to read and\n     * modify Firestore documents under lock. You have to perform all reads before\n     * before you perform any write.\n     *\n     * Transactions can be performed as read-only or read-write transactions. By\n     * default, transactions are executed in read-write mode.\n     *\n     * A read-write transaction obtains a pessimistic lock on all documents that\n     * are read during the transaction. These locks block other transactions,\n     * batched writes, and other non-transactional writes from changing that\n     * document. Any writes in a read-write transactions are committed once\n     * 'updateFunction' resolves, which also releases all locks.\n     *\n     * If a read-write transaction fails with contention, the transaction is\n     * retried up to five times. The `updateFunction` is invoked once for each\n     * attempt.\n     *\n     * Read-only transactions do not lock documents. They can be used to read\n     * documents at a consistent snapshot in time, which may be up to 60 seconds\n     * in the past. Read-only transactions are not retried.\n     *\n     * Transactions time out after 60 seconds if no documents are read.\n     * Transactions that are not committed within than 270 seconds are also\n     * aborted. Any remaining locks are released when a transaction times out.\n     *\n     * @template T\n     * @param {Firestore~updateFunction} updateFunction The user function to\n     * execute within the transaction context.\n     * @param {\n     * Firestore~ReadWriteTransactionOptions|Firestore~ReadOnlyTransactionOptions=\n     * } transactionOptions Transaction options.\n     * @returns {Promise<T>} If the transaction completed successfully or was\n     * explicitly aborted (by the updateFunction returning a failed Promise), the\n     * Promise returned by the updateFunction will be returned here. Else if the\n     * transaction failed, a rejected Promise with the corresponding failure\n     * error will be returned.\n     *\n     * @example\n     * ```\n     * let counterTransaction = firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       let count =  doc.get('count') || 0;\n     *       if (count > 10) {\n     *         return Promise.reject('Reached maximum count');\n     *       }\n     *       transaction.update(documentRef, { count: ++count });\n     *       return Promise.resolve(count);\n     *     }\n     *\n     *     transaction.create(documentRef, { count: 1 });\n     *     return Promise.resolve(1);\n     *   });\n     * });\n     *\n     * counterTransaction.then(res => {\n     *   console.log(`Count updated to ${res}`);\n     * });\n     * ```\n     */\n    runTransaction(updateFunction, transactionOptions) {\n        (0, validate_1.validateFunction)('updateFunction', updateFunction);\n        const tag = (0, util_1.requestTag)();\n        if (transactionOptions) {\n            (0, validate_1.validateObject)('transactionOptions', transactionOptions);\n            (0, validate_1.validateBoolean)('transactionOptions.readOnly', transactionOptions.readOnly, { optional: true });\n            if (transactionOptions.readOnly) {\n                (0, validate_1.validateTimestamp)('transactionOptions.readTime', transactionOptions.readTime, { optional: true });\n            }\n            else {\n                (0, validate_1.validateInteger)('transactionOptions.maxAttempts', transactionOptions.maxAttempts, { optional: true, minValue: 1 });\n            }\n        }\n        const transaction = new transaction_1.Transaction(this, tag, transactionOptions);\n        return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction));\n    }\n    /**\n     * Fetches the root collections that are associated with this Firestore\n     * database.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * ```\n     * firestore.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found collection with id: ${collection.id}`);\n     *   }\n     * });\n     * ```\n     */\n    listCollections() {\n        const rootDocument = new document_reference_1.DocumentReference(this, path_1.ResourcePath.EMPTY);\n        return rootDocument.listCollections();\n    }\n    /**\n     * Retrieves multiple documents from Firestore.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * ```\n     * let docRef1 = firestore.doc('col/doc1');\n     * let docRef2 = firestore.doc('col/doc2');\n     *\n     * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {\n     *   console.log(`First document: ${JSON.stringify(docs[0])}`);\n     *   console.log(`Second document: ${JSON.stringify(docs[1])}`);\n     * });\n     * ```\n     */\n    getAll(...documentRefsOrReadOptions) {\n        return this._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_BATCH_GET_DOCUMENTS, () => {\n            (0, validate_1.validateMinNumberOfArguments)('Firestore.getAll', documentRefsOrReadOptions, 1);\n            const { documents, fieldMask } = (0, transaction_1.parseGetAllArguments)(documentRefsOrReadOptions);\n            this._traceUtil.currentSpan().setAttributes({\n                [trace_util_1.ATTRIBUTE_KEY_IS_TRANSACTIONAL]: false,\n                [trace_util_1.ATTRIBUTE_KEY_DOC_COUNT]: documents.length,\n            });\n            const tag = (0, util_1.requestTag)();\n            // Capture the error stack to preserve stack tracing across async calls.\n            const stack = Error().stack;\n            return this.initializeIfNeeded(tag)\n                .then(() => {\n                const reader = new document_reader_1.DocumentReader(this, documents, fieldMask);\n                return reader.get(tag);\n            })\n                .catch(err => {\n                throw (0, util_1.wrapError)(err, stack);\n            });\n        });\n    }\n    /**\n     * Registers a listener on this client, incrementing the listener count. This\n     * is used to verify that all listeners are unsubscribed when terminate() is\n     * called.\n     *\n     * @private\n     * @internal\n     */\n    registerListener() {\n        this.registeredListenersCount += 1;\n    }\n    /**\n     * Unregisters a listener on this client, decrementing the listener count.\n     * This is used to verify that all listeners are unsubscribed when terminate()\n     * is called.\n     *\n     * @private\n     * @internal\n     */\n    unregisterListener() {\n        this.registeredListenersCount -= 1;\n    }\n    /**\n     * Increments the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     * @internal\n     */\n    _incrementBulkWritersCount() {\n        this.bulkWritersCount += 1;\n    }\n    /**\n     * Decrements the number of open BulkWriter instances. This is used to verify\n     * that all pending operations are complete when terminate() is called.\n     *\n     * @private\n     * @internal\n     */\n    _decrementBulkWritersCount() {\n        this.bulkWritersCount -= 1;\n    }\n    /**\n     * Recursively deletes all documents and subcollections at and under the\n     * specified level.\n     *\n     * If any delete fails, the promise is rejected with an error message\n     * containing the number of failed deletes and the stack trace of the last\n     * failed delete. The provided reference is deleted regardless of whether\n     * all deletes succeeded.\n     *\n     * `recursiveDelete()` uses a BulkWriter instance with default settings to\n     * perform the deletes. To customize throttling rates or add success/error\n     * callbacks, pass in a custom BulkWriter instance.\n     *\n     * @param ref The reference of a document or collection to delete.\n     * @param bulkWriter A custom BulkWriter instance used to perform the\n     * deletes.\n     * @return A promise that resolves when all deletes have been performed.\n     * The promise is rejected if any of the deletes fail.\n     *\n     * @example\n     * ```\n     * // Recursively delete a reference and log the references of failures.\n     * const bulkWriter = firestore.bulkWriter();\n     * bulkWriter\n     *   .onWriteError((error) => {\n     *     if (\n     *       error.failedAttempts < MAX_RETRY_ATTEMPTS\n     *     ) {\n     *       return true;\n     *     } else {\n     *       console.log('Failed write at document: ', error.documentRef.path);\n     *       return false;\n     *     }\n     *   });\n     * await firestore.recursiveDelete(docRef, bulkWriter);\n     * ```\n     */\n    recursiveDelete(ref, bulkWriter) {\n        return this._recursiveDelete(ref, recursive_delete_1.RECURSIVE_DELETE_MAX_PENDING_OPS, recursive_delete_1.RECURSIVE_DELETE_MIN_PENDING_OPS, bulkWriter);\n    }\n    /**\n     * This overload is not private in order to test the query resumption with\n     * startAfter() once the RecursiveDelete instance has MAX_PENDING_OPS pending.\n     *\n     * @private\n     * @internal\n     */\n    // Visible for testing\n    _recursiveDelete(ref, maxPendingOps, minPendingOps, bulkWriter) {\n        const writer = bulkWriter !== null && bulkWriter !== void 0 ? bulkWriter : this.getBulkWriter();\n        const deleter = new recursive_delete_1.RecursiveDelete(this, writer, ref, maxPendingOps, minPendingOps);\n        return deleter.run();\n    }\n    /**\n     * Terminates the Firestore client and closes all open streams.\n     *\n     * @return A Promise that resolves when the client is terminated.\n     */\n    terminate() {\n        if (this.registeredListenersCount > 0 || this.bulkWritersCount > 0) {\n            return Promise.reject('All onSnapshot() listeners must be unsubscribed, and all BulkWriter ' +\n                'instances must be closed before terminating the client. ' +\n                `There are ${this.registeredListenersCount} active listeners and ` +\n                `${this.bulkWritersCount} open BulkWriter instances.`);\n        }\n        return this._clientPool.terminate();\n    }\n    /**\n     * Returns the Project ID to serve as the JSON representation of this\n     * Firestore instance.\n     *\n     * @return An object that contains the project ID (or `undefined` if not yet\n     * available).\n     */\n    toJSON() {\n        return { projectId: this._projectId };\n    }\n    /**\n     * Initializes the client if it is not already initialized. All methods in the\n     * SDK can be used after this method completes.\n     *\n     * @private\n     * @internal\n     * @param requestTag A unique client-assigned identifier that caused this\n     * initialization.\n     * @return A Promise that resolves when the client is initialized.\n     */\n    async initializeIfNeeded(requestTag) {\n        this._settingsFrozen = true;\n        if (this._settings.ssl === false) {\n            // If SSL is false, we assume that we are talking to the emulator. We\n            // provide an Authorization header by default so that the connection is\n            // recognized as admin in Firestore Emulator. (If for some reason we're\n            // not connecting to the emulator, then this will result in denials with\n            // invalid token, rather than behave like clients not logged in. The user\n            // can then provide their own Authorization header, which will take\n            // precedence).\n            this._settings.customHeaders = {\n                Authorization: 'Bearer owner',\n                ...this._settings.customHeaders,\n            };\n        }\n        if (this._projectId === undefined) {\n            try {\n                this._projectId = await this._clientPool.run(requestTag, \n                /* requiresGrpc= */ false, gapicClient => gapicClient.getProjectId());\n                (0, logger_1.logger)('Firestore.initializeIfNeeded', null, 'Detected project ID: %s', this._projectId);\n                // If the project ID was undefined when the TraceUtil was set up, we\n                // need to record it.\n                this._traceUtil.recordProjectId(this.projectId);\n            }\n            catch (err) {\n                (0, logger_1.logger)('Firestore.initializeIfNeeded', null, 'Failed to detect project ID: %s', err);\n                return Promise.reject(err);\n            }\n        }\n    }\n    /**\n     * Returns GAX call options that set the cloud resource header.\n     * @private\n     * @internal\n     */\n    createCallOptions(methodName, retryCodes) {\n        var _a;\n        const callOptions = {\n            otherArgs: {\n                headers: {\n                    [CLOUD_RESOURCE_HEADER]: this.formattedName,\n                    ...this._settings.customHeaders,\n                    ...(_a = this._settings[methodName]) === null || _a === void 0 ? void 0 : _a.customHeaders,\n                },\n            },\n        };\n        if (retryCodes) {\n            const retryParams = (0, util_1.getRetryParams)(methodName);\n            callOptions.retry =\n                new (require('google-gax/build/src/fallback').RetryOptions)(retryCodes, retryParams);\n        }\n        return callOptions;\n    }\n    /**\n     * A function returning a Promise that can be retried.\n     *\n     * @private\n     * @internal\n     * @callback retryFunction\n     * @returns {Promise} A Promise indicating the function's success.\n     */\n    /**\n     * Helper method that retries failed Promises.\n     *\n     * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,\n     * schedules the first attempt immediately, and then waits 100 milliseconds\n     * for further attempts.\n     *\n     * @private\n     * @internal\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param func Method returning a Promise than can be retried.\n     * @returns A Promise with the function's result if successful within\n     * `attemptsRemaining`. Otherwise, returns the last rejected Promise.\n     */\n    async _retry(methodName, requestTag, func) {\n        const backoff = new backoff_1.ExponentialBackoff();\n        let lastError = undefined;\n        for (let attempt = 0; attempt < exports.MAX_REQUEST_RETRIES; ++attempt) {\n            if (lastError) {\n                (0, logger_1.logger)('Firestore._retry', requestTag, 'Retrying request that failed with error:', lastError);\n            }\n            try {\n                await backoff.backoffAndWait();\n                return await func();\n            }\n            catch (err) {\n                lastError = err;\n                if ((0, util_1.isPermanentRpcError)(err, methodName)) {\n                    break;\n                }\n            }\n        }\n        (0, logger_1.logger)('Firestore._retry', requestTag, 'Request failed with error:', lastError);\n        return Promise.reject(lastError);\n    }\n    /**\n     * Waits for the provided stream to become active and returns a paused but\n     * healthy stream. If an error occurs before the first byte is read, the\n     * method rejects the returned Promise.\n     *\n     * @private\n     * @internal\n     * @param backendStream The Node stream to monitor.\n     * @param lifetime A Promise that resolves when the stream receives an 'end',\n     * 'close' or 'finish' message.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param request If specified, the request that should be written to the\n     * stream after opening.\n     * @returns A guaranteed healthy stream that should be used instead of\n     * `backendStream`.\n     */\n    _initializeStream(backendStream, lifetime, requestTag, request) {\n        const resultStream = new stream_1.PassThrough({ objectMode: true });\n        resultStream.pause();\n        /**\n         * Whether we have resolved the Promise and returned the stream to the\n         * caller.\n         */\n        let streamInitialized = false;\n        return new Promise((resolve, reject) => {\n            function streamReady() {\n                if (!streamInitialized) {\n                    streamInitialized = true;\n                    (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Stream ready');\n                    resolve(resultStream);\n                }\n            }\n            function streamEnded() {\n                (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received stream end');\n                resultStream.unpipe(backendStream);\n                resolve(resultStream);\n                lifetime.resolve();\n            }\n            function streamFailed(err) {\n                if (!streamInitialized) {\n                    // If we receive an error before we were able to receive any data,\n                    // reject this stream.\n                    (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received initial error:', err);\n                    reject(err);\n                }\n                else {\n                    (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Received stream error:', err);\n                    // We execute the forwarding of the 'error' event via setImmediate() as\n                    // V8 guarantees that the Promise chain returned from this method\n                    // is resolved before any code executed via setImmediate(). This\n                    // allows the caller to attach an error handler.\n                    setImmediate(() => {\n                        resultStream.emit('error', err);\n                    });\n                }\n            }\n            backendStream.on('data', () => streamReady());\n            backendStream.on('error', err => streamFailed(err));\n            backendStream.on('end', () => streamEnded());\n            backendStream.on('close', () => streamEnded());\n            backendStream.on('finish', () => streamEnded());\n            backendStream.pipe(resultStream);\n            if (request) {\n                (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Sending request: %j', request);\n                backendStream.write(request, 'utf-8', err => {\n                    if (err) {\n                        streamFailed(err);\n                    }\n                    else {\n                        (0, logger_1.logger)('Firestore._initializeStream', requestTag, 'Marking stream as healthy');\n                        streamReady();\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * A funnel for all non-streaming API requests, assigning a project ID where\n     * necessary within the request options.\n     *\n     * @private\n     * @internal\n     * @param methodName Name of the Veneer API endpoint that takes a request\n     * and GAX options.\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @param retryCodes If provided, a custom list of retry codes. If not\n     * provided, retry is based on the behavior as defined in the ServiceConfig.\n     * @returns A Promise with the request result.\n     */\n    request(methodName, request, requestTag, retryCodes) {\n        const callOptions = this.createCallOptions(methodName, retryCodes);\n        return this._clientPool.run(requestTag, \n        /* requiresGrpc= */ false, async (gapicClient) => {\n            try {\n                (0, logger_1.logger)('Firestore.request', requestTag, 'Sending request: %j', request);\n                const [result] = await gapicClient[methodName](request, callOptions);\n                (0, logger_1.logger)('Firestore.request', requestTag, 'Received response: %j', result);\n                return result;\n            }\n            catch (err) {\n                (0, logger_1.logger)('Firestore.request', requestTag, 'Received error:', err);\n                return Promise.reject(err);\n            }\n        });\n    }\n    /**\n     * A funnel for streaming API requests, assigning a project ID where necessary\n     * within the request options.\n     *\n     * The stream is returned in paused state and needs to be resumed once all\n     * listeners are attached.\n     *\n     * @private\n     * @internal\n     * @param methodName Name of the streaming Veneer API endpoint that\n     * takes a request and GAX options.\n     * @param bidrectional Whether the request is bidirectional (true) or\n     * unidirectional (false_\n     * @param request The Protobuf request to send.\n     * @param requestTag A unique client-assigned identifier for this request.\n     * @returns A Promise with the resulting read-only stream.\n     */\n    requestStream(methodName, bidrectional, request, requestTag) {\n        const callOptions = this.createCallOptions(methodName);\n        const bidirectional = methodName === 'listen';\n        let numResponses = 0;\n        const NUM_RESPONSES_PER_TRACE_EVENT = 100;\n        return this._retry(methodName, requestTag, () => {\n            const result = new util_1.Deferred();\n            this._clientPool.run(requestTag, bidrectional, async (gapicClient) => {\n                (0, logger_1.logger)('Firestore.requestStream', requestTag, 'Sending request: %j', request);\n                this._traceUtil\n                    .currentSpan()\n                    .addEvent(`Firestore.${methodName}: Start`);\n                try {\n                    const stream = bidirectional\n                        ? gapicClient[methodName](callOptions)\n                        : gapicClient[methodName](request, callOptions);\n                    const logStream = new stream_1.Transform({\n                        objectMode: true,\n                        transform: (chunk, encoding, callback) => {\n                            (0, logger_1.logger)('Firestore.requestStream', requestTag, 'Received response: %j', chunk);\n                            numResponses++;\n                            if (numResponses === 1) {\n                                this._traceUtil\n                                    .currentSpan()\n                                    .addEvent(`Firestore.${methodName}: First response received`);\n                            }\n                            else if (numResponses % NUM_RESPONSES_PER_TRACE_EVENT === 0) {\n                                this._traceUtil\n                                    .currentSpan()\n                                    .addEvent(`Firestore.${methodName}: Received ${numResponses} responses`);\n                            }\n                            callback();\n                        },\n                    });\n                    stream.pipe(logStream);\n                    const lifetime = new util_1.Deferred();\n                    const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : undefined);\n                    resultStream.on('end', () => {\n                        stream.end();\n                        this._traceUtil\n                            .currentSpan()\n                            .addEvent(`Firestore.${methodName}: Completed`, {\n                            [trace_util_1.ATTRIBUTE_KEY_NUM_RESPONSES]: numResponses,\n                        });\n                    });\n                    result.resolve(resultStream);\n                    // While we return the stream to the callee early, we don't want to\n                    // release the GAPIC client until the callee has finished processing the\n                    // stream.\n                    return lifetime.promise;\n                }\n                catch (e) {\n                    result.reject(e);\n                }\n            });\n            return result.promise;\n        });\n    }\n}\nexports.Firestore = Firestore;\n/**\n * A logging function that takes a single string.\n *\n * @callback Firestore~logFunction\n * @param {string} Log message\n */\n// tslint:disable-next-line:no-default-export\n/**\n * The default export of the `@google-cloud/firestore` package is the\n * {@link Firestore} class.\n *\n * See {@link Firestore} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Firestore} @google-cloud/firestore\n * @alias nodejs-firestore\n *\n * @example Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/firestore\n *\n * ```\n * @example Import the client library\n * ```\n * var Firestore = require('@google-cloud/firestore');\n *\n * ```\n * @example Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:\n * ```\n * var firestore = new Firestore();\n *\n * ```\n * @example Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:\n * ```\n * var firestore = new Firestore({ projectId:\n *   'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n *\n * ```\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:firestore_quickstart\n * Full quickstart example:\n */\n// tslint:disable-next-line:no-default-export\nexports.default = Firestore;\n// Horrible hack to ensure backwards compatibility with <= 17.0, which allows\n// users to call the default constructor via\n// `const Fs = require(`@google-cloud/firestore`); new Fs()`;\nconst existingExports = module.exports;\nmodule.exports = Firestore;\nmodule.exports = Object.assign(module.exports, existingExports);\n/**\n * {@link v1beta1} factory function.\n *\n * @private\n * @internal\n * @name Firestore.v1beta1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1beta1', {\n    // The v1beta1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load the module.\n    get: () => require('./v1beta1'),\n});\n/**\n * {@link v1} factory function.\n *\n * @private\n * @internal\n * @name Firestore.v1\n * @type {function}\n */\nObject.defineProperty(module.exports, 'v1', {\n    // The v1 module is very large. To avoid pulling it in from static\n    // scope, we lazy-load  the module.\n    get: () => require('./v1'),\n});\n/**\n * {@link Status} factory function.\n *\n * @private\n * @internal\n * @name Firestore.GrpcStatus\n * @type {function}\n */\nObject.defineProperty(module.exports, 'GrpcStatus', {\n    // The gax module is very large. To avoid pulling it in from static\n    // scope, we lazy-load the module.\n    get: () => require('google-gax').Status,\n});\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}