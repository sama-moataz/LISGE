{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/utils/validator.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTaskId = exports.isTopic = exports.isURL = exports.isUTCDateString = exports.isISODateString = exports.isPhoneNumber = exports.isEmail = exports.isPassword = exports.isUid = exports.isNonNullObject = exports.isObject = exports.isNonEmptyString = exports.isBase64String = exports.isString = exports.isNumber = exports.isBoolean = exports.isNonEmptyArray = exports.isArray = exports.isBuffer = void 0;\nconst url = require(\"url\");\n/**\n * Validates that a value is a byte buffer.\n *\n * @param value - The value to validate.\n * @returns Whether the value is byte buffer or not.\n */\nfunction isBuffer(value) {\n    return value instanceof Buffer;\n}\nexports.isBuffer = isBuffer;\n/**\n * Validates that a value is an array.\n *\n * @param value - The value to validate.\n * @returns Whether the value is an array or not.\n */\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nexports.isArray = isArray;\n/**\n * Validates that a value is a non-empty array.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a non-empty array or not.\n */\nfunction isNonEmptyArray(value) {\n    return isArray(value) && value.length !== 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Validates that a value is a boolean.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a boolean or not.\n */\nfunction isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexports.isBoolean = isBoolean;\n/**\n * Validates that a value is a number.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a number or not.\n */\nfunction isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n}\nexports.isNumber = isNumber;\n/**\n * Validates that a value is a string.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a string or not.\n */\nfunction isString(value) {\n    return typeof value === 'string';\n}\nexports.isString = isString;\n/**\n * Validates that a value is a base64 string.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a base64 string or not.\n */\nfunction isBase64String(value) {\n    if (!isString(value)) {\n        return false;\n    }\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\n}\nexports.isBase64String = isBase64String;\n/**\n * Validates that a value is a non-empty string.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a non-empty string or not.\n */\nfunction isNonEmptyString(value) {\n    return isString(value) && value !== '';\n}\nexports.isNonEmptyString = isNonEmptyString;\n/**\n * Validates that a value is a nullable object.\n *\n * @param value - The value to validate.\n * @returns Whether the value is an object or not.\n */\nfunction isObject(value) {\n    return typeof value === 'object' && !isArray(value);\n}\nexports.isObject = isObject;\n/**\n * Validates that a value is a non-null object.\n *\n * @param value - The value to validate.\n * @returns Whether the value is a non-null object or not.\n */\nfunction isNonNullObject(value) {\n    return isObject(value) && value !== null;\n}\nexports.isNonNullObject = isNonNullObject;\n/**\n * Validates that a string is a valid Firebase Auth uid.\n *\n * @param uid - The string to validate.\n * @returns Whether the string is a valid Firebase Auth uid.\n */\nfunction isUid(uid) {\n    return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\n}\nexports.isUid = isUid;\n/**\n * Validates that a string is a valid Firebase Auth password.\n *\n * @param password - The password string to validate.\n * @returns Whether the string is a valid Firebase Auth password.\n */\nfunction isPassword(password) {\n    // A password must be a string of at least 6 characters.\n    return typeof password === 'string' && password.length >= 6;\n}\nexports.isPassword = isPassword;\n/**\n * Validates that a string is a valid email.\n *\n * @param email - The string to validate.\n * @returns Whether the string is valid email or not.\n */\nfunction isEmail(email) {\n    if (typeof email !== 'string') {\n        return false;\n    }\n    // There must at least one character before the @ symbol and another after.\n    const re = /^[^@]+@[^@]+$/;\n    return re.test(email);\n}\nexports.isEmail = isEmail;\n/**\n * Validates that a string is a valid phone number.\n *\n * @param phoneNumber - The string to validate.\n * @returns Whether the string is a valid phone number or not.\n */\nfunction isPhoneNumber(phoneNumber) {\n    if (typeof phoneNumber !== 'string') {\n        return false;\n    }\n    // Phone number validation is very lax here. Backend will enforce E.164\n    // spec compliance and will normalize accordingly.\n    // The phone number string must be non-empty and starts with a plus sign.\n    const re1 = /^\\+/;\n    // The phone number string must contain at least one alphanumeric character.\n    const re2 = /[\\da-zA-Z]+/;\n    return re1.test(phoneNumber) && re2.test(phoneNumber);\n}\nexports.isPhoneNumber = isPhoneNumber;\n/**\n * Validates that a string is a valid ISO date string.\n *\n * @param dateString - The string to validate.\n * @returns Whether the string is a valid ISO date string.\n */\nfunction isISODateString(dateString) {\n    try {\n        return isNonEmptyString(dateString) &&\n            (new Date(dateString).toISOString() === dateString);\n    }\n    catch (e) {\n        return false;\n    }\n}\nexports.isISODateString = isISODateString;\n/**\n * Validates that a string is a valid UTC date string.\n *\n * @param dateString - The string to validate.\n * @returns Whether the string is a valid UTC date string.\n */\nfunction isUTCDateString(dateString) {\n    try {\n        return isNonEmptyString(dateString) &&\n            (new Date(dateString).toUTCString() === dateString);\n    }\n    catch (e) {\n        return false;\n    }\n}\nexports.isUTCDateString = isUTCDateString;\n/**\n * Validates that a string is a valid web URL.\n *\n * @param urlStr - The string to validate.\n * @returns Whether the string is valid web URL or not.\n */\nfunction isURL(urlStr) {\n    if (typeof urlStr !== 'string') {\n        return false;\n    }\n    // Lookup illegal characters.\n    const re = /[^a-z0-9:/?#[\\]@!$&'()*+,;=.\\-_~%]/i;\n    if (re.test(urlStr)) {\n        return false;\n    }\n    try {\n        const uri = url.parse(urlStr);\n        const scheme = uri.protocol;\n        const slashes = uri.slashes;\n        const hostname = uri.hostname;\n        const pathname = uri.pathname;\n        if ((scheme !== 'http:' && scheme !== 'https:') || !slashes) {\n            return false;\n        }\n        // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\n        // Each zone must not start with a hyphen or underscore.\n        if (!hostname || !/^[a-zA-Z0-9]+[\\w-]*([.]?[a-zA-Z0-9]+[\\w-]*)*$/.test(hostname)) {\n            return false;\n        }\n        // Allow for pathnames: (/chars+)*/?\n        // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\n        const pathnameRe = /^(\\/[\\w\\-.~!$'()*+,;=:@%]+)*\\/?$/;\n        // Validate pathname.\n        if (pathname &&\n            pathname !== '/' &&\n            !pathnameRe.test(pathname)) {\n            return false;\n        }\n        // Allow any query string and hash as long as no invalid character is used.\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.isURL = isURL;\n/**\n * Validates that the provided topic is a valid FCM topic name.\n *\n * @param topic - The topic to validate.\n * @returns Whether the provided topic is a valid FCM topic name.\n */\nfunction isTopic(topic) {\n    if (typeof topic !== 'string') {\n        return false;\n    }\n    const VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\n    return VALID_TOPIC_REGEX.test(topic);\n}\nexports.isTopic = isTopic;\n/**\n * Validates that the provided string can be used as a task ID\n * for Cloud Tasks.\n *\n * @param taskId - the task ID to validate.\n * @returns Whether the provided task ID is valid.\n */\nfunction isTaskId(taskId) {\n    if (typeof taskId !== 'string') {\n        return false;\n    }\n    const VALID_TASK_ID_REGEX = /^[A-Za-z0-9_-]+$/;\n    return VALID_TASK_ID_REGEX.test(taskId);\n}\nexports.isTaskId = isTaskId;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/utils/deep-copy.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deepExtend = exports.deepCopy = void 0;\n/**\n * Returns a deep copy of an object or array.\n *\n * @param value - The object or array to deep copy.\n * @returns A deep copy of the provided object or array.\n */\nfunction deepCopy(value) {\n    return deepExtend(undefined, value);\n}\nexports.deepCopy = deepCopy;\n/**\n * Copies properties from source to target (recursively allows extension of objects and arrays).\n * Scalar values in the target are over-written. If target is undefined, an object of the\n * appropriate type will be created (and returned).\n *\n * We recursively copy all child properties of plain objects in the source - so that namespace-like\n * objects are merged.\n *\n * Note that the target can be a function, in which case the properties in the source object are\n * copied onto it as static properties of the function.\n *\n * @param target - The value which is being extended.\n * @param source - The value whose properties are extending the target.\n * @returns The target value.\n */\nfunction deepExtend(target, source) {\n    if (!(source instanceof Object)) {\n        return source;\n    }\n    switch (source.constructor) {\n        case Date: {\n            // Treat Dates like scalars; if the target date object had any child\n            // properties - they will be lost!\n            const dateValue = source;\n            return new Date(dateValue.getTime());\n        }\n        case Object:\n            if (target === undefined) {\n                target = {};\n            }\n            break;\n        case Array:\n            // Always copy the array source and overwrite the target.\n            target = [];\n            break;\n        default:\n            // Not a plain Object - treat it as a scalar.\n            return source;\n    }\n    for (const prop in source) {\n        if (!Object.prototype.hasOwnProperty.call(source, prop)) {\n            continue;\n        }\n        target[prop] = deepExtend(target[prop], source[prop]);\n    }\n    return target;\n}\nexports.deepExtend = deepExtend;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;;CAeC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,UAAU,GAAG,QAAQ,QAAQ,GAAG,KAAK;AAC7C;;;;;CAKC,GACD,SAAS,SAAS,KAAK;IACnB,OAAO,WAAW,WAAW;AACjC;AACA,QAAQ,QAAQ,GAAG;AACnB;;;;;;;;;;;;;;CAcC,GACD,SAAS,WAAW,MAAM,EAAE,MAAM;IAC9B,IAAI,CAAC,CAAC,kBAAkB,MAAM,GAAG;QAC7B,OAAO;IACX;IACA,OAAQ,OAAO,WAAW;QACtB,KAAK;YAAM;gBACP,oEAAoE;gBACpE,kCAAkC;gBAClC,MAAM,YAAY;gBAClB,OAAO,IAAI,KAAK,UAAU,OAAO;YACrC;QACA,KAAK;YACD,IAAI,WAAW,WAAW;gBACtB,SAAS,CAAC;YACd;YACA;QACJ,KAAK;YACD,yDAAyD;YACzD,SAAS,EAAE;YACX;QACJ;YACI,6CAA6C;YAC7C,OAAO;IACf;IACA,IAAK,MAAM,QAAQ,OAAQ;QACvB,IAAI,CAAC,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,OAAO;YACrD;QACJ;QACA,MAAM,CAAC,KAAK,GAAG,WAAW,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK;IACxD;IACA,OAAO;AACX;AACA,QAAQ,UAAU,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 354, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/utils/error.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InstanceIdClientErrorCode = exports.InstallationsClientErrorCode = exports.MessagingClientErrorCode = exports.AuthClientErrorCode = exports.AppErrorCodes = exports.FirebaseProjectManagementError = exports.FirebaseMessagingError = exports.FirebaseInstallationsError = exports.FirebaseInstanceIdError = exports.FirebaseFirestoreError = exports.FirebaseDatabaseError = exports.FirebaseAuthError = exports.FirebaseAppError = exports.PrefixedFirebaseError = exports.FirebaseError = void 0;\nconst deep_copy_1 = require(\"../utils/deep-copy\");\n/**\n * Firebase error code structure. This extends Error.\n */\nclass FirebaseError extends Error {\n    /**\n     * @param errorInfo - The error information (code and message).\n     * @constructor\n     * @internal\n     */\n    constructor(errorInfo) {\n        super(errorInfo.message);\n        this.errorInfo = errorInfo;\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        this.__proto__ = FirebaseError.prototype;\n    }\n    /** @returns The error code. */\n    get code() {\n        return this.errorInfo?.code;\n    }\n    /** @returns The error message. */\n    get message() {\n        return this.errorInfo?.message;\n    }\n    /** @returns The object representation of the error. */\n    toJSON() {\n        return {\n            code: this.code,\n            message: this.message,\n        };\n    }\n}\nexports.FirebaseError = FirebaseError;\n/**\n * A FirebaseError with a prefix in front of the error code.\n */\nclass PrefixedFirebaseError extends FirebaseError {\n    /**\n     * @param codePrefix - The prefix to apply to the error code.\n     * @param code - The error code.\n     * @param message - The error message.\n     * @constructor\n     * @internal\n     */\n    constructor(codePrefix, code, message) {\n        super({\n            code: `${codePrefix}/${code}`,\n            message,\n        });\n        this.codePrefix = codePrefix;\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        this.__proto__ = PrefixedFirebaseError.prototype;\n    }\n    /**\n     * Allows the error type to be checked without needing to know implementation details\n     * of the code prefixing.\n     *\n     * @param code - The non-prefixed error code to test against.\n     * @returns True if the code matches, false otherwise.\n     */\n    hasCode(code) {\n        return `${this.codePrefix}/${code}` === this.code;\n    }\n}\nexports.PrefixedFirebaseError = PrefixedFirebaseError;\n/**\n * Firebase App error code structure. This extends PrefixedFirebaseError.\n */\nclass FirebaseAppError extends PrefixedFirebaseError {\n    /**\n     * @param code - The error code.\n     * @param message - The error message.\n     * @constructor\n     * @internal\n     */\n    constructor(code, message) {\n        super('app', code, message);\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        this.__proto__ = FirebaseAppError.prototype;\n    }\n}\nexports.FirebaseAppError = FirebaseAppError;\n/**\n * Firebase Auth error code structure. This extends PrefixedFirebaseError.\n */\nclass FirebaseAuthError extends PrefixedFirebaseError {\n    /**\n     * Creates the developer-facing error corresponding to the backend error code.\n     *\n     * @param serverErrorCode - The server error code.\n     * @param [message] The error message. The default message is used\n     *     if not provided.\n     * @param [rawServerResponse] The error's raw server response.\n     * @returns The corresponding developer-facing error.\n     * @internal\n     */\n    static fromServerError(serverErrorCode, message, rawServerResponse) {\n        // serverErrorCode could contain additional details:\n        // ERROR_CODE : Detailed message which can also contain colons\n        const colonSeparator = (serverErrorCode || '').indexOf(':');\n        let customMessage = null;\n        if (colonSeparator !== -1) {\n            customMessage = serverErrorCode.substring(colonSeparator + 1).trim();\n            serverErrorCode = serverErrorCode.substring(0, colonSeparator).trim();\n        }\n        // If not found, default to internal error.\n        const clientCodeKey = AUTH_SERVER_TO_CLIENT_CODE[serverErrorCode] || 'INTERNAL_ERROR';\n        const error = (0, deep_copy_1.deepCopy)(AuthClientErrorCode[clientCodeKey]);\n        // Server detailed message should have highest priority.\n        error.message = customMessage || message || error.message;\n        if (clientCodeKey === 'INTERNAL_ERROR' && typeof rawServerResponse !== 'undefined') {\n            try {\n                error.message += ` Raw server response: \"${JSON.stringify(rawServerResponse)}\"`;\n            }\n            catch (e) {\n                // Ignore JSON parsing error.\n            }\n        }\n        return new FirebaseAuthError(error);\n    }\n    /**\n     * @param info - The error code info.\n     * @param message - The error message. This will override the default message if provided.\n     * @constructor\n     * @internal\n     */\n    constructor(info, message) {\n        // Override default message if custom message provided.\n        super('auth', info.code, message || info.message);\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        this.__proto__ = FirebaseAuthError.prototype;\n    }\n}\nexports.FirebaseAuthError = FirebaseAuthError;\n/**\n * Firebase Database error code structure. This extends FirebaseError.\n */\nclass FirebaseDatabaseError extends FirebaseError {\n    /**\n     * @param info - The error code info.\n     * @param message - The error message. This will override the default\n     *     message if provided.\n     * @constructor\n     * @internal\n     */\n    constructor(info, message) {\n        // Override default message if custom message provided.\n        super({ code: 'database/' + info.code, message: message || info.message });\n    }\n}\nexports.FirebaseDatabaseError = FirebaseDatabaseError;\n/**\n * Firebase Firestore error code structure. This extends FirebaseError.\n */\nclass FirebaseFirestoreError extends FirebaseError {\n    /**\n     * @param info - The error code info.\n     * @param message - The error message. This will override the default\n     *     message if provided.\n     * @constructor\n     * @internal\n     */\n    constructor(info, message) {\n        // Override default message if custom message provided.\n        super({ code: 'firestore/' + info.code, message: message || info.message });\n    }\n}\nexports.FirebaseFirestoreError = FirebaseFirestoreError;\n/**\n * Firebase instance ID error code structure. This extends FirebaseError.\n */\nclass FirebaseInstanceIdError extends FirebaseError {\n    /**\n     *\n     * @param info - The error code info.\n     * @param message - The error message. This will override the default\n     *     message if provided.\n     * @constructor\n     * @internal\n     */\n    constructor(info, message) {\n        // Override default message if custom message provided.\n        super({ code: 'instance-id/' + info.code, message: message || info.message });\n        this.__proto__ = FirebaseInstanceIdError.prototype;\n    }\n}\nexports.FirebaseInstanceIdError = FirebaseInstanceIdError;\n/**\n * Firebase Installations service error code structure. This extends `FirebaseError`.\n */\nclass FirebaseInstallationsError extends FirebaseError {\n    /**\n     *\n     * @param info - The error code info.\n     * @param message - The error message. This will override the default\n     *     message if provided.\n     * @constructor\n     * @internal\n     */\n    constructor(info, message) {\n        // Override default message if custom message provided.\n        super({ code: 'installations/' + info.code, message: message || info.message });\n        this.__proto__ = FirebaseInstallationsError.prototype;\n    }\n}\nexports.FirebaseInstallationsError = FirebaseInstallationsError;\n/**\n * Firebase Messaging error code structure. This extends PrefixedFirebaseError.\n */\nclass FirebaseMessagingError extends PrefixedFirebaseError {\n    /**\n     * Creates the developer-facing error corresponding to the backend error code.\n     *\n     * @param serverErrorCode - The server error code.\n     * @param [message] The error message. The default message is used\n     *     if not provided.\n     * @param [rawServerResponse] The error's raw server response.\n     * @returns The corresponding developer-facing error.\n     * @internal\n     */\n    static fromServerError(serverErrorCode, message, rawServerResponse) {\n        // If not found, default to unknown error.\n        let clientCodeKey = 'UNKNOWN_ERROR';\n        if (serverErrorCode && serverErrorCode in MESSAGING_SERVER_TO_CLIENT_CODE) {\n            clientCodeKey = MESSAGING_SERVER_TO_CLIENT_CODE[serverErrorCode];\n        }\n        const error = (0, deep_copy_1.deepCopy)(MessagingClientErrorCode[clientCodeKey]);\n        error.message = message || error.message;\n        if (clientCodeKey === 'UNKNOWN_ERROR' && typeof rawServerResponse !== 'undefined') {\n            try {\n                error.message += ` Raw server response: \"${JSON.stringify(rawServerResponse)}\"`;\n            }\n            catch (e) {\n                // Ignore JSON parsing error.\n            }\n        }\n        return new FirebaseMessagingError(error);\n    }\n    /**\n     * @internal\n     */\n    static fromTopicManagementServerError(serverErrorCode, message, rawServerResponse) {\n        // If not found, default to unknown error.\n        const clientCodeKey = TOPIC_MGT_SERVER_TO_CLIENT_CODE[serverErrorCode] || 'UNKNOWN_ERROR';\n        const error = (0, deep_copy_1.deepCopy)(MessagingClientErrorCode[clientCodeKey]);\n        error.message = message || error.message;\n        if (clientCodeKey === 'UNKNOWN_ERROR' && typeof rawServerResponse !== 'undefined') {\n            try {\n                error.message += ` Raw server response: \"${JSON.stringify(rawServerResponse)}\"`;\n            }\n            catch (e) {\n                // Ignore JSON parsing error.\n            }\n        }\n        return new FirebaseMessagingError(error);\n    }\n    /**\n     *\n     * @param info - The error code info.\n     * @param message - The error message. This will override the default message if provided.\n     * @constructor\n     * @internal\n     */\n    constructor(info, message) {\n        // Override default message if custom message provided.\n        super('messaging', info.code, message || info.message);\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        this.__proto__ = FirebaseMessagingError.prototype;\n    }\n}\nexports.FirebaseMessagingError = FirebaseMessagingError;\n/**\n * Firebase project management error code structure. This extends PrefixedFirebaseError.\n */\nclass FirebaseProjectManagementError extends PrefixedFirebaseError {\n    /**\n     * @param code - The error code.\n     * @param message - The error message.\n     * @constructor\n     * @internal\n     */\n    constructor(code, message) {\n        super('project-management', code, message);\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        this.__proto__ = FirebaseProjectManagementError.prototype;\n    }\n}\nexports.FirebaseProjectManagementError = FirebaseProjectManagementError;\n/**\n * App client error codes and their default messages.\n */\nclass AppErrorCodes {\n}\nexports.AppErrorCodes = AppErrorCodes;\nAppErrorCodes.APP_DELETED = 'app-deleted';\nAppErrorCodes.DUPLICATE_APP = 'duplicate-app';\nAppErrorCodes.INVALID_ARGUMENT = 'invalid-argument';\nAppErrorCodes.INTERNAL_ERROR = 'internal-error';\nAppErrorCodes.INVALID_APP_NAME = 'invalid-app-name';\nAppErrorCodes.INVALID_APP_OPTIONS = 'invalid-app-options';\nAppErrorCodes.INVALID_CREDENTIAL = 'invalid-credential';\nAppErrorCodes.NETWORK_ERROR = 'network-error';\nAppErrorCodes.NETWORK_TIMEOUT = 'network-timeout';\nAppErrorCodes.NO_APP = 'no-app';\nAppErrorCodes.UNABLE_TO_PARSE_RESPONSE = 'unable-to-parse-response';\n/**\n * Auth client error codes and their default messages.\n */\nclass AuthClientErrorCode {\n}\nexports.AuthClientErrorCode = AuthClientErrorCode;\nAuthClientErrorCode.AUTH_BLOCKING_TOKEN_EXPIRED = {\n    code: 'auth-blocking-token-expired',\n    message: 'The provided Firebase Auth Blocking token is expired.',\n};\nAuthClientErrorCode.BILLING_NOT_ENABLED = {\n    code: 'billing-not-enabled',\n    message: 'Feature requires billing to be enabled.',\n};\nAuthClientErrorCode.CLAIMS_TOO_LARGE = {\n    code: 'claims-too-large',\n    message: 'Developer claims maximum payload size exceeded.',\n};\nAuthClientErrorCode.CONFIGURATION_EXISTS = {\n    code: 'configuration-exists',\n    message: 'A configuration already exists with the provided identifier.',\n};\nAuthClientErrorCode.CONFIGURATION_NOT_FOUND = {\n    code: 'configuration-not-found',\n    message: 'There is no configuration corresponding to the provided identifier.',\n};\nAuthClientErrorCode.ID_TOKEN_EXPIRED = {\n    code: 'id-token-expired',\n    message: 'The provided Firebase ID token is expired.',\n};\nAuthClientErrorCode.INVALID_ARGUMENT = {\n    code: 'argument-error',\n    message: 'Invalid argument provided.',\n};\nAuthClientErrorCode.INVALID_CONFIG = {\n    code: 'invalid-config',\n    message: 'The provided configuration is invalid.',\n};\nAuthClientErrorCode.EMAIL_ALREADY_EXISTS = {\n    code: 'email-already-exists',\n    message: 'The email address is already in use by another account.',\n};\nAuthClientErrorCode.EMAIL_NOT_FOUND = {\n    code: 'email-not-found',\n    message: 'There is no user record corresponding to the provided email.',\n};\nAuthClientErrorCode.FORBIDDEN_CLAIM = {\n    code: 'reserved-claim',\n    message: 'The specified developer claim is reserved and cannot be specified.',\n};\nAuthClientErrorCode.INVALID_ID_TOKEN = {\n    code: 'invalid-id-token',\n    message: 'The provided ID token is not a valid Firebase ID token.',\n};\nAuthClientErrorCode.ID_TOKEN_REVOKED = {\n    code: 'id-token-revoked',\n    message: 'The Firebase ID token has been revoked.',\n};\nAuthClientErrorCode.INTERNAL_ERROR = {\n    code: 'internal-error',\n    message: 'An internal error has occurred.',\n};\nAuthClientErrorCode.INVALID_CLAIMS = {\n    code: 'invalid-claims',\n    message: 'The provided custom claim attributes are invalid.',\n};\nAuthClientErrorCode.INVALID_CONTINUE_URI = {\n    code: 'invalid-continue-uri',\n    message: 'The continue URL must be a valid URL string.',\n};\nAuthClientErrorCode.INVALID_CREATION_TIME = {\n    code: 'invalid-creation-time',\n    message: 'The creation time must be a valid UTC date string.',\n};\nAuthClientErrorCode.INVALID_CREDENTIAL = {\n    code: 'invalid-credential',\n    message: 'Invalid credential object provided.',\n};\nAuthClientErrorCode.INVALID_DISABLED_FIELD = {\n    code: 'invalid-disabled-field',\n    message: 'The disabled field must be a boolean.',\n};\nAuthClientErrorCode.INVALID_DISPLAY_NAME = {\n    code: 'invalid-display-name',\n    message: 'The displayName field must be a valid string.',\n};\nAuthClientErrorCode.INVALID_DYNAMIC_LINK_DOMAIN = {\n    code: 'invalid-dynamic-link-domain',\n    message: 'The provided dynamic link domain is not configured or authorized ' +\n        'for the current project.',\n};\nAuthClientErrorCode.INVALID_EMAIL_VERIFIED = {\n    code: 'invalid-email-verified',\n    message: 'The emailVerified field must be a boolean.',\n};\nAuthClientErrorCode.INVALID_EMAIL = {\n    code: 'invalid-email',\n    message: 'The email address is improperly formatted.',\n};\nAuthClientErrorCode.INVALID_NEW_EMAIL = {\n    code: 'invalid-new-email',\n    message: 'The new email address is improperly formatted.',\n};\nAuthClientErrorCode.INVALID_ENROLLED_FACTORS = {\n    code: 'invalid-enrolled-factors',\n    message: 'The enrolled factors must be a valid array of MultiFactorInfo objects.',\n};\nAuthClientErrorCode.INVALID_ENROLLMENT_TIME = {\n    code: 'invalid-enrollment-time',\n    message: 'The second factor enrollment time must be a valid UTC date string.',\n};\nAuthClientErrorCode.INVALID_HASH_ALGORITHM = {\n    code: 'invalid-hash-algorithm',\n    message: 'The hash algorithm must match one of the strings in the list of ' +\n        'supported algorithms.',\n};\nAuthClientErrorCode.INVALID_HASH_BLOCK_SIZE = {\n    code: 'invalid-hash-block-size',\n    message: 'The hash block size must be a valid number.',\n};\nAuthClientErrorCode.INVALID_HASH_DERIVED_KEY_LENGTH = {\n    code: 'invalid-hash-derived-key-length',\n    message: 'The hash derived key length must be a valid number.',\n};\nAuthClientErrorCode.INVALID_HASH_KEY = {\n    code: 'invalid-hash-key',\n    message: 'The hash key must a valid byte buffer.',\n};\nAuthClientErrorCode.INVALID_HASH_MEMORY_COST = {\n    code: 'invalid-hash-memory-cost',\n    message: 'The hash memory cost must be a valid number.',\n};\nAuthClientErrorCode.INVALID_HASH_PARALLELIZATION = {\n    code: 'invalid-hash-parallelization',\n    message: 'The hash parallelization must be a valid number.',\n};\nAuthClientErrorCode.INVALID_HASH_ROUNDS = {\n    code: 'invalid-hash-rounds',\n    message: 'The hash rounds must be a valid number.',\n};\nAuthClientErrorCode.INVALID_HASH_SALT_SEPARATOR = {\n    code: 'invalid-hash-salt-separator',\n    message: 'The hashing algorithm salt separator field must be a valid byte buffer.',\n};\nAuthClientErrorCode.INVALID_LAST_SIGN_IN_TIME = {\n    code: 'invalid-last-sign-in-time',\n    message: 'The last sign-in time must be a valid UTC date string.',\n};\nAuthClientErrorCode.INVALID_NAME = {\n    code: 'invalid-name',\n    message: 'The resource name provided is invalid.',\n};\nAuthClientErrorCode.INVALID_OAUTH_CLIENT_ID = {\n    code: 'invalid-oauth-client-id',\n    message: 'The provided OAuth client ID is invalid.',\n};\nAuthClientErrorCode.INVALID_PAGE_TOKEN = {\n    code: 'invalid-page-token',\n    message: 'The page token must be a valid non-empty string.',\n};\nAuthClientErrorCode.INVALID_PASSWORD = {\n    code: 'invalid-password',\n    message: 'The password must be a string with at least 6 characters.',\n};\nAuthClientErrorCode.INVALID_PASSWORD_HASH = {\n    code: 'invalid-password-hash',\n    message: 'The password hash must be a valid byte buffer.',\n};\nAuthClientErrorCode.INVALID_PASSWORD_SALT = {\n    code: 'invalid-password-salt',\n    message: 'The password salt must be a valid byte buffer.',\n};\nAuthClientErrorCode.INVALID_PHONE_NUMBER = {\n    code: 'invalid-phone-number',\n    message: 'The phone number must be a non-empty E.164 standard compliant identifier ' +\n        'string.',\n};\nAuthClientErrorCode.INVALID_PHOTO_URL = {\n    code: 'invalid-photo-url',\n    message: 'The photoURL field must be a valid URL.',\n};\nAuthClientErrorCode.INVALID_PROJECT_ID = {\n    code: 'invalid-project-id',\n    message: 'Invalid parent project. Either parent project doesn\\'t exist or didn\\'t enable multi-tenancy.',\n};\nAuthClientErrorCode.INVALID_PROVIDER_DATA = {\n    code: 'invalid-provider-data',\n    message: 'The providerData must be a valid array of UserInfo objects.',\n};\nAuthClientErrorCode.INVALID_PROVIDER_ID = {\n    code: 'invalid-provider-id',\n    message: 'The providerId must be a valid supported provider identifier string.',\n};\nAuthClientErrorCode.INVALID_PROVIDER_UID = {\n    code: 'invalid-provider-uid',\n    message: 'The providerUid must be a valid provider uid string.',\n};\nAuthClientErrorCode.INVALID_OAUTH_RESPONSETYPE = {\n    code: 'invalid-oauth-responsetype',\n    message: 'Only exactly one OAuth responseType should be set to true.',\n};\nAuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION = {\n    code: 'invalid-session-cookie-duration',\n    message: 'The session cookie duration must be a valid number in milliseconds ' +\n        'between 5 minutes and 2 weeks.',\n};\nAuthClientErrorCode.INVALID_TENANT_ID = {\n    code: 'invalid-tenant-id',\n    message: 'The tenant ID must be a valid non-empty string.',\n};\nAuthClientErrorCode.INVALID_TENANT_TYPE = {\n    code: 'invalid-tenant-type',\n    message: 'Tenant type must be either \"full_service\" or \"lightweight\".',\n};\nAuthClientErrorCode.INVALID_TESTING_PHONE_NUMBER = {\n    code: 'invalid-testing-phone-number',\n    message: 'Invalid testing phone number or invalid test code provided.',\n};\nAuthClientErrorCode.INVALID_UID = {\n    code: 'invalid-uid',\n    message: 'The uid must be a non-empty string with at most 128 characters.',\n};\nAuthClientErrorCode.INVALID_USER_IMPORT = {\n    code: 'invalid-user-import',\n    message: 'The user record to import is invalid.',\n};\nAuthClientErrorCode.INVALID_TOKENS_VALID_AFTER_TIME = {\n    code: 'invalid-tokens-valid-after-time',\n    message: 'The tokensValidAfterTime must be a valid UTC number in seconds.',\n};\nAuthClientErrorCode.MISMATCHING_TENANT_ID = {\n    code: 'mismatching-tenant-id',\n    message: 'User tenant ID does not match with the current TenantAwareAuth tenant ID.',\n};\nAuthClientErrorCode.MISSING_ANDROID_PACKAGE_NAME = {\n    code: 'missing-android-pkg-name',\n    message: 'An Android Package Name must be provided if the Android App is ' +\n        'required to be installed.',\n};\nAuthClientErrorCode.MISSING_CONFIG = {\n    code: 'missing-config',\n    message: 'The provided configuration is missing required attributes.',\n};\nAuthClientErrorCode.MISSING_CONTINUE_URI = {\n    code: 'missing-continue-uri',\n    message: 'A valid continue URL must be provided in the request.',\n};\nAuthClientErrorCode.MISSING_DISPLAY_NAME = {\n    code: 'missing-display-name',\n    message: 'The resource being created or edited is missing a valid display name.',\n};\nAuthClientErrorCode.MISSING_EMAIL = {\n    code: 'missing-email',\n    message: 'The email is required for the specified action. For example, a multi-factor user ' +\n        'requires a verified email.',\n};\nAuthClientErrorCode.MISSING_IOS_BUNDLE_ID = {\n    code: 'missing-ios-bundle-id',\n    message: 'The request is missing an iOS Bundle ID.',\n};\nAuthClientErrorCode.MISSING_ISSUER = {\n    code: 'missing-issuer',\n    message: 'The OAuth/OIDC configuration issuer must not be empty.',\n};\nAuthClientErrorCode.MISSING_HASH_ALGORITHM = {\n    code: 'missing-hash-algorithm',\n    message: 'Importing users with password hashes requires that the hashing ' +\n        'algorithm and its parameters be provided.',\n};\nAuthClientErrorCode.MISSING_OAUTH_CLIENT_ID = {\n    code: 'missing-oauth-client-id',\n    message: 'The OAuth/OIDC configuration client ID must not be empty.',\n};\nAuthClientErrorCode.MISSING_OAUTH_CLIENT_SECRET = {\n    code: 'missing-oauth-client-secret',\n    message: 'The OAuth configuration client secret is required to enable OIDC code flow.',\n};\nAuthClientErrorCode.MISSING_PROVIDER_ID = {\n    code: 'missing-provider-id',\n    message: 'A valid provider ID must be provided in the request.',\n};\nAuthClientErrorCode.MISSING_SAML_RELYING_PARTY_CONFIG = {\n    code: 'missing-saml-relying-party-config',\n    message: 'The SAML configuration provided is missing a relying party configuration.',\n};\nAuthClientErrorCode.MAXIMUM_TEST_PHONE_NUMBER_EXCEEDED = {\n    code: 'test-phone-number-limit-exceeded',\n    message: 'The maximum allowed number of test phone number / code pairs has been exceeded.',\n};\nAuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED = {\n    code: 'maximum-user-count-exceeded',\n    message: 'The maximum allowed number of users to import has been exceeded.',\n};\nAuthClientErrorCode.MISSING_UID = {\n    code: 'missing-uid',\n    message: 'A uid identifier is required for the current operation.',\n};\nAuthClientErrorCode.OPERATION_NOT_ALLOWED = {\n    code: 'operation-not-allowed',\n    message: 'The given sign-in provider is disabled for this Firebase project. ' +\n        'Enable it in the Firebase console, under the sign-in method tab of the ' +\n        'Auth section.',\n};\nAuthClientErrorCode.PHONE_NUMBER_ALREADY_EXISTS = {\n    code: 'phone-number-already-exists',\n    message: 'The user with the provided phone number already exists.',\n};\nAuthClientErrorCode.PROJECT_NOT_FOUND = {\n    code: 'project-not-found',\n    message: 'No Firebase project was found for the provided credential.',\n};\nAuthClientErrorCode.INSUFFICIENT_PERMISSION = {\n    code: 'insufficient-permission',\n    message: 'Credential implementation provided to initializeApp() via the \"credential\" property ' +\n        'has insufficient permission to access the requested resource. See ' +\n        'https://firebase.google.com/docs/admin/setup for details on how to authenticate this SDK ' +\n        'with appropriate permissions.',\n};\nAuthClientErrorCode.QUOTA_EXCEEDED = {\n    code: 'quota-exceeded',\n    message: 'The project quota for the specified operation has been exceeded.',\n};\nAuthClientErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED = {\n    code: 'second-factor-limit-exceeded',\n    message: 'The maximum number of allowed second factors on a user has been exceeded.',\n};\nAuthClientErrorCode.SECOND_FACTOR_UID_ALREADY_EXISTS = {\n    code: 'second-factor-uid-already-exists',\n    message: 'The specified second factor \"uid\" already exists.',\n};\nAuthClientErrorCode.SESSION_COOKIE_EXPIRED = {\n    code: 'session-cookie-expired',\n    message: 'The Firebase session cookie is expired.',\n};\nAuthClientErrorCode.SESSION_COOKIE_REVOKED = {\n    code: 'session-cookie-revoked',\n    message: 'The Firebase session cookie has been revoked.',\n};\nAuthClientErrorCode.TENANT_NOT_FOUND = {\n    code: 'tenant-not-found',\n    message: 'There is no tenant corresponding to the provided identifier.',\n};\nAuthClientErrorCode.UID_ALREADY_EXISTS = {\n    code: 'uid-already-exists',\n    message: 'The user with the provided uid already exists.',\n};\nAuthClientErrorCode.UNAUTHORIZED_DOMAIN = {\n    code: 'unauthorized-continue-uri',\n    message: 'The domain of the continue URL is not whitelisted. Whitelist the domain in the ' +\n        'Firebase console.',\n};\nAuthClientErrorCode.UNSUPPORTED_FIRST_FACTOR = {\n    code: 'unsupported-first-factor',\n    message: 'A multi-factor user requires a supported first factor.',\n};\nAuthClientErrorCode.UNSUPPORTED_SECOND_FACTOR = {\n    code: 'unsupported-second-factor',\n    message: 'The request specified an unsupported type of second factor.',\n};\nAuthClientErrorCode.UNSUPPORTED_TENANT_OPERATION = {\n    code: 'unsupported-tenant-operation',\n    message: 'This operation is not supported in a multi-tenant context.',\n};\nAuthClientErrorCode.UNVERIFIED_EMAIL = {\n    code: 'unverified-email',\n    message: 'A verified email is required for the specified action. For example, a multi-factor user ' +\n        'requires a verified email.',\n};\nAuthClientErrorCode.USER_NOT_FOUND = {\n    code: 'user-not-found',\n    message: 'There is no user record corresponding to the provided identifier.',\n};\nAuthClientErrorCode.NOT_FOUND = {\n    code: 'not-found',\n    message: 'The requested resource was not found.',\n};\nAuthClientErrorCode.USER_DISABLED = {\n    code: 'user-disabled',\n    message: 'The user record is disabled.',\n};\nAuthClientErrorCode.USER_NOT_DISABLED = {\n    code: 'user-not-disabled',\n    message: 'The user must be disabled in order to bulk delete it (or you must pass force=true).',\n};\nAuthClientErrorCode.INVALID_RECAPTCHA_ACTION = {\n    code: 'invalid-recaptcha-action',\n    message: 'reCAPTCHA action must be \"BLOCK\".'\n};\nAuthClientErrorCode.INVALID_RECAPTCHA_ENFORCEMENT_STATE = {\n    code: 'invalid-recaptcha-enforcement-state',\n    message: 'reCAPTCHA enforcement state must be either \"OFF\", \"AUDIT\" or \"ENFORCE\".'\n};\nAuthClientErrorCode.RECAPTCHA_NOT_ENABLED = {\n    code: 'racaptcha-not-enabled',\n    message: 'reCAPTCHA enterprise is not enabled.'\n};\n/**\n * Messaging client error codes and their default messages.\n */\nclass MessagingClientErrorCode {\n}\nexports.MessagingClientErrorCode = MessagingClientErrorCode;\nMessagingClientErrorCode.INVALID_ARGUMENT = {\n    code: 'invalid-argument',\n    message: 'Invalid argument provided.',\n};\nMessagingClientErrorCode.INVALID_RECIPIENT = {\n    code: 'invalid-recipient',\n    message: 'Invalid message recipient provided.',\n};\nMessagingClientErrorCode.INVALID_PAYLOAD = {\n    code: 'invalid-payload',\n    message: 'Invalid message payload provided.',\n};\nMessagingClientErrorCode.INVALID_DATA_PAYLOAD_KEY = {\n    code: 'invalid-data-payload-key',\n    message: 'The data message payload contains an invalid key. See the reference documentation ' +\n        'for the DataMessagePayload type for restricted keys.',\n};\nMessagingClientErrorCode.PAYLOAD_SIZE_LIMIT_EXCEEDED = {\n    code: 'payload-size-limit-exceeded',\n    message: 'The provided message payload exceeds the FCM size limits. See the error documentation ' +\n        'for more details.',\n};\nMessagingClientErrorCode.INVALID_OPTIONS = {\n    code: 'invalid-options',\n    message: 'Invalid message options provided.',\n};\nMessagingClientErrorCode.INVALID_REGISTRATION_TOKEN = {\n    code: 'invalid-registration-token',\n    message: 'Invalid registration token provided. Make sure it matches the registration token ' +\n        'the client app receives from registering with FCM.',\n};\nMessagingClientErrorCode.REGISTRATION_TOKEN_NOT_REGISTERED = {\n    code: 'registration-token-not-registered',\n    message: 'The provided registration token is not registered. A previously valid registration ' +\n        'token can be unregistered for a variety of reasons. See the error documentation for more ' +\n        'details. Remove this registration token and stop using it to send messages.',\n};\nMessagingClientErrorCode.MISMATCHED_CREDENTIAL = {\n    code: 'mismatched-credential',\n    message: 'The credential used to authenticate this SDK does not have permission to send ' +\n        'messages to the device corresponding to the provided registration token. Make sure the ' +\n        'credential and registration token both belong to the same Firebase project.',\n};\nMessagingClientErrorCode.INVALID_PACKAGE_NAME = {\n    code: 'invalid-package-name',\n    message: 'The message was addressed to a registration token whose package name does not match ' +\n        'the provided \"restrictedPackageName\" option.',\n};\nMessagingClientErrorCode.DEVICE_MESSAGE_RATE_EXCEEDED = {\n    code: 'device-message-rate-exceeded',\n    message: 'The rate of messages to a particular device is too high. Reduce the number of ' +\n        'messages sent to this device and do not immediately retry sending to this device.',\n};\nMessagingClientErrorCode.TOPICS_MESSAGE_RATE_EXCEEDED = {\n    code: 'topics-message-rate-exceeded',\n    message: 'The rate of messages to subscribers to a particular topic is too high. Reduce the ' +\n        'number of messages sent for this topic, and do not immediately retry sending to this topic.',\n};\nMessagingClientErrorCode.MESSAGE_RATE_EXCEEDED = {\n    code: 'message-rate-exceeded',\n    message: 'Sending limit exceeded for the message target.',\n};\nMessagingClientErrorCode.THIRD_PARTY_AUTH_ERROR = {\n    code: 'third-party-auth-error',\n    message: 'A message targeted to an iOS device could not be sent because the required APNs ' +\n        'SSL certificate was not uploaded or has expired. Check the validity of your development ' +\n        'and production certificates.',\n};\nMessagingClientErrorCode.TOO_MANY_TOPICS = {\n    code: 'too-many-topics',\n    message: 'The maximum number of topics the provided registration token can be subscribed to ' +\n        'has been exceeded.',\n};\nMessagingClientErrorCode.AUTHENTICATION_ERROR = {\n    code: 'authentication-error',\n    message: 'An error occurred when trying to authenticate to the FCM servers. Make sure the ' +\n        'credential used to authenticate this SDK has the proper permissions. See ' +\n        'https://firebase.google.com/docs/admin/setup for setup instructions.',\n};\nMessagingClientErrorCode.SERVER_UNAVAILABLE = {\n    code: 'server-unavailable',\n    message: 'The FCM server could not process the request in time. See the error documentation ' +\n        'for more details.',\n};\nMessagingClientErrorCode.INTERNAL_ERROR = {\n    code: 'internal-error',\n    message: 'An internal error has occurred. Please retry the request.',\n};\nMessagingClientErrorCode.UNKNOWN_ERROR = {\n    code: 'unknown-error',\n    message: 'An unknown server error was returned.',\n};\nclass InstallationsClientErrorCode {\n}\nexports.InstallationsClientErrorCode = InstallationsClientErrorCode;\nInstallationsClientErrorCode.INVALID_ARGUMENT = {\n    code: 'invalid-argument',\n    message: 'Invalid argument provided.',\n};\nInstallationsClientErrorCode.INVALID_PROJECT_ID = {\n    code: 'invalid-project-id',\n    message: 'Invalid project ID provided.',\n};\nInstallationsClientErrorCode.INVALID_INSTALLATION_ID = {\n    code: 'invalid-installation-id',\n    message: 'Invalid installation ID provided.',\n};\nInstallationsClientErrorCode.API_ERROR = {\n    code: 'api-error',\n    message: 'Installation ID API call failed.',\n};\nclass InstanceIdClientErrorCode extends InstallationsClientErrorCode {\n}\nexports.InstanceIdClientErrorCode = InstanceIdClientErrorCode;\nInstanceIdClientErrorCode.INVALID_INSTANCE_ID = {\n    code: 'invalid-instance-id',\n    message: 'Invalid instance ID provided.',\n};\n/** @const {ServerToClientCode} Auth server to client enum error codes. */\nconst AUTH_SERVER_TO_CLIENT_CODE = {\n    // Feature being configured or used requires a billing account.\n    BILLING_NOT_ENABLED: 'BILLING_NOT_ENABLED',\n    // Claims payload is too large.\n    CLAIMS_TOO_LARGE: 'CLAIMS_TOO_LARGE',\n    // Configuration being added already exists.\n    CONFIGURATION_EXISTS: 'CONFIGURATION_EXISTS',\n    // Configuration not found.\n    CONFIGURATION_NOT_FOUND: 'CONFIGURATION_NOT_FOUND',\n    // Provided credential has insufficient permissions.\n    INSUFFICIENT_PERMISSION: 'INSUFFICIENT_PERMISSION',\n    // Provided configuration has invalid fields.\n    INVALID_CONFIG: 'INVALID_CONFIG',\n    // Provided configuration identifier is invalid.\n    INVALID_CONFIG_ID: 'INVALID_PROVIDER_ID',\n    // ActionCodeSettings missing continue URL.\n    INVALID_CONTINUE_URI: 'INVALID_CONTINUE_URI',\n    // Dynamic link domain in provided ActionCodeSettings is not authorized.\n    INVALID_DYNAMIC_LINK_DOMAIN: 'INVALID_DYNAMIC_LINK_DOMAIN',\n    // uploadAccount provides an email that already exists.\n    DUPLICATE_EMAIL: 'EMAIL_ALREADY_EXISTS',\n    // uploadAccount provides a localId that already exists.\n    DUPLICATE_LOCAL_ID: 'UID_ALREADY_EXISTS',\n    // Request specified a multi-factor enrollment ID that already exists.\n    DUPLICATE_MFA_ENROLLMENT_ID: 'SECOND_FACTOR_UID_ALREADY_EXISTS',\n    // setAccountInfo email already exists.\n    EMAIL_EXISTS: 'EMAIL_ALREADY_EXISTS',\n    // /accounts:sendOobCode for password reset when user is not found.\n    EMAIL_NOT_FOUND: 'EMAIL_NOT_FOUND',\n    // Reserved claim name.\n    FORBIDDEN_CLAIM: 'FORBIDDEN_CLAIM',\n    // Invalid claims provided.\n    INVALID_CLAIMS: 'INVALID_CLAIMS',\n    // Invalid session cookie duration.\n    INVALID_DURATION: 'INVALID_SESSION_COOKIE_DURATION',\n    // Invalid email provided.\n    INVALID_EMAIL: 'INVALID_EMAIL',\n    // Invalid new email provided.\n    INVALID_NEW_EMAIL: 'INVALID_NEW_EMAIL',\n    // Invalid tenant display name. This can be thrown on CreateTenant and UpdateTenant.\n    INVALID_DISPLAY_NAME: 'INVALID_DISPLAY_NAME',\n    // Invalid ID token provided.\n    INVALID_ID_TOKEN: 'INVALID_ID_TOKEN',\n    // Invalid tenant/parent resource name.\n    INVALID_NAME: 'INVALID_NAME',\n    // OIDC configuration has an invalid OAuth client ID.\n    INVALID_OAUTH_CLIENT_ID: 'INVALID_OAUTH_CLIENT_ID',\n    // Invalid page token.\n    INVALID_PAGE_SELECTION: 'INVALID_PAGE_TOKEN',\n    // Invalid phone number.\n    INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n    // Invalid agent project. Either agent project doesn't exist or didn't enable multi-tenancy.\n    INVALID_PROJECT_ID: 'INVALID_PROJECT_ID',\n    // Invalid provider ID.\n    INVALID_PROVIDER_ID: 'INVALID_PROVIDER_ID',\n    // Invalid service account.\n    INVALID_SERVICE_ACCOUNT: 'INVALID_SERVICE_ACCOUNT',\n    // Invalid testing phone number.\n    INVALID_TESTING_PHONE_NUMBER: 'INVALID_TESTING_PHONE_NUMBER',\n    // Invalid tenant type.\n    INVALID_TENANT_TYPE: 'INVALID_TENANT_TYPE',\n    // Missing Android package name.\n    MISSING_ANDROID_PACKAGE_NAME: 'MISSING_ANDROID_PACKAGE_NAME',\n    // Missing configuration.\n    MISSING_CONFIG: 'MISSING_CONFIG',\n    // Missing configuration identifier.\n    MISSING_CONFIG_ID: 'MISSING_PROVIDER_ID',\n    // Missing tenant display name: This can be thrown on CreateTenant and UpdateTenant.\n    MISSING_DISPLAY_NAME: 'MISSING_DISPLAY_NAME',\n    // Email is required for the specified action. For example a multi-factor user requires\n    // a verified email.\n    MISSING_EMAIL: 'MISSING_EMAIL',\n    // Missing iOS bundle ID.\n    MISSING_IOS_BUNDLE_ID: 'MISSING_IOS_BUNDLE_ID',\n    // Missing OIDC issuer.\n    MISSING_ISSUER: 'MISSING_ISSUER',\n    // No localId provided (deleteAccount missing localId).\n    MISSING_LOCAL_ID: 'MISSING_UID',\n    // OIDC configuration is missing an OAuth client ID.\n    MISSING_OAUTH_CLIENT_ID: 'MISSING_OAUTH_CLIENT_ID',\n    // Missing provider ID.\n    MISSING_PROVIDER_ID: 'MISSING_PROVIDER_ID',\n    // Missing SAML RP config.\n    MISSING_SAML_RELYING_PARTY_CONFIG: 'MISSING_SAML_RELYING_PARTY_CONFIG',\n    // Empty user list in uploadAccount.\n    MISSING_USER_ACCOUNT: 'MISSING_UID',\n    // Password auth disabled in console.\n    OPERATION_NOT_ALLOWED: 'OPERATION_NOT_ALLOWED',\n    // Provided credential has insufficient permissions.\n    PERMISSION_DENIED: 'INSUFFICIENT_PERMISSION',\n    // Phone number already exists.\n    PHONE_NUMBER_EXISTS: 'PHONE_NUMBER_ALREADY_EXISTS',\n    // Project not found.\n    PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND',\n    // In multi-tenancy context: project creation quota exceeded.\n    QUOTA_EXCEEDED: 'QUOTA_EXCEEDED',\n    // Currently only 5 second factors can be set on the same user.\n    SECOND_FACTOR_LIMIT_EXCEEDED: 'SECOND_FACTOR_LIMIT_EXCEEDED',\n    // Tenant not found.\n    TENANT_NOT_FOUND: 'TENANT_NOT_FOUND',\n    // Tenant ID mismatch.\n    TENANT_ID_MISMATCH: 'MISMATCHING_TENANT_ID',\n    // Token expired error.\n    TOKEN_EXPIRED: 'ID_TOKEN_EXPIRED',\n    // Continue URL provided in ActionCodeSettings has a domain that is not whitelisted.\n    UNAUTHORIZED_DOMAIN: 'UNAUTHORIZED_DOMAIN',\n    // A multi-factor user requires a supported first factor.\n    UNSUPPORTED_FIRST_FACTOR: 'UNSUPPORTED_FIRST_FACTOR',\n    // The request specified an unsupported type of second factor.\n    UNSUPPORTED_SECOND_FACTOR: 'UNSUPPORTED_SECOND_FACTOR',\n    // Operation is not supported in a multi-tenant context.\n    UNSUPPORTED_TENANT_OPERATION: 'UNSUPPORTED_TENANT_OPERATION',\n    // A verified email is required for the specified action. For example a multi-factor user\n    // requires a verified email.\n    UNVERIFIED_EMAIL: 'UNVERIFIED_EMAIL',\n    // User on which action is to be performed is not found.\n    USER_NOT_FOUND: 'USER_NOT_FOUND',\n    // User record is disabled.\n    USER_DISABLED: 'USER_DISABLED',\n    // Password provided is too weak.\n    WEAK_PASSWORD: 'INVALID_PASSWORD',\n    // Unrecognized reCAPTCHA action.\n    INVALID_RECAPTCHA_ACTION: 'INVALID_RECAPTCHA_ACTION',\n    // Unrecognized reCAPTCHA enforcement state.\n    INVALID_RECAPTCHA_ENFORCEMENT_STATE: 'INVALID_RECAPTCHA_ENFORCEMENT_STATE',\n    // reCAPTCHA is not enabled for account defender.\n    RECAPTCHA_NOT_ENABLED: 'RECAPTCHA_NOT_ENABLED'\n};\n/** @const {ServerToClientCode} Messaging server to client enum error codes. */\nconst MESSAGING_SERVER_TO_CLIENT_CODE = {\n    /* GENERIC ERRORS */\n    // Generic invalid message parameter provided.\n    InvalidParameters: 'INVALID_ARGUMENT',\n    // Mismatched sender ID.\n    MismatchSenderId: 'MISMATCHED_CREDENTIAL',\n    // FCM server unavailable.\n    Unavailable: 'SERVER_UNAVAILABLE',\n    // FCM server internal error.\n    InternalServerError: 'INTERNAL_ERROR',\n    /* SEND ERRORS */\n    // Invalid registration token format.\n    InvalidRegistration: 'INVALID_REGISTRATION_TOKEN',\n    // Registration token is not registered.\n    NotRegistered: 'REGISTRATION_TOKEN_NOT_REGISTERED',\n    // Registration token does not match restricted package name.\n    InvalidPackageName: 'INVALID_PACKAGE_NAME',\n    // Message payload size limit exceeded.\n    MessageTooBig: 'PAYLOAD_SIZE_LIMIT_EXCEEDED',\n    // Invalid key in the data message payload.\n    InvalidDataKey: 'INVALID_DATA_PAYLOAD_KEY',\n    // Invalid time to live option.\n    InvalidTtl: 'INVALID_OPTIONS',\n    // Device message rate exceeded.\n    DeviceMessageRateExceeded: 'DEVICE_MESSAGE_RATE_EXCEEDED',\n    // Topics message rate exceeded.\n    TopicsMessageRateExceeded: 'TOPICS_MESSAGE_RATE_EXCEEDED',\n    // Invalid APNs credentials.\n    InvalidApnsCredential: 'THIRD_PARTY_AUTH_ERROR',\n    /* FCM v1 canonical error codes */\n    NOT_FOUND: 'REGISTRATION_TOKEN_NOT_REGISTERED',\n    PERMISSION_DENIED: 'MISMATCHED_CREDENTIAL',\n    RESOURCE_EXHAUSTED: 'MESSAGE_RATE_EXCEEDED',\n    UNAUTHENTICATED: 'THIRD_PARTY_AUTH_ERROR',\n    /* FCM v1 new error codes */\n    APNS_AUTH_ERROR: 'THIRD_PARTY_AUTH_ERROR',\n    INTERNAL: 'INTERNAL_ERROR',\n    INVALID_ARGUMENT: 'INVALID_ARGUMENT',\n    QUOTA_EXCEEDED: 'MESSAGE_RATE_EXCEEDED',\n    SENDER_ID_MISMATCH: 'MISMATCHED_CREDENTIAL',\n    THIRD_PARTY_AUTH_ERROR: 'THIRD_PARTY_AUTH_ERROR',\n    UNAVAILABLE: 'SERVER_UNAVAILABLE',\n    UNREGISTERED: 'REGISTRATION_TOKEN_NOT_REGISTERED',\n    UNSPECIFIED_ERROR: 'UNKNOWN_ERROR',\n};\n/** @const {ServerToClientCode} Topic management (IID) server to client enum error codes. */\nconst TOPIC_MGT_SERVER_TO_CLIENT_CODE = {\n    /* TOPIC SUBSCRIPTION MANAGEMENT ERRORS */\n    NOT_FOUND: 'REGISTRATION_TOKEN_NOT_REGISTERED',\n    INVALID_ARGUMENT: 'INVALID_REGISTRATION_TOKEN',\n    TOO_MANY_TOPICS: 'TOO_MANY_TOPICS',\n    RESOURCE_EXHAUSTED: 'TOO_MANY_TOPICS',\n    PERMISSION_DENIED: 'AUTHENTICATION_ERROR',\n    DEADLINE_EXCEEDED: 'SERVER_UNAVAILABLE',\n    INTERNAL: 'INTERNAL_ERROR',\n    UNKNOWN: 'UNKNOWN_ERROR',\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1338, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/utils/api-request.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Http2SessionHandler = exports.ExponentialBackoffPoller = exports.ApiSettings = exports.AuthorizedHttp2Client = exports.AuthorizedHttpClient = exports.parseHttpResponse = exports.Http2Client = exports.HttpClient = exports.RequestClient = exports.defaultRetryConfig = exports.RequestResponseError = void 0;\nconst error_1 = require(\"./error\");\nconst validator = require(\"./validator\");\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst http2 = require(\"http2\");\nconst url = require(\"url\");\nconst events_1 = require(\"events\");\nclass DefaultRequestResponse {\n    /**\n     * Constructs a new `RequestResponse` from the given `LowLevelResponse`.\n     */\n    constructor(resp) {\n        this.status = resp.status;\n        this.headers = resp.headers;\n        this.text = resp.data;\n        try {\n            if (!resp.data) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\n            }\n            this.parsedData = JSON.parse(resp.data);\n        }\n        catch (err) {\n            this.parsedData = undefined;\n            this.parseError = err;\n        }\n        this.request = `${resp.config.method} ${resp.config.url}`;\n    }\n    get data() {\n        if (this.isJson()) {\n            return this.parsedData;\n        }\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, `Error while parsing response data: \"${this.parseError.toString()}\". Raw server ` +\n            `response: \"${this.text}\". Status code: \"${this.status}\". Outgoing ` +\n            `request: \"${this.request}.\"`);\n    }\n    isJson() {\n        return typeof this.parsedData !== 'undefined';\n    }\n}\n/**\n * Represents a multipart HTTP or HTTP/2 response. Parts that constitute the response body can be accessed\n * via the multipart getter. Getters for text and data throw errors.\n */\nclass MultipartRequestResponse {\n    constructor(resp) {\n        this.status = resp.status;\n        this.headers = resp.headers;\n        this.multipart = resp.multipart;\n    }\n    get text() {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as text');\n    }\n    get data() {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.UNABLE_TO_PARSE_RESPONSE, 'Unable to parse multipart payload as JSON');\n    }\n    isJson() {\n        return false;\n    }\n}\nclass RequestResponseError extends Error {\n    constructor(response) {\n        super(`Server responded with status ${response.status}.`);\n        this.response = response;\n        // Set the prototype so that instanceof checks will work correctly.\n        // See: https://github.com/Microsoft/TypeScript/issues/13965\n        Object.setPrototypeOf(this, RequestResponseError.prototype);\n    }\n}\nexports.RequestResponseError = RequestResponseError;\n/**\n * Default retry configuration for HTTP and HTTP/2 requests. Retries up to 4 times on connection reset and timeout\n * errors as well as 503 errors. Exposed as a function to ensure that every `RequestClient` gets its own `RetryConfig`\n * instance.\n */\nfunction defaultRetryConfig() {\n    return {\n        maxRetries: 4,\n        statusCodes: [503],\n        ioErrorCodes: ['ECONNRESET', 'ETIMEDOUT'],\n        backOffFactor: 0.5,\n        maxDelayInMillis: 60 * 1000,\n    };\n}\nexports.defaultRetryConfig = defaultRetryConfig;\n/**\n * Ensures that the given `RetryConfig` object is valid.\n *\n * @param retry - The configuration to be validated.\n */\nfunction validateRetryConfig(retry) {\n    if (!validator.isNumber(retry.maxRetries) || retry.maxRetries < 0) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxRetries must be a non-negative integer');\n    }\n    if (typeof retry.backOffFactor !== 'undefined') {\n        if (!validator.isNumber(retry.backOffFactor) || retry.backOffFactor < 0) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'backOffFactor must be a non-negative number');\n        }\n    }\n    if (!validator.isNumber(retry.maxDelayInMillis) || retry.maxDelayInMillis < 0) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'maxDelayInMillis must be a non-negative integer');\n    }\n    if (typeof retry.statusCodes !== 'undefined' && !validator.isArray(retry.statusCodes)) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'statusCodes must be an array');\n    }\n    if (typeof retry.ioErrorCodes !== 'undefined' && !validator.isArray(retry.ioErrorCodes)) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'ioErrorCodes must be an array');\n    }\n}\nclass RequestClient {\n    constructor(retry = defaultRetryConfig()) {\n        if (retry) {\n            this.retry = retry;\n            validateRetryConfig(this.retry);\n        }\n    }\n    createRequestResponse(resp) {\n        if (resp.multipart) {\n            return new MultipartRequestResponse(resp);\n        }\n        return new DefaultRequestResponse(resp);\n    }\n    waitForRetry(delayMillis) {\n        if (delayMillis > 0) {\n            return new Promise((resolve) => {\n                setTimeout(resolve, delayMillis);\n            });\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Checks if a failed request is eligible for a retry, and if so returns the duration to wait before initiating\n     * the retry.\n     *\n     * @param retryAttempts - Number of retries completed up to now.\n     * @param err - The last encountered error.\n     * @returns A 2-tuple where the 1st element is the duration to wait before another retry, and the\n     *     2nd element is a boolean indicating whether the request is eligible for a retry or not.\n     */\n    getRetryDelayMillis(retryAttempts, err) {\n        if (!this.isRetryEligible(retryAttempts, err)) {\n            return [0, false];\n        }\n        const response = err.response;\n        if (response && response.headers['retry-after']) {\n            const delayMillis = this.parseRetryAfterIntoMillis(response.headers['retry-after']);\n            if (delayMillis > 0) {\n                return [delayMillis, true];\n            }\n        }\n        return [this.backOffDelayMillis(retryAttempts), true];\n    }\n    isRetryEligible(retryAttempts, err) {\n        if (!this.retry) {\n            return false;\n        }\n        if (retryAttempts >= this.retry.maxRetries) {\n            return false;\n        }\n        if (err.response) {\n            const statusCodes = this.retry.statusCodes || [];\n            return statusCodes.indexOf(err.response.status) !== -1;\n        }\n        if (err.code) {\n            const retryCodes = this.retry.ioErrorCodes || [];\n            return retryCodes.indexOf(err.code) !== -1;\n        }\n        return false;\n    }\n    /**???\n     * Parses the Retry-After header as a milliseconds value. Return value is negative if the Retry-After header\n     * contains an expired timestamp or otherwise malformed.\n     */\n    parseRetryAfterIntoMillis(retryAfter) {\n        const delaySeconds = parseInt(retryAfter, 10);\n        if (!isNaN(delaySeconds)) {\n            return delaySeconds * 1000;\n        }\n        const date = new Date(retryAfter);\n        if (!isNaN(date.getTime())) {\n            return date.getTime() - Date.now();\n        }\n        return -1;\n    }\n    backOffDelayMillis(retryAttempts) {\n        if (retryAttempts === 0) {\n            return 0;\n        }\n        if (!this.retry) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected this.retry to exist.');\n        }\n        const backOffFactor = this.retry.backOffFactor || 0;\n        const delayInSeconds = (2 ** retryAttempts) * backOffFactor;\n        return Math.min(delayInSeconds * 1000, this.retry.maxDelayInMillis);\n    }\n}\nexports.RequestClient = RequestClient;\nclass HttpClient extends RequestClient {\n    constructor(retry) {\n        super(retry);\n    }\n    /**\n     * Sends an HTTP request to a remote server. If the server responds with a successful response (2xx), the returned\n     * promise resolves with an `RequestResponse`. If the server responds with an error (3xx, 4xx, 5xx), the promise\n     * rejects with an `RequestResponseError`. In case of all other errors, the promise rejects with a `FirebaseAppError`.\n     * If a request fails due to a low-level network error, the client transparently retries the request once before\n     * rejecting the promise.\n     *\n     * If the request data is specified as an object, it will be serialized into a JSON string. The application/json\n     * content-type header will also be automatically set in this case. For all other payload types, the content-type\n     * header should be explicitly set by the caller. To send a JSON leaf value (e.g. \"foo\", 5), parse it into JSON,\n     * and pass as a string or a Buffer along with the appropriate content-type header.\n     *\n     * @param config - HTTP request to be sent.\n     * @returns A promise that resolves with the response details.\n     */\n    send(config) {\n        return this.sendWithRetry(config);\n    }\n    /**\n     * Sends an HTTP request. In the event of an error, retries the HTTP request according to the\n     * `RetryConfig` set on the `HttpClient`.\n     *\n     * @param config - HTTP request to be sent.\n     * @param retryAttempts - Number of retries performed up to now.\n     * @returns A promise that resolves with the response details.\n     */\n    sendWithRetry(config, retryAttempts = 0) {\n        return AsyncHttpCall.invoke(config)\n            .then((resp) => {\n            return this.createRequestResponse(resp);\n        })\n            .catch((err) => {\n            const [delayMillis, canRetry] = this.getRetryDelayMillis(retryAttempts, err);\n            if (canRetry && this.retry && delayMillis <= this.retry.maxDelayInMillis) {\n                return this.waitForRetry(delayMillis).then(() => {\n                    return this.sendWithRetry(config, retryAttempts + 1);\n                });\n            }\n            if (err.response) {\n                throw new RequestResponseError(this.createRequestResponse(err.response));\n            }\n            if (err.code === 'ETIMEDOUT') {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_TIMEOUT, `Error while making request: ${err.message}.`);\n            }\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, `Error while making request: ${err.message}. Error code: ${err.code}`);\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nclass Http2Client extends RequestClient {\n    constructor(retry = defaultRetryConfig()) {\n        super(retry);\n    }\n    /**\n     * Sends an HTTP/2 request to a remote server. If the server responds with a successful response (2xx), the returned\n     * promise resolves with an `RequestResponse`. If the server responds with an error (3xx, 4xx, 5xx), the promise\n     * rejects with an `RequestResponseError`. In case of all other errors, the promise rejects with a `FirebaseAppError`.\n     * If a request fails due to a low-level network error, the client transparently retries the request once before\n     * rejecting the promise.\n     *\n     * If the request data is specified as an object, it will be serialized into a JSON string. The application/json\n     * content-type header will also be automatically set in this case. For all other payload types, the content-type\n     * header should be explicitly set by the caller. To send a JSON leaf value (e.g. \"foo\", 5), parse it into JSON,\n     * and pass as a string or a Buffer along with the appropriate content-type header.\n     *\n     * @param config - HTTP/2 request to be sent.\n     * @returns A promise that resolves with the response details.\n     */\n    send(config) {\n        return this.sendWithRetry(config);\n    }\n    /**\n     * Sends an HTTP/2 request. In the event of an error, retries the HTTP/2 request according to the\n     * `RetryConfig` set on the `Http2Client`.\n     *\n     * @param config - HTTP/2 request to be sent.\n     * @param retryAttempts - Number of retries performed up to now.\n     * @returns A promise that resolves with the response details.\n     */\n    sendWithRetry(config, retryAttempts = 0) {\n        return AsyncHttp2Call.invoke(config)\n            .then((resp) => {\n            return this.createRequestResponse(resp);\n        })\n            .catch((err) => {\n            const [delayMillis, canRetry] = this.getRetryDelayMillis(retryAttempts, err);\n            if (canRetry && this.retry && delayMillis <= this.retry.maxDelayInMillis) {\n                return this.waitForRetry(delayMillis).then(() => {\n                    return this.sendWithRetry(config, retryAttempts + 1);\n                });\n            }\n            if (err.response) {\n                throw new RequestResponseError(this.createRequestResponse(err.response));\n            }\n            if (err.code === 'ETIMEDOUT') {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_TIMEOUT, `Error while making request: ${err.message}.`);\n            }\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, `Error while making request: ${err.message}. Error code: ${err.code}`);\n        });\n    }\n}\nexports.Http2Client = Http2Client;\n/**\n * Parses a full HTTP or HTTP/2 response message containing both a header and a body.\n *\n * @param response - The HTTP or HTTP/2 response to be parsed.\n * @param config - The request configuration that resulted in the HTTP or HTTP/2 response.\n * @returns An object containing the response's parsed status, headers and the body.\n */\nfunction parseHttpResponse(response, config) {\n    const responseText = validator.isBuffer(response) ?\n        response.toString('utf-8') : response;\n    const endOfHeaderPos = responseText.indexOf('\\r\\n\\r\\n');\n    const headerLines = responseText.substring(0, endOfHeaderPos).split('\\r\\n');\n    const statusLine = headerLines[0];\n    const status = statusLine.trim().split(/\\s/)[1];\n    const headers = {};\n    headerLines.slice(1).forEach((line) => {\n        const colonPos = line.indexOf(':');\n        const name = line.substring(0, colonPos).trim().toLowerCase();\n        const value = line.substring(colonPos + 1).trim();\n        headers[name] = value;\n    });\n    let data = responseText.substring(endOfHeaderPos + 4);\n    if (data.endsWith('\\n')) {\n        data = data.slice(0, -1);\n    }\n    if (data.endsWith('\\r')) {\n        data = data.slice(0, -1);\n    }\n    const lowLevelResponse = {\n        status: parseInt(status, 10),\n        headers,\n        data,\n        config,\n        request: null,\n    };\n    if (!validator.isNumber(lowLevelResponse.status)) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Malformed HTTP status line.');\n    }\n    return new DefaultRequestResponse(lowLevelResponse);\n}\nexports.parseHttpResponse = parseHttpResponse;\n/**\n * A helper class for common functionality needed to send requests over the wire.\n * It also wraps the callback API of the Node.js standard library in a more flexible Promise API.\n */\nclass AsyncRequestCall {\n    constructor(configImpl) {\n        this.configImpl = configImpl;\n    }\n    /**\n     * Extracts multipart boundary from the HTTP header. The content-type header of a multipart\n     * response has the form 'multipart/subtype; boundary=string'.\n     *\n     * If the content-type header does not exist, or does not start with\n     * 'multipart/', then null will be returned.\n     */\n    getMultipartBoundary(headers) {\n        const contentType = headers['content-type'];\n        if (!contentType || !contentType.startsWith('multipart/')) {\n            return null;\n        }\n        const segments = contentType.split(';');\n        const emptyObject = {};\n        const headerParams = segments.slice(1)\n            .map((segment) => segment.trim().split('='))\n            .reduce((curr, params) => {\n            // Parse key=value pairs in the content-type header into properties of an object.\n            if (params.length === 2) {\n                const keyValuePair = {};\n                keyValuePair[params[0]] = params[1];\n                return Object.assign(curr, keyValuePair);\n            }\n            return curr;\n        }, emptyObject);\n        return headerParams.boundary;\n    }\n    handleMultipartResponse(response, respStream, boundary) {\n        const busboy = require('@fastify/busboy'); // eslint-disable-line @typescript-eslint/no-var-requires\n        const multipartParser = new busboy.Dicer({ boundary });\n        const responseBuffer = [];\n        multipartParser.on('part', (part) => {\n            const tempBuffers = [];\n            part.on('data', (partData) => {\n                tempBuffers.push(partData);\n            });\n            part.on('end', () => {\n                responseBuffer.push(Buffer.concat(tempBuffers));\n            });\n        });\n        multipartParser.on('finish', () => {\n            response.data = undefined;\n            response.multipart = responseBuffer;\n            this.finalizeResponse(response);\n        });\n        respStream.pipe(multipartParser);\n    }\n    handleRegularResponse(response, respStream) {\n        const responseBuffer = [];\n        respStream.on('data', (chunk) => {\n            responseBuffer.push(chunk);\n        });\n        respStream.on('error', (err) => {\n            const req = response.request;\n            if (req && req.destroyed) {\n                return;\n            }\n            this.enhanceAndReject(err, null, req);\n        });\n        respStream.on('end', () => {\n            response.data = Buffer.concat(responseBuffer).toString();\n            this.finalizeResponse(response);\n        });\n    }\n    /**\n     * Finalizes the current request call in-flight by either resolving or rejecting the associated\n     * promise. In the event of an error, adds additional useful information to the returned error.\n     */\n    finalizeResponse(response) {\n        if (response.status >= 200 && response.status < 300) {\n            this.resolve(response);\n        }\n        else {\n            this.rejectWithError('Request failed with status code ' + response.status, null, response.request, response);\n        }\n    }\n    /**\n     * Creates a new error from the given message, and enhances it with other information available.\n     * Then the promise associated with this request call is rejected with the resulting error.\n     */\n    rejectWithError(message, code, request, response) {\n        const error = new Error(message);\n        this.enhanceAndReject(error, code, request, response);\n    }\n    enhanceAndReject(error, code, request, response) {\n        this.reject(this.enhanceError(error, code, request, response));\n    }\n    /**\n     * Enhances the given error by adding more information to it. Specifically, the request config,\n     * the underlying request and response will be attached to the error.\n     */\n    enhanceError(error, code, request, response) {\n        error.config = this.configImpl;\n        if (code) {\n            error.code = code;\n        }\n        error.request = request;\n        error.response = response;\n        return error;\n    }\n}\n/**\n * A helper class for sending HTTP requests over the wire. This is a wrapper around the standard\n * http and https packages of Node.js, providing content processing, timeouts and error handling.\n * It also wraps the callback API of the Node.js standard library in a more flexible Promise API.\n */\nclass AsyncHttpCall extends AsyncRequestCall {\n    /**\n     * Sends an HTTP request based on the provided configuration.\n     */\n    static invoke(config) {\n        return new AsyncHttpCall(config).promise;\n    }\n    constructor(config) {\n        const httpConfigImpl = new HttpRequestConfigImpl(config);\n        super(httpConfigImpl);\n        try {\n            this.httpConfigImpl = httpConfigImpl;\n            this.options = this.httpConfigImpl.buildRequestOptions();\n            this.entity = this.httpConfigImpl.buildEntity(this.options.headers);\n            this.promise = new Promise((resolve, reject) => {\n                this.resolve = resolve;\n                this.reject = reject;\n                this.execute();\n            });\n        }\n        catch (err) {\n            this.promise = Promise.reject(this.enhanceError(err, null));\n        }\n    }\n    execute() {\n        const transport = this.options.protocol === 'https:' ? https : http;\n        const req = transport.request(this.options, (res) => {\n            this.handleResponse(res, req);\n        });\n        // Handle errors\n        req.on('error', (err) => {\n            if (req.aborted) {\n                return;\n            }\n            this.enhanceAndReject(err, null, req);\n        });\n        const timeout = this.httpConfigImpl.timeout;\n        const timeoutCallback = () => {\n            req.destroy();\n            this.rejectWithError(`timeout of ${timeout}ms exceeded`, 'ETIMEDOUT', req);\n        };\n        if (timeout) {\n            // Listen to timeouts and throw an error.\n            req.setTimeout(timeout, timeoutCallback);\n        }\n        // Send the request\n        req.end(this.entity);\n    }\n    handleResponse(res, req) {\n        if (req.aborted) {\n            return;\n        }\n        if (!res.statusCode) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a statusCode on the response from a ClientRequest');\n        }\n        const response = {\n            status: res.statusCode,\n            headers: res.headers,\n            request: req,\n            data: undefined,\n            config: this.httpConfigImpl,\n        };\n        const boundary = this.getMultipartBoundary(res.headers);\n        const respStream = this.uncompressResponse(res);\n        if (boundary) {\n            this.handleMultipartResponse(response, respStream, boundary);\n        }\n        else {\n            this.handleRegularResponse(response, respStream);\n        }\n    }\n    uncompressResponse(res) {\n        // Uncompress the response body transparently if required.\n        let respStream = res;\n        const encodings = ['gzip', 'compress', 'deflate'];\n        if (res.headers['content-encoding'] && encodings.indexOf(res.headers['content-encoding']) !== -1) {\n            // Add the unzipper to the body stream processing pipeline.\n            const zlib = require('zlib'); // eslint-disable-line @typescript-eslint/no-var-requires\n            respStream = respStream.pipe(zlib.createUnzip());\n            // Remove the content-encoding in order to not confuse downstream operations.\n            delete res.headers['content-encoding'];\n        }\n        return respStream;\n    }\n}\nclass AsyncHttp2Call extends AsyncRequestCall {\n    /**\n     * Sends an HTTP2 request based on the provided configuration.\n     */\n    static invoke(config) {\n        return new AsyncHttp2Call(config).promise;\n    }\n    constructor(config) {\n        const http2ConfigImpl = new Http2RequestConfigImpl(config);\n        super(http2ConfigImpl);\n        try {\n            this.http2ConfigImpl = http2ConfigImpl;\n            this.options = this.http2ConfigImpl.buildRequestOptions();\n            this.entity = this.http2ConfigImpl.buildEntity(this.options.headers);\n            this.promise = new Promise((resolve, reject) => {\n                this.resolve = resolve;\n                this.reject = reject;\n                this.execute();\n            });\n        }\n        catch (err) {\n            this.promise = Promise.reject(this.enhanceError(err, null));\n        }\n    }\n    execute() {\n        const req = this.http2ConfigImpl.http2SessionHandler.session.request({\n            ':method': this.options.method,\n            ':scheme': this.options.protocol,\n            ':path': this.options.path,\n            ...this.options.headers\n        });\n        req.on('response', (headers) => {\n            this.handleHttp2Response(headers, req);\n        });\n        // Handle errors\n        req.on('error', (err) => {\n            if (req.aborted) {\n                return;\n            }\n            this.enhanceAndReject(err, null, req);\n        });\n        const timeout = this.http2ConfigImpl.timeout;\n        const timeoutCallback = () => {\n            req.destroy();\n            this.rejectWithError(`timeout of ${timeout}ms exceeded`, 'ETIMEDOUT', req);\n        };\n        if (timeout) {\n            // Listen to timeouts and throw an error.\n            req.setTimeout(timeout, timeoutCallback);\n        }\n        req.end(this.entity);\n    }\n    handleHttp2Response(headers, stream) {\n        if (stream.aborted) {\n            return;\n        }\n        if (!headers[':status']) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a statusCode on the response from a ClientRequest');\n        }\n        const response = {\n            status: headers[':status'],\n            headers: headers,\n            request: stream,\n            data: undefined,\n            config: this.http2ConfigImpl,\n        };\n        const boundary = this.getMultipartBoundary(headers);\n        const respStream = this.uncompressResponse(headers, stream);\n        if (boundary) {\n            this.handleMultipartResponse(response, respStream, boundary);\n        }\n        else {\n            this.handleRegularResponse(response, respStream);\n        }\n    }\n    uncompressResponse(headers, stream) {\n        // Uncompress the response body transparently if required.\n        let respStream = stream;\n        const encodings = ['gzip', 'compress', 'deflate'];\n        if (headers['content-encoding'] && encodings.indexOf(headers['content-encoding']) !== -1) {\n            // Add the unzipper to the body stream processing pipeline.\n            const zlib = require('zlib'); // eslint-disable-line @typescript-eslint/no-var-requires\n            respStream = respStream.pipe(zlib.createUnzip());\n            // Remove the content-encoding in order to not confuse downstream operations.\n            delete headers['content-encoding'];\n        }\n        return respStream;\n    }\n}\n/**\n * An adapter class with common functionality needed to extract options and entity data from a `RequestConfig`.\n */\nclass BaseRequestConfigImpl {\n    constructor(config) {\n        this.config = config;\n        this.config = config;\n    }\n    get method() {\n        return this.config.method;\n    }\n    get url() {\n        return this.config.url;\n    }\n    get headers() {\n        return this.config.headers;\n    }\n    get data() {\n        return this.config.data;\n    }\n    get timeout() {\n        return this.config.timeout;\n    }\n    buildEntity(headers) {\n        let data;\n        if (!this.hasEntity() || !this.isEntityEnclosingRequest()) {\n            return data;\n        }\n        if (validator.isBuffer(this.data)) {\n            data = this.data;\n        }\n        else if (validator.isObject(this.data)) {\n            data = Buffer.from(JSON.stringify(this.data), 'utf-8');\n            if (typeof headers['content-type'] === 'undefined') {\n                headers['content-type'] = 'application/json;charset=utf-8';\n            }\n        }\n        else if (validator.isString(this.data)) {\n            data = Buffer.from(this.data, 'utf-8');\n        }\n        else {\n            throw new Error('Request data must be a string, a Buffer or a json serializable object');\n        }\n        // Add Content-Length header if data exists.\n        headers['Content-Length'] = data.length.toString();\n        return data;\n    }\n    buildUrl() {\n        const fullUrl = this.urlWithProtocol();\n        if (!this.hasEntity() || this.isEntityEnclosingRequest()) {\n            return url.parse(fullUrl);\n        }\n        if (!validator.isObject(this.data)) {\n            throw new Error(`${this.method} requests cannot have a body`);\n        }\n        // Parse URL and append data to query string.\n        const parsedUrl = new url.URL(fullUrl);\n        const dataObj = this.data;\n        for (const key in dataObj) {\n            if (Object.prototype.hasOwnProperty.call(dataObj, key)) {\n                parsedUrl.searchParams.append(key, dataObj[key]);\n            }\n        }\n        return url.parse(parsedUrl.toString());\n    }\n    urlWithProtocol() {\n        const fullUrl = this.url;\n        if (fullUrl.startsWith('http://') || fullUrl.startsWith('https://')) {\n            return fullUrl;\n        }\n        return `https://${fullUrl}`;\n    }\n    hasEntity() {\n        return !!this.data;\n    }\n    isEntityEnclosingRequest() {\n        // GET and HEAD requests do not support entity (body) in request.\n        return this.method !== 'GET' && this.method !== 'HEAD';\n    }\n}\n/**\n * An adapter class for extracting options and entity data from an `HttpRequestConfig`.\n */\nclass HttpRequestConfigImpl extends BaseRequestConfigImpl {\n    constructor(httpConfig) {\n        super(httpConfig);\n        this.httpConfig = httpConfig;\n    }\n    get httpAgent() {\n        return this.httpConfig.httpAgent;\n    }\n    buildRequestOptions() {\n        const parsed = this.buildUrl();\n        const protocol = parsed.protocol;\n        let port = parsed.port;\n        if (!port) {\n            const isHttps = protocol === 'https:';\n            port = isHttps ? '443' : '80';\n        }\n        return {\n            protocol,\n            hostname: parsed.hostname,\n            port,\n            path: parsed.path,\n            method: this.method,\n            agent: this.httpAgent,\n            headers: Object.assign({}, this.headers),\n        };\n    }\n}\n/**\n * An adapter class for extracting options and entity data from an `Http2RequestConfig`.\n */\nclass Http2RequestConfigImpl extends BaseRequestConfigImpl {\n    constructor(http2Config) {\n        super(http2Config);\n        this.http2Config = http2Config;\n    }\n    get http2SessionHandler() {\n        return this.http2Config.http2SessionHandler;\n    }\n    buildRequestOptions() {\n        const parsed = this.buildUrl();\n        const protocol = parsed.protocol;\n        return {\n            protocol,\n            path: parsed.path,\n            method: this.method,\n            headers: Object.assign({}, this.headers),\n        };\n    }\n}\nclass AuthorizedHttpClient extends HttpClient {\n    constructor(app) {\n        super();\n        this.app = app;\n    }\n    send(request) {\n        return this.getToken().then((token) => {\n            const requestCopy = Object.assign({}, request);\n            requestCopy.headers = Object.assign({}, request.headers);\n            const authHeader = 'Authorization';\n            requestCopy.headers[authHeader] = `Bearer ${token}`;\n            // Fix issue where firebase-admin does not specify quota project that is\n            // necessary for use when utilizing human account with ADC (RSDF)\n            if (!requestCopy.headers['x-goog-user-project'] && this.app.options.projectId) {\n                requestCopy.headers['x-goog-user-project'] = this.app.options.projectId;\n            }\n            if (!requestCopy.httpAgent && this.app.options.httpAgent) {\n                requestCopy.httpAgent = this.app.options.httpAgent;\n            }\n            return super.send(requestCopy);\n        });\n    }\n    getToken() {\n        return this.app.INTERNAL.getToken()\n            .then((accessTokenObj) => accessTokenObj.accessToken);\n    }\n}\nexports.AuthorizedHttpClient = AuthorizedHttpClient;\nclass AuthorizedHttp2Client extends Http2Client {\n    constructor(app) {\n        super();\n        this.app = app;\n    }\n    send(request) {\n        return this.getToken().then((token) => {\n            const requestCopy = Object.assign({}, request);\n            requestCopy.headers = Object.assign({}, request.headers);\n            const authHeader = 'Authorization';\n            requestCopy.headers[authHeader] = `Bearer ${token}`;\n            return super.send(requestCopy);\n        });\n    }\n    getToken() {\n        return this.app.INTERNAL.getToken()\n            .then((accessTokenObj) => accessTokenObj.accessToken);\n    }\n}\nexports.AuthorizedHttp2Client = AuthorizedHttp2Client;\n/**\n * Class that defines all the settings for the backend API endpoint.\n *\n * @param endpoint - The Firebase Auth backend endpoint.\n * @param httpMethod - The HTTP method for that endpoint.\n * @constructor\n */\nclass ApiSettings {\n    constructor(endpoint, httpMethod = 'POST') {\n        this.endpoint = endpoint;\n        this.httpMethod = httpMethod;\n        this.setRequestValidator(null)\n            .setResponseValidator(null);\n    }\n    /** @returns The backend API endpoint. */\n    getEndpoint() {\n        return this.endpoint;\n    }\n    /** @returns The request HTTP method. */\n    getHttpMethod() {\n        return this.httpMethod;\n    }\n    /**\n     * @param requestValidator - The request validator.\n     * @returns The current API settings instance.\n     */\n    setRequestValidator(requestValidator) {\n        const nullFunction = () => undefined;\n        this.requestValidator = requestValidator || nullFunction;\n        return this;\n    }\n    /** @returns The request validator. */\n    getRequestValidator() {\n        return this.requestValidator;\n    }\n    /**\n     * @param responseValidator - The response validator.\n     * @returns The current API settings instance.\n     */\n    setResponseValidator(responseValidator) {\n        const nullFunction = () => undefined;\n        this.responseValidator = responseValidator || nullFunction;\n        return this;\n    }\n    /** @returns The response validator. */\n    getResponseValidator() {\n        return this.responseValidator;\n    }\n}\nexports.ApiSettings = ApiSettings;\n/**\n * Class used for polling an endpoint with exponential backoff.\n *\n * Example usage:\n * ```\n * const poller = new ExponentialBackoffPoller();\n * poller\n *     .poll(() => {\n *       return myRequestToPoll()\n *           .then((responseData: any) => {\n *             if (!isValid(responseData)) {\n *               // Continue polling.\n *               return null;\n *             }\n *\n *             // Polling complete. Resolve promise with final response data.\n *             return responseData;\n *           });\n *     })\n *     .then((responseData: any) => {\n *       console.log(`Final response: ${responseData}`);\n *     });\n * ```\n */\nclass ExponentialBackoffPoller extends events_1.EventEmitter {\n    constructor(initialPollingDelayMillis = 1000, maxPollingDelayMillis = 10000, masterTimeoutMillis = 60000) {\n        super();\n        this.initialPollingDelayMillis = initialPollingDelayMillis;\n        this.maxPollingDelayMillis = maxPollingDelayMillis;\n        this.masterTimeoutMillis = masterTimeoutMillis;\n        this.numTries = 0;\n        this.completed = false;\n    }\n    /**\n     * Poll the provided callback with exponential backoff.\n     *\n     * @param callback - The callback to be called for each poll. If the\n     *     callback resolves to a falsey value, polling will continue. Otherwise, the truthy\n     *     resolution will be used to resolve the promise returned by this method.\n     * @returns A Promise which resolves to the truthy value returned by the provided\n     *     callback when polling is complete.\n     */\n    poll(callback) {\n        if (this.pollCallback) {\n            throw new Error('poll() can only be called once per instance of ExponentialBackoffPoller');\n        }\n        this.pollCallback = callback;\n        this.on('poll', this.repoll);\n        this.masterTimer = setTimeout(() => {\n            if (this.completed) {\n                return;\n            }\n            this.markCompleted();\n            this.reject(new Error('ExponentialBackoffPoller deadline exceeded - Master timeout reached'));\n        }, this.masterTimeoutMillis);\n        return new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n            this.repoll();\n        });\n    }\n    repoll() {\n        this.pollCallback()\n            .then((result) => {\n            if (this.completed) {\n                return;\n            }\n            if (!result) {\n                this.repollTimer =\n                    setTimeout(() => this.emit('poll'), this.getPollingDelayMillis());\n                this.numTries++;\n                return;\n            }\n            this.markCompleted();\n            this.resolve(result);\n        })\n            .catch((err) => {\n            if (this.completed) {\n                return;\n            }\n            this.markCompleted();\n            this.reject(err);\n        });\n    }\n    getPollingDelayMillis() {\n        const increasedPollingDelay = Math.pow(2, this.numTries) * this.initialPollingDelayMillis;\n        return Math.min(increasedPollingDelay, this.maxPollingDelayMillis);\n    }\n    markCompleted() {\n        this.completed = true;\n        if (this.masterTimer) {\n            clearTimeout(this.masterTimer);\n        }\n        if (this.repollTimer) {\n            clearTimeout(this.repollTimer);\n        }\n    }\n}\nexports.ExponentialBackoffPoller = ExponentialBackoffPoller;\nclass Http2SessionHandler {\n    constructor(url) {\n        this.http2Session = this.createSession(url);\n    }\n    createSession(url) {\n        if (!this.http2Session || this.isClosed) {\n            const opts = {\n                // Set local max concurrent stream limit to respect backend limit\n                peerMaxConcurrentStreams: 100,\n                ALPNProtocols: ['h2']\n            };\n            const http2Session = http2.connect(url, opts);\n            http2Session.on('goaway', (errorCode, _, opaqueData) => {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, `Error while making requests: GOAWAY - ${opaqueData.toString()}, Error code: ${errorCode}`);\n            });\n            http2Session.on('error', (error) => {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NETWORK_ERROR, `Error while making requests: ${error}`);\n            });\n            return http2Session;\n        }\n        return this.http2Session;\n    }\n    get session() {\n        return this.http2Session;\n    }\n    get isClosed() {\n        return this.http2Session.closed;\n    }\n    close() {\n        this.http2Session.close();\n    }\n}\nexports.Http2SessionHandler = Http2SessionHandler;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2332, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app/credential-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getApplicationDefault = exports.isApplicationDefault = exports.ImpersonatedServiceAccountCredential = exports.RefreshTokenCredential = exports.ComputeEngineCredential = exports.ServiceAccountCredential = void 0;\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst error_1 = require(\"../utils/error\");\nconst api_request_1 = require(\"../utils/api-request\");\nconst util = require(\"../utils/validator\");\nconst GOOGLE_TOKEN_AUDIENCE = 'https://accounts.google.com/o/oauth2/token';\nconst GOOGLE_AUTH_TOKEN_HOST = 'accounts.google.com';\nconst GOOGLE_AUTH_TOKEN_PATH = '/o/oauth2/token';\n// NOTE: the Google Metadata Service uses HTTP over a vlan\nconst GOOGLE_METADATA_SERVICE_HOST = 'metadata.google.internal';\nconst GOOGLE_METADATA_SERVICE_TOKEN_PATH = '/computeMetadata/v1/instance/service-accounts/default/token';\nconst GOOGLE_METADATA_SERVICE_IDENTITY_PATH = '/computeMetadata/v1/instance/service-accounts/default/identity';\nconst GOOGLE_METADATA_SERVICE_PROJECT_ID_PATH = '/computeMetadata/v1/project/project-id';\nconst GOOGLE_METADATA_SERVICE_ACCOUNT_ID_PATH = '/computeMetadata/v1/instance/service-accounts/default/email';\nconst configDir = (() => {\n    // Windows has a dedicated low-rights location for apps at ~/Application Data\n    const sys = os.platform();\n    if (sys && sys.length >= 3 && sys.substring(0, 3).toLowerCase() === 'win') {\n        return process.env.APPDATA;\n    }\n    // On *nix the gcloud cli creates a . dir.\n    return process.env.HOME && path.resolve(process.env.HOME, '.config');\n})();\nconst GCLOUD_CREDENTIAL_SUFFIX = 'gcloud/application_default_credentials.json';\nconst GCLOUD_CREDENTIAL_PATH = configDir && path.resolve(configDir, GCLOUD_CREDENTIAL_SUFFIX);\nconst REFRESH_TOKEN_HOST = 'www.googleapis.com';\nconst REFRESH_TOKEN_PATH = '/oauth2/v4/token';\nconst ONE_HOUR_IN_SECONDS = 60 * 60;\nconst JWT_ALGORITHM = 'RS256';\n/**\n * Implementation of Credential that uses a service account.\n */\nclass ServiceAccountCredential {\n    /**\n     * Creates a new ServiceAccountCredential from the given parameters.\n     *\n     * @param serviceAccountPathOrObject - Service account json object or path to a service account json file.\n     * @param httpAgent - Optional http.Agent to use when calling the remote token server.\n     * @param implicit - An optinal boolean indicating whether this credential was implicitly discovered from the\n     *   environment, as opposed to being explicitly specified by the developer.\n     *\n     * @constructor\n     */\n    constructor(serviceAccountPathOrObject, httpAgent, implicit = false) {\n        this.httpAgent = httpAgent;\n        this.implicit = implicit;\n        const serviceAccount = (typeof serviceAccountPathOrObject === 'string') ?\n            ServiceAccount.fromPath(serviceAccountPathOrObject)\n            : new ServiceAccount(serviceAccountPathOrObject);\n        this.projectId = serviceAccount.projectId;\n        this.privateKey = serviceAccount.privateKey;\n        this.clientEmail = serviceAccount.clientEmail;\n        this.httpClient = new api_request_1.HttpClient();\n    }\n    getAccessToken() {\n        const token = this.createAuthJwt_();\n        const postData = 'grant_type=urn%3Aietf%3Aparams%3Aoauth%3A' +\n            'grant-type%3Ajwt-bearer&assertion=' + token;\n        const request = {\n            method: 'POST',\n            url: `https://${GOOGLE_AUTH_TOKEN_HOST}${GOOGLE_AUTH_TOKEN_PATH}`,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            data: postData,\n            httpAgent: this.httpAgent,\n        };\n        return requestAccessToken(this.httpClient, request);\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    createAuthJwt_() {\n        const claims = {\n            scope: [\n                'https://www.googleapis.com/auth/cloud-platform',\n                'https://www.googleapis.com/auth/firebase.database',\n                'https://www.googleapis.com/auth/firebase.messaging',\n                'https://www.googleapis.com/auth/identitytoolkit',\n                'https://www.googleapis.com/auth/userinfo.email',\n            ].join(' '),\n        };\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const jwt = require('jsonwebtoken');\n        // This method is actually synchronous so we can capture and return the buffer.\n        return jwt.sign(claims, this.privateKey, {\n            audience: GOOGLE_TOKEN_AUDIENCE,\n            expiresIn: ONE_HOUR_IN_SECONDS,\n            issuer: this.clientEmail,\n            algorithm: JWT_ALGORITHM,\n        });\n    }\n}\nexports.ServiceAccountCredential = ServiceAccountCredential;\n/**\n * A struct containing the properties necessary to use service account JSON credentials.\n */\nclass ServiceAccount {\n    static fromPath(filePath) {\n        try {\n            return new ServiceAccount(JSON.parse(fs.readFileSync(filePath, 'utf8')));\n        }\n        catch (error) {\n            // Throw a nicely formed error message if the file contents cannot be parsed\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, 'Failed to parse service account json file: ' + error);\n        }\n    }\n    constructor(json) {\n        if (!util.isNonNullObject(json)) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, 'Service account must be an object.');\n        }\n        copyAttr(this, json, 'projectId', 'project_id');\n        copyAttr(this, json, 'privateKey', 'private_key');\n        copyAttr(this, json, 'clientEmail', 'client_email');\n        let errorMessage;\n        if (!util.isNonEmptyString(this.projectId)) {\n            errorMessage = 'Service account object must contain a string \"project_id\" property.';\n        }\n        else if (!util.isNonEmptyString(this.privateKey)) {\n            errorMessage = 'Service account object must contain a string \"private_key\" property.';\n        }\n        else if (!util.isNonEmptyString(this.clientEmail)) {\n            errorMessage = 'Service account object must contain a string \"client_email\" property.';\n        }\n        if (typeof errorMessage !== 'undefined') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, errorMessage);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const forge = require('node-forge');\n        try {\n            forge.pki.privateKeyFromPem(this.privateKey);\n        }\n        catch (error) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, 'Failed to parse private key: ' + error);\n        }\n    }\n}\n/**\n * Implementation of Credential that gets access tokens from the metadata service available\n * in the Google Cloud Platform. This authenticates the process as the default service account\n * of an App Engine instance or Google Compute Engine machine.\n */\nclass ComputeEngineCredential {\n    constructor(httpAgent) {\n        this.httpClient = new api_request_1.HttpClient();\n        this.httpAgent = httpAgent;\n    }\n    getAccessToken() {\n        const request = this.buildRequest(GOOGLE_METADATA_SERVICE_TOKEN_PATH);\n        return requestAccessToken(this.httpClient, request);\n    }\n    /**\n     * getIDToken returns a OIDC token from the compute metadata service\n     * that can be used to make authenticated calls to audience\n     * @param audience the URL the returned ID token will be used to call.\n    */\n    getIDToken(audience) {\n        const request = this.buildRequest(`${GOOGLE_METADATA_SERVICE_IDENTITY_PATH}?audience=${audience}`);\n        return requestIDToken(this.httpClient, request);\n    }\n    getProjectId() {\n        if (this.projectId) {\n            return Promise.resolve(this.projectId);\n        }\n        const request = this.buildRequest(GOOGLE_METADATA_SERVICE_PROJECT_ID_PATH);\n        return this.httpClient.send(request)\n            .then((resp) => {\n            this.projectId = resp.text;\n            return this.projectId;\n        })\n            .catch((err) => {\n            const detail = (err instanceof api_request_1.RequestResponseError) ? getDetailFromResponse(err.response) : err.message;\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, `Failed to determine project ID: ${detail}`);\n        });\n    }\n    getServiceAccountEmail() {\n        if (this.accountId) {\n            return Promise.resolve(this.accountId);\n        }\n        const request = this.buildRequest(GOOGLE_METADATA_SERVICE_ACCOUNT_ID_PATH);\n        return this.httpClient.send(request)\n            .then((resp) => {\n            this.accountId = resp.text;\n            return this.accountId;\n        })\n            .catch((err) => {\n            const detail = (err instanceof api_request_1.RequestResponseError) ? getDetailFromResponse(err.response) : err.message;\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, `Failed to determine service account email: ${detail}`);\n        });\n    }\n    buildRequest(urlPath) {\n        return {\n            method: 'GET',\n            url: `http://${GOOGLE_METADATA_SERVICE_HOST}${urlPath}`,\n            headers: {\n                'Metadata-Flavor': 'Google',\n            },\n            httpAgent: this.httpAgent,\n        };\n    }\n}\nexports.ComputeEngineCredential = ComputeEngineCredential;\n/**\n * Implementation of Credential that gets access tokens from refresh tokens.\n */\nclass RefreshTokenCredential {\n    /**\n     * Creates a new RefreshTokenCredential from the given parameters.\n     *\n     * @param refreshTokenPathOrObject - Refresh token json object or path to a refresh token\n     *   (user credentials) json file.\n     * @param httpAgent - Optional http.Agent to use when calling the remote token server.\n     * @param implicit - An optinal boolean indicating whether this credential was implicitly\n     *   discovered from the environment, as opposed to being explicitly specified by the developer.\n     *\n     * @constructor\n     */\n    constructor(refreshTokenPathOrObject, httpAgent, implicit = false) {\n        this.httpAgent = httpAgent;\n        this.implicit = implicit;\n        this.refreshToken = (typeof refreshTokenPathOrObject === 'string') ?\n            RefreshToken.fromPath(refreshTokenPathOrObject)\n            : new RefreshToken(refreshTokenPathOrObject);\n        this.httpClient = new api_request_1.HttpClient();\n    }\n    getAccessToken() {\n        const postData = 'client_id=' + this.refreshToken.clientId + '&' +\n            'client_secret=' + this.refreshToken.clientSecret + '&' +\n            'refresh_token=' + this.refreshToken.refreshToken + '&' +\n            'grant_type=refresh_token';\n        const request = {\n            method: 'POST',\n            url: `https://${REFRESH_TOKEN_HOST}${REFRESH_TOKEN_PATH}`,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            data: postData,\n            httpAgent: this.httpAgent,\n        };\n        return requestAccessToken(this.httpClient, request);\n    }\n}\nexports.RefreshTokenCredential = RefreshTokenCredential;\nclass RefreshToken {\n    /*\n     * Tries to load a RefreshToken from a path. Throws if the path doesn't exist or the\n     * data at the path is invalid.\n     */\n    static fromPath(filePath) {\n        try {\n            return new RefreshToken(JSON.parse(fs.readFileSync(filePath, 'utf8')));\n        }\n        catch (error) {\n            // Throw a nicely formed error message if the file contents cannot be parsed\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, 'Failed to parse refresh token file: ' + error);\n        }\n    }\n    constructor(json) {\n        copyAttr(this, json, 'clientId', 'client_id');\n        copyAttr(this, json, 'clientSecret', 'client_secret');\n        copyAttr(this, json, 'refreshToken', 'refresh_token');\n        copyAttr(this, json, 'type', 'type');\n        let errorMessage;\n        if (!util.isNonEmptyString(this.clientId)) {\n            errorMessage = 'Refresh token must contain a \"client_id\" property.';\n        }\n        else if (!util.isNonEmptyString(this.clientSecret)) {\n            errorMessage = 'Refresh token must contain a \"client_secret\" property.';\n        }\n        else if (!util.isNonEmptyString(this.refreshToken)) {\n            errorMessage = 'Refresh token must contain a \"refresh_token\" property.';\n        }\n        else if (!util.isNonEmptyString(this.type)) {\n            errorMessage = 'Refresh token must contain a \"type\" property.';\n        }\n        if (typeof errorMessage !== 'undefined') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, errorMessage);\n        }\n    }\n}\n/**\n * Implementation of Credential that uses impersonated service account.\n */\nclass ImpersonatedServiceAccountCredential {\n    /**\n     * Creates a new ImpersonatedServiceAccountCredential from the given parameters.\n     *\n     * @param impersonatedServiceAccountPathOrObject - Impersonated Service account json object or\n     * path to a service account json file.\n     * @param httpAgent - Optional http.Agent to use when calling the remote token server.\n     * @param implicit - An optional boolean indicating whether this credential was implicitly\n     *   discovered from the environment, as opposed to being explicitly specified by the developer.\n     *\n     * @constructor\n     */\n    constructor(impersonatedServiceAccountPathOrObject, httpAgent, implicit = false) {\n        this.httpAgent = httpAgent;\n        this.implicit = implicit;\n        this.impersonatedServiceAccount = (typeof impersonatedServiceAccountPathOrObject === 'string') ?\n            ImpersonatedServiceAccount.fromPath(impersonatedServiceAccountPathOrObject)\n            : new ImpersonatedServiceAccount(impersonatedServiceAccountPathOrObject);\n        this.httpClient = new api_request_1.HttpClient();\n    }\n    getAccessToken() {\n        const postData = 'client_id=' + this.impersonatedServiceAccount.clientId + '&' +\n            'client_secret=' + this.impersonatedServiceAccount.clientSecret + '&' +\n            'refresh_token=' + this.impersonatedServiceAccount.refreshToken + '&' +\n            'grant_type=refresh_token';\n        const request = {\n            method: 'POST',\n            url: `https://${REFRESH_TOKEN_HOST}${REFRESH_TOKEN_PATH}`,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            data: postData,\n            httpAgent: this.httpAgent,\n        };\n        return requestAccessToken(this.httpClient, request);\n    }\n}\nexports.ImpersonatedServiceAccountCredential = ImpersonatedServiceAccountCredential;\n/**\n * A struct containing the properties necessary to use impersonated service account JSON credentials.\n */\nclass ImpersonatedServiceAccount {\n    /*\n     * Tries to load a ImpersonatedServiceAccount from a path. Throws if the path doesn't exist or the\n     * data at the path is invalid.\n     */\n    static fromPath(filePath) {\n        try {\n            return new ImpersonatedServiceAccount(JSON.parse(fs.readFileSync(filePath, 'utf8')));\n        }\n        catch (error) {\n            // Throw a nicely formed error message if the file contents cannot be parsed\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, 'Failed to parse impersonated service account file: ' + error);\n        }\n    }\n    constructor(json) {\n        const sourceCredentials = json['source_credentials'];\n        if (sourceCredentials) {\n            copyAttr(this, sourceCredentials, 'clientId', 'client_id');\n            copyAttr(this, sourceCredentials, 'clientSecret', 'client_secret');\n            copyAttr(this, sourceCredentials, 'refreshToken', 'refresh_token');\n            copyAttr(this, sourceCredentials, 'type', 'type');\n        }\n        let errorMessage;\n        if (!util.isNonEmptyString(this.clientId)) {\n            errorMessage = 'Impersonated Service Account must contain a \"source_credentials.client_id\" property.';\n        }\n        else if (!util.isNonEmptyString(this.clientSecret)) {\n            errorMessage = 'Impersonated Service Account must contain a \"source_credentials.client_secret\" property.';\n        }\n        else if (!util.isNonEmptyString(this.refreshToken)) {\n            errorMessage = 'Impersonated Service Account must contain a \"source_credentials.refresh_token\" property.';\n        }\n        else if (!util.isNonEmptyString(this.type)) {\n            errorMessage = 'Impersonated Service Account must contain a \"source_credentials.type\" property.';\n        }\n        if (typeof errorMessage !== 'undefined') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, errorMessage);\n        }\n    }\n}\n/**\n * Checks if the given credential was loaded via the application default credentials mechanism. This\n * includes all ComputeEngineCredential instances, and the ServiceAccountCredential and RefreshTokenCredential\n * instances that were loaded from well-known files or environment variables, rather than being explicitly\n * instantiated.\n *\n * @param credential - The credential instance to check.\n */\nfunction isApplicationDefault(credential) {\n    return credential instanceof ComputeEngineCredential ||\n        (credential instanceof ServiceAccountCredential && credential.implicit) ||\n        (credential instanceof RefreshTokenCredential && credential.implicit) ||\n        (credential instanceof ImpersonatedServiceAccountCredential && credential.implicit);\n}\nexports.isApplicationDefault = isApplicationDefault;\nfunction getApplicationDefault(httpAgent) {\n    if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n        return credentialFromFile(process.env.GOOGLE_APPLICATION_CREDENTIALS, httpAgent, false);\n    }\n    // It is OK to not have this file. If it is present, it must be valid.\n    if (GCLOUD_CREDENTIAL_PATH) {\n        const credential = credentialFromFile(GCLOUD_CREDENTIAL_PATH, httpAgent, true);\n        if (credential)\n            return credential;\n    }\n    return new ComputeEngineCredential(httpAgent);\n}\nexports.getApplicationDefault = getApplicationDefault;\n/**\n * Copies the specified property from one object to another.\n *\n * If no property exists by the given \"key\", looks for a property identified by \"alt\", and copies it instead.\n * This can be used to implement behaviors such as \"copy property myKey or my_key\".\n *\n * @param to - Target object to copy the property into.\n * @param from - Source object to copy the property from.\n * @param key - Name of the property to copy.\n * @param alt - Alternative name of the property to copy.\n */\nfunction copyAttr(to, from, key, alt) {\n    const tmp = from[key] || from[alt];\n    if (typeof tmp !== 'undefined') {\n        to[key] = tmp;\n    }\n}\n/**\n * Obtain a new OAuth2 token by making a remote service call.\n */\nfunction requestAccessToken(client, request) {\n    return client.send(request).then((resp) => {\n        const json = resp.data;\n        if (!json.access_token || !json.expires_in) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, `Unexpected response while fetching access token: ${JSON.stringify(json)}`);\n        }\n        return json;\n    }).catch((err) => {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, getErrorMessage(err));\n    });\n}\n/**\n * Obtain a new OIDC token by making a remote service call.\n */\nfunction requestIDToken(client, request) {\n    return client.send(request).then((resp) => {\n        if (!resp.text) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, 'Unexpected response while fetching id token: response.text is undefined');\n        }\n        return resp.text;\n    }).catch((err) => {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, getErrorMessage(err));\n    });\n}\n/**\n * Constructs a human-readable error message from the given Error.\n */\nfunction getErrorMessage(err) {\n    const detail = (err instanceof api_request_1.RequestResponseError) ? getDetailFromResponse(err.response) : err.message;\n    return `Error fetching access token: ${detail}`;\n}\n/**\n * Extracts details from the given HTTP error response, and returns a human-readable description. If\n * the response is JSON-formatted, looks up the error and error_description fields sent by the\n * Google Auth servers. Otherwise returns the entire response payload as the error detail.\n */\nfunction getDetailFromResponse(response) {\n    if (response.isJson() && response.data.error) {\n        const json = response.data;\n        let detail = json.error;\n        if (json.error_description) {\n            detail += ' (' + json.error_description + ')';\n        }\n        return detail;\n    }\n    return response.text || 'Missing error payload';\n}\nfunction credentialFromFile(filePath, httpAgent, ignoreMissing) {\n    const credentialsFile = readCredentialFile(filePath, ignoreMissing);\n    if (typeof credentialsFile !== 'object' || credentialsFile === null) {\n        if (ignoreMissing) {\n            return null;\n        }\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, 'Failed to parse contents of the credentials file as an object');\n    }\n    if (credentialsFile.type === 'service_account') {\n        return new ServiceAccountCredential(credentialsFile, httpAgent, true);\n    }\n    if (credentialsFile.type === 'authorized_user') {\n        return new RefreshTokenCredential(credentialsFile, httpAgent, true);\n    }\n    if (credentialsFile.type === 'impersonated_service_account') {\n        return new ImpersonatedServiceAccountCredential(credentialsFile, httpAgent, true);\n    }\n    throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, 'Invalid contents in the credentials file');\n}\nfunction readCredentialFile(filePath, ignoreMissing) {\n    let fileText;\n    try {\n        fileText = fs.readFileSync(filePath, 'utf8');\n    }\n    catch (error) {\n        if (ignoreMissing) {\n            return null;\n        }\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, `Failed to read credentials from file ${filePath}: ` + error);\n    }\n    try {\n        return JSON.parse(fileText);\n    }\n    catch (error) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, 'Failed to parse contents of the credentials file as an object: ' + error);\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2804, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app/firebase-app.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseApp = exports.FirebaseAppInternals = void 0;\nconst credential_internal_1 = require(\"./credential-internal\");\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst TOKEN_EXPIRY_THRESHOLD_MILLIS = 5 * 60 * 1000;\n/**\n * Internals of a FirebaseApp instance.\n */\nclass FirebaseAppInternals {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    constructor(credential_) {\n        this.credential_ = credential_;\n        this.tokenListeners_ = [];\n        this.isRefreshing = false;\n    }\n    getToken(forceRefresh = false) {\n        if (forceRefresh || this.shouldRefresh()) {\n            this.promiseToCachedToken_ = this.refreshToken();\n        }\n        return this.promiseToCachedToken_;\n    }\n    getCachedToken() {\n        return this.cachedToken_ || null;\n    }\n    refreshToken() {\n        this.isRefreshing = true;\n        return Promise.resolve(this.credential_.getAccessToken())\n            .then((result) => {\n            // Since the developer can provide the credential implementation, we want to weakly verify\n            // the return type until the type is properly exported.\n            if (!validator.isNonNullObject(result) ||\n                typeof result.expires_in !== 'number' ||\n                typeof result.access_token !== 'string') {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, `Invalid access token generated: \"${JSON.stringify(result)}\". Valid access ` +\n                    'tokens must be an object with the \"expires_in\" (number) and \"access_token\" ' +\n                    '(string) properties.');\n            }\n            const token = {\n                accessToken: result.access_token,\n                expirationTime: Date.now() + (result.expires_in * 1000),\n            };\n            if (!this.cachedToken_\n                || this.cachedToken_.accessToken !== token.accessToken\n                || this.cachedToken_.expirationTime !== token.expirationTime) {\n                // Update the cache before firing listeners. Listeners may directly query the\n                // cached token state.\n                this.cachedToken_ = token;\n                this.tokenListeners_.forEach((listener) => {\n                    listener(token.accessToken);\n                });\n            }\n            return token;\n        })\n            .catch((error) => {\n            let errorMessage = (typeof error === 'string') ? error : error.message;\n            errorMessage = 'Credential implementation provided to initializeApp() via the ' +\n                '\"credential\" property failed to fetch a valid Google OAuth2 access token with the ' +\n                `following error: \"${errorMessage}\".`;\n            if (errorMessage.indexOf('invalid_grant') !== -1) {\n                errorMessage += ' There are two likely causes: (1) your server time is not properly ' +\n                    'synced or (2) your certificate key file has been revoked. To solve (1), re-sync the ' +\n                    'time on your server. To solve (2), make sure the key ID for your key file is still ' +\n                    'present at https://console.firebase.google.com/iam-admin/serviceaccounts/project. If ' +\n                    'not, generate a new key file at ' +\n                    'https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk.';\n            }\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, errorMessage);\n        })\n            .finally(() => {\n            this.isRefreshing = false;\n        });\n    }\n    shouldRefresh() {\n        return (!this.cachedToken_ || (this.cachedToken_.expirationTime - Date.now()) <= TOKEN_EXPIRY_THRESHOLD_MILLIS)\n            && !this.isRefreshing;\n    }\n    /**\n     * Adds a listener that is called each time a token changes.\n     *\n     * @param listener - The listener that will be called with each new token.\n     */\n    addAuthTokenListener(listener) {\n        this.tokenListeners_.push(listener);\n        if (this.cachedToken_) {\n            listener(this.cachedToken_.accessToken);\n        }\n    }\n    /**\n     * Removes a token listener.\n     *\n     * @param listener - The listener to remove.\n     */\n    removeAuthTokenListener(listener) {\n        this.tokenListeners_ = this.tokenListeners_.filter((other) => other !== listener);\n    }\n}\nexports.FirebaseAppInternals = FirebaseAppInternals;\n/**\n * Global context object for a collection of services using a shared authentication state.\n *\n * @internal\n */\nclass FirebaseApp {\n    constructor(options, name, appStore) {\n        this.appStore = appStore;\n        this.services_ = {};\n        this.isDeleted_ = false;\n        this.name_ = name;\n        this.options_ = (0, deep_copy_1.deepCopy)(options);\n        if (!validator.isNonNullObject(this.options_)) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Invalid Firebase app options passed as the first argument to initializeApp() for the ' +\n                `app named \"${this.name_}\". Options must be a non-null object.`);\n        }\n        const hasCredential = ('credential' in this.options_);\n        if (!hasCredential) {\n            this.options_.credential = (0, credential_internal_1.getApplicationDefault)(this.options_.httpAgent);\n        }\n        const credential = this.options_.credential;\n        if (typeof credential !== 'object' || credential === null || typeof credential.getAccessToken !== 'function') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Invalid Firebase app options passed as the first argument to initializeApp() for the ' +\n                `app named \"${this.name_}\". The \"credential\" property must be an object which implements ` +\n                'the Credential interface.');\n        }\n        this.INTERNAL = new FirebaseAppInternals(credential);\n    }\n    /**\n     * Returns the name of the FirebaseApp instance.\n     *\n     * @returns The name of the FirebaseApp instance.\n     */\n    get name() {\n        this.checkDestroyed_();\n        return this.name_;\n    }\n    /**\n     * Returns the options for the FirebaseApp instance.\n     *\n     * @returns The options for the FirebaseApp instance.\n     */\n    get options() {\n        this.checkDestroyed_();\n        return (0, deep_copy_1.deepCopy)(this.options_);\n    }\n    /**\n     * @internal\n     */\n    getOrInitService(name, init) {\n        return this.ensureService_(name, () => init(this));\n    }\n    /**\n     * Deletes the FirebaseApp instance.\n     *\n     * @returns An empty Promise fulfilled once the FirebaseApp instance is deleted.\n     */\n    delete() {\n        this.checkDestroyed_();\n        // Also remove the instance from the AppStore. This is needed to support the existing\n        // app.delete() use case. In the future we can remove this API, and deleteApp() will\n        // become the only way to tear down an App.\n        this.appStore?.removeApp(this.name);\n        return Promise.all(Object.keys(this.services_).map((serviceName) => {\n            const service = this.services_[serviceName];\n            if (isStateful(service)) {\n                return service.delete();\n            }\n            return Promise.resolve();\n        })).then(() => {\n            this.services_ = {};\n            this.isDeleted_ = true;\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    ensureService_(serviceName, initializer) {\n        this.checkDestroyed_();\n        if (!(serviceName in this.services_)) {\n            this.services_[serviceName] = initializer();\n        }\n        return this.services_[serviceName];\n    }\n    /**\n     * Throws an Error if the FirebaseApp instance has already been deleted.\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    checkDestroyed_() {\n        if (this.isDeleted_) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.APP_DELETED, `Firebase app named \"${this.name_}\" has already been deleted.`);\n        }\n    }\n}\nexports.FirebaseApp = FirebaseApp;\nfunction isStateful(service) {\n    return typeof service.delete === 'function';\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2993, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app/lifecycle.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FIREBASE_CONFIG_VAR = exports.deleteApp = exports.getApps = exports.getApp = exports.initializeApp = exports.defaultAppStore = exports.AppStore = void 0;\nconst fs = require(\"fs\");\nconst validator = require(\"../utils/validator\");\nconst error_1 = require(\"../utils/error\");\nconst credential_internal_1 = require(\"./credential-internal\");\nconst firebase_app_1 = require(\"./firebase-app\");\nconst DEFAULT_APP_NAME = '[DEFAULT]';\nclass AppStore {\n    constructor() {\n        this.appStore = new Map();\n    }\n    initializeApp(options, appName = DEFAULT_APP_NAME) {\n        if (typeof options === 'undefined') {\n            options = loadOptionsFromEnvVar();\n            options.credential = (0, credential_internal_1.getApplicationDefault)();\n        }\n        if (typeof appName !== 'string' || appName === '') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, `Invalid Firebase app name \"${appName}\" provided. App name must be a non-empty string.`);\n        }\n        else if (this.appStore.has(appName)) {\n            if (appName === DEFAULT_APP_NAME) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, 'The default Firebase app already exists. This means you called initializeApp() ' +\n                    'more than once without providing an app name as the second argument. In most cases ' +\n                    'you only need to call initializeApp() once. But if you do want to initialize ' +\n                    'multiple apps, pass a second argument to initializeApp() to give each app a unique ' +\n                    'name.');\n            }\n            else {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, `Firebase app named \"${appName}\" already exists. This means you called initializeApp() ` +\n                    'more than once with the same app name as the second argument. Make sure you provide a ' +\n                    'unique name every time you call initializeApp().');\n            }\n        }\n        const app = new firebase_app_1.FirebaseApp(options, appName, this);\n        this.appStore.set(app.name, app);\n        return app;\n    }\n    getApp(appName = DEFAULT_APP_NAME) {\n        if (typeof appName !== 'string' || appName === '') {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, `Invalid Firebase app name \"${appName}\" provided. App name must be a non-empty string.`);\n        }\n        else if (!this.appStore.has(appName)) {\n            let errorMessage = (appName === DEFAULT_APP_NAME)\n                ? 'The default Firebase app does not exist. ' : `Firebase app named \"${appName}\" does not exist. `;\n            errorMessage += 'Make sure you call initializeApp() before using any of the Firebase services.';\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NO_APP, errorMessage);\n        }\n        return this.appStore.get(appName);\n    }\n    getApps() {\n        // Return a copy so the caller cannot mutate the array\n        return Array.from(this.appStore.values());\n    }\n    deleteApp(app) {\n        if (typeof app !== 'object' || app === null || !('options' in app)) {\n            throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_ARGUMENT, 'Invalid app argument.');\n        }\n        // Make sure the given app already exists.\n        const existingApp = getApp(app.name);\n        // Delegate delete operation to the App instance itself. That will also remove the App\n        // instance from the AppStore.\n        return existingApp.delete();\n    }\n    clearAllApps() {\n        const promises = [];\n        this.getApps().forEach((app) => {\n            promises.push(this.deleteApp(app));\n        });\n        return Promise.all(promises).then();\n    }\n    /**\n     * Removes the specified App instance from the store. This is currently called by the\n     * {@link FirebaseApp.delete} method. Can be removed once the app deletion is handled\n     * entirely by the {@link deleteApp} top-level function.\n     */\n    removeApp(appName) {\n        this.appStore.delete(appName);\n    }\n}\nexports.AppStore = AppStore;\nexports.defaultAppStore = new AppStore();\nfunction initializeApp(options, appName = DEFAULT_APP_NAME) {\n    return exports.defaultAppStore.initializeApp(options, appName);\n}\nexports.initializeApp = initializeApp;\nfunction getApp(appName = DEFAULT_APP_NAME) {\n    return exports.defaultAppStore.getApp(appName);\n}\nexports.getApp = getApp;\nfunction getApps() {\n    return exports.defaultAppStore.getApps();\n}\nexports.getApps = getApps;\n/**\n * Renders this given `App` unusable and frees the resources of\n * all associated services (though it does *not* clean up any backend\n * resources). When running the SDK locally, this method\n * must be called to ensure graceful termination of the process.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n */\nfunction deleteApp(app) {\n    return exports.defaultAppStore.deleteApp(app);\n}\nexports.deleteApp = deleteApp;\n/**\n * Constant holding the environment variable name with the default config.\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n * otherwise it will be assumed to be pointing to a file.\n */\nexports.FIREBASE_CONFIG_VAR = 'FIREBASE_CONFIG';\n/**\n * Parse the file pointed to by the FIREBASE_CONFIG_VAR, if it exists.\n * Or if the FIREBASE_CONFIG_ENV contains a valid JSON object, parse it directly.\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n * otherwise it will be assumed to be pointing to a file.\n */\nfunction loadOptionsFromEnvVar() {\n    const config = process.env[exports.FIREBASE_CONFIG_VAR];\n    if (!validator.isNonEmptyString(config)) {\n        return {};\n    }\n    try {\n        const contents = config.startsWith('{') ? config : fs.readFileSync(config, 'utf8');\n        return JSON.parse(contents);\n    }\n    catch (error) {\n        // Throw a nicely formed error message if the file contents cannot be parsed\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Failed to parse app options file: ' + error);\n    }\n}\n"],"names":[],"mappings":"AAAA,2BAA2B,GAkJR;AAjJnB;AACA;;;;;;;;;;;;;;;CAeC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,mBAAmB,GAAG,QAAQ,SAAS,GAAG,QAAQ,OAAO,GAAG,QAAQ,MAAM,GAAG,QAAQ,aAAa,GAAG,QAAQ,eAAe,GAAG,QAAQ,QAAQ,GAAG,KAAK;AAC/J,MAAM;;;;;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM,mBAAmB;AACzB,MAAM;IACF,aAAc;QACV,IAAI,CAAC,QAAQ,GAAG,IAAI;IACxB;IACA,cAAc,OAAO,EAAE,UAAU,gBAAgB,EAAE;QAC/C,IAAI,OAAO,YAAY,aAAa;YAChC,UAAU;YACV,QAAQ,UAAU,GAAG,CAAC,GAAG,sBAAsB,qBAAqB;QACxE;QACA,IAAI,OAAO,YAAY,YAAY,YAAY,IAAI;YAC/C,MAAM,IAAI,QAAQ,gBAAgB,CAAC,QAAQ,aAAa,CAAC,gBAAgB,EAAE,CAAC,2BAA2B,EAAE,QAAQ,gDAAgD,CAAC;QACtK,OACK,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU;YACjC,IAAI,YAAY,kBAAkB;gBAC9B,MAAM,IAAI,QAAQ,gBAAgB,CAAC,QAAQ,aAAa,CAAC,aAAa,EAAE,oFACpE,wFACA,kFACA,wFACA;YACR,OACK;gBACD,MAAM,IAAI,QAAQ,gBAAgB,CAAC,QAAQ,aAAa,CAAC,aAAa,EAAE,CAAC,oBAAoB,EAAE,QAAQ,wDAAwD,CAAC,GAC5J,2FACA;YACR;QACJ;QACA,MAAM,MAAM,IAAI,eAAe,WAAW,CAAC,SAAS,SAAS,IAAI;QACjE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;QAC5B,OAAO;IACX;IACA,OAAO,UAAU,gBAAgB,EAAE;QAC/B,IAAI,OAAO,YAAY,YAAY,YAAY,IAAI;YAC/C,MAAM,IAAI,QAAQ,gBAAgB,CAAC,QAAQ,aAAa,CAAC,gBAAgB,EAAE,CAAC,2BAA2B,EAAE,QAAQ,gDAAgD,CAAC;QACtK,OACK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU;YAClC,IAAI,eAAe,AAAC,YAAY,mBAC1B,8CAA8C,CAAC,oBAAoB,EAAE,QAAQ,kBAAkB,CAAC;YACtG,gBAAgB;YAChB,MAAM,IAAI,QAAQ,gBAAgB,CAAC,QAAQ,aAAa,CAAC,MAAM,EAAE;QACrE;QACA,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;IAC7B;IACA,UAAU;QACN,sDAAsD;QACtD,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM;IAC1C;IACA,UAAU,GAAG,EAAE;QACX,IAAI,OAAO,QAAQ,YAAY,QAAQ,QAAQ,CAAC,CAAC,aAAa,GAAG,GAAG;YAChE,MAAM,IAAI,QAAQ,gBAAgB,CAAC,QAAQ,aAAa,CAAC,gBAAgB,EAAE;QAC/E;QACA,0CAA0C;QAC1C,MAAM,cAAc,OAAO,IAAI,IAAI;QACnC,sFAAsF;QACtF,8BAA8B;QAC9B,OAAO,YAAY,MAAM;IAC7B;IACA,eAAe;QACX,MAAM,WAAW,EAAE;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC;YACpB,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC;QACA,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;IACrC;IACA;;;;KAIC,GACD,UAAU,OAAO,EAAE;QACf,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IACzB;AACJ;AACA,QAAQ,QAAQ,GAAG;AACnB,QAAQ,eAAe,GAAG,IAAI;AAC9B,SAAS,cAAc,OAAO,EAAE,UAAU,gBAAgB;IACtD,OAAO,QAAQ,eAAe,CAAC,aAAa,CAAC,SAAS;AAC1D;AACA,QAAQ,aAAa,GAAG;AACxB,SAAS,OAAO,UAAU,gBAAgB;IACtC,OAAO,QAAQ,eAAe,CAAC,MAAM,CAAC;AAC1C;AACA,QAAQ,MAAM,GAAG;AACjB,SAAS;IACL,OAAO,QAAQ,eAAe,CAAC,OAAO;AAC1C;AACA,QAAQ,OAAO,GAAG;AAClB;;;;;;;;;;;;;;;;CAgBC,GACD,SAAS,UAAU,GAAG;IAClB,OAAO,QAAQ,eAAe,CAAC,SAAS,CAAC;AAC7C;AACA,QAAQ,SAAS,GAAG;AACpB;;;;CAIC,GACD,QAAQ,mBAAmB,GAAG;AAC9B;;;;;CAKC,GACD,SAAS;IACL,MAAM,SAAS,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,QAAQ,mBAAmB,CAAC;IACvD,IAAI,CAAC,UAAU,gBAAgB,CAAC,SAAS;QACrC,OAAO,CAAC;IACZ;IACA,IAAI;QACA,MAAM,WAAW,OAAO,UAAU,CAAC,OAAO,SAAS,GAAG,YAAY,CAAC,QAAQ;QAC3E,OAAO,KAAK,KAAK,CAAC;IACtB,EACA,OAAO,OAAO;QACV,4EAA4E;QAC5E,MAAM,IAAI,QAAQ,gBAAgB,CAAC,QAAQ,aAAa,CAAC,mBAAmB,EAAE,uCAAuC;IACzH;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3147, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app/credential-factory.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearGlobalAppDefaultCred = exports.refreshToken = exports.cert = exports.applicationDefault = void 0;\nconst credential_internal_1 = require(\"./credential-internal\");\nlet globalAppDefaultCred;\nconst globalCertCreds = {};\nconst globalRefreshTokenCreds = {};\n/**\n * Returns a credential created from the\n * {@link https://developers.google.com/identity/protocols/application-default-credentials |\n * Google Application Default Credentials}\n * that grants admin access to Firebase services. This credential can be used\n * in the call to {@link firebase-admin.app#initializeApp}.\n *\n * Google Application Default Credentials are available on any Google\n * infrastructure, such as Google App Engine and Google Compute Engine.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * initializeApp({\n *   credential: applicationDefault(),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via Google\n *   Application Default Credentials that can be used to initialize an app.\n */\nfunction applicationDefault(httpAgent) {\n    if (typeof globalAppDefaultCred === 'undefined') {\n        globalAppDefaultCred = (0, credential_internal_1.getApplicationDefault)(httpAgent);\n    }\n    return globalAppDefaultCred;\n}\nexports.applicationDefault = applicationDefault;\n/**\n * Returns a credential created from the provided service account that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a service account key JSON file\n * const serviceAccount = require(\"path/to/serviceAccountKey.json\");\n * initializeApp({\n *   credential: cert(serviceAccount),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @example\n * ```javascript\n * // Providing a service account object inline\n * initializeApp({\n *   credential: cert({\n *     projectId: \"<PROJECT_ID>\",\n *     clientEmail: \"foo@<PROJECT_ID>.iam.gserviceaccount.com\",\n *     privateKey: \"-----BEGIN PRIVATE KEY-----<KEY>-----END PRIVATE KEY-----\\n\"\n *   }),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param serviceAccountPathOrObject - The path to a service\n *   account key JSON file or an object representing a service account key.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction cert(serviceAccountPathOrObject, httpAgent) {\n    const stringifiedServiceAccount = JSON.stringify(serviceAccountPathOrObject);\n    if (!(stringifiedServiceAccount in globalCertCreds)) {\n        globalCertCreds[stringifiedServiceAccount] = new credential_internal_1.ServiceAccountCredential(serviceAccountPathOrObject, httpAgent);\n    }\n    return globalCertCreds[stringifiedServiceAccount];\n}\nexports.cert = cert;\n/**\n * Returns a credential created from the provided refresh token that grants\n * admin access to Firebase services. This credential can be used in the call\n * to {@link firebase-admin.app#initializeApp}.\n *\n * See\n * {@link https://firebase.google.com/docs/admin/setup#initialize_the_sdk | Initialize the SDK}\n * for more details.\n *\n * @example\n * ```javascript\n * // Providing a path to a refresh token JSON file\n * const refreshToken = require(\"path/to/refreshToken.json\");\n * initializeApp({\n *   credential: refreshToken(refreshToken),\n *   databaseURL: \"https://<DATABASE_NAME>.firebaseio.com\"\n * });\n * ```\n *\n * @param refreshTokenPathOrObject - The path to a Google\n *   OAuth2 refresh token JSON file or an object representing a Google OAuth2\n *   refresh token.\n * @param httpAgent - Optional {@link https://nodejs.org/api/http.html#http_class_http_agent | HTTP Agent}\n *   to be used when retrieving access tokens from Google token servers.\n *\n * @returns A credential authenticated via the\n *   provided service account that can be used to initialize an app.\n */\nfunction refreshToken(refreshTokenPathOrObject, httpAgent) {\n    const stringifiedRefreshToken = JSON.stringify(refreshTokenPathOrObject);\n    if (!(stringifiedRefreshToken in globalRefreshTokenCreds)) {\n        globalRefreshTokenCreds[stringifiedRefreshToken] = new credential_internal_1.RefreshTokenCredential(refreshTokenPathOrObject, httpAgent);\n    }\n    return globalRefreshTokenCreds[stringifiedRefreshToken];\n}\nexports.refreshToken = refreshToken;\n/**\n * Clears the global ADC cache. Exported for testing.\n */\nfunction clearGlobalAppDefaultCred() {\n    globalAppDefaultCred = undefined;\n}\nexports.clearGlobalAppDefaultCred = clearGlobalAppDefaultCred;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;;CAeC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,yBAAyB,GAAG,QAAQ,YAAY,GAAG,QAAQ,IAAI,GAAG,QAAQ,kBAAkB,GAAG,KAAK;AAC5G,MAAM;AACN,IAAI;AACJ,MAAM,kBAAkB,CAAC;AACzB,MAAM,0BAA0B,CAAC;AACjC;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BC,GACD,SAAS,mBAAmB,SAAS;IACjC,IAAI,OAAO,yBAAyB,aAAa;QAC7C,uBAAuB,CAAC,GAAG,sBAAsB,qBAAqB,EAAE;IAC5E;IACA,OAAO;AACX;AACA,QAAQ,kBAAkB,GAAG;AAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuCC,GACD,SAAS,KAAK,0BAA0B,EAAE,SAAS;IAC/C,MAAM,4BAA4B,KAAK,SAAS,CAAC;IACjD,IAAI,CAAC,CAAC,6BAA6B,eAAe,GAAG;QACjD,eAAe,CAAC,0BAA0B,GAAG,IAAI,sBAAsB,wBAAwB,CAAC,4BAA4B;IAChI;IACA,OAAO,eAAe,CAAC,0BAA0B;AACrD;AACA,QAAQ,IAAI,GAAG;AACf;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BC,GACD,SAAS,aAAa,wBAAwB,EAAE,SAAS;IACrD,MAAM,0BAA0B,KAAK,SAAS,CAAC;IAC/C,IAAI,CAAC,CAAC,2BAA2B,uBAAuB,GAAG;QACvD,uBAAuB,CAAC,wBAAwB,GAAG,IAAI,sBAAsB,sBAAsB,CAAC,0BAA0B;IAClI;IACA,OAAO,uBAAuB,CAAC,wBAAwB;AAC3D;AACA,QAAQ,YAAY,GAAG;AACvB;;CAEC,GACD,SAAS;IACL,uBAAuB;AAC3B;AACA,QAAQ,yBAAyB,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3303, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/utils/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseResourceName = exports.transformMillisecondsToSecondsString = exports.generateUpdateMask = exports.formatString = exports.toWebSafeBase64 = exports.findServiceAccountEmail = exports.getExplicitServiceAccountEmail = exports.findProjectId = exports.getExplicitProjectId = exports.addReadonlyGetter = exports.renameProperties = exports.getSdkVersion = void 0;\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst validator = require(\"./validator\");\nlet sdkVersion;\n// TODO: Move to firebase-admin/app as an internal member.\nfunction getSdkVersion() {\n    if (!sdkVersion) {\n        const { version } = require('../../package.json'); // eslint-disable-line @typescript-eslint/no-var-requires\n        sdkVersion = version;\n    }\n    return sdkVersion;\n}\nexports.getSdkVersion = getSdkVersion;\n/**\n * Renames properties on an object given a mapping from old to new property names.\n *\n * For example, this can be used to map underscore_cased properties to camelCase.\n *\n * @param obj - The object whose properties to rename.\n * @param keyMap - The mapping from old to new property names.\n */\nfunction renameProperties(obj, keyMap) {\n    Object.keys(keyMap).forEach((oldKey) => {\n        if (oldKey in obj) {\n            const newKey = keyMap[oldKey];\n            // The old key's value takes precedence over the new key's value.\n            obj[newKey] = obj[oldKey];\n            delete obj[oldKey];\n        }\n    });\n}\nexports.renameProperties = renameProperties;\n/**\n * Defines a new read-only property directly on an object and returns the object.\n *\n * @param obj - The object on which to define the property.\n * @param prop - The name of the property to be defined or modified.\n * @param value - The value associated with the property.\n */\nfunction addReadonlyGetter(obj, prop, value) {\n    Object.defineProperty(obj, prop, {\n        value,\n        // Make this property read-only.\n        writable: false,\n        // Include this property during enumeration of obj's properties.\n        enumerable: true,\n    });\n}\nexports.addReadonlyGetter = addReadonlyGetter;\n/**\n * Returns the Google Cloud project ID associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param app - A Firebase app to get the project ID from.\n *\n * @returns A project ID string or null.\n */\nfunction getExplicitProjectId(app) {\n    const options = app.options;\n    if (validator.isNonEmptyString(options.projectId)) {\n        return options.projectId;\n    }\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return credential.projectId;\n    }\n    const projectId = process.env.GOOGLE_CLOUD_PROJECT || process.env.GCLOUD_PROJECT;\n    if (validator.isNonEmptyString(projectId)) {\n        return projectId;\n    }\n    return null;\n}\nexports.getExplicitProjectId = getExplicitProjectId;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app. This method\n * first checks if a project ID is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit project ID is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the project ID from the local metadata service.\n *\n * @param app - A Firebase app to get the project ID from.\n *\n * @returns A project ID string or null.\n */\nfunction findProjectId(app) {\n    const projectId = getExplicitProjectId(app);\n    if (projectId) {\n        return Promise.resolve(projectId);\n    }\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ComputeEngineCredential) {\n        return credential.getProjectId();\n    }\n    return Promise.resolve(null);\n}\nexports.findProjectId = findProjectId;\n/**\n * Returns the service account email associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param app - A Firebase app to get the service account email from.\n *\n * @returns A service account email string or null.\n */\nfunction getExplicitServiceAccountEmail(app) {\n    const options = app.options;\n    if (validator.isNonEmptyString(options.serviceAccountId)) {\n        return options.serviceAccountId;\n    }\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return credential.clientEmail;\n    }\n    return null;\n}\nexports.getExplicitServiceAccountEmail = getExplicitServiceAccountEmail;\n/**\n * Determines the service account email associated with a Firebase app. This method first\n * checks if a service account email is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit service account email is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the service account email from the local metadata service.\n *\n * @param app - A Firebase app to get the service account email from.\n *\n * @returns A service account email ID string or null.\n */\nfunction findServiceAccountEmail(app) {\n    const accountId = getExplicitServiceAccountEmail(app);\n    if (accountId) {\n        return Promise.resolve(accountId);\n    }\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ComputeEngineCredential) {\n        return credential.getServiceAccountEmail();\n    }\n    return Promise.resolve(null);\n}\nexports.findServiceAccountEmail = findServiceAccountEmail;\n/**\n * Encodes data using web-safe-base64.\n *\n * @param data - The raw data byte input.\n * @returns The base64-encoded result.\n */\nfunction toWebSafeBase64(data) {\n    return data.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n}\nexports.toWebSafeBase64 = toWebSafeBase64;\n/**\n * Formats a string of form 'project/{projectId}/{api}' and replaces\n * with corresponding arguments {projectId: '1234', api: 'resource'}\n * and returns output: 'project/1234/resource'.\n *\n * @param str - The original string where the param need to be\n *     replaced.\n * @param params - The optional parameters to replace in the\n *     string.\n * @returns The resulting formatted string.\n */\nfunction formatString(str, params) {\n    let formatted = str;\n    Object.keys(params || {}).forEach((key) => {\n        formatted = formatted.replace(new RegExp('{' + key + '}', 'g'), params[key]);\n    });\n    return formatted;\n}\nexports.formatString = formatString;\n/**\n * Generates the update mask for the provided object.\n * Note this will ignore the last key with value undefined.\n *\n * @param obj - The object to generate the update mask for.\n * @param terminalPaths - The optional map of keys for maximum paths to traverse.\n *      Nested objects beyond that path will be ignored. This is useful for\n *      keys with variable object values.\n * @param root - The path so far.\n * @returns The computed update mask list.\n */\nfunction generateUpdateMask(obj, terminalPaths = [], root = '') {\n    const updateMask = [];\n    if (!validator.isNonNullObject(obj)) {\n        return updateMask;\n    }\n    for (const key in obj) {\n        if (typeof obj[key] !== 'undefined') {\n            const nextPath = root ? `${root}.${key}` : key;\n            // We hit maximum path.\n            // Consider switching to Set<string> if the list grows too large.\n            if (terminalPaths.indexOf(nextPath) !== -1) {\n                // Add key and stop traversing this branch.\n                updateMask.push(key);\n            }\n            else {\n                const maskList = generateUpdateMask(obj[key], terminalPaths, nextPath);\n                if (maskList.length > 0) {\n                    maskList.forEach((mask) => {\n                        updateMask.push(`${key}.${mask}`);\n                    });\n                }\n                else {\n                    updateMask.push(key);\n                }\n            }\n        }\n    }\n    return updateMask;\n}\nexports.generateUpdateMask = generateUpdateMask;\n/**\n * Transforms milliseconds to a protobuf Duration type string.\n * Returns the duration in seconds with up to nine fractional\n * digits, terminated by 's'. Example: \"3 seconds 0 nano seconds as 3s,\n * 3 seconds 1 nano seconds as 3.000000001s\".\n *\n * @param milliseconds - The duration in milliseconds.\n * @returns The resulting formatted string in seconds with up to nine fractional\n * digits, terminated by 's'.\n */\nfunction transformMillisecondsToSecondsString(milliseconds) {\n    let duration;\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = Math.floor((milliseconds - seconds * 1000) * 1000000);\n    if (nanos > 0) {\n        let nanoString = nanos.toString();\n        while (nanoString.length < 9) {\n            nanoString = '0' + nanoString;\n        }\n        duration = `${seconds}.${nanoString}s`;\n    }\n    else {\n        duration = `${seconds}s`;\n    }\n    return duration;\n}\nexports.transformMillisecondsToSecondsString = transformMillisecondsToSecondsString;\n/**\n * Parses the top level resources of a given resource name.\n * Supports both full and partial resources names, example:\n * `locations/{location}/functions/{functionName}`,\n * `projects/{project}/locations/{location}/functions/{functionName}`, or {functionName}\n * Does not support deeply nested resource names.\n *\n * @param resourceName - The resource name string.\n * @param resourceIdKey - The key of the resource name to be parsed.\n * @returns A parsed resource name object.\n */\nfunction parseResourceName(resourceName, resourceIdKey) {\n    if (!resourceName.includes('/')) {\n        return { resourceId: resourceName };\n    }\n    const CHANNEL_NAME_REGEX = new RegExp(`^(projects/([^/]+)/)?locations/([^/]+)/${resourceIdKey}/([^/]+)$`);\n    const match = CHANNEL_NAME_REGEX.exec(resourceName);\n    if (match === null) {\n        throw new Error('Invalid resource name format.');\n    }\n    const projectId = match[2];\n    const locationId = match[3];\n    const resourceId = match[4];\n    return { projectId, locationId, resourceId };\n}\nexports.parseResourceName = parseResourceName;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3584, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/user-import-builder.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserImportBuilder = exports.convertMultiFactorInfoToServerFormat = void 0;\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst utils = require(\"../utils\");\nconst validator = require(\"../utils/validator\");\nconst error_1 = require(\"../utils/error\");\n/**\n * Converts a client format second factor object to server format.\n * @param multiFactorInfo - The client format second factor.\n * @returns The corresponding AuthFactorInfo server request format.\n */\nfunction convertMultiFactorInfoToServerFormat(multiFactorInfo) {\n    let enrolledAt;\n    if (typeof multiFactorInfo.enrollmentTime !== 'undefined') {\n        if (validator.isUTCDateString(multiFactorInfo.enrollmentTime)) {\n            // Convert from UTC date string (client side format) to ISO date string (server side format).\n            enrolledAt = new Date(multiFactorInfo.enrollmentTime).toISOString();\n        }\n        else {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLMENT_TIME, `The second factor \"enrollmentTime\" for \"${multiFactorInfo.uid}\" must be a valid ` +\n                'UTC date string.');\n        }\n    }\n    // Currently only phone second factors are supported.\n    if (isPhoneFactor(multiFactorInfo)) {\n        // If any required field is missing or invalid, validation will still fail later.\n        const authFactorInfo = {\n            mfaEnrollmentId: multiFactorInfo.uid,\n            displayName: multiFactorInfo.displayName,\n            // Required for all phone second factors.\n            phoneInfo: multiFactorInfo.phoneNumber,\n            enrolledAt,\n        };\n        for (const objKey in authFactorInfo) {\n            if (typeof authFactorInfo[objKey] === 'undefined') {\n                delete authFactorInfo[objKey];\n            }\n        }\n        return authFactorInfo;\n    }\n    else {\n        // Unsupported second factor.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.UNSUPPORTED_SECOND_FACTOR, `Unsupported second factor \"${JSON.stringify(multiFactorInfo)}\" provided.`);\n    }\n}\nexports.convertMultiFactorInfoToServerFormat = convertMultiFactorInfoToServerFormat;\nfunction isPhoneFactor(multiFactorInfo) {\n    return multiFactorInfo.factorId === 'phone';\n}\n/**\n * @param {any} obj The object to check for number field within.\n * @param {string} key The entry key.\n * @returns {number} The corresponding number if available. Otherwise, NaN.\n */\nfunction getNumberField(obj, key) {\n    if (typeof obj[key] !== 'undefined' && obj[key] !== null) {\n        return parseInt(obj[key].toString(), 10);\n    }\n    return NaN;\n}\n/**\n * Converts a UserImportRecord to a UploadAccountUser object. Throws an error when invalid\n * fields are provided.\n * @param {UserImportRecord} user The UserImportRecord to conver to UploadAccountUser.\n * @param {ValidatorFunction=} userValidator The user validator function.\n * @returns {UploadAccountUser} The corresponding UploadAccountUser to return.\n */\nfunction populateUploadAccountUser(user, userValidator) {\n    const result = {\n        localId: user.uid,\n        email: user.email,\n        emailVerified: user.emailVerified,\n        displayName: user.displayName,\n        disabled: user.disabled,\n        photoUrl: user.photoURL,\n        phoneNumber: user.phoneNumber,\n        providerUserInfo: [],\n        mfaInfo: [],\n        tenantId: user.tenantId,\n        customAttributes: user.customClaims && JSON.stringify(user.customClaims),\n    };\n    if (typeof user.passwordHash !== 'undefined') {\n        if (!validator.isBuffer(user.passwordHash)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_HASH);\n        }\n        result.passwordHash = utils.toWebSafeBase64(user.passwordHash);\n    }\n    if (typeof user.passwordSalt !== 'undefined') {\n        if (!validator.isBuffer(user.passwordSalt)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_SALT);\n        }\n        result.salt = utils.toWebSafeBase64(user.passwordSalt);\n    }\n    if (validator.isNonNullObject(user.metadata)) {\n        if (validator.isNonEmptyString(user.metadata.creationTime)) {\n            result.createdAt = new Date(user.metadata.creationTime).getTime();\n        }\n        if (validator.isNonEmptyString(user.metadata.lastSignInTime)) {\n            result.lastLoginAt = new Date(user.metadata.lastSignInTime).getTime();\n        }\n    }\n    if (validator.isArray(user.providerData)) {\n        user.providerData.forEach((providerData) => {\n            result.providerUserInfo.push({\n                providerId: providerData.providerId,\n                rawId: providerData.uid,\n                email: providerData.email,\n                displayName: providerData.displayName,\n                photoUrl: providerData.photoURL,\n            });\n        });\n    }\n    // Convert user.multiFactor.enrolledFactors to server format.\n    if (validator.isNonNullObject(user.multiFactor) &&\n        validator.isNonEmptyArray(user.multiFactor.enrolledFactors)) {\n        user.multiFactor.enrolledFactors.forEach((multiFactorInfo) => {\n            result.mfaInfo.push(convertMultiFactorInfoToServerFormat(multiFactorInfo));\n        });\n    }\n    // Remove blank fields.\n    let key;\n    for (key in result) {\n        if (typeof result[key] === 'undefined') {\n            delete result[key];\n        }\n    }\n    if (result.providerUserInfo.length === 0) {\n        delete result.providerUserInfo;\n    }\n    if (result.mfaInfo.length === 0) {\n        delete result.mfaInfo;\n    }\n    // Validate the constructured user individual request. This will throw if an error\n    // is detected.\n    if (typeof userValidator === 'function') {\n        userValidator(result);\n    }\n    return result;\n}\n/**\n * Class that provides a helper for building/validating uploadAccount requests and\n * UserImportResult responses.\n */\nclass UserImportBuilder {\n    /**\n     * @param {UserImportRecord[]} users The list of user records to import.\n     * @param {UserImportOptions=} options The import options which includes hashing\n     *     algorithm details.\n     * @param {ValidatorFunction=} userRequestValidator The user request validator function.\n     * @constructor\n     */\n    constructor(users, options, userRequestValidator) {\n        this.requiresHashOptions = false;\n        this.validatedUsers = [];\n        this.userImportResultErrors = [];\n        this.indexMap = {};\n        this.validatedUsers = this.populateUsers(users, userRequestValidator);\n        this.validatedOptions = this.populateOptions(options, this.requiresHashOptions);\n    }\n    /**\n     * Returns the corresponding constructed uploadAccount request.\n     * @returns {UploadAccountRequest} The constructed uploadAccount request.\n     */\n    buildRequest() {\n        const users = this.validatedUsers.map((user) => {\n            return (0, deep_copy_1.deepCopy)(user);\n        });\n        return (0, deep_copy_1.deepExtend)({ users }, (0, deep_copy_1.deepCopy)(this.validatedOptions));\n    }\n    /**\n     * Populates the UserImportResult using the client side detected errors and the server\n     * side returned errors.\n     * @returns {UserImportResult} The user import result based on the returned failed\n     *     uploadAccount response.\n     */\n    buildResponse(failedUploads) {\n        // Initialize user import result.\n        const importResult = {\n            successCount: this.validatedUsers.length,\n            failureCount: this.userImportResultErrors.length,\n            errors: (0, deep_copy_1.deepCopy)(this.userImportResultErrors),\n        };\n        importResult.failureCount += failedUploads.length;\n        importResult.successCount -= failedUploads.length;\n        failedUploads.forEach((failedUpload) => {\n            importResult.errors.push({\n                // Map backend request index to original developer provided array index.\n                index: this.indexMap[failedUpload.index],\n                error: new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_USER_IMPORT, failedUpload.message),\n            });\n        });\n        // Sort errors by index.\n        importResult.errors.sort((a, b) => {\n            return a.index - b.index;\n        });\n        // Return sorted result.\n        return importResult;\n    }\n    /**\n     * Validates and returns the hashing options of the uploadAccount request.\n     * Throws an error whenever an invalid or missing options is detected.\n     * @param {UserImportOptions} options The UserImportOptions.\n     * @param {boolean} requiresHashOptions Whether to require hash options.\n     * @returns {UploadAccountOptions} The populated UploadAccount options.\n     */\n    populateOptions(options, requiresHashOptions) {\n        let populatedOptions;\n        if (!requiresHashOptions) {\n            return {};\n        }\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"UserImportOptions\" are required when importing users with passwords.');\n        }\n        if (!validator.isNonNullObject(options.hash)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISSING_HASH_ALGORITHM, '\"hash.algorithm\" is missing from the provided \"UserImportOptions\".');\n        }\n        if (typeof options.hash.algorithm === 'undefined' ||\n            !validator.isNonEmptyString(options.hash.algorithm)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_ALGORITHM, '\"hash.algorithm\" must be a string matching the list of supported algorithms.');\n        }\n        let rounds;\n        switch (options.hash.algorithm) {\n            case 'HMAC_SHA512':\n            case 'HMAC_SHA256':\n            case 'HMAC_SHA1':\n            case 'HMAC_MD5':\n                if (!validator.isBuffer(options.hash.key)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_KEY, 'A non-empty \"hash.key\" byte buffer must be provided for ' +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                populatedOptions = {\n                    hashAlgorithm: options.hash.algorithm,\n                    signerKey: utils.toWebSafeBase64(options.hash.key),\n                };\n                break;\n            case 'MD5':\n            case 'SHA1':\n            case 'SHA256':\n            case 'SHA512': {\n                // MD5 is [0,8192] but SHA1, SHA256, and SHA512 are [1,8192]\n                rounds = getNumberField(options.hash, 'rounds');\n                const minRounds = options.hash.algorithm === 'MD5' ? 0 : 1;\n                if (isNaN(rounds) || rounds < minRounds || rounds > 8192) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_ROUNDS, `A valid \"hash.rounds\" number between ${minRounds} and 8192 must be provided for ` +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                populatedOptions = {\n                    hashAlgorithm: options.hash.algorithm,\n                    rounds,\n                };\n                break;\n            }\n            case 'PBKDF_SHA1':\n            case 'PBKDF2_SHA256':\n                rounds = getNumberField(options.hash, 'rounds');\n                if (isNaN(rounds) || rounds < 0 || rounds > 120000) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_ROUNDS, 'A valid \"hash.rounds\" number between 0 and 120000 must be provided for ' +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                populatedOptions = {\n                    hashAlgorithm: options.hash.algorithm,\n                    rounds,\n                };\n                break;\n            case 'SCRYPT': {\n                if (!validator.isBuffer(options.hash.key)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_KEY, 'A \"hash.key\" byte buffer must be provided for ' +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                rounds = getNumberField(options.hash, 'rounds');\n                if (isNaN(rounds) || rounds <= 0 || rounds > 8) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_ROUNDS, 'A valid \"hash.rounds\" number between 1 and 8 must be provided for ' +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                const memoryCost = getNumberField(options.hash, 'memoryCost');\n                if (isNaN(memoryCost) || memoryCost <= 0 || memoryCost > 14) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_MEMORY_COST, 'A valid \"hash.memoryCost\" number between 1 and 14 must be provided for ' +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                if (typeof options.hash.saltSeparator !== 'undefined' &&\n                    !validator.isBuffer(options.hash.saltSeparator)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_SALT_SEPARATOR, '\"hash.saltSeparator\" must be a byte buffer.');\n                }\n                populatedOptions = {\n                    hashAlgorithm: options.hash.algorithm,\n                    signerKey: utils.toWebSafeBase64(options.hash.key),\n                    rounds,\n                    memoryCost,\n                    saltSeparator: utils.toWebSafeBase64(options.hash.saltSeparator || Buffer.from('')),\n                };\n                break;\n            }\n            case 'BCRYPT':\n                populatedOptions = {\n                    hashAlgorithm: options.hash.algorithm,\n                };\n                break;\n            case 'STANDARD_SCRYPT': {\n                const cpuMemCost = getNumberField(options.hash, 'memoryCost');\n                if (isNaN(cpuMemCost)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_MEMORY_COST, 'A valid \"hash.memoryCost\" number must be provided for ' +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                const parallelization = getNumberField(options.hash, 'parallelization');\n                if (isNaN(parallelization)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_PARALLELIZATION, 'A valid \"hash.parallelization\" number must be provided for ' +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                const blockSize = getNumberField(options.hash, 'blockSize');\n                if (isNaN(blockSize)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_BLOCK_SIZE, 'A valid \"hash.blockSize\" number must be provided for ' +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                const dkLen = getNumberField(options.hash, 'derivedKeyLength');\n                if (isNaN(dkLen)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_DERIVED_KEY_LENGTH, 'A valid \"hash.derivedKeyLength\" number must be provided for ' +\n                        `hash algorithm ${options.hash.algorithm}.`);\n                }\n                populatedOptions = {\n                    hashAlgorithm: options.hash.algorithm,\n                    cpuMemCost,\n                    parallelization,\n                    blockSize,\n                    dkLen,\n                };\n                break;\n            }\n            default:\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_HASH_ALGORITHM, `Unsupported hash algorithm provider \"${options.hash.algorithm}\".`);\n        }\n        return populatedOptions;\n    }\n    /**\n     * Validates and returns the users list of the uploadAccount request.\n     * Whenever a user with an error is detected, the error is cached and will later be\n     * merged into the user import result. This allows the processing of valid users without\n     * failing early on the first error detected.\n     * @param {UserImportRecord[]} users The UserImportRecords to convert to UnploadAccountUser\n     *     objects.\n     * @param {ValidatorFunction=} userValidator The user validator function.\n     * @returns {UploadAccountUser[]} The populated uploadAccount users.\n     */\n    populateUsers(users, userValidator) {\n        const populatedUsers = [];\n        users.forEach((user, index) => {\n            try {\n                const result = populateUploadAccountUser(user, userValidator);\n                if (typeof result.passwordHash !== 'undefined') {\n                    this.requiresHashOptions = true;\n                }\n                // Only users that pass client screening will be passed to backend for processing.\n                populatedUsers.push(result);\n                // Map user's index (the one to be sent to backend) to original developer provided array.\n                this.indexMap[populatedUsers.length - 1] = index;\n            }\n            catch (error) {\n                // Save the client side error with respect to the developer provided array.\n                this.userImportResultErrors.push({\n                    index,\n                    error,\n                });\n            }\n        });\n        return populatedUsers;\n    }\n}\nexports.UserImportBuilder = UserImportBuilder;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3953, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/action-code-settings-builder.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActionCodeSettingsBuilder = void 0;\nconst validator = require(\"../utils/validator\");\nconst error_1 = require(\"../utils/error\");\n/**\n * Defines the ActionCodeSettings builder class used to convert the\n * ActionCodeSettings object to its corresponding server request.\n *\n * @internal\n */\nclass ActionCodeSettingsBuilder {\n    /**\n     * ActionCodeSettingsBuilder constructor.\n     *\n     * @param {ActionCodeSettings} actionCodeSettings The ActionCodeSettings\n     *     object used to initiliaze this server request builder.\n     * @constructor\n     */\n    constructor(actionCodeSettings) {\n        if (!validator.isNonNullObject(actionCodeSettings)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings\" must be a non-null object.');\n        }\n        if (typeof actionCodeSettings.url === 'undefined') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISSING_CONTINUE_URI);\n        }\n        else if (!validator.isURL(actionCodeSettings.url)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONTINUE_URI);\n        }\n        this.continueUrl = actionCodeSettings.url;\n        if (typeof actionCodeSettings.handleCodeInApp !== 'undefined' &&\n            !validator.isBoolean(actionCodeSettings.handleCodeInApp)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.handleCodeInApp\" must be a boolean.');\n        }\n        this.canHandleCodeInApp = actionCodeSettings.handleCodeInApp || false;\n        if (typeof actionCodeSettings.dynamicLinkDomain !== 'undefined' &&\n            !validator.isNonEmptyString(actionCodeSettings.dynamicLinkDomain)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DYNAMIC_LINK_DOMAIN);\n        }\n        this.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n        if (typeof actionCodeSettings.iOS !== 'undefined') {\n            if (!validator.isNonNullObject(actionCodeSettings.iOS)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.iOS\" must be a valid non-null object.');\n            }\n            else if (typeof actionCodeSettings.iOS.bundleId === 'undefined') {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISSING_IOS_BUNDLE_ID);\n            }\n            else if (!validator.isNonEmptyString(actionCodeSettings.iOS.bundleId)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.iOS.bundleId\" must be a valid non-empty string.');\n            }\n            this.ibi = actionCodeSettings.iOS.bundleId;\n        }\n        if (typeof actionCodeSettings.android !== 'undefined') {\n            if (!validator.isNonNullObject(actionCodeSettings.android)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.android\" must be a valid non-null object.');\n            }\n            else if (typeof actionCodeSettings.android.packageName === 'undefined') {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISSING_ANDROID_PACKAGE_NAME);\n            }\n            else if (!validator.isNonEmptyString(actionCodeSettings.android.packageName)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.android.packageName\" must be a valid non-empty string.');\n            }\n            else if (typeof actionCodeSettings.android.minimumVersion !== 'undefined' &&\n                !validator.isNonEmptyString(actionCodeSettings.android.minimumVersion)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.android.minimumVersion\" must be a valid non-empty string.');\n            }\n            else if (typeof actionCodeSettings.android.installApp !== 'undefined' &&\n                !validator.isBoolean(actionCodeSettings.android.installApp)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.android.installApp\" must be a valid boolean.');\n            }\n            this.apn = actionCodeSettings.android.packageName;\n            this.amv = actionCodeSettings.android.minimumVersion;\n            this.installApp = actionCodeSettings.android.installApp || false;\n        }\n    }\n    /**\n     * Returns the corresponding constructed server request corresponding to the\n     * current ActionCodeSettings.\n     *\n     * @returns The constructed EmailActionCodeRequest request.\n     */\n    buildRequest() {\n        const request = {\n            continueUrl: this.continueUrl,\n            canHandleCodeInApp: this.canHandleCodeInApp,\n            dynamicLinkDomain: this.dynamicLinkDomain,\n            androidPackageName: this.apn,\n            androidMinimumVersion: this.amv,\n            androidInstallApp: this.installApp,\n            iOSBundleId: this.ibi,\n        };\n        // Remove all null and undefined fields from request.\n        for (const key in request) {\n            if (Object.prototype.hasOwnProperty.call(request, key)) {\n                if (typeof request[key] === 'undefined' || request[key] === null) {\n                    delete request[key];\n                }\n            }\n        }\n        return request;\n    }\n}\nexports.ActionCodeSettingsBuilder = ActionCodeSettingsBuilder;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4063, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/auth-config.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EmailPrivacyAuthConfig = exports.PasswordPolicyAuthConfig = exports.RecaptchaAuthConfig = exports.SmsRegionsAuthConfig = exports.OIDCConfig = exports.SAMLConfig = exports.EmailSignInConfig = exports.validateTestPhoneNumbers = exports.MultiFactorAuthConfig = exports.MAXIMUM_TEST_PHONE_NUMBERS = void 0;\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\n/** A maximum of 10 test phone number / code pairs can be configured. */\nexports.MAXIMUM_TEST_PHONE_NUMBERS = 10;\n/** Client Auth factor type to server auth factor type mapping. */\nconst AUTH_FACTOR_CLIENT_TO_SERVER_TYPE = {\n    phone: 'PHONE_SMS',\n};\n/** Server Auth factor type to client auth factor type mapping. */\nconst AUTH_FACTOR_SERVER_TO_CLIENT_TYPE = Object.keys(AUTH_FACTOR_CLIENT_TO_SERVER_TYPE)\n    .reduce((res, key) => {\n    res[AUTH_FACTOR_CLIENT_TO_SERVER_TYPE[key]] = key;\n    return res;\n}, {});\n/**\n * Defines the multi-factor config class used to convert client side MultiFactorConfig\n * to a format that is understood by the Auth server.\n *\n * @internal\n */\nclass MultiFactorAuthConfig {\n    /**\n     * Static method to convert a client side request to a MultiFactorAuthServerConfig.\n     * Throws an error if validation fails.\n     *\n     * @param options - The options object to convert to a server request.\n     * @returns The resulting server request.\n     * @internal\n     */\n    static buildServerRequest(options) {\n        const request = {};\n        MultiFactorAuthConfig.validate(options);\n        if (Object.prototype.hasOwnProperty.call(options, 'state')) {\n            request.state = options.state;\n        }\n        if (Object.prototype.hasOwnProperty.call(options, 'factorIds')) {\n            (options.factorIds || []).forEach((factorId) => {\n                if (typeof request.enabledProviders === 'undefined') {\n                    request.enabledProviders = [];\n                }\n                request.enabledProviders.push(AUTH_FACTOR_CLIENT_TO_SERVER_TYPE[factorId]);\n            });\n            // In case an empty array is passed. Ensure it gets populated so the array is cleared.\n            if (options.factorIds && options.factorIds.length === 0) {\n                request.enabledProviders = [];\n            }\n        }\n        if (Object.prototype.hasOwnProperty.call(options, 'providerConfigs')) {\n            request.providerConfigs = options.providerConfigs;\n        }\n        return request;\n    }\n    /**\n     * Validates the MultiFactorConfig options object. Throws an error on failure.\n     *\n     * @param options - The options object to validate.\n     */\n    static validate(options) {\n        const validKeys = {\n            state: true,\n            factorIds: true,\n            providerConfigs: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"MultiFactorConfig\" must be a non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid MultiFactorConfig parameter.`);\n            }\n        }\n        // Validate content.\n        if (typeof options.state !== 'undefined' &&\n            options.state !== 'ENABLED' &&\n            options.state !== 'DISABLED') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"MultiFactorConfig.state\" must be either \"ENABLED\" or \"DISABLED\".');\n        }\n        if (typeof options.factorIds !== 'undefined') {\n            if (!validator.isArray(options.factorIds)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"MultiFactorConfig.factorIds\" must be an array of valid \"AuthFactorTypes\".');\n            }\n            // Validate content of array.\n            options.factorIds.forEach((factorId) => {\n                if (typeof AUTH_FACTOR_CLIENT_TO_SERVER_TYPE[factorId] === 'undefined') {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${factorId}\" is not a valid \"AuthFactorType\".`);\n                }\n            });\n        }\n        if (typeof options.providerConfigs !== 'undefined') {\n            if (!validator.isArray(options.providerConfigs)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"MultiFactorConfig.providerConfigs\" must be an array of valid \"MultiFactorProviderConfig.\"');\n            }\n            //Validate content of array.\n            options.providerConfigs.forEach((multiFactorProviderConfig) => {\n                if (typeof multiFactorProviderConfig === 'undefined' || !validator.isObject(multiFactorProviderConfig)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${multiFactorProviderConfig}\" is not a valid \"MultiFactorProviderConfig\" type.`);\n                }\n                const validProviderConfigKeys = {\n                    state: true,\n                    totpProviderConfig: true,\n                };\n                for (const key in multiFactorProviderConfig) {\n                    if (!(key in validProviderConfigKeys)) {\n                        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid ProviderConfig parameter.`);\n                    }\n                }\n                if (typeof multiFactorProviderConfig.state === 'undefined' ||\n                    (multiFactorProviderConfig.state !== 'ENABLED' &&\n                        multiFactorProviderConfig.state !== 'DISABLED')) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"MultiFactorConfig.providerConfigs.state\" must be either \"ENABLED\" or \"DISABLED\".');\n                }\n                // Since TOTP is the only provider config available right now, not defining it will lead into an error\n                if (typeof multiFactorProviderConfig.totpProviderConfig === 'undefined') {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"MultiFactorConfig.providerConfigs.totpProviderConfig\" must be defined.');\n                }\n                const validTotpProviderConfigKeys = {\n                    adjacentIntervals: true,\n                };\n                for (const key in multiFactorProviderConfig.totpProviderConfig) {\n                    if (!(key in validTotpProviderConfigKeys)) {\n                        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid TotpProviderConfig parameter.`);\n                    }\n                }\n                const adjIntervals = multiFactorProviderConfig.totpProviderConfig.adjacentIntervals;\n                if (typeof adjIntervals !== 'undefined' &&\n                    (!Number.isInteger(adjIntervals) || adjIntervals < 0 || adjIntervals > 10)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"MultiFactorConfig.providerConfigs.totpProviderConfig.adjacentIntervals\" must' +\n                        ' be a valid number between 0 and 10 (both inclusive).');\n                }\n            });\n        }\n    }\n    /**\n     * The MultiFactorAuthConfig constructor.\n     *\n     * @param response - The server side response used to initialize the\n     *     MultiFactorAuthConfig object.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        if (typeof response.state === 'undefined') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid multi-factor configuration response');\n        }\n        this.state = response.state;\n        this.factorIds = [];\n        (response.enabledProviders || []).forEach((enabledProvider) => {\n            // Ignore unsupported types. It is possible the current admin SDK version is\n            // not up to date and newer backend types are supported.\n            if (typeof AUTH_FACTOR_SERVER_TO_CLIENT_TYPE[enabledProvider] !== 'undefined') {\n                this.factorIds.push(AUTH_FACTOR_SERVER_TO_CLIENT_TYPE[enabledProvider]);\n            }\n        });\n        this.providerConfigs = [];\n        (response.providerConfigs || []).forEach((providerConfig) => {\n            if (typeof providerConfig !== 'undefined') {\n                if (typeof providerConfig.state === 'undefined' ||\n                    typeof providerConfig.totpProviderConfig === 'undefined' ||\n                    (typeof providerConfig.totpProviderConfig.adjacentIntervals !== 'undefined' &&\n                        typeof providerConfig.totpProviderConfig.adjacentIntervals !== 'number')) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid multi-factor configuration response');\n                }\n                this.providerConfigs.push(providerConfig);\n            }\n        });\n    }\n    /** Converts MultiFactorConfig to JSON object\n     * @returns The plain object representation of the multi-factor config instance. */\n    toJSON() {\n        return {\n            state: this.state,\n            factorIds: this.factorIds,\n            providerConfigs: this.providerConfigs,\n        };\n    }\n}\nexports.MultiFactorAuthConfig = MultiFactorAuthConfig;\n/**\n * Validates the provided map of test phone number / code pairs.\n * @param testPhoneNumbers - The phone number / code pairs to validate.\n */\nfunction validateTestPhoneNumbers(testPhoneNumbers) {\n    if (!validator.isObject(testPhoneNumbers)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"testPhoneNumbers\" must be a map of phone number / code pairs.');\n    }\n    if (Object.keys(testPhoneNumbers).length > exports.MAXIMUM_TEST_PHONE_NUMBERS) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_TEST_PHONE_NUMBER_EXCEEDED);\n    }\n    for (const phoneNumber in testPhoneNumbers) {\n        // Validate phone number.\n        if (!validator.isPhoneNumber(phoneNumber)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TESTING_PHONE_NUMBER, `\"${phoneNumber}\" is not a valid E.164 standard compliant phone number.`);\n        }\n        // Validate code.\n        if (!validator.isString(testPhoneNumbers[phoneNumber]) ||\n            !/^[\\d]{6}$/.test(testPhoneNumbers[phoneNumber])) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TESTING_PHONE_NUMBER, `\"${testPhoneNumbers[phoneNumber]}\" is not a valid 6 digit code string.`);\n        }\n    }\n}\nexports.validateTestPhoneNumbers = validateTestPhoneNumbers;\n/**\n * Defines the email sign-in config class used to convert client side EmailSignInConfig\n * to a format that is understood by the Auth server.\n *\n * @internal\n */\nclass EmailSignInConfig {\n    /**\n     * Static method to convert a client side request to a EmailSignInConfigServerRequest.\n     * Throws an error if validation fails.\n     *\n     * @param options - The options object to convert to a server request.\n     * @returns The resulting server request.\n     * @internal\n     */\n    static buildServerRequest(options) {\n        const request = {};\n        EmailSignInConfig.validate(options);\n        if (Object.prototype.hasOwnProperty.call(options, 'enabled')) {\n            request.allowPasswordSignup = options.enabled;\n        }\n        if (Object.prototype.hasOwnProperty.call(options, 'passwordRequired')) {\n            request.enableEmailLinkSignin = !options.passwordRequired;\n        }\n        return request;\n    }\n    /**\n     * Validates the EmailSignInConfig options object. Throws an error on failure.\n     *\n     * @param options - The options object to validate.\n     */\n    static validate(options) {\n        // TODO: Validate the request.\n        const validKeys = {\n            enabled: true,\n            passwordRequired: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"EmailSignInConfig\" must be a non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${key}\" is not a valid EmailSignInConfig parameter.`);\n            }\n        }\n        // Validate content.\n        if (typeof options.enabled !== 'undefined' &&\n            !validator.isBoolean(options.enabled)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"EmailSignInConfig.enabled\" must be a boolean.');\n        }\n        if (typeof options.passwordRequired !== 'undefined' &&\n            !validator.isBoolean(options.passwordRequired)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"EmailSignInConfig.passwordRequired\" must be a boolean.');\n        }\n    }\n    /**\n     * The EmailSignInConfig constructor.\n     *\n     * @param response - The server side response used to initialize the\n     *     EmailSignInConfig object.\n     * @constructor\n     */\n    constructor(response) {\n        if (typeof response.allowPasswordSignup === 'undefined') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid email sign-in configuration response');\n        }\n        this.enabled = response.allowPasswordSignup;\n        this.passwordRequired = !response.enableEmailLinkSignin;\n    }\n    /** @returns The plain object representation of the email sign-in config. */\n    toJSON() {\n        return {\n            enabled: this.enabled,\n            passwordRequired: this.passwordRequired,\n        };\n    }\n}\nexports.EmailSignInConfig = EmailSignInConfig;\n/**\n * Defines the SAMLConfig class used to convert a client side configuration to its\n * server side representation.\n *\n * @internal\n */\nclass SAMLConfig {\n    /**\n     * Converts a client side request to a SAMLConfigServerRequest which is the format\n     * accepted by the backend server.\n     * Throws an error if validation fails. If the request is not a SAMLConfig request,\n     * returns null.\n     *\n     * @param options - The options object to convert to a server request.\n     * @param ignoreMissingFields - Whether to ignore missing fields.\n     * @returns The resulting server request or null if not valid.\n     */\n    static buildServerRequest(options, ignoreMissingFields = false) {\n        const makeRequest = validator.isNonNullObject(options) &&\n            (options.providerId || ignoreMissingFields);\n        if (!makeRequest) {\n            return null;\n        }\n        const request = {};\n        // Validate options.\n        SAMLConfig.validate(options, ignoreMissingFields);\n        request.enabled = options.enabled;\n        request.displayName = options.displayName;\n        // IdP config.\n        if (options.idpEntityId || options.ssoURL || options.x509Certificates) {\n            request.idpConfig = {\n                idpEntityId: options.idpEntityId,\n                ssoUrl: options.ssoURL,\n                signRequest: options.enableRequestSigning,\n                idpCertificates: typeof options.x509Certificates === 'undefined' ? undefined : [],\n            };\n            if (options.x509Certificates) {\n                for (const cert of (options.x509Certificates || [])) {\n                    request.idpConfig.idpCertificates.push({ x509Certificate: cert });\n                }\n            }\n        }\n        // RP config.\n        if (options.callbackURL || options.rpEntityId) {\n            request.spConfig = {\n                spEntityId: options.rpEntityId,\n                callbackUri: options.callbackURL,\n            };\n        }\n        return request;\n    }\n    /**\n     * Returns the provider ID corresponding to the resource name if available.\n     *\n     * @param resourceName - The server side resource name.\n     * @returns The provider ID corresponding to the resource, null otherwise.\n     */\n    static getProviderIdFromResourceName(resourceName) {\n        // name is of form projects/project1/inboundSamlConfigs/providerId1\n        const matchProviderRes = resourceName.match(/\\/inboundSamlConfigs\\/(saml\\..*)$/);\n        if (!matchProviderRes || matchProviderRes.length < 2) {\n            return null;\n        }\n        return matchProviderRes[1];\n    }\n    /**\n     * @param providerId - The provider ID to check.\n     * @returns Whether the provider ID corresponds to a SAML provider.\n     */\n    static isProviderId(providerId) {\n        return validator.isNonEmptyString(providerId) && providerId.indexOf('saml.') === 0;\n    }\n    /**\n     * Validates the SAMLConfig options object. Throws an error on failure.\n     *\n     * @param options - The options object to validate.\n     * @param ignoreMissingFields - Whether to ignore missing fields.\n     */\n    static validate(options, ignoreMissingFields = false) {\n        const validKeys = {\n            enabled: true,\n            displayName: true,\n            providerId: true,\n            idpEntityId: true,\n            ssoURL: true,\n            x509Certificates: true,\n            rpEntityId: true,\n            callbackURL: true,\n            enableRequestSigning: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig\" must be a valid non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid SAML config parameter.`);\n            }\n        }\n        // Required fields.\n        if (validator.isNonEmptyString(options.providerId)) {\n            if (options.providerId.indexOf('saml.') !== 0) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"SAMLAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"saml.\".');\n            }\n        }\n        else if (!ignoreMissingFields) {\n            // providerId is required and not provided correctly.\n            throw new error_1.FirebaseAuthError(!options.providerId ? error_1.AuthClientErrorCode.MISSING_PROVIDER_ID : error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"SAMLAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"saml.\".');\n        }\n        if (!(ignoreMissingFields && typeof options.idpEntityId === 'undefined') &&\n            !validator.isNonEmptyString(options.idpEntityId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.idpEntityId\" must be a valid non-empty string.');\n        }\n        if (!(ignoreMissingFields && typeof options.ssoURL === 'undefined') &&\n            !validator.isURL(options.ssoURL)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.ssoURL\" must be a valid URL string.');\n        }\n        if (!(ignoreMissingFields && typeof options.rpEntityId === 'undefined') &&\n            !validator.isNonEmptyString(options.rpEntityId)) {\n            throw new error_1.FirebaseAuthError(!options.rpEntityId ? error_1.AuthClientErrorCode.MISSING_SAML_RELYING_PARTY_CONFIG :\n                error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.rpEntityId\" must be a valid non-empty string.');\n        }\n        if (!(ignoreMissingFields && typeof options.callbackURL === 'undefined') &&\n            !validator.isURL(options.callbackURL)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.callbackURL\" must be a valid URL string.');\n        }\n        if (!(ignoreMissingFields && typeof options.x509Certificates === 'undefined') &&\n            !validator.isArray(options.x509Certificates)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.x509Certificates\" must be a valid array of X509 certificate strings.');\n        }\n        (options.x509Certificates || []).forEach((cert) => {\n            if (!validator.isNonEmptyString(cert)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.x509Certificates\" must be a valid array of X509 certificate strings.');\n            }\n        });\n        if (typeof options.enableRequestSigning !== 'undefined' &&\n            !validator.isBoolean(options.enableRequestSigning)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.enableRequestSigning\" must be a boolean.');\n        }\n        if (typeof options.enabled !== 'undefined' &&\n            !validator.isBoolean(options.enabled)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.enabled\" must be a boolean.');\n        }\n        if (typeof options.displayName !== 'undefined' &&\n            !validator.isString(options.displayName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SAMLAuthProviderConfig.displayName\" must be a valid string.');\n        }\n    }\n    /**\n     * The SAMLConfig constructor.\n     *\n     * @param response - The server side response used to initialize the SAMLConfig object.\n     * @constructor\n     */\n    constructor(response) {\n        if (!response ||\n            !response.idpConfig ||\n            !response.idpConfig.idpEntityId ||\n            !response.idpConfig.ssoUrl ||\n            !response.spConfig ||\n            !response.spConfig.spEntityId ||\n            !response.name ||\n            !(validator.isString(response.name) &&\n                SAMLConfig.getProviderIdFromResourceName(response.name))) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid SAML configuration response');\n        }\n        const providerId = SAMLConfig.getProviderIdFromResourceName(response.name);\n        if (!providerId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid SAML configuration response');\n        }\n        this.providerId = providerId;\n        // RP config.\n        this.rpEntityId = response.spConfig.spEntityId;\n        this.callbackURL = response.spConfig.callbackUri;\n        // IdP config.\n        this.idpEntityId = response.idpConfig.idpEntityId;\n        this.ssoURL = response.idpConfig.ssoUrl;\n        this.enableRequestSigning = !!response.idpConfig.signRequest;\n        const x509Certificates = [];\n        for (const cert of (response.idpConfig.idpCertificates || [])) {\n            if (cert.x509Certificate) {\n                x509Certificates.push(cert.x509Certificate);\n            }\n        }\n        this.x509Certificates = x509Certificates;\n        // When enabled is undefined, it takes its default value of false.\n        this.enabled = !!response.enabled;\n        this.displayName = response.displayName;\n    }\n    /** @returns The plain object representation of the SAMLConfig. */\n    toJSON() {\n        return {\n            enabled: this.enabled,\n            displayName: this.displayName,\n            providerId: this.providerId,\n            idpEntityId: this.idpEntityId,\n            ssoURL: this.ssoURL,\n            x509Certificates: (0, deep_copy_1.deepCopy)(this.x509Certificates),\n            rpEntityId: this.rpEntityId,\n            callbackURL: this.callbackURL,\n            enableRequestSigning: this.enableRequestSigning,\n        };\n    }\n}\nexports.SAMLConfig = SAMLConfig;\n/**\n * Defines the OIDCConfig class used to convert a client side configuration to its\n * server side representation.\n *\n * @internal\n */\nclass OIDCConfig {\n    /**\n     * Converts a client side request to a OIDCConfigServerRequest which is the format\n     * accepted by the backend server.\n     * Throws an error if validation fails. If the request is not a OIDCConfig request,\n     * returns null.\n     *\n     * @param options - The options object to convert to a server request.\n     * @param ignoreMissingFields - Whether to ignore missing fields.\n     * @returns The resulting server request or null if not valid.\n     */\n    static buildServerRequest(options, ignoreMissingFields = false) {\n        const makeRequest = validator.isNonNullObject(options) &&\n            (options.providerId || ignoreMissingFields);\n        if (!makeRequest) {\n            return null;\n        }\n        const request = {};\n        // Validate options.\n        OIDCConfig.validate(options, ignoreMissingFields);\n        request.enabled = options.enabled;\n        request.displayName = options.displayName;\n        request.issuer = options.issuer;\n        request.clientId = options.clientId;\n        if (typeof options.clientSecret !== 'undefined') {\n            request.clientSecret = options.clientSecret;\n        }\n        if (typeof options.responseType !== 'undefined') {\n            request.responseType = options.responseType;\n        }\n        return request;\n    }\n    /**\n     * Returns the provider ID corresponding to the resource name if available.\n     *\n     * @param resourceName - The server side resource name\n     * @returns The provider ID corresponding to the resource, null otherwise.\n     */\n    static getProviderIdFromResourceName(resourceName) {\n        // name is of form projects/project1/oauthIdpConfigs/providerId1\n        const matchProviderRes = resourceName.match(/\\/oauthIdpConfigs\\/(oidc\\..*)$/);\n        if (!matchProviderRes || matchProviderRes.length < 2) {\n            return null;\n        }\n        return matchProviderRes[1];\n    }\n    /**\n     * @param providerId - The provider ID to check.\n     * @returns Whether the provider ID corresponds to an OIDC provider.\n     */\n    static isProviderId(providerId) {\n        return validator.isNonEmptyString(providerId) && providerId.indexOf('oidc.') === 0;\n    }\n    /**\n     * Validates the OIDCConfig options object. Throws an error on failure.\n     *\n     * @param options - The options object to validate.\n     * @param ignoreMissingFields - Whether to ignore missing fields.\n     */\n    static validate(options, ignoreMissingFields = false) {\n        const validKeys = {\n            enabled: true,\n            displayName: true,\n            providerId: true,\n            clientId: true,\n            issuer: true,\n            clientSecret: true,\n            responseType: true,\n        };\n        const validResponseTypes = {\n            idToken: true,\n            code: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig\" must be a valid non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid OIDC config parameter.`);\n            }\n        }\n        // Required fields.\n        if (validator.isNonEmptyString(options.providerId)) {\n            if (options.providerId.indexOf('oidc.') !== 0) {\n                throw new error_1.FirebaseAuthError(!options.providerId ? error_1.AuthClientErrorCode.MISSING_PROVIDER_ID : error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"OIDCAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"oidc.\".');\n            }\n        }\n        else if (!ignoreMissingFields) {\n            throw new error_1.FirebaseAuthError(!options.providerId ? error_1.AuthClientErrorCode.MISSING_PROVIDER_ID : error_1.AuthClientErrorCode.INVALID_PROVIDER_ID, '\"OIDCAuthProviderConfig.providerId\" must be a valid non-empty string prefixed with \"oidc.\".');\n        }\n        if (!(ignoreMissingFields && typeof options.clientId === 'undefined') &&\n            !validator.isNonEmptyString(options.clientId)) {\n            throw new error_1.FirebaseAuthError(!options.clientId ? error_1.AuthClientErrorCode.MISSING_OAUTH_CLIENT_ID : error_1.AuthClientErrorCode.INVALID_OAUTH_CLIENT_ID, '\"OIDCAuthProviderConfig.clientId\" must be a valid non-empty string.');\n        }\n        if (!(ignoreMissingFields && typeof options.issuer === 'undefined') &&\n            !validator.isURL(options.issuer)) {\n            throw new error_1.FirebaseAuthError(!options.issuer ? error_1.AuthClientErrorCode.MISSING_ISSUER : error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.issuer\" must be a valid URL string.');\n        }\n        if (typeof options.enabled !== 'undefined' &&\n            !validator.isBoolean(options.enabled)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.enabled\" must be a boolean.');\n        }\n        if (typeof options.displayName !== 'undefined' &&\n            !validator.isString(options.displayName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.displayName\" must be a valid string.');\n        }\n        if (typeof options.clientSecret !== 'undefined' &&\n            !validator.isNonEmptyString(options.clientSecret)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"OIDCAuthProviderConfig.clientSecret\" must be a valid string.');\n        }\n        if (validator.isNonNullObject(options.responseType) && typeof options.responseType !== 'undefined') {\n            Object.keys(options.responseType).forEach((key) => {\n                if (!(key in validResponseTypes)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid OAuthResponseType parameter.`);\n                }\n            });\n            const idToken = options.responseType.idToken;\n            if (typeof idToken !== 'undefined' && !validator.isBoolean(idToken)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"OIDCAuthProviderConfig.responseType.idToken\" must be a boolean.');\n            }\n            const code = options.responseType.code;\n            if (typeof code !== 'undefined') {\n                if (!validator.isBoolean(code)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"OIDCAuthProviderConfig.responseType.code\" must be a boolean.');\n                }\n                // If code flow is enabled, client secret must be provided.\n                if (code && typeof options.clientSecret === 'undefined') {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISSING_OAUTH_CLIENT_SECRET, 'The OAuth configuration client secret is required to enable OIDC code flow.');\n                }\n            }\n            const allKeys = Object.keys(options.responseType).length;\n            const enabledCount = Object.values(options.responseType).filter(Boolean).length;\n            // Only one of OAuth response types can be set to true.\n            if (allKeys > 1 && enabledCount !== 1) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_OAUTH_RESPONSETYPE, 'Only exactly one OAuth responseType should be set to true.');\n            }\n        }\n    }\n    /**\n     * The OIDCConfig constructor.\n     *\n     * @param response - The server side response used to initialize the OIDCConfig object.\n     * @constructor\n     */\n    constructor(response) {\n        if (!response ||\n            !response.issuer ||\n            !response.clientId ||\n            !response.name ||\n            !(validator.isString(response.name) &&\n                OIDCConfig.getProviderIdFromResourceName(response.name))) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid OIDC configuration response');\n        }\n        const providerId = OIDCConfig.getProviderIdFromResourceName(response.name);\n        if (!providerId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid SAML configuration response');\n        }\n        this.providerId = providerId;\n        this.clientId = response.clientId;\n        this.issuer = response.issuer;\n        // When enabled is undefined, it takes its default value of false.\n        this.enabled = !!response.enabled;\n        this.displayName = response.displayName;\n        if (typeof response.clientSecret !== 'undefined') {\n            this.clientSecret = response.clientSecret;\n        }\n        if (typeof response.responseType !== 'undefined') {\n            this.responseType = response.responseType;\n        }\n    }\n    /** @returns The plain object representation of the OIDCConfig. */\n    toJSON() {\n        return {\n            enabled: this.enabled,\n            displayName: this.displayName,\n            providerId: this.providerId,\n            issuer: this.issuer,\n            clientId: this.clientId,\n            clientSecret: (0, deep_copy_1.deepCopy)(this.clientSecret),\n            responseType: (0, deep_copy_1.deepCopy)(this.responseType),\n        };\n    }\n}\nexports.OIDCConfig = OIDCConfig;\n/**\n * Defines the SMSRegionConfig class used for validation.\n *\n * @internal\n */\nclass SmsRegionsAuthConfig {\n    static validate(options) {\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SmsRegionConfig\" must be a non-null object.');\n        }\n        const validKeys = {\n            allowlistOnly: true,\n            allowByDefault: true,\n        };\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid SmsRegionConfig parameter.`);\n            }\n        }\n        // validate mutual exclusiveness of allowByDefault and allowlistOnly\n        if (typeof options.allowByDefault !== 'undefined' && typeof options.allowlistOnly !== 'undefined') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, 'SmsRegionConfig cannot have both \"allowByDefault\" and \"allowlistOnly\" parameters.');\n        }\n        // validation for allowByDefault type\n        if (typeof options.allowByDefault !== 'undefined') {\n            const allowByDefaultValidKeys = {\n                disallowedRegions: true,\n            };\n            for (const key in options.allowByDefault) {\n                if (!(key in allowByDefaultValidKeys)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid SmsRegionConfig.allowByDefault parameter.`);\n                }\n            }\n            // disallowedRegion can be empty.\n            if (typeof options.allowByDefault.disallowedRegions !== 'undefined'\n                && !validator.isArray(options.allowByDefault.disallowedRegions)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SmsRegionConfig.allowByDefault.disallowedRegions\" must be a valid string array.');\n            }\n        }\n        if (typeof options.allowlistOnly !== 'undefined') {\n            const allowListOnlyValidKeys = {\n                allowedRegions: true,\n            };\n            for (const key in options.allowlistOnly) {\n                if (!(key in allowListOnlyValidKeys)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid SmsRegionConfig.allowlistOnly parameter.`);\n                }\n            }\n            // allowedRegions can be empty\n            if (typeof options.allowlistOnly.allowedRegions !== 'undefined'\n                && !validator.isArray(options.allowlistOnly.allowedRegions)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"SmsRegionConfig.allowlistOnly.allowedRegions\" must be a valid string array.');\n            }\n        }\n    }\n}\nexports.SmsRegionsAuthConfig = SmsRegionsAuthConfig;\n/**\n * Defines the recaptcha config class used to convert client side RecaptchaConfig\n * to a format that is understood by the Auth server.\n *\n * @internal\n */\nclass RecaptchaAuthConfig {\n    /**\n     * The RecaptchaAuthConfig constructor.\n     *\n     * @param response - The server side response used to initialize the\n     *     RecaptchaAuthConfig object.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        const filteredResponse = Object.fromEntries(Object.entries(response).filter(([, value]) => value !== undefined));\n        // Explicitly map the 'tollFraudManagedRules' to 'smsTollFraudManagedRules'\n        if (filteredResponse.tollFraudManagedRules !== undefined) {\n            this.smsTollFraudManagedRules = filteredResponse.tollFraudManagedRules;\n            delete filteredResponse.tollFraudManagedRules; // Remove it if necessary\n        }\n        // Assign the remaining properties directly\n        Object.assign(this, filteredResponse);\n    }\n    /**\n     * Builds a server request object from the client-side RecaptchaConfig.\n     * Converts client-side fields to their server-side equivalents.\n     *\n     * @param options - The client-side RecaptchaConfig object.\n     * @returns The server-side RecaptchaAuthServerConfig object.\n     */\n    static buildServerRequest(options) {\n        RecaptchaAuthConfig.validate(options); // Validate options before building request\n        const request = {};\n        if (typeof options.emailPasswordEnforcementState !== 'undefined') {\n            request.emailPasswordEnforcementState = options.emailPasswordEnforcementState;\n        }\n        if (typeof options.phoneEnforcementState !== 'undefined') {\n            request.phoneEnforcementState = options.phoneEnforcementState;\n        }\n        if (typeof options.managedRules !== 'undefined') {\n            request.managedRules = options.managedRules;\n        }\n        if (typeof options.recaptchaKeys !== 'undefined') {\n            request.recaptchaKeys = options.recaptchaKeys;\n        }\n        if (typeof options.useAccountDefender !== 'undefined') {\n            request.useAccountDefender = options.useAccountDefender;\n        }\n        if (typeof options.useSmsBotScore !== 'undefined') {\n            request.useSmsBotScore = options.useSmsBotScore;\n        }\n        if (typeof options.useSmsTollFraudProtection !== 'undefined') {\n            request.useSmsTollFraudProtection = options.useSmsTollFraudProtection;\n        }\n        if (typeof options.smsTollFraudManagedRules !== 'undefined') {\n            request.tollFraudManagedRules = options.smsTollFraudManagedRules; // Map client-side field to server-side\n        }\n        return request;\n    }\n    /**\n     * Validates the RecaptchaConfig options object. Throws an error on failure.\n     * @param options - The options object to validate.\n     */\n    static validate(options) {\n        const validKeys = {\n            emailPasswordEnforcementState: true,\n            phoneEnforcementState: true,\n            managedRules: true,\n            recaptchaKeys: true,\n            useAccountDefender: true,\n            useSmsBotScore: true,\n            useSmsTollFraudProtection: true,\n            smsTollFraudManagedRules: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaConfig\" must be a non-null object.');\n        }\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid RecaptchaConfig parameter.`);\n            }\n        }\n        // Validation\n        if (typeof options.emailPasswordEnforcementState !== 'undefined') {\n            if (!validator.isNonEmptyString(options.emailPasswordEnforcementState)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"RecaptchaConfig.emailPasswordEnforcementState\" must be a valid non-empty string.');\n            }\n            if (options.emailPasswordEnforcementState !== 'OFF' &&\n                options.emailPasswordEnforcementState !== 'AUDIT' &&\n                options.emailPasswordEnforcementState !== 'ENFORCE') {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaConfig.emailPasswordEnforcementState\" must be either \"OFF\", \"AUDIT\" or \"ENFORCE\".');\n            }\n        }\n        if (typeof options.phoneEnforcementState !== 'undefined') {\n            if (!validator.isNonEmptyString(options.phoneEnforcementState)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"RecaptchaConfig.phoneEnforcementState\" must be a valid non-empty string.');\n            }\n            if (options.phoneEnforcementState !== 'OFF' &&\n                options.phoneEnforcementState !== 'AUDIT' &&\n                options.phoneEnforcementState !== 'ENFORCE') {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaConfig.phoneEnforcementState\" must be either \"OFF\", \"AUDIT\" or \"ENFORCE\".');\n            }\n        }\n        if (typeof options.managedRules !== 'undefined') {\n            // Validate array\n            if (!validator.isArray(options.managedRules)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaConfig.managedRules\" must be an array of valid \"RecaptchaManagedRule\".');\n            }\n            // Validate each rule of the array\n            options.managedRules.forEach((managedRule) => {\n                RecaptchaAuthConfig.validateManagedRule(managedRule);\n            });\n        }\n        if (typeof options.useAccountDefender !== 'undefined') {\n            if (!validator.isBoolean(options.useAccountDefender)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaConfig.useAccountDefender\" must be a boolean value\".');\n            }\n        }\n        if (typeof options.useSmsBotScore !== 'undefined') {\n            if (!validator.isBoolean(options.useSmsBotScore)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaConfig.useSmsBotScore\" must be a boolean value\".');\n            }\n        }\n        if (typeof options.useSmsTollFraudProtection !== 'undefined') {\n            if (!validator.isBoolean(options.useSmsTollFraudProtection)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaConfig.useSmsTollFraudProtection\" must be a boolean value\".');\n            }\n        }\n        if (typeof options.smsTollFraudManagedRules !== 'undefined') {\n            // Validate array\n            if (!validator.isArray(options.smsTollFraudManagedRules)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaConfig.smsTollFraudManagedRules\" must be an array of valid \"RecaptchaTollFraudManagedRule\".');\n            }\n            // Validate each rule of the array\n            options.smsTollFraudManagedRules.forEach((tollFraudManagedRule) => {\n                RecaptchaAuthConfig.validateTollFraudManagedRule(tollFraudManagedRule);\n            });\n        }\n    }\n    /**\n     * Validate each element in ManagedRule array\n     * @param options - The options object to validate.\n     */\n    static validateManagedRule(options) {\n        const validKeys = {\n            endScore: true,\n            action: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaManagedRule\" must be a non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid RecaptchaManagedRule parameter.`);\n            }\n        }\n        // Validate content.\n        if (typeof options.action !== 'undefined' &&\n            options.action !== 'BLOCK') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaManagedRule.action\" must be \"BLOCK\".');\n        }\n    }\n    /**\n     * Validate each element in TollFraudManagedRule array\n     * @param options - The options object to validate.\n     */\n    static validateTollFraudManagedRule(options) {\n        const validKeys = {\n            startScore: true,\n            action: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaTollFraudManagedRule\" must be a non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid RecaptchaTollFraudManagedRule parameter.`);\n            }\n        }\n        // Validate content.\n        if (typeof options.action !== 'undefined' &&\n            options.action !== 'BLOCK') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"RecaptchaTollFraudManagedRule.action\" must be \"BLOCK\".');\n        }\n    }\n}\nexports.RecaptchaAuthConfig = RecaptchaAuthConfig;\n/**\n * Defines the password policy config class used to convert client side PasswordPolicyConfig\n * to a format that is understood by the Auth server.\n *\n * @internal\n */\nclass PasswordPolicyAuthConfig {\n    /**\n     * Static method to convert a client side request to a PasswordPolicyAuthServerConfig.\n     * Throws an error if validation fails.\n     *\n     * @param options - The options object to convert to a server request.\n     * @returns The resulting server request.\n     * @internal\n     */\n    static buildServerRequest(options) {\n        const request = {};\n        PasswordPolicyAuthConfig.validate(options);\n        if (Object.prototype.hasOwnProperty.call(options, 'enforcementState')) {\n            request.passwordPolicyEnforcementState = options.enforcementState;\n        }\n        request.forceUpgradeOnSignin = false;\n        if (Object.prototype.hasOwnProperty.call(options, 'forceUpgradeOnSignin')) {\n            request.forceUpgradeOnSignin = options.forceUpgradeOnSignin;\n        }\n        const constraintsRequest = {\n            containsUppercaseCharacter: false,\n            containsLowercaseCharacter: false,\n            containsNonAlphanumericCharacter: false,\n            containsNumericCharacter: false,\n            minPasswordLength: 6,\n            maxPasswordLength: 4096,\n        };\n        request.passwordPolicyVersions = [];\n        if (Object.prototype.hasOwnProperty.call(options, 'constraints')) {\n            if (options) {\n                if (options.constraints?.requireUppercase !== undefined) {\n                    constraintsRequest.containsUppercaseCharacter = options.constraints.requireUppercase;\n                }\n                if (options.constraints?.requireLowercase !== undefined) {\n                    constraintsRequest.containsLowercaseCharacter = options.constraints.requireLowercase;\n                }\n                if (options.constraints?.requireNonAlphanumeric !== undefined) {\n                    constraintsRequest.containsNonAlphanumericCharacter = options.constraints.requireNonAlphanumeric;\n                }\n                if (options.constraints?.requireNumeric !== undefined) {\n                    constraintsRequest.containsNumericCharacter = options.constraints.requireNumeric;\n                }\n                if (options.constraints?.minLength !== undefined) {\n                    constraintsRequest.minPasswordLength = options.constraints.minLength;\n                }\n                if (options.constraints?.maxLength !== undefined) {\n                    constraintsRequest.maxPasswordLength = options.constraints.maxLength;\n                }\n            }\n        }\n        request.passwordPolicyVersions.push({ customStrengthOptions: constraintsRequest });\n        return request;\n    }\n    /**\n     * Validates the PasswordPolicyConfig options object. Throws an error on failure.\n     *\n     * @param options - The options object to validate.\n     * @internal\n     */\n    static validate(options) {\n        const validKeys = {\n            enforcementState: true,\n            forceUpgradeOnSignin: true,\n            constraints: true,\n        };\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig\" must be a non-null object.');\n        }\n        // Check for unsupported top level attributes.\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid PasswordPolicyConfig parameter.`);\n            }\n        }\n        // Validate content.\n        if (typeof options.enforcementState === 'undefined' ||\n            !(options.enforcementState === 'ENFORCE' ||\n                options.enforcementState === 'OFF')) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.enforcementState\" must be either \"ENFORCE\" or \"OFF\".');\n        }\n        if (typeof options.forceUpgradeOnSignin !== 'undefined') {\n            if (!validator.isBoolean(options.forceUpgradeOnSignin)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.forceUpgradeOnSignin\" must be a boolean.');\n            }\n        }\n        if (typeof options.constraints !== 'undefined') {\n            if (options.enforcementState === 'ENFORCE' && !validator.isNonNullObject(options.constraints)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints\" must be a non-empty object.');\n            }\n            const validCharKeys = {\n                requireUppercase: true,\n                requireLowercase: true,\n                requireNumeric: true,\n                requireNonAlphanumeric: true,\n                minLength: true,\n                maxLength: true,\n            };\n            // Check for unsupported  attributes.\n            for (const key in options.constraints) {\n                if (!(key in validCharKeys)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid PasswordPolicyConfig.constraints parameter.`);\n                }\n            }\n            if (typeof options.constraints.requireUppercase !== 'undefined' &&\n                !validator.isBoolean(options.constraints.requireUppercase)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints.requireUppercase\" must be a boolean.');\n            }\n            if (typeof options.constraints.requireLowercase !== 'undefined' &&\n                !validator.isBoolean(options.constraints.requireLowercase)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints.requireLowercase\" must be a boolean.');\n            }\n            if (typeof options.constraints.requireNonAlphanumeric !== 'undefined' &&\n                !validator.isBoolean(options.constraints.requireNonAlphanumeric)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints.requireNonAlphanumeric\"' +\n                    ' must be a boolean.');\n            }\n            if (typeof options.constraints.requireNumeric !== 'undefined' &&\n                !validator.isBoolean(options.constraints.requireNumeric)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints.requireNumeric\" must be a boolean.');\n            }\n            if (typeof options.constraints.minLength === 'undefined') {\n                options.constraints.minLength = 6;\n            }\n            else if (!validator.isNumber(options.constraints.minLength)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints.minLength\" must be a number.');\n            }\n            else {\n                if (!(options.constraints.minLength >= 6\n                    && options.constraints.minLength <= 30)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints.minLength\"' +\n                        ' must be an integer between 6 and 30, inclusive.');\n                }\n            }\n            if (typeof options.constraints.maxLength === 'undefined') {\n                options.constraints.maxLength = 4096;\n            }\n            else if (!validator.isNumber(options.constraints.maxLength)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints.maxLength\" must be a number.');\n            }\n            else {\n                if (!(options.constraints.maxLength >= options.constraints.minLength &&\n                    options.constraints.maxLength <= 4096)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints.maxLength\"' +\n                        ' must be greater than or equal to minLength and at max 4096.');\n                }\n            }\n        }\n        else {\n            if (options.enforcementState === 'ENFORCE') {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"PasswordPolicyConfig.constraints\" must be defined.');\n            }\n        }\n    }\n    /**\n     * The PasswordPolicyAuthConfig constructor.\n     *\n     * @param response - The server side response used to initialize the\n     *     PasswordPolicyAuthConfig object.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        if (typeof response.passwordPolicyEnforcementState === 'undefined') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid password policy configuration response');\n        }\n        this.enforcementState = response.passwordPolicyEnforcementState;\n        let constraintsResponse = {};\n        if (typeof response.passwordPolicyVersions !== 'undefined') {\n            (response.passwordPolicyVersions || []).forEach((policyVersion) => {\n                constraintsResponse = {\n                    requireLowercase: policyVersion.customStrengthOptions?.containsLowercaseCharacter,\n                    requireUppercase: policyVersion.customStrengthOptions?.containsUppercaseCharacter,\n                    requireNonAlphanumeric: policyVersion.customStrengthOptions?.containsNonAlphanumericCharacter,\n                    requireNumeric: policyVersion.customStrengthOptions?.containsNumericCharacter,\n                    minLength: policyVersion.customStrengthOptions?.minPasswordLength,\n                    maxLength: policyVersion.customStrengthOptions?.maxPasswordLength,\n                };\n            });\n        }\n        this.constraints = constraintsResponse;\n        this.forceUpgradeOnSignin = response.forceUpgradeOnSignin ? true : false;\n    }\n}\nexports.PasswordPolicyAuthConfig = PasswordPolicyAuthConfig;\n/**\n * Defines the EmailPrivacyAuthConfig class used for validation.\n *\n * @internal\n */\nclass EmailPrivacyAuthConfig {\n    static validate(options) {\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"EmailPrivacyConfig\" must be a non-null object.');\n        }\n        const validKeys = {\n            enableImprovedEmailPrivacy: true,\n        };\n        for (const key in options) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, `\"${key}\" is not a valid \"EmailPrivacyConfig\" parameter.`);\n            }\n        }\n        if (typeof options.enableImprovedEmailPrivacy !== 'undefined'\n            && !validator.isBoolean(options.enableImprovedEmailPrivacy)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, '\"EmailPrivacyConfig.enableImprovedEmailPrivacy\" must be a valid boolean value.');\n        }\n    }\n}\nexports.EmailPrivacyAuthConfig = EmailPrivacyAuthConfig;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5123, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/tenant.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tenant = void 0;\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst auth_config_1 = require(\"./auth-config\");\n/**\n * Represents a tenant configuration.\n *\n * Multi-tenancy support requires Google Cloud's Identity Platform\n * (GCIP). To learn more about GCIP, including pricing and features,\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n *\n * Before multi-tenancy can be used on a Google Cloud Identity Platform project,\n * tenants must be allowed on that project via the Cloud Console UI.\n *\n * A tenant configuration provides information such as the display name, tenant\n * identifier and email authentication configuration.\n * For OIDC/SAML provider configuration management, `TenantAwareAuth` instances should\n * be used instead of a `Tenant` to retrieve the list of configured IdPs on a tenant.\n * When configuring these providers, note that tenants will inherit\n * whitelisted domains and authenticated redirect URIs of their parent project.\n *\n * All other settings of a tenant will also be inherited. These will need to be managed\n * from the Cloud Console UI.\n */\nclass Tenant {\n    /**\n     * Builds the corresponding server request for a TenantOptions object.\n     *\n     * @param tenantOptions - The properties to convert to a server request.\n     * @param createRequest - Whether this is a create request.\n     * @returns The equivalent server request.\n     *\n     * @internal\n     */\n    static buildServerRequest(tenantOptions, createRequest) {\n        Tenant.validate(tenantOptions, createRequest);\n        let request = {};\n        if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n            request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n        }\n        if (typeof tenantOptions.displayName !== 'undefined') {\n            request.displayName = tenantOptions.displayName;\n        }\n        if (typeof tenantOptions.anonymousSignInEnabled !== 'undefined') {\n            request.enableAnonymousUser = tenantOptions.anonymousSignInEnabled;\n        }\n        if (typeof tenantOptions.multiFactorConfig !== 'undefined') {\n            request.mfaConfig = auth_config_1.MultiFactorAuthConfig.buildServerRequest(tenantOptions.multiFactorConfig);\n        }\n        if (typeof tenantOptions.testPhoneNumbers !== 'undefined') {\n            // null will clear existing test phone numbers. Translate to empty object.\n            request.testPhoneNumbers = tenantOptions.testPhoneNumbers ?? {};\n        }\n        if (typeof tenantOptions.smsRegionConfig !== 'undefined') {\n            request.smsRegionConfig = tenantOptions.smsRegionConfig;\n        }\n        if (typeof tenantOptions.recaptchaConfig !== 'undefined') {\n            request.recaptchaConfig = auth_config_1.RecaptchaAuthConfig.buildServerRequest(tenantOptions.recaptchaConfig);\n        }\n        if (typeof tenantOptions.passwordPolicyConfig !== 'undefined') {\n            request.passwordPolicyConfig = auth_config_1.PasswordPolicyAuthConfig.buildServerRequest(tenantOptions.passwordPolicyConfig);\n        }\n        if (typeof tenantOptions.emailPrivacyConfig !== 'undefined') {\n            request.emailPrivacyConfig = tenantOptions.emailPrivacyConfig;\n        }\n        return request;\n    }\n    /**\n     * Returns the tenant ID corresponding to the resource name if available.\n     *\n     * @param resourceName - The server side resource name\n     * @returns The tenant ID corresponding to the resource, null otherwise.\n     *\n     * @internal\n     */\n    static getTenantIdFromResourceName(resourceName) {\n        // name is of form projects/project1/tenants/tenant1\n        const matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n        if (!matchTenantRes || matchTenantRes.length < 2) {\n            return null;\n        }\n        return matchTenantRes[1];\n    }\n    /**\n     * Validates a tenant options object. Throws an error on failure.\n     *\n     * @param request - The tenant options object to validate.\n     * @param createRequest - Whether this is a create request.\n     */\n    static validate(request, createRequest) {\n        const validKeys = {\n            displayName: true,\n            emailSignInConfig: true,\n            anonymousSignInEnabled: true,\n            multiFactorConfig: true,\n            testPhoneNumbers: true,\n            smsRegionConfig: true,\n            recaptchaConfig: true,\n            passwordPolicyConfig: true,\n            emailPrivacyConfig: true,\n        };\n        const label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n        if (!validator.isNonNullObject(request)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}\" must be a valid non-null object.`);\n        }\n        // Check for unsupported top level attributes.\n        for (const key in request) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${key}\" is not a valid ${label} parameter.`);\n            }\n        }\n        // Validate displayName type if provided.\n        if (typeof request.displayName !== 'undefined' &&\n            !validator.isNonEmptyString(request.displayName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.displayName\" must be a valid non-empty string.`);\n        }\n        // Validate emailSignInConfig type if provided.\n        if (typeof request.emailSignInConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n        }\n        // Validate test phone numbers if provided.\n        if (typeof request.testPhoneNumbers !== 'undefined' &&\n            request.testPhoneNumbers !== null) {\n            (0, auth_config_1.validateTestPhoneNumbers)(request.testPhoneNumbers);\n        }\n        else if (request.testPhoneNumbers === null && createRequest) {\n            // null allowed only for update operations.\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.testPhoneNumbers\" must be a non-null object.`);\n        }\n        // Validate multiFactorConfig type if provided.\n        if (typeof request.multiFactorConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.MultiFactorAuthConfig.buildServerRequest(request.multiFactorConfig);\n        }\n        // Validate SMS Regions Config if provided.\n        if (typeof request.smsRegionConfig !== 'undefined') {\n            auth_config_1.SmsRegionsAuthConfig.validate(request.smsRegionConfig);\n        }\n        // Validate reCAPTCHAConfig type if provided.\n        if (typeof request.recaptchaConfig !== 'undefined') {\n            auth_config_1.RecaptchaAuthConfig.buildServerRequest(request.recaptchaConfig);\n        }\n        // Validate passwordPolicyConfig type if provided.\n        if (typeof request.passwordPolicyConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.PasswordPolicyAuthConfig.buildServerRequest(request.passwordPolicyConfig);\n        }\n        // Validate Email Privacy Config if provided.\n        if (typeof request.emailPrivacyConfig !== 'undefined') {\n            auth_config_1.EmailPrivacyAuthConfig.validate(request.emailPrivacyConfig);\n        }\n    }\n    /**\n     * The Tenant object constructor.\n     *\n     * @param response - The server side response used to initialize the Tenant object.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        const tenantId = Tenant.getTenantIdFromResourceName(response.name);\n        if (!tenantId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n        }\n        this.tenantId = tenantId;\n        this.displayName = response.displayName;\n        try {\n            this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig(response);\n        }\n        catch (e) {\n            // If allowPasswordSignup is undefined, it is disabled by default.\n            this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig({\n                allowPasswordSignup: false,\n            });\n        }\n        this.anonymousSignInEnabled = !!response.enableAnonymousUser;\n        if (typeof response.mfaConfig !== 'undefined') {\n            this.multiFactorConfig_ = new auth_config_1.MultiFactorAuthConfig(response.mfaConfig);\n        }\n        if (typeof response.testPhoneNumbers !== 'undefined') {\n            this.testPhoneNumbers = (0, deep_copy_1.deepCopy)(response.testPhoneNumbers || {});\n        }\n        if (typeof response.smsRegionConfig !== 'undefined') {\n            this.smsRegionConfig = (0, deep_copy_1.deepCopy)(response.smsRegionConfig);\n        }\n        if (typeof response.recaptchaConfig !== 'undefined') {\n            this.recaptchaConfig_ = new auth_config_1.RecaptchaAuthConfig(response.recaptchaConfig);\n        }\n        if (typeof response.passwordPolicyConfig !== 'undefined') {\n            this.passwordPolicyConfig = new auth_config_1.PasswordPolicyAuthConfig(response.passwordPolicyConfig);\n        }\n        if (typeof response.emailPrivacyConfig !== 'undefined') {\n            this.emailPrivacyConfig = (0, deep_copy_1.deepCopy)(response.emailPrivacyConfig);\n        }\n    }\n    /**\n     * The email sign in provider configuration.\n     */\n    get emailSignInConfig() {\n        return this.emailSignInConfig_;\n    }\n    /**\n     * The multi-factor auth configuration on the current tenant.\n     */\n    get multiFactorConfig() {\n        return this.multiFactorConfig_;\n    }\n    /**\n     * The recaptcha config auth configuration of the current tenant.\n     */\n    get recaptchaConfig() {\n        return this.recaptchaConfig_;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        const json = {\n            tenantId: this.tenantId,\n            displayName: this.displayName,\n            emailSignInConfig: this.emailSignInConfig_?.toJSON(),\n            multiFactorConfig: this.multiFactorConfig_?.toJSON(),\n            anonymousSignInEnabled: this.anonymousSignInEnabled,\n            testPhoneNumbers: this.testPhoneNumbers,\n            smsRegionConfig: (0, deep_copy_1.deepCopy)(this.smsRegionConfig),\n            recaptchaConfig: (0, deep_copy_1.deepCopy)(this.recaptchaConfig),\n            passwordPolicyConfig: (0, deep_copy_1.deepCopy)(this.passwordPolicyConfig),\n            emailPrivacyConfig: (0, deep_copy_1.deepCopy)(this.emailPrivacyConfig),\n        };\n        if (typeof json.multiFactorConfig === 'undefined') {\n            delete json.multiFactorConfig;\n        }\n        if (typeof json.testPhoneNumbers === 'undefined') {\n            delete json.testPhoneNumbers;\n        }\n        if (typeof json.smsRegionConfig === 'undefined') {\n            delete json.smsRegionConfig;\n        }\n        if (typeof json.recaptchaConfig === 'undefined') {\n            delete json.recaptchaConfig;\n        }\n        if (typeof json.passwordPolicyConfig === 'undefined') {\n            delete json.passwordPolicyConfig;\n        }\n        if (typeof json.emailPrivacyConfig === 'undefined') {\n            delete json.emailPrivacyConfig;\n        }\n        return json;\n    }\n}\nexports.Tenant = Tenant;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5388, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/identifier.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isProviderIdentifier = exports.isPhoneIdentifier = exports.isEmailIdentifier = exports.isUidIdentifier = void 0;\n/*\n * User defined type guards. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\n */\nfunction isUidIdentifier(id) {\n    return id.uid !== undefined;\n}\nexports.isUidIdentifier = isUidIdentifier;\nfunction isEmailIdentifier(id) {\n    return id.email !== undefined;\n}\nexports.isEmailIdentifier = isEmailIdentifier;\nfunction isPhoneIdentifier(id) {\n    return id.phoneNumber !== undefined;\n}\nexports.isPhoneIdentifier = isPhoneIdentifier;\nfunction isProviderIdentifier(id) {\n    const pid = id;\n    return pid.providerId !== undefined && pid.providerUid !== undefined;\n}\nexports.isProviderIdentifier = isProviderIdentifier;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,eAAe,GAAG,KAAK;AACtH;;;CAGC,GACD,SAAS,gBAAgB,EAAE;IACvB,OAAO,GAAG,GAAG,KAAK;AACtB;AACA,QAAQ,eAAe,GAAG;AAC1B,SAAS,kBAAkB,EAAE;IACzB,OAAO,GAAG,KAAK,KAAK;AACxB;AACA,QAAQ,iBAAiB,GAAG;AAC5B,SAAS,kBAAkB,EAAE;IACzB,OAAO,GAAG,WAAW,KAAK;AAC9B;AACA,QAAQ,iBAAiB,GAAG;AAC5B,SAAS,qBAAqB,EAAE;IAC5B,MAAM,MAAM;IACZ,OAAO,IAAI,UAAU,KAAK,aAAa,IAAI,WAAW,KAAK;AAC/D;AACA,QAAQ,oBAAoB,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5432, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/project-config.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectConfig = void 0;\n/*!\n * Copyright 2022 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst validator = require(\"../utils/validator\");\nconst error_1 = require(\"../utils/error\");\nconst auth_config_1 = require(\"./auth-config\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\n/**\n* Represents a project configuration.\n*/\nclass ProjectConfig {\n    /**\n     * The multi-factor auth configuration.\n     */\n    get multiFactorConfig() {\n        return this.multiFactorConfig_;\n    }\n    /**\n     * The reCAPTCHA configuration.\n     */\n    get recaptchaConfig() {\n        return this.recaptchaConfig_;\n    }\n    /**\n     * Validates a project config options object. Throws an error on failure.\n     *\n     * @param request - The project config options object to validate.\n     */\n    static validate(request) {\n        if (!validator.isNonNullObject(request)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"UpdateProjectConfigRequest\" must be a valid non-null object.');\n        }\n        const validKeys = {\n            smsRegionConfig: true,\n            multiFactorConfig: true,\n            recaptchaConfig: true,\n            passwordPolicyConfig: true,\n            emailPrivacyConfig: true,\n        };\n        // Check for unsupported top level attributes.\n        for (const key in request) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${key}\" is not a valid UpdateProjectConfigRequest parameter.`);\n            }\n        }\n        // Validate SMS Regions Config if provided.\n        if (typeof request.smsRegionConfig !== 'undefined') {\n            auth_config_1.SmsRegionsAuthConfig.validate(request.smsRegionConfig);\n        }\n        // Validate Multi Factor Config if provided\n        if (typeof request.multiFactorConfig !== 'undefined') {\n            auth_config_1.MultiFactorAuthConfig.validate(request.multiFactorConfig);\n        }\n        // Validate reCAPTCHA config attribute.\n        if (typeof request.recaptchaConfig !== 'undefined') {\n            auth_config_1.RecaptchaAuthConfig.validate(request.recaptchaConfig);\n        }\n        // Validate Password policy Config if provided\n        if (typeof request.passwordPolicyConfig !== 'undefined') {\n            auth_config_1.PasswordPolicyAuthConfig.validate(request.passwordPolicyConfig);\n        }\n        // Validate Email Privacy Config if provided.\n        if (typeof request.emailPrivacyConfig !== 'undefined') {\n            auth_config_1.EmailPrivacyAuthConfig.validate(request.emailPrivacyConfig);\n        }\n    }\n    /**\n     * Build the corresponding server request for a UpdateProjectConfigRequest object.\n     * @param configOptions - The properties to convert to a server request.\n     * @returns  The equivalent server request.\n     *\n     * @internal\n     */\n    static buildServerRequest(configOptions) {\n        ProjectConfig.validate(configOptions);\n        const request = {};\n        if (typeof configOptions.smsRegionConfig !== 'undefined') {\n            request.smsRegionConfig = configOptions.smsRegionConfig;\n        }\n        if (typeof configOptions.multiFactorConfig !== 'undefined') {\n            request.mfa = auth_config_1.MultiFactorAuthConfig.buildServerRequest(configOptions.multiFactorConfig);\n        }\n        if (typeof configOptions.recaptchaConfig !== 'undefined') {\n            request.recaptchaConfig = auth_config_1.RecaptchaAuthConfig.buildServerRequest(configOptions.recaptchaConfig);\n        }\n        if (typeof configOptions.passwordPolicyConfig !== 'undefined') {\n            request.passwordPolicyConfig = auth_config_1.PasswordPolicyAuthConfig.buildServerRequest(configOptions.passwordPolicyConfig);\n        }\n        if (typeof configOptions.emailPrivacyConfig !== 'undefined') {\n            request.emailPrivacyConfig = configOptions.emailPrivacyConfig;\n        }\n        return request;\n    }\n    /**\n     * The Project Config object constructor.\n     *\n     * @param response - The server side response used to initialize the Project Config object.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        if (typeof response.smsRegionConfig !== 'undefined') {\n            this.smsRegionConfig = response.smsRegionConfig;\n        }\n        //Backend API returns \"mfa\" in case of project config and \"mfaConfig\" in case of tenant config. \n        //The SDK exposes it as multiFactorConfig always.\n        if (typeof response.mfa !== 'undefined') {\n            this.multiFactorConfig_ = new auth_config_1.MultiFactorAuthConfig(response.mfa);\n        }\n        if (typeof response.recaptchaConfig !== 'undefined') {\n            this.recaptchaConfig_ = new auth_config_1.RecaptchaAuthConfig(response.recaptchaConfig);\n        }\n        if (typeof response.passwordPolicyConfig !== 'undefined') {\n            this.passwordPolicyConfig = new auth_config_1.PasswordPolicyAuthConfig(response.passwordPolicyConfig);\n        }\n        if (typeof response.emailPrivacyConfig !== 'undefined') {\n            this.emailPrivacyConfig = response.emailPrivacyConfig;\n        }\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        // JSON serialization\n        const json = {\n            smsRegionConfig: (0, deep_copy_1.deepCopy)(this.smsRegionConfig),\n            multiFactorConfig: (0, deep_copy_1.deepCopy)(this.multiFactorConfig),\n            recaptchaConfig: (0, deep_copy_1.deepCopy)(this.recaptchaConfig),\n            passwordPolicyConfig: (0, deep_copy_1.deepCopy)(this.passwordPolicyConfig),\n            emailPrivacyConfig: (0, deep_copy_1.deepCopy)(this.emailPrivacyConfig),\n        };\n        if (typeof json.smsRegionConfig === 'undefined') {\n            delete json.smsRegionConfig;\n        }\n        if (typeof json.multiFactorConfig === 'undefined') {\n            delete json.multiFactorConfig;\n        }\n        if (typeof json.recaptchaConfig === 'undefined') {\n            delete json.recaptchaConfig;\n        }\n        if (typeof json.passwordPolicyConfig === 'undefined') {\n            delete json.passwordPolicyConfig;\n        }\n        if (typeof json.emailPrivacyConfig === 'undefined') {\n            delete json.emailPrivacyConfig;\n        }\n        return json;\n    }\n}\nexports.ProjectConfig = ProjectConfig;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5598, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/auth-api-request.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useEmulator = exports.TenantAwareAuthRequestHandler = exports.AuthRequestHandler = exports.AbstractAuthRequestHandler = exports.FIREBASE_AUTH_SIGN_UP_NEW_USER = exports.FIREBASE_AUTH_SET_ACCOUNT_INFO = exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = exports.FIREBASE_AUTH_DELETE_ACCOUNT = exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = exports.FIREBASE_AUTH_GET_ACCOUNT_INFO = exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = exports.FIREBASE_AUTH_UPLOAD_ACCOUNT = exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = exports.EMAIL_ACTION_REQUEST_TYPES = exports.RESERVED_CLAIMS = void 0;\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst api_request_1 = require(\"../utils/api-request\");\nconst utils = require(\"../utils/index\");\nconst user_import_builder_1 = require(\"./user-import-builder\");\nconst action_code_settings_builder_1 = require(\"./action-code-settings-builder\");\nconst tenant_1 = require(\"./tenant\");\nconst identifier_1 = require(\"./identifier\");\nconst auth_config_1 = require(\"./auth-config\");\nconst project_config_1 = require(\"./project-config\");\n/** Firebase Auth request header. */\nconst FIREBASE_AUTH_HEADERS = {\n    'X-Client-Version': `Node/Admin/${utils.getSdkVersion()}`,\n    'X-Goog-Api-Client': `gl-node/${process.versions.node} fire-admin/${utils.getSdkVersion()}`\n};\n/** Firebase Auth request timeout duration in milliseconds. */\nconst FIREBASE_AUTH_TIMEOUT = 25000;\n/** List of reserved claims which cannot be provided when creating a custom token. */\nexports.RESERVED_CLAIMS = [\n    'acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat',\n    'iss', 'jti', 'nbf', 'nonce', 'sub', 'firebase',\n];\n/** List of supported email action request types. */\nexports.EMAIL_ACTION_REQUEST_TYPES = [\n    'PASSWORD_RESET', 'VERIFY_EMAIL', 'EMAIL_SIGNIN', 'VERIFY_AND_CHANGE_EMAIL',\n];\n/** Maximum allowed number of characters in the custom claims payload. */\nconst MAX_CLAIMS_PAYLOAD_SIZE = 1000;\n/** Maximum allowed number of users to batch download at one time. */\nconst MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE = 1000;\n/** Maximum allowed number of users to batch upload at one time. */\nconst MAX_UPLOAD_ACCOUNT_BATCH_SIZE = 1000;\n/** Maximum allowed number of users to batch get at one time. */\nconst MAX_GET_ACCOUNTS_BATCH_SIZE = 100;\n/** Maximum allowed number of users to batch delete at one time. */\nconst MAX_DELETE_ACCOUNTS_BATCH_SIZE = 1000;\n/** Minimum allowed session cookie duration in seconds (5 minutes). */\nconst MIN_SESSION_COOKIE_DURATION_SECS = 5 * 60;\n/** Maximum allowed session cookie duration in seconds (2 weeks). */\nconst MAX_SESSION_COOKIE_DURATION_SECS = 14 * 24 * 60 * 60;\n/** Maximum allowed number of provider configurations to batch download at one time. */\nconst MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE = 100;\n/** The Firebase Auth backend base URL format. */\nconst FIREBASE_AUTH_BASE_URL_FORMAT = 'https://identitytoolkit.googleapis.com/{version}/projects/{projectId}{api}';\n/** Firebase Auth base URlLformat when using the auth emultor. */\nconst FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT = 'http://{host}/identitytoolkit.googleapis.com/{version}/projects/{projectId}{api}';\n/** The Firebase Auth backend multi-tenancy base URL format. */\nconst FIREBASE_AUTH_TENANT_URL_FORMAT = FIREBASE_AUTH_BASE_URL_FORMAT.replace('projects/{projectId}', 'projects/{projectId}/tenants/{tenantId}');\n/** Firebase Auth base URL format when using the auth emultor with multi-tenancy. */\nconst FIREBASE_AUTH_EMULATOR_TENANT_URL_FORMAT = FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT.replace('projects/{projectId}', 'projects/{projectId}/tenants/{tenantId}');\n/** Maximum allowed number of tenants to download at one time. */\nconst MAX_LIST_TENANT_PAGE_SIZE = 1000;\n/**\n * Enum for the user write operation type.\n */\nvar WriteOperationType;\n(function (WriteOperationType) {\n    WriteOperationType[\"Create\"] = \"create\";\n    WriteOperationType[\"Update\"] = \"update\";\n    WriteOperationType[\"Upload\"] = \"upload\";\n})(WriteOperationType || (WriteOperationType = {}));\n/** Defines a base utility to help with resource URL construction. */\nclass AuthResourceUrlBuilder {\n    /**\n     * The resource URL builder constructor.\n     *\n     * @param projectId - The resource project ID.\n     * @param version - The endpoint API version.\n     * @constructor\n     */\n    constructor(app, version = 'v1') {\n        this.app = app;\n        this.version = version;\n        if (useEmulator()) {\n            this.urlFormat = utils.formatString(FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT, {\n                host: emulatorHost()\n            });\n        }\n        else {\n            this.urlFormat = FIREBASE_AUTH_BASE_URL_FORMAT;\n        }\n    }\n    /**\n     * Returns the resource URL corresponding to the provided parameters.\n     *\n     * @param api - The backend API name.\n     * @param params - The optional additional parameters to substitute in the\n     *     URL path.\n     * @returns The corresponding resource URL.\n     */\n    getUrl(api, params) {\n        return this.getProjectId()\n            .then((projectId) => {\n            const baseParams = {\n                version: this.version,\n                projectId,\n                api: api || '',\n            };\n            const baseUrl = utils.formatString(this.urlFormat, baseParams);\n            // Substitute additional api related parameters.\n            return utils.formatString(baseUrl, params || {});\n        });\n    }\n    getProjectId() {\n        if (this.projectId) {\n            return Promise.resolve(this.projectId);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Failed to determine project ID for Auth. Initialize the '\n                    + 'SDK with service account credentials or set project ID as an app option. '\n                    + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n            }\n            this.projectId = projectId;\n            return projectId;\n        });\n    }\n}\n/** Tenant aware resource builder utility. */\nclass TenantAwareAuthResourceUrlBuilder extends AuthResourceUrlBuilder {\n    /**\n     * The tenant aware resource URL builder constructor.\n     *\n     * @param projectId - The resource project ID.\n     * @param version - The endpoint API version.\n     * @param tenantId - The tenant ID.\n     * @constructor\n     */\n    constructor(app, version, tenantId) {\n        super(app, version);\n        this.app = app;\n        this.version = version;\n        this.tenantId = tenantId;\n        if (useEmulator()) {\n            this.urlFormat = utils.formatString(FIREBASE_AUTH_EMULATOR_TENANT_URL_FORMAT, {\n                host: emulatorHost()\n            });\n        }\n        else {\n            this.urlFormat = FIREBASE_AUTH_TENANT_URL_FORMAT;\n        }\n    }\n    /**\n     * Returns the resource URL corresponding to the provided parameters.\n     *\n     * @param api - The backend API name.\n     * @param params - The optional additional parameters to substitute in the\n     *     URL path.\n     * @returns The corresponding resource URL.\n     */\n    getUrl(api, params) {\n        return super.getUrl(api, params)\n            .then((url) => {\n            return utils.formatString(url, { tenantId: this.tenantId });\n        });\n    }\n}\n/**\n * Auth-specific HTTP client which uses the special \"owner\" token\n * when communicating with the Auth Emulator.\n */\nclass AuthHttpClient extends api_request_1.AuthorizedHttpClient {\n    getToken() {\n        if (useEmulator()) {\n            return Promise.resolve('owner');\n        }\n        return super.getToken();\n    }\n}\n/**\n * Validates an AuthFactorInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request - The AuthFactorInfo request object.\n */\nfunction validateAuthFactorInfo(request) {\n    const validKeys = {\n        mfaEnrollmentId: true,\n        displayName: true,\n        phoneInfo: true,\n        enrolledAt: true,\n    };\n    // Remove unsupported keys from the original request.\n    for (const key in request) {\n        if (!(key in validKeys)) {\n            delete request[key];\n        }\n    }\n    // No enrollment ID is available for signupNewUser. Use another identifier.\n    const authFactorInfoIdentifier = request.mfaEnrollmentId || request.phoneInfo || JSON.stringify(request);\n    // Enrollment uid may or may not be specified for update operations.\n    if (typeof request.mfaEnrollmentId !== 'undefined' &&\n        !validator.isNonEmptyString(request.mfaEnrollmentId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, 'The second factor \"uid\" must be a valid non-empty string.');\n    }\n    if (typeof request.displayName !== 'undefined' &&\n        !validator.isString(request.displayName)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, `The second factor \"displayName\" for \"${authFactorInfoIdentifier}\" must be a valid string.`);\n    }\n    // enrolledAt must be a valid UTC date string.\n    if (typeof request.enrolledAt !== 'undefined' &&\n        !validator.isISODateString(request.enrolledAt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLMENT_TIME, `The second factor \"enrollmentTime\" for \"${authFactorInfoIdentifier}\" must be a valid ` +\n            'UTC date string.');\n    }\n    // Validate required fields depending on second factor type.\n    if (typeof request.phoneInfo !== 'undefined') {\n        // phoneNumber should be a string and a valid phone number.\n        if (!validator.isPhoneNumber(request.phoneInfo)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER, `The second factor \"phoneNumber\" for \"${authFactorInfoIdentifier}\" must be a non-empty ` +\n                'E.164 standard compliant identifier string.');\n        }\n    }\n    else {\n        // Invalid second factor. For example, a phone second factor may have been provided without\n        // a phone number. A TOTP based second factor may require a secret key, etc.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS, 'MFAInfo object provided is invalid.');\n    }\n}\n/**\n * Validates a providerUserInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request - The providerUserInfo request object.\n */\nfunction validateProviderUserInfo(request) {\n    const validKeys = {\n        rawId: true,\n        providerId: true,\n        email: true,\n        displayName: true,\n        photoUrl: true,\n    };\n    // Remove invalid keys from original request.\n    for (const key in request) {\n        if (!(key in validKeys)) {\n            delete request[key];\n        }\n    }\n    if (!validator.isNonEmptyString(request.providerId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n    }\n    if (typeof request.displayName !== 'undefined' &&\n        typeof request.displayName !== 'string') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, `The provider \"displayName\" for \"${request.providerId}\" must be a valid string.`);\n    }\n    if (!validator.isNonEmptyString(request.rawId)) {\n        // This is called localId on the backend but the developer specifies this as\n        // uid externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, `The provider \"uid\" for \"${request.providerId}\" must be a valid non-empty string.`);\n    }\n    // email should be a string and a valid email.\n    if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL, `The provider \"email\" for \"${request.providerId}\" must be a valid email string.`);\n    }\n    // photoUrl should be a URL.\n    if (typeof request.photoUrl !== 'undefined' &&\n        !validator.isURL(request.photoUrl)) {\n        // This is called photoUrl on the backend but the developer specifies this as\n        // photoURL externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL, `The provider \"photoURL\" for \"${request.providerId}\" must be a valid URL string.`);\n    }\n}\n/**\n * Validates a create/edit request object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request - The create/edit request object.\n * @param writeOperationType - The write operation type.\n */\nfunction validateCreateEditRequest(request, writeOperationType) {\n    const uploadAccountRequest = writeOperationType === WriteOperationType.Upload;\n    // Hash set of whitelisted parameters.\n    const validKeys = {\n        displayName: true,\n        localId: true,\n        email: true,\n        password: true,\n        rawPassword: true,\n        emailVerified: true,\n        photoUrl: true,\n        disabled: true,\n        disableUser: true,\n        deleteAttribute: true,\n        deleteProvider: true,\n        sanityCheck: true,\n        phoneNumber: true,\n        customAttributes: true,\n        validSince: true,\n        // Pass linkProviderUserInfo only for updates (i.e. not for uploads.)\n        linkProviderUserInfo: !uploadAccountRequest,\n        // Pass tenantId only for uploadAccount requests.\n        tenantId: uploadAccountRequest,\n        passwordHash: uploadAccountRequest,\n        salt: uploadAccountRequest,\n        createdAt: uploadAccountRequest,\n        lastLoginAt: uploadAccountRequest,\n        providerUserInfo: uploadAccountRequest,\n        mfaInfo: uploadAccountRequest,\n        // Only for non-uploadAccount requests.\n        mfa: !uploadAccountRequest,\n    };\n    // Remove invalid keys from original request.\n    for (const key in request) {\n        if (!(key in validKeys)) {\n            delete request[key];\n        }\n    }\n    if (typeof request.tenantId !== 'undefined' &&\n        !validator.isNonEmptyString(request.tenantId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n    }\n    // For any invalid parameter, use the external key name in the error description.\n    // displayName should be a string.\n    if (typeof request.displayName !== 'undefined' &&\n        !validator.isString(request.displayName)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME);\n    }\n    if ((typeof request.localId !== 'undefined' || uploadAccountRequest) &&\n        !validator.isUid(request.localId)) {\n        // This is called localId on the backend but the developer specifies this as\n        // uid externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n    }\n    // email should be a string and a valid email.\n    if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n    }\n    // phoneNumber should be a string and a valid phone number.\n    if (typeof request.phoneNumber !== 'undefined' &&\n        !validator.isPhoneNumber(request.phoneNumber)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n    }\n    // password should be a string and a minimum of 6 chars.\n    if (typeof request.password !== 'undefined' &&\n        !validator.isPassword(request.password)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n    }\n    // rawPassword should be a string and a minimum of 6 chars.\n    if (typeof request.rawPassword !== 'undefined' &&\n        !validator.isPassword(request.rawPassword)) {\n        // This is called rawPassword on the backend but the developer specifies this as\n        // password externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n    }\n    // emailVerified should be a boolean.\n    if (typeof request.emailVerified !== 'undefined' &&\n        typeof request.emailVerified !== 'boolean') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL_VERIFIED);\n    }\n    // photoUrl should be a URL.\n    if (typeof request.photoUrl !== 'undefined' &&\n        !validator.isURL(request.photoUrl)) {\n        // This is called photoUrl on the backend but the developer specifies this as\n        // photoURL externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL);\n    }\n    // disabled should be a boolean.\n    if (typeof request.disabled !== 'undefined' &&\n        typeof request.disabled !== 'boolean') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n    }\n    // validSince should be a number.\n    if (typeof request.validSince !== 'undefined' &&\n        !validator.isNumber(request.validSince)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TOKENS_VALID_AFTER_TIME);\n    }\n    // createdAt should be a number.\n    if (typeof request.createdAt !== 'undefined' &&\n        !validator.isNumber(request.createdAt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREATION_TIME);\n    }\n    // lastSignInAt should be a number.\n    if (typeof request.lastLoginAt !== 'undefined' &&\n        !validator.isNumber(request.lastLoginAt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_LAST_SIGN_IN_TIME);\n    }\n    // disableUser should be a boolean.\n    if (typeof request.disableUser !== 'undefined' &&\n        typeof request.disableUser !== 'boolean') {\n        // This is called disableUser on the backend but the developer specifies this as\n        // disabled externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n    }\n    // customAttributes should be stringified JSON with no blacklisted claims.\n    // The payload should not exceed 1KB.\n    if (typeof request.customAttributes !== 'undefined') {\n        let developerClaims;\n        try {\n            developerClaims = JSON.parse(request.customAttributes);\n        }\n        catch (error) {\n            // JSON parsing error. This should never happen as we stringify the claims internally.\n            // However, we still need to check since setAccountInfo via edit requests could pass\n            // this field.\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CLAIMS, error.message);\n        }\n        const invalidClaims = [];\n        // Check for any invalid claims.\n        exports.RESERVED_CLAIMS.forEach((blacklistedClaim) => {\n            if (Object.prototype.hasOwnProperty.call(developerClaims, blacklistedClaim)) {\n                invalidClaims.push(blacklistedClaim);\n            }\n        });\n        // Throw an error if an invalid claim is detected.\n        if (invalidClaims.length > 0) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.FORBIDDEN_CLAIM, invalidClaims.length > 1 ?\n                `Developer claims \"${invalidClaims.join('\", \"')}\" are reserved and cannot be specified.` :\n                `Developer claim \"${invalidClaims[0]}\" is reserved and cannot be specified.`);\n        }\n        // Check claims payload does not exceed maxmimum size.\n        if (request.customAttributes.length > MAX_CLAIMS_PAYLOAD_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.CLAIMS_TOO_LARGE, `Developer claims payload should not exceed ${MAX_CLAIMS_PAYLOAD_SIZE} characters.`);\n        }\n    }\n    // passwordHash has to be a base64 encoded string.\n    if (typeof request.passwordHash !== 'undefined' &&\n        !validator.isString(request.passwordHash)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_HASH);\n    }\n    // salt has to be a base64 encoded string.\n    if (typeof request.salt !== 'undefined' &&\n        !validator.isString(request.salt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_SALT);\n    }\n    // providerUserInfo has to be an array of valid UserInfo requests.\n    if (typeof request.providerUserInfo !== 'undefined' &&\n        !validator.isArray(request.providerUserInfo)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_DATA);\n    }\n    else if (validator.isArray(request.providerUserInfo)) {\n        request.providerUserInfo.forEach((providerUserInfoEntry) => {\n            validateProviderUserInfo(providerUserInfoEntry);\n        });\n    }\n    // linkProviderUserInfo must be a (single) UserProvider value.\n    if (typeof request.linkProviderUserInfo !== 'undefined') {\n        validateProviderUserInfo(request.linkProviderUserInfo);\n    }\n    // mfaInfo is used for importUsers.\n    // mfa.enrollments is used for setAccountInfo.\n    // enrollments has to be an array of valid AuthFactorInfo requests.\n    let enrollments = null;\n    if (request.mfaInfo) {\n        enrollments = request.mfaInfo;\n    }\n    else if (request.mfa && request.mfa.enrollments) {\n        enrollments = request.mfa.enrollments;\n    }\n    if (enrollments) {\n        if (!validator.isArray(enrollments)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS);\n        }\n        enrollments.forEach((authFactorInfoEntry) => {\n            validateAuthFactorInfo(authFactorInfoEntry);\n        });\n    }\n}\n/**\n * Instantiates the createSessionCookie endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = new api_request_1.ApiSettings(':createSessionCookie', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate the ID token is a non-empty string.\n    if (!validator.isNonEmptyString(request.idToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN);\n    }\n    // Validate the custom session cookie duration.\n    if (!validator.isNumber(request.validDuration) ||\n        request.validDuration < MIN_SESSION_COOKIE_DURATION_SECS ||\n        request.validDuration > MAX_SESSION_COOKIE_DURATION_SECS) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION);\n    }\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the session cookie.\n    if (!validator.isNonEmptyString(response.sessionCookie)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR);\n    }\n});\n/**\n * Instantiates the uploadAccount endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_UPLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchCreate', 'POST');\n/**\n * Instantiates the downloadAccount endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchGet', 'GET')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate next page token.\n    if (typeof request.nextPageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.nextPageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.maxResults) ||\n        request.maxResults <= 0 ||\n        request.maxResults > MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive integer that does not exceed ' +\n            `${MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE}.`);\n    }\n});\n/**\n * Instantiates the getAccountInfo endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_GET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    if (!response.users || !response.users.length) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n    }\n});\n/**\n * Instantiates the getAccountInfo endpoint settings for use when fetching info\n * for multiple accounts.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n});\n/**\n * Instantiates the deleteAccount endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_DELETE_ACCOUNT = new api_request_1.ApiSettings('/accounts:delete', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    if (!request.localId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n});\n/**\n * @internal\n */\nexports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = new api_request_1.ApiSettings('/accounts:batchDelete', 'POST')\n    .setRequestValidator((request) => {\n    if (!request.localIds) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifiers');\n    }\n    if (typeof request.force === 'undefined' || request.force !== true) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing force=true field');\n    }\n})\n    .setResponseValidator((response) => {\n    const errors = response.errors || [];\n    errors.forEach((batchDeleteErrorInfo) => {\n        if (typeof batchDeleteErrorInfo.index === 'undefined') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.index field');\n        }\n        if (!batchDeleteErrorInfo.localId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.localId field');\n        }\n        // Allow the (error) message to be missing/undef.\n    });\n});\n/**\n * Instantiates the setAccountInfo endpoint settings for updating existing accounts.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_SET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:update', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // localId is a required parameter.\n    if (typeof request.localId === 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n    // Throw error when tenantId is passed in POST body.\n    if (typeof request.tenantId !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"UpdateRequest\" property.');\n    }\n    validateCreateEditRequest(request, WriteOperationType.Update);\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // If the localId is not returned, then the request failed.\n    if (!response.localId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n    }\n});\n/**\n * Instantiates the signupNewUser endpoint settings for creating a new user with or without\n * uid being specified. The backend will create a new one if not provided and return it.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_SIGN_UP_NEW_USER = new api_request_1.ApiSettings('/accounts', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // signupNewUser does not support customAttributes.\n    if (typeof request.customAttributes !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"customAttributes\" cannot be set when creating a new user.');\n    }\n    // signupNewUser does not support validSince.\n    if (typeof request.validSince !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"validSince\" cannot be set when creating a new user.');\n    }\n    // Throw error when tenantId is passed in POST body.\n    if (typeof request.tenantId !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"CreateRequest\" property.');\n    }\n    validateCreateEditRequest(request, WriteOperationType.Create);\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // If the localId is not returned, then the request failed.\n    if (!response.localId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new user');\n    }\n});\nconst FIREBASE_AUTH_GET_OOB_CODE = new api_request_1.ApiSettings('/accounts:sendOobCode', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    if (!validator.isEmail(request.email)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n    }\n    if (typeof request.newEmail !== 'undefined' && !validator.isEmail(request.newEmail)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_NEW_EMAIL);\n    }\n    if (exports.EMAIL_ACTION_REQUEST_TYPES.indexOf(request.requestType) === -1) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${request.requestType}\" is not a supported email action request type.`);\n    }\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // If the oobLink is not returned, then the request failed.\n    if (!response.oobLink) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create the email action link');\n    }\n});\n/**\n * Instantiates the retrieve OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst GET_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'GET')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the OIDC provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get OIDC configuration');\n    }\n});\n/**\n * Instantiates the delete OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst DELETE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'DELETE');\n/**\n * Instantiates the create OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst CREATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs?oauthIdpConfigId={providerId}', 'POST')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the OIDC provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC configuration');\n    }\n});\n/**\n * Instantiates the update OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst UPDATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}?updateMask={updateMask}', 'PATCH')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the configuration resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC configuration');\n    }\n});\n/**\n * Instantiates the list OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst LIST_OAUTH_IDP_CONFIGS = new api_request_1.ApiSettings('/oauthIdpConfigs', 'GET')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate next page token.\n    if (typeof request.pageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.pageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.pageSize) ||\n        request.pageSize <= 0 ||\n        request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive integer that does not exceed ' +\n            `${MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE}.`);\n    }\n});\n/**\n * Instantiates the retrieve SAML configuration endpoint settings.\n *\n * @internal\n */\nconst GET_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'GET')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the SAML provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get SAML configuration');\n    }\n});\n/**\n * Instantiates the delete SAML configuration endpoint settings.\n *\n * @internal\n */\nconst DELETE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'DELETE');\n/**\n * Instantiates the create SAML configuration endpoint settings.\n *\n * @internal\n */\nconst CREATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs?inboundSamlConfigId={providerId}', 'POST')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the SAML provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML configuration');\n    }\n});\n/**\n * Instantiates the update SAML configuration endpoint settings.\n *\n * @internal\n */\nconst UPDATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}?updateMask={updateMask}', 'PATCH')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the configuration resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML configuration');\n    }\n});\n/**\n * Instantiates the list SAML configuration endpoint settings.\n *\n * @internal\n */\nconst LIST_INBOUND_SAML_CONFIGS = new api_request_1.ApiSettings('/inboundSamlConfigs', 'GET')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate next page token.\n    if (typeof request.pageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.pageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.pageSize) ||\n        request.pageSize <= 0 ||\n        request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive integer that does not exceed ' +\n            `${MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE}.`);\n    }\n});\n/**\n * Class that provides the mechanism to send requests to the Firebase Auth backend endpoints.\n *\n * @internal\n */\nclass AbstractAuthRequestHandler {\n    /**\n     * @param response - The response to check for errors.\n     * @returns The error code if present; null otherwise.\n     */\n    static getErrorCode(response) {\n        return (validator.isNonNullObject(response) && response.error && response.error.message) || null;\n    }\n    static addUidToRequest(id, request) {\n        if (!validator.isUid(id.uid)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n        }\n        request.localId ? request.localId.push(id.uid) : request.localId = [id.uid];\n        return request;\n    }\n    static addEmailToRequest(id, request) {\n        if (!validator.isEmail(id.email)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n        }\n        request.email ? request.email.push(id.email) : request.email = [id.email];\n        return request;\n    }\n    static addPhoneToRequest(id, request) {\n        if (!validator.isPhoneNumber(id.phoneNumber)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n        }\n        request.phoneNumber ? request.phoneNumber.push(id.phoneNumber) : request.phoneNumber = [id.phoneNumber];\n        return request;\n    }\n    static addProviderToRequest(id, request) {\n        if (!validator.isNonEmptyString(id.providerId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n        }\n        if (!validator.isNonEmptyString(id.providerUid)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_UID);\n        }\n        const federatedUserId = {\n            providerId: id.providerId,\n            rawId: id.providerUid,\n        };\n        request.federatedUserId\n            ? request.federatedUserId.push(federatedUserId)\n            : request.federatedUserId = [federatedUserId];\n        return request;\n    }\n    /**\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @constructor\n     */\n    constructor(app) {\n        this.app = app;\n        if (typeof app !== 'object' || app === null || !('options' in app)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.auth() must be a valid Firebase app instance.');\n        }\n        this.httpClient = new AuthHttpClient(app);\n    }\n    /**\n     * Creates a new Firebase session cookie with the specified duration that can be used for\n     * session management (set as a server side session cookie with custom cookie policy).\n     * The session cookie JWT will have the same payload claims as the provided ID token.\n     *\n     * @param idToken - The Firebase ID token to exchange for a session cookie.\n     * @param expiresIn - The session cookie duration in milliseconds.\n     *\n     * @returns A promise that resolves on success with the created session cookie.\n     */\n    createSessionCookie(idToken, expiresIn) {\n        const request = {\n            idToken,\n            // Convert to seconds.\n            validDuration: Math.floor(expiresIn / 1000),\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE, request)\n            .then((response) => response.sessionCookie);\n    }\n    /**\n     * Looks up a user by uid.\n     *\n     * @param uid - The uid of the user to lookup.\n     * @returns A promise that resolves with the user information.\n     */\n    getAccountInfoByUid(uid) {\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        const request = {\n            localId: [uid],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    }\n    /**\n     * Looks up a user by email.\n     *\n     * @param email - The email of the user to lookup.\n     * @returns A promise that resolves with the user information.\n     */\n    getAccountInfoByEmail(email) {\n        if (!validator.isEmail(email)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL));\n        }\n        const request = {\n            email: [email],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    }\n    /**\n     * Looks up a user by phone number.\n     *\n     * @param phoneNumber - The phone number of the user to lookup.\n     * @returns A promise that resolves with the user information.\n     */\n    getAccountInfoByPhoneNumber(phoneNumber) {\n        if (!validator.isPhoneNumber(phoneNumber)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER));\n        }\n        const request = {\n            phoneNumber: [phoneNumber],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    }\n    getAccountInfoByFederatedUid(providerId, rawId) {\n        if (!validator.isNonEmptyString(providerId) || !validator.isNonEmptyString(rawId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n        }\n        const request = {\n            federatedUserId: [{\n                    providerId,\n                    rawId,\n                }],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    }\n    /**\n     * Looks up multiple users by their identifiers (uid, email, etc).\n     *\n     * @param identifiers - The identifiers indicating the users\n     *     to be looked up. Must have <= 100 entries.\n     * @param A - promise that resolves with the set of successfully\n     *     looked up users. Possibly empty if no users were looked up.\n     */\n    getAccountInfoByIdentifiers(identifiers) {\n        if (identifiers.length === 0) {\n            return Promise.resolve({ users: [] });\n        }\n        else if (identifiers.length > MAX_GET_ACCOUNTS_BATCH_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`identifiers` parameter must have <= ' + MAX_GET_ACCOUNTS_BATCH_SIZE + ' entries.');\n        }\n        let request = {};\n        for (const id of identifiers) {\n            if ((0, identifier_1.isUidIdentifier)(id)) {\n                request = AbstractAuthRequestHandler.addUidToRequest(id, request);\n            }\n            else if ((0, identifier_1.isEmailIdentifier)(id)) {\n                request = AbstractAuthRequestHandler.addEmailToRequest(id, request);\n            }\n            else if ((0, identifier_1.isPhoneIdentifier)(id)) {\n                request = AbstractAuthRequestHandler.addPhoneToRequest(id, request);\n            }\n            else if ((0, identifier_1.isProviderIdentifier)(id)) {\n                request = AbstractAuthRequestHandler.addProviderToRequest(id, request);\n            }\n            else {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Unrecognized identifier: ' + id);\n            }\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO, request);\n    }\n    /**\n     * Exports the users (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param maxResults - The page size, 1000 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param pageToken - The next page token. If not specified, returns users starting\n     *     without any offset. Users are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @returns A promise that resolves with the current batch of downloaded\n     *     users and the next page token if available. For the last page, an empty list of users\n     *     and no page token are returned.\n     */\n    downloadAccount(maxResults = MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE, pageToken) {\n        // Construct request.\n        const request = {\n            maxResults,\n            nextPageToken: pageToken,\n        };\n        // Remove next page token if not provided.\n        if (typeof request.nextPageToken === 'undefined') {\n            delete request.nextPageToken;\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT, request)\n            .then((response) => {\n            // No more users available.\n            if (!response.users) {\n                response.users = [];\n            }\n            return response;\n        });\n    }\n    /**\n     * Imports the list of users provided to Firebase Auth. This is useful when\n     * migrating from an external authentication system without having to use the Firebase CLI SDK.\n     * At most, 1000 users are allowed to be imported one at a time.\n     * When importing a list of password users, UserImportOptions are required to be specified.\n     *\n     * @param users - The list of user records to import to Firebase Auth.\n     * @param options - The user import options, required when the users provided\n     *     include password credentials.\n     * @returns A promise that resolves when the operation completes\n     *     with the result of the import. This includes the number of successful imports, the number\n     *     of failed uploads and their corresponding errors.\n     */\n    uploadAccount(users, options) {\n        // This will throw if any error is detected in the hash options.\n        // For errors in the list of users, this will not throw and will report the errors and the\n        // corresponding user index in the user import generated response below.\n        // No need to validate raw request or raw response as this is done in UserImportBuilder.\n        const userImportBuilder = new user_import_builder_1.UserImportBuilder(users, options, (userRequest) => {\n            // Pass true to validate the uploadAccount specific fields.\n            validateCreateEditRequest(userRequest, WriteOperationType.Upload);\n        });\n        const request = userImportBuilder.buildRequest();\n        // Fail quickly if more users than allowed are to be imported.\n        if (validator.isArray(users) && users.length > MAX_UPLOAD_ACCOUNT_BATCH_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, `A maximum of ${MAX_UPLOAD_ACCOUNT_BATCH_SIZE} users can be imported at once.`);\n        }\n        // If no remaining user in request after client side processing, there is no need\n        // to send the request to the server.\n        if (!request.users || request.users.length === 0) {\n            return Promise.resolve(userImportBuilder.buildResponse([]));\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_UPLOAD_ACCOUNT, request)\n            .then((response) => {\n            // No error object is returned if no error encountered.\n            const failedUploads = (response.error || []);\n            // Rewrite response as UserImportResult and re-insert client previously detected errors.\n            return userImportBuilder.buildResponse(failedUploads);\n        });\n    }\n    /**\n     * Deletes an account identified by a uid.\n     *\n     * @param uid - The uid of the user to delete.\n     * @returns A promise that resolves when the user is deleted.\n     */\n    deleteAccount(uid) {\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        const request = {\n            localId: uid,\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DELETE_ACCOUNT, request);\n    }\n    deleteAccounts(uids, force) {\n        if (uids.length === 0) {\n            return Promise.resolve({});\n        }\n        else if (uids.length > MAX_DELETE_ACCOUNTS_BATCH_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`uids` parameter must have <= ' + MAX_DELETE_ACCOUNTS_BATCH_SIZE + ' entries.');\n        }\n        const request = {\n            localIds: [],\n            force,\n        };\n        uids.forEach((uid) => {\n            if (!validator.isUid(uid)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n            }\n            request.localIds.push(uid);\n        });\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS, request);\n    }\n    /**\n     * Sets additional developer claims on an existing user identified by provided UID.\n     *\n     * @param uid - The user to edit.\n     * @param customUserClaims - The developer claims to set.\n     * @returns A promise that resolves when the operation completes\n     *     with the user id that was edited.\n     */\n    setCustomUserClaims(uid, customUserClaims) {\n        // Validate user UID.\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        else if (!validator.isObject(customUserClaims)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'CustomUserClaims argument must be an object or null.'));\n        }\n        // Delete operation. Replace null with an empty object.\n        if (customUserClaims === null) {\n            customUserClaims = {};\n        }\n        // Construct custom user attribute editting request.\n        const request = {\n            localId: uid,\n            customAttributes: JSON.stringify(customUserClaims),\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request)\n            .then((response) => {\n            return response.localId;\n        });\n    }\n    /**\n     * Edits an existing user.\n     *\n     * @param uid - The user to edit.\n     * @param properties - The properties to set on the user.\n     * @returns A promise that resolves when the operation completes\n     *     with the user id that was edited.\n     */\n    updateExistingAccount(uid, properties) {\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        else if (!validator.isNonNullObject(properties)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n        }\n        else if (validator.isNonNullObject(properties.providerToLink)) {\n            // TODO(rsgowman): These checks overlap somewhat with\n            // validateProviderUserInfo. It may be possible to refactor a bit.\n            if (!validator.isNonEmptyString(properties.providerToLink.providerId)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providerToLink.providerId of properties argument must be a non-empty string.');\n            }\n            if (!validator.isNonEmptyString(properties.providerToLink.uid)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providerToLink.uid of properties argument must be a non-empty string.');\n            }\n        }\n        else if (typeof properties.providersToUnlink !== 'undefined') {\n            if (!validator.isArray(properties.providersToUnlink)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providersToUnlink of properties argument must be an array of strings.');\n            }\n            properties.providersToUnlink.forEach((providerId) => {\n                if (!validator.isNonEmptyString(providerId)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providersToUnlink of properties argument must be an array of strings.');\n                }\n            });\n        }\n        // Build the setAccountInfo request.\n        const request = (0, deep_copy_1.deepCopy)(properties);\n        request.localId = uid;\n        // For deleting displayName or photoURL, these values must be passed as null.\n        // They will be removed from the backend request and an additional parameter\n        // deleteAttribute: ['PHOTO_URL', 'DISPLAY_NAME']\n        // with an array of the parameter names to delete will be passed.\n        // Parameters that are deletable and their deleteAttribute names.\n        // Use client facing names, photoURL instead of photoUrl.\n        const deletableParams = {\n            displayName: 'DISPLAY_NAME',\n            photoURL: 'PHOTO_URL',\n        };\n        // Properties to delete if available.\n        request.deleteAttribute = [];\n        for (const key in deletableParams) {\n            if (request[key] === null) {\n                // Add property identifier to list of attributes to delete.\n                request.deleteAttribute.push(deletableParams[key]);\n                // Remove property from request.\n                delete request[key];\n            }\n        }\n        if (request.deleteAttribute.length === 0) {\n            delete request.deleteAttribute;\n        }\n        // For deleting phoneNumber, this value must be passed as null.\n        // It will be removed from the backend request and an additional parameter\n        // deleteProvider: ['phone'] with an array of providerIds (phone in this case),\n        // will be passed.\n        if (request.phoneNumber === null) {\n            request.deleteProvider ? request.deleteProvider.push('phone') : request.deleteProvider = ['phone'];\n            delete request.phoneNumber;\n        }\n        if (typeof (request.providerToLink) !== 'undefined') {\n            request.linkProviderUserInfo = (0, deep_copy_1.deepCopy)(request.providerToLink);\n            delete request.providerToLink;\n            request.linkProviderUserInfo.rawId = request.linkProviderUserInfo.uid;\n            delete request.linkProviderUserInfo.uid;\n        }\n        if (typeof (request.providersToUnlink) !== 'undefined') {\n            if (!validator.isArray(request.deleteProvider)) {\n                request.deleteProvider = [];\n            }\n            request.deleteProvider = request.deleteProvider.concat(request.providersToUnlink);\n            delete request.providersToUnlink;\n        }\n        // Rewrite photoURL to photoUrl.\n        if (typeof request.photoURL !== 'undefined') {\n            request.photoUrl = request.photoURL;\n            delete request.photoURL;\n        }\n        // Rewrite disabled to disableUser.\n        if (typeof request.disabled !== 'undefined') {\n            request.disableUser = request.disabled;\n            delete request.disabled;\n        }\n        // Construct mfa related user data.\n        if (validator.isNonNullObject(request.multiFactor)) {\n            if (request.multiFactor.enrolledFactors === null) {\n                // Remove all second factors.\n                request.mfa = {};\n            }\n            else if (validator.isArray(request.multiFactor.enrolledFactors)) {\n                request.mfa = {\n                    enrollments: [],\n                };\n                try {\n                    request.multiFactor.enrolledFactors.forEach((multiFactorInfo) => {\n                        request.mfa.enrollments.push((0, user_import_builder_1.convertMultiFactorInfoToServerFormat)(multiFactorInfo));\n                    });\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n                if (request.mfa.enrollments.length === 0) {\n                    delete request.mfa.enrollments;\n                }\n            }\n            delete request.multiFactor;\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request)\n            .then((response) => {\n            return response.localId;\n        });\n    }\n    /**\n     * Revokes all refresh tokens for the specified user identified by the uid provided.\n     * In addition to revoking all refresh tokens for a user, all ID tokens issued\n     * before revocation will also be revoked on the Auth backend. Any request with an\n     * ID token generated before revocation will be rejected with a token expired error.\n     * Note that due to the fact that the timestamp is stored in seconds, any tokens minted in\n     * the same second as the revocation will still be valid. If there is a chance that a token\n     * was minted in the last second, delay for 1 second before revoking.\n     *\n     * @param uid - The user whose tokens are to be revoked.\n     * @returns A promise that resolves when the operation completes\n     *     successfully with the user id of the corresponding user.\n     */\n    revokeRefreshTokens(uid) {\n        // Validate user UID.\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        const request = {\n            localId: uid,\n            // validSince is in UTC seconds.\n            validSince: Math.floor(new Date().getTime() / 1000),\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request)\n            .then((response) => {\n            return response.localId;\n        });\n    }\n    /**\n     * Create a new user with the properties supplied.\n     *\n     * @param properties - The properties to set on the user.\n     * @returns A promise that resolves when the operation completes\n     *     with the user id that was created.\n     */\n    createNewAccount(properties) {\n        if (!validator.isNonNullObject(properties)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n        }\n        const request = (0, deep_copy_1.deepCopy)(properties);\n        // Rewrite photoURL to photoUrl.\n        if (typeof request.photoURL !== 'undefined') {\n            request.photoUrl = request.photoURL;\n            delete request.photoURL;\n        }\n        // Rewrite uid to localId if it exists.\n        if (typeof request.uid !== 'undefined') {\n            request.localId = request.uid;\n            delete request.uid;\n        }\n        // Construct mfa related user data.\n        if (validator.isNonNullObject(request.multiFactor)) {\n            if (validator.isNonEmptyArray(request.multiFactor.enrolledFactors)) {\n                const mfaInfo = [];\n                try {\n                    request.multiFactor.enrolledFactors.forEach((multiFactorInfo) => {\n                        // Enrollment time and uid are not allowed for signupNewUser endpoint.\n                        // They will automatically be provisioned server side.\n                        if ('enrollmentTime' in multiFactorInfo) {\n                            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"enrollmentTime\" is not supported when adding second factors via \"createUser()\"');\n                        }\n                        else if ('uid' in multiFactorInfo) {\n                            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"uid\" is not supported when adding second factors via \"createUser()\"');\n                        }\n                        mfaInfo.push((0, user_import_builder_1.convertMultiFactorInfoToServerFormat)(multiFactorInfo));\n                    });\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n                request.mfaInfo = mfaInfo;\n            }\n            delete request.multiFactor;\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SIGN_UP_NEW_USER, request)\n            .then((response) => {\n            // Return the user id.\n            return response.localId;\n        });\n    }\n    /**\n     * Generates the out of band email action link for the email specified using the action code settings provided.\n     * Returns a promise that resolves with the generated link.\n     *\n     * @param requestType - The request type. This could be either used for password reset,\n     *     email verification, email link sign-in.\n     * @param email - The email of the user the link is being sent to.\n     * @param actionCodeSettings - The optional action code setings which defines whether\n     *     the link is to be handled by a mobile app and the additional state information to be passed in the\n     *     deep link, etc. Required when requestType === 'EMAIL_SIGNIN'\n     * @param newEmail - The email address the account is being updated to.\n     *     Required only for VERIFY_AND_CHANGE_EMAIL requests.\n     * @returns A promise that resolves with the email action link.\n     */\n    getEmailActionLink(requestType, email, actionCodeSettings, newEmail) {\n        let request = {\n            requestType,\n            email,\n            returnOobLink: true,\n            ...(typeof newEmail !== 'undefined') && { newEmail },\n        };\n        // ActionCodeSettings required for email link sign-in to determine the url where the sign-in will\n        // be completed.\n        if (typeof actionCodeSettings === 'undefined' && requestType === 'EMAIL_SIGNIN') {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"`actionCodeSettings` is required when `requestType` === 'EMAIL_SIGNIN'\"));\n        }\n        if (typeof actionCodeSettings !== 'undefined' || requestType === 'EMAIL_SIGNIN') {\n            try {\n                const builder = new action_code_settings_builder_1.ActionCodeSettingsBuilder(actionCodeSettings);\n                request = (0, deep_copy_1.deepExtend)(request, builder.buildRequest());\n            }\n            catch (e) {\n                return Promise.reject(e);\n            }\n        }\n        if (requestType === 'VERIFY_AND_CHANGE_EMAIL' && typeof newEmail === 'undefined') {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"`newEmail` is required when `requestType` === 'VERIFY_AND_CHANGE_EMAIL'\"));\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), FIREBASE_AUTH_GET_OOB_CODE, request)\n            .then((response) => {\n            // Return the link.\n            return response.oobLink;\n        });\n    }\n    /**\n     * Looks up an OIDC provider configuration by provider ID.\n     *\n     * @param providerId - The provider identifier of the configuration to lookup.\n     * @returns A promise that resolves with the provider configuration information.\n     */\n    getOAuthIdpConfig(providerId) {\n        if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_OAUTH_IDP_CONFIG, {}, { providerId });\n    }\n    /**\n     * Lists the OIDC configurations (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param maxResults - The page size, 100 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param pageToken - The next page token. If not specified, returns OIDC configurations\n     *     without any offset. Configurations are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @returns A promise that resolves with the current batch of downloaded\n     *     OIDC configurations and the next page token if available. For the last page, an empty list of provider\n     *     configuration and no page token are returned.\n     */\n    listOAuthIdpConfigs(maxResults = MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE, pageToken) {\n        const request = {\n            pageSize: maxResults,\n        };\n        // Add next page token if provided.\n        if (typeof pageToken !== 'undefined') {\n            request.pageToken = pageToken;\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_OAUTH_IDP_CONFIGS, request)\n            .then((response) => {\n            if (!response.oauthIdpConfigs) {\n                response.oauthIdpConfigs = [];\n                delete response.nextPageToken;\n            }\n            return response;\n        });\n    }\n    /**\n     * Deletes an OIDC configuration identified by a providerId.\n     *\n     * @param providerId - The identifier of the OIDC configuration to delete.\n     * @returns A promise that resolves when the OIDC provider is deleted.\n     */\n    deleteOAuthIdpConfig(providerId) {\n        if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_OAUTH_IDP_CONFIG, {}, { providerId })\n            .then(() => {\n            // Return nothing.\n        });\n    }\n    /**\n     * Creates a new OIDC provider configuration with the properties provided.\n     *\n     * @param options - The properties to set on the new OIDC provider configuration to be created.\n     * @returns A promise that resolves with the newly created OIDC\n     *     configuration.\n     */\n    createOAuthIdpConfig(options) {\n        // Construct backend request.\n        let request;\n        try {\n            request = auth_config_1.OIDCConfig.buildServerRequest(options) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        const providerId = options.providerId;\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_OAUTH_IDP_CONFIG, request, { providerId })\n            .then((response) => {\n            if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC provider configuration');\n            }\n            return response;\n        });\n    }\n    /**\n     * Updates an existing OIDC provider configuration with the properties provided.\n     *\n     * @param providerId - The provider identifier of the OIDC configuration to update.\n     * @param options - The properties to update on the existing configuration.\n     * @returns A promise that resolves with the modified provider\n     *     configuration.\n     */\n    updateOAuthIdpConfig(providerId, options) {\n        if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        // Construct backend request.\n        let request;\n        try {\n            request = auth_config_1.OIDCConfig.buildServerRequest(options, true) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        const updateMask = utils.generateUpdateMask(request);\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_OAUTH_IDP_CONFIG, request, { providerId, updateMask: updateMask.join(',') })\n            .then((response) => {\n            if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC provider configuration');\n            }\n            return response;\n        });\n    }\n    /**\n     * Looks up an SAML provider configuration by provider ID.\n     *\n     * @param providerId - The provider identifier of the configuration to lookup.\n     * @returns A promise that resolves with the provider configuration information.\n     */\n    getInboundSamlConfig(providerId) {\n        if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_INBOUND_SAML_CONFIG, {}, { providerId });\n    }\n    /**\n     * Lists the SAML configurations (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param maxResults - The page size, 100 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param pageToken - The next page token. If not specified, returns SAML configurations starting\n     *     without any offset. Configurations are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @returns A promise that resolves with the current batch of downloaded\n     *     SAML configurations and the next page token if available. For the last page, an empty list of provider\n     *     configuration and no page token are returned.\n     */\n    listInboundSamlConfigs(maxResults = MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE, pageToken) {\n        const request = {\n            pageSize: maxResults,\n        };\n        // Add next page token if provided.\n        if (typeof pageToken !== 'undefined') {\n            request.pageToken = pageToken;\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_INBOUND_SAML_CONFIGS, request)\n            .then((response) => {\n            if (!response.inboundSamlConfigs) {\n                response.inboundSamlConfigs = [];\n                delete response.nextPageToken;\n            }\n            return response;\n        });\n    }\n    /**\n     * Deletes a SAML configuration identified by a providerId.\n     *\n     * @param providerId - The identifier of the SAML configuration to delete.\n     * @returns A promise that resolves when the SAML provider is deleted.\n     */\n    deleteInboundSamlConfig(providerId) {\n        if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_INBOUND_SAML_CONFIG, {}, { providerId })\n            .then(() => {\n            // Return nothing.\n        });\n    }\n    /**\n     * Creates a new SAML provider configuration with the properties provided.\n     *\n     * @param options - The properties to set on the new SAML provider configuration to be created.\n     * @returns A promise that resolves with the newly created SAML\n     *     configuration.\n     */\n    createInboundSamlConfig(options) {\n        // Construct backend request.\n        let request;\n        try {\n            request = auth_config_1.SAMLConfig.buildServerRequest(options) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        const providerId = options.providerId;\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_INBOUND_SAML_CONFIG, request, { providerId })\n            .then((response) => {\n            if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML provider configuration');\n            }\n            return response;\n        });\n    }\n    /**\n     * Updates an existing SAML provider configuration with the properties provided.\n     *\n     * @param providerId - The provider identifier of the SAML configuration to update.\n     * @param options - The properties to update on the existing configuration.\n     * @returns A promise that resolves with the modified provider\n     *     configuration.\n     */\n    updateInboundSamlConfig(providerId, options) {\n        if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        // Construct backend request.\n        let request;\n        try {\n            request = auth_config_1.SAMLConfig.buildServerRequest(options, true) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        const updateMask = utils.generateUpdateMask(request);\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_INBOUND_SAML_CONFIG, request, { providerId, updateMask: updateMask.join(',') })\n            .then((response) => {\n            if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML provider configuration');\n            }\n            return response;\n        });\n    }\n    /**\n     * Invokes the request handler based on the API settings object passed.\n     *\n     * @param urlBuilder - The URL builder for Auth endpoints.\n     * @param apiSettings - The API endpoint settings to apply to request and response.\n     * @param requestData - The request data.\n     * @param additionalResourceParams - Additional resource related params if needed.\n     * @returns A promise that resolves with the response.\n     */\n    invokeRequestHandler(urlBuilder, apiSettings, requestData, additionalResourceParams) {\n        return urlBuilder.getUrl(apiSettings.getEndpoint(), additionalResourceParams)\n            .then((url) => {\n            // Validate request.\n            if (requestData) {\n                const requestValidator = apiSettings.getRequestValidator();\n                requestValidator(requestData);\n            }\n            // Process request.\n            const req = {\n                method: apiSettings.getHttpMethod(),\n                url,\n                headers: FIREBASE_AUTH_HEADERS,\n                data: requestData,\n                timeout: FIREBASE_AUTH_TIMEOUT,\n            };\n            return this.httpClient.send(req);\n        })\n            .then((response) => {\n            // Validate response.\n            const responseValidator = apiSettings.getResponseValidator();\n            responseValidator(response.data);\n            // Return entire response.\n            return response.data;\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.RequestResponseError) {\n                const error = err.response.data;\n                const errorCode = AbstractAuthRequestHandler.getErrorCode(error);\n                if (!errorCode) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + error + '. Additionally, an ' +\n                        'internal error occurred while attempting to extract the ' +\n                        'errorcode from the error.');\n                }\n                throw error_1.FirebaseAuthError.fromServerError(errorCode, /* message */ undefined, error);\n            }\n            throw err;\n        });\n    }\n    /**\n     * @returns The current Auth user management resource URL builder.\n     */\n    getAuthUrlBuilder() {\n        if (!this.authUrlBuilder) {\n            this.authUrlBuilder = this.newAuthUrlBuilder();\n        }\n        return this.authUrlBuilder;\n    }\n    /**\n     * @returns The current project config resource URL builder.\n     */\n    getProjectConfigUrlBuilder() {\n        if (!this.projectConfigUrlBuilder) {\n            this.projectConfigUrlBuilder = this.newProjectConfigUrlBuilder();\n        }\n        return this.projectConfigUrlBuilder;\n    }\n}\nexports.AbstractAuthRequestHandler = AbstractAuthRequestHandler;\n/** Instantiates the getConfig endpoint settings. */\nconst GET_PROJECT_CONFIG = new api_request_1.ApiSettings('/config', 'GET')\n    .setResponseValidator((response) => {\n    // Response should always contain at least the config name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get project config');\n    }\n});\n/** Instantiates the updateConfig endpoint settings. */\nconst UPDATE_PROJECT_CONFIG = new api_request_1.ApiSettings('/config?updateMask={updateMask}', 'PATCH')\n    .setResponseValidator((response) => {\n    // Response should always contain at least the config name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update project config');\n    }\n});\n/** Instantiates the getTenant endpoint settings. */\nconst GET_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'GET')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain at least the tenant name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get tenant');\n    }\n});\n/** Instantiates the deleteTenant endpoint settings. */\nconst DELETE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'DELETE');\n/** Instantiates the updateTenant endpoint settings. */\nconst UPDATE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}?updateMask={updateMask}', 'PATCH')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain at least the tenant name.\n    if (!validator.isNonEmptyString(response.name) ||\n        !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update tenant');\n    }\n});\n/** Instantiates the listTenants endpoint settings. */\nconst LIST_TENANTS = new api_request_1.ApiSettings('/tenants', 'GET')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate next page token.\n    if (typeof request.pageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.pageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.pageSize) ||\n        request.pageSize <= 0 ||\n        request.pageSize > MAX_LIST_TENANT_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive non-zero number that does not exceed ' +\n            `the allowed ${MAX_LIST_TENANT_PAGE_SIZE}.`);\n    }\n});\n/** Instantiates the createTenant endpoint settings. */\nconst CREATE_TENANT = new api_request_1.ApiSettings('/tenants', 'POST')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain at least the tenant name.\n    if (!validator.isNonEmptyString(response.name) ||\n        !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new tenant');\n    }\n});\n/**\n * Utility for sending requests to Auth server that are Auth instance related. This includes user, tenant,\n * and project config management related APIs. This extends the BaseFirebaseAuthRequestHandler class and defines\n * additional tenant management related APIs.\n */\nclass AuthRequestHandler extends AbstractAuthRequestHandler {\n    /**\n     * The FirebaseAuthRequestHandler constructor used to initialize an instance using a FirebaseApp.\n     *\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @constructor\n     */\n    constructor(app) {\n        super(app);\n        this.authResourceUrlBuilder = new AuthResourceUrlBuilder(app, 'v2');\n    }\n    /**\n     * @returns A new Auth user management resource URL builder instance.\n     */\n    newAuthUrlBuilder() {\n        return new AuthResourceUrlBuilder(this.app, 'v1');\n    }\n    /**\n     * @returns A new project config resource URL builder instance.\n     */\n    newProjectConfigUrlBuilder() {\n        return new AuthResourceUrlBuilder(this.app, 'v2');\n    }\n    /**\n     * Get the current project's config\n     * @returns A promise that resolves with the project config information.\n     */\n    getProjectConfig() {\n        return this.invokeRequestHandler(this.authResourceUrlBuilder, GET_PROJECT_CONFIG, {}, {})\n            .then((response) => {\n            return response;\n        });\n    }\n    /**\n     * Update the current project's config.\n     * @returns A promise that resolves with the project config information.\n     */\n    updateProjectConfig(options) {\n        try {\n            const request = project_config_1.ProjectConfig.buildServerRequest(options);\n            const updateMask = utils.generateUpdateMask(request);\n            return this.invokeRequestHandler(this.authResourceUrlBuilder, UPDATE_PROJECT_CONFIG, request, { updateMask: updateMask.join(',') })\n                .then((response) => {\n                return response;\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    /**\n     * Looks up a tenant by tenant ID.\n     *\n     * @param tenantId - The tenant identifier of the tenant to lookup.\n     * @returns A promise that resolves with the tenant information.\n     */\n    getTenant(tenantId) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n        }\n        return this.invokeRequestHandler(this.authResourceUrlBuilder, GET_TENANT, {}, { tenantId })\n            .then((response) => {\n            return response;\n        });\n    }\n    /**\n     * Exports the tenants (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param maxResults - The page size, 1000 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param pageToken - The next page token. If not specified, returns tenants starting\n     *     without any offset. Tenants are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @returns A promise that resolves with the current batch of downloaded\n     *     tenants and the next page token if available. For the last page, an empty list of tenants\n     *     and no page token are returned.\n     */\n    listTenants(maxResults = MAX_LIST_TENANT_PAGE_SIZE, pageToken) {\n        const request = {\n            pageSize: maxResults,\n            pageToken,\n        };\n        // Remove next page token if not provided.\n        if (typeof request.pageToken === 'undefined') {\n            delete request.pageToken;\n        }\n        return this.invokeRequestHandler(this.authResourceUrlBuilder, LIST_TENANTS, request)\n            .then((response) => {\n            if (!response.tenants) {\n                response.tenants = [];\n                delete response.nextPageToken;\n            }\n            return response;\n        });\n    }\n    /**\n     * Deletes a tenant identified by a tenantId.\n     *\n     * @param tenantId - The identifier of the tenant to delete.\n     * @returns A promise that resolves when the tenant is deleted.\n     */\n    deleteTenant(tenantId) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n        }\n        return this.invokeRequestHandler(this.authResourceUrlBuilder, DELETE_TENANT, undefined, { tenantId })\n            .then(() => {\n            // Return nothing.\n        });\n    }\n    /**\n     * Creates a new tenant with the properties provided.\n     *\n     * @param tenantOptions - The properties to set on the new tenant to be created.\n     * @returns A promise that resolves with the newly created tenant object.\n     */\n    createTenant(tenantOptions) {\n        try {\n            // Construct backend request.\n            const request = tenant_1.Tenant.buildServerRequest(tenantOptions, true);\n            return this.invokeRequestHandler(this.authResourceUrlBuilder, CREATE_TENANT, request)\n                .then((response) => {\n                return response;\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    /**\n     * Updates an existing tenant with the properties provided.\n     *\n     * @param tenantId - The tenant identifier of the tenant to update.\n     * @param tenantOptions - The properties to update on the existing tenant.\n     * @returns A promise that resolves with the modified tenant object.\n     */\n    updateTenant(tenantId, tenantOptions) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n        }\n        try {\n            // Construct backend request.\n            const request = tenant_1.Tenant.buildServerRequest(tenantOptions, false);\n            // Do not traverse deep into testPhoneNumbers. The entire content should be replaced\n            // and not just specific phone numbers.\n            const updateMask = utils.generateUpdateMask(request, ['testPhoneNumbers']);\n            return this.invokeRequestHandler(this.authResourceUrlBuilder, UPDATE_TENANT, request, { tenantId, updateMask: updateMask.join(',') })\n                .then((response) => {\n                return response;\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\nexports.AuthRequestHandler = AuthRequestHandler;\n/**\n * Utility for sending requests to Auth server that are tenant Auth instance related. This includes user\n * management related APIs for specified tenants.\n * This extends the BaseFirebaseAuthRequestHandler class.\n */\nclass TenantAwareAuthRequestHandler extends AbstractAuthRequestHandler {\n    /**\n     * The FirebaseTenantRequestHandler constructor used to initialize an instance using a\n     * FirebaseApp and a tenant ID.\n     *\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @param tenantId - The request handler's tenant ID.\n     * @constructor\n     */\n    constructor(app, tenantId) {\n        super(app);\n        this.tenantId = tenantId;\n    }\n    /**\n     * @returns A new Auth user management resource URL builder instance.\n     */\n    newAuthUrlBuilder() {\n        return new TenantAwareAuthResourceUrlBuilder(this.app, 'v1', this.tenantId);\n    }\n    /**\n     * @returns A new project config resource URL builder instance.\n     */\n    newProjectConfigUrlBuilder() {\n        return new TenantAwareAuthResourceUrlBuilder(this.app, 'v2', this.tenantId);\n    }\n    /**\n     * Imports the list of users provided to Firebase Auth. This is useful when\n     * migrating from an external authentication system without having to use the Firebase CLI SDK.\n     * At most, 1000 users are allowed to be imported one at a time.\n     * When importing a list of password users, UserImportOptions are required to be specified.\n     *\n     * Overrides the superclass methods by adding an additional check to match tenant IDs of\n     * imported user records if present.\n     *\n     * @param users - The list of user records to import to Firebase Auth.\n     * @param options - The user import options, required when the users provided\n     *     include password credentials.\n     * @returns A promise that resolves when the operation completes\n     *     with the result of the import. This includes the number of successful imports, the number\n     *     of failed uploads and their corresponding errors.\n     */\n    uploadAccount(users, options) {\n        // Add additional check to match tenant ID of imported user records.\n        users.forEach((user, index) => {\n            if (validator.isNonEmptyString(user.tenantId) &&\n                user.tenantId !== this.tenantId) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID, `UserRecord of index \"${index}\" has mismatching tenant ID \"${user.tenantId}\"`);\n            }\n        });\n        return super.uploadAccount(users, options);\n    }\n}\nexports.TenantAwareAuthRequestHandler = TenantAwareAuthRequestHandler;\nfunction emulatorHost() {\n    return process.env.FIREBASE_AUTH_EMULATOR_HOST;\n}\n/**\n * When true the SDK should communicate with the Auth Emulator for all API\n * calls and also produce unsigned tokens.\n */\nfunction useEmulator() {\n    return !!emulatorHost();\n}\nexports.useEmulator = useEmulator;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7385, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/utils/crypto-signer.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CryptoSignerErrorCode = exports.CryptoSignerError = exports.cryptoSignerFromApp = exports.IAMSigner = exports.ServiceAccountSigner = void 0;\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst api_request_1 = require(\"./api-request\");\nconst validator = require(\"../utils/validator\");\nconst ALGORITHM_RS256 = 'RS256';\n/**\n * A CryptoSigner implementation that uses an explicitly specified service account private key to\n * sign data. Performs all operations locally, and does not make any RPC calls.\n */\nclass ServiceAccountSigner {\n    /**\n     * Creates a new CryptoSigner instance from the given service account credential.\n     *\n     * @param credential - A service account credential.\n     */\n    constructor(credential) {\n        this.credential = credential;\n        this.algorithm = ALGORITHM_RS256;\n        if (!credential) {\n            throw new CryptoSignerError({\n                code: CryptoSignerErrorCode.INVALID_CREDENTIAL,\n                message: 'INTERNAL ASSERT: Must provide a service account credential to initialize ServiceAccountSigner.',\n            });\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    sign(buffer) {\n        const crypto = require('crypto'); // eslint-disable-line @typescript-eslint/no-var-requires\n        const sign = crypto.createSign('RSA-SHA256');\n        sign.update(buffer);\n        return Promise.resolve(sign.sign(this.credential.privateKey));\n    }\n    /**\n     * @inheritDoc\n     */\n    getAccountId() {\n        return Promise.resolve(this.credential.clientEmail);\n    }\n}\nexports.ServiceAccountSigner = ServiceAccountSigner;\n/**\n * A CryptoSigner implementation that uses the remote IAM service to sign data. If initialized without\n * a service account ID, attempts to discover a service account ID by consulting the local Metadata\n * service. This will succeed in managed environments like Google Cloud Functions and App Engine.\n *\n * @see https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/signBlob\n * @see https://cloud.google.com/compute/docs/storing-retrieving-metadata\n */\nclass IAMSigner {\n    constructor(httpClient, serviceAccountId) {\n        this.algorithm = ALGORITHM_RS256;\n        if (!httpClient) {\n            throw new CryptoSignerError({\n                code: CryptoSignerErrorCode.INVALID_ARGUMENT,\n                message: 'INTERNAL ASSERT: Must provide a HTTP client to initialize IAMSigner.',\n            });\n        }\n        if (typeof serviceAccountId !== 'undefined' && !validator.isNonEmptyString(serviceAccountId)) {\n            throw new CryptoSignerError({\n                code: CryptoSignerErrorCode.INVALID_ARGUMENT,\n                message: 'INTERNAL ASSERT: Service account ID must be undefined or a non-empty string.',\n            });\n        }\n        this.httpClient = httpClient;\n        this.serviceAccountId = serviceAccountId;\n    }\n    /**\n     * @inheritDoc\n     */\n    sign(buffer) {\n        return this.getAccountId().then((serviceAccount) => {\n            const request = {\n                method: 'POST',\n                url: `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${serviceAccount}:signBlob`,\n                data: { payload: buffer.toString('base64') },\n            };\n            return this.httpClient.send(request);\n        }).then((response) => {\n            // Response from IAM is base64 encoded. Decode it into a buffer and return.\n            return Buffer.from(response.data.signedBlob, 'base64');\n        }).catch((err) => {\n            if (err instanceof api_request_1.RequestResponseError) {\n                throw new CryptoSignerError({\n                    code: CryptoSignerErrorCode.SERVER_ERROR,\n                    message: err.message,\n                    cause: err\n                });\n            }\n            throw err;\n        });\n    }\n    /**\n     * @inheritDoc\n     */\n    getAccountId() {\n        if (validator.isNonEmptyString(this.serviceAccountId)) {\n            return Promise.resolve(this.serviceAccountId);\n        }\n        const request = {\n            method: 'GET',\n            url: 'http://metadata/computeMetadata/v1/instance/service-accounts/default/email',\n            headers: {\n                'Metadata-Flavor': 'Google',\n            },\n        };\n        const client = new api_request_1.HttpClient();\n        return client.send(request).then((response) => {\n            if (!response.text) {\n                throw new CryptoSignerError({\n                    code: CryptoSignerErrorCode.INTERNAL_ERROR,\n                    message: 'HTTP Response missing payload',\n                });\n            }\n            this.serviceAccountId = response.text;\n            return response.text;\n        }).catch((err) => {\n            throw new CryptoSignerError({\n                code: CryptoSignerErrorCode.INVALID_CREDENTIAL,\n                message: 'Failed to determine service account. Make sure to initialize ' +\n                    'the SDK with a service account credential. Alternatively specify a service ' +\n                    `account with iam.serviceAccounts.signBlob permission. Original error: ${err}`,\n            });\n        });\n    }\n}\nexports.IAMSigner = IAMSigner;\n/**\n * Creates a new CryptoSigner instance for the given app. If the app has been initialized with a\n * service account credential, creates a ServiceAccountSigner.\n *\n * @param app - A FirebaseApp instance.\n * @returns A CryptoSigner instance.\n */\nfunction cryptoSignerFromApp(app) {\n    const credential = app.options.credential;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return new ServiceAccountSigner(credential);\n    }\n    return new IAMSigner(new api_request_1.AuthorizedHttpClient(app), app.options.serviceAccountId);\n}\nexports.cryptoSignerFromApp = cryptoSignerFromApp;\n/**\n * CryptoSigner error code structure.\n *\n * @param errorInfo - The error information (code and message).\n * @constructor\n */\nclass CryptoSignerError extends Error {\n    constructor(errorInfo) {\n        super(errorInfo.message);\n        this.errorInfo = errorInfo;\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        this.__proto__ = CryptoSignerError.prototype;\n    }\n    /** @returns The error code. */\n    get code() {\n        return this.errorInfo.code;\n    }\n    /** @returns The error message. */\n    get message() {\n        return this.errorInfo.message;\n    }\n    /** @returns The error data. */\n    get cause() {\n        return this.errorInfo.cause;\n    }\n}\nexports.CryptoSignerError = CryptoSignerError;\n/**\n * Crypto Signer error codes and their default messages.\n */\nclass CryptoSignerErrorCode {\n}\nexports.CryptoSignerErrorCode = CryptoSignerErrorCode;\nCryptoSignerErrorCode.INVALID_ARGUMENT = 'invalid-argument';\nCryptoSignerErrorCode.INTERNAL_ERROR = 'internal-error';\nCryptoSignerErrorCode.INVALID_CREDENTIAL = 'invalid-credential';\nCryptoSignerErrorCode.SERVER_ERROR = 'server-error';\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7578, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/token-generator.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleCryptoSignerError = exports.FirebaseTokenGenerator = exports.EmulatedSigner = exports.BLACKLISTED_CLAIMS = void 0;\nconst error_1 = require(\"../utils/error\");\nconst crypto_signer_1 = require(\"../utils/crypto-signer\");\nconst validator = require(\"../utils/validator\");\nconst utils_1 = require(\"../utils\");\nconst ALGORITHM_NONE = 'none';\nconst ONE_HOUR_IN_SECONDS = 60 * 60;\n// List of blacklisted claims which cannot be provided when creating a custom token\nexports.BLACKLISTED_CLAIMS = [\n    'acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti',\n    'nbf', 'nonce',\n];\n// Audience to use for Firebase Auth Custom tokens\nconst FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n/**\n * A CryptoSigner implementation that is used when communicating with the Auth emulator.\n * It produces unsigned tokens.\n */\nclass EmulatedSigner {\n    constructor() {\n        this.algorithm = ALGORITHM_NONE;\n    }\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    sign(buffer) {\n        return Promise.resolve(Buffer.from(''));\n    }\n    /**\n     * @inheritDoc\n     */\n    getAccountId() {\n        return Promise.resolve('firebase-auth-emulator@example.com');\n    }\n}\nexports.EmulatedSigner = EmulatedSigner;\n/**\n * Class for generating different types of Firebase Auth tokens (JWTs).\n *\n * @internal\n */\nclass FirebaseTokenGenerator {\n    /**\n     * @param tenantId - The tenant ID to use for the generated Firebase Auth\n     *     Custom token. If absent, then no tenant ID claim will be set in the\n     *     resulting JWT.\n     */\n    constructor(signer, tenantId) {\n        this.tenantId = tenantId;\n        if (!validator.isNonNullObject(signer)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a CryptoSigner to use FirebaseTokenGenerator.');\n        }\n        if (typeof this.tenantId !== 'undefined' && !validator.isNonEmptyString(this.tenantId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`tenantId` argument must be a non-empty string.');\n        }\n        this.signer = signer;\n    }\n    /**\n     * Creates a new Firebase Auth Custom token.\n     *\n     * @param uid - The user ID to use for the generated Firebase Auth Custom token.\n     * @param developerClaims - Optional developer claims to include in the generated Firebase\n     *     Auth Custom token.\n     * @returns A Promise fulfilled with a Firebase Auth Custom token signed with a\n     *     service account key and containing the provided payload.\n     */\n    createCustomToken(uid, developerClaims) {\n        let errorMessage;\n        if (!validator.isNonEmptyString(uid)) {\n            errorMessage = '`uid` argument must be a non-empty string uid.';\n        }\n        else if (uid.length > 128) {\n            errorMessage = '`uid` argument must a uid with less than or equal to 128 characters.';\n        }\n        else if (!this.isDeveloperClaimsValid_(developerClaims)) {\n            errorMessage = '`developerClaims` argument must be a valid, non-null object containing the developer claims.';\n        }\n        if (errorMessage) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n        }\n        const claims = {};\n        if (typeof developerClaims !== 'undefined') {\n            for (const key in developerClaims) {\n                /* istanbul ignore else */\n                if (Object.prototype.hasOwnProperty.call(developerClaims, key)) {\n                    if (exports.BLACKLISTED_CLAIMS.indexOf(key) !== -1) {\n                        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `Developer claim \"${key}\" is reserved and cannot be specified.`);\n                    }\n                    claims[key] = developerClaims[key];\n                }\n            }\n        }\n        return this.signer.getAccountId().then((account) => {\n            const header = {\n                alg: this.signer.algorithm,\n                typ: 'JWT',\n            };\n            const iat = Math.floor(Date.now() / 1000);\n            const body = {\n                aud: FIREBASE_AUDIENCE,\n                iat,\n                exp: iat + ONE_HOUR_IN_SECONDS,\n                iss: account,\n                sub: account,\n                uid,\n            };\n            if (this.tenantId) {\n                body.tenant_id = this.tenantId;\n            }\n            if (Object.keys(claims).length > 0) {\n                body.claims = claims;\n            }\n            const token = `${this.encodeSegment(header)}.${this.encodeSegment(body)}`;\n            const signPromise = this.signer.sign(Buffer.from(token));\n            return Promise.all([token, signPromise]);\n        }).then(([token, signature]) => {\n            return `${token}.${this.encodeSegment(signature)}`;\n        }).catch((err) => {\n            throw handleCryptoSignerError(err);\n        });\n    }\n    encodeSegment(segment) {\n        const buffer = (segment instanceof Buffer) ? segment : Buffer.from(JSON.stringify(segment));\n        return (0, utils_1.toWebSafeBase64)(buffer).replace(/=+$/, '');\n    }\n    /**\n     * Returns whether or not the provided developer claims are valid.\n     *\n     * @param developerClaims - Optional developer claims to validate.\n     * @returns True if the provided claims are valid; otherwise, false.\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    isDeveloperClaimsValid_(developerClaims) {\n        if (typeof developerClaims === 'undefined') {\n            return true;\n        }\n        return validator.isNonNullObject(developerClaims);\n    }\n}\nexports.FirebaseTokenGenerator = FirebaseTokenGenerator;\n/**\n * Creates a new FirebaseAuthError by extracting the error code, message and other relevant\n * details from a CryptoSignerError.\n *\n * @param err - The Error to convert into a FirebaseAuthError error\n * @returns A Firebase Auth error that can be returned to the user.\n */\nfunction handleCryptoSignerError(err) {\n    if (!(err instanceof crypto_signer_1.CryptoSignerError)) {\n        return err;\n    }\n    if (err.code === crypto_signer_1.CryptoSignerErrorCode.SERVER_ERROR && validator.isNonNullObject(err.cause)) {\n        const httpError = err.cause;\n        const errorResponse = httpError.response.data;\n        if (validator.isNonNullObject(errorResponse) && errorResponse.error) {\n            const errorCode = errorResponse.error.status;\n            const description = 'Please refer to https://firebase.google.com/docs/auth/admin/create-custom-tokens ' +\n                'for more details on how to use and troubleshoot this feature.';\n            const errorMsg = `${errorResponse.error.message}; ${description}`;\n            return error_1.FirebaseAuthError.fromServerError(errorCode, errorMsg, errorResponse);\n        }\n        return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + errorResponse + '. Additionally, an ' +\n            'internal error occurred while attempting to extract the ' +\n            'errorcode from the error.');\n    }\n    return new error_1.FirebaseAuthError(mapToAuthClientErrorCode(err.code), err.message);\n}\nexports.handleCryptoSignerError = handleCryptoSignerError;\nfunction mapToAuthClientErrorCode(code) {\n    switch (code) {\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_CREDENTIAL:\n            return error_1.AuthClientErrorCode.INVALID_CREDENTIAL;\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_ARGUMENT:\n            return error_1.AuthClientErrorCode.INVALID_ARGUMENT;\n        default:\n            return error_1.AuthClientErrorCode.INTERNAL_ERROR;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7783, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/utils/jwt.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JwtErrorCode = exports.JwtError = exports.decodeJwt = exports.verifyJwtSignature = exports.EmulatorSignatureVerifier = exports.PublicKeySignatureVerifier = exports.UrlKeyFetcher = exports.JwksFetcher = exports.ALGORITHM_RS256 = void 0;\nconst validator = require(\"./validator\");\nconst jwt = require(\"jsonwebtoken\");\nconst jwks = require(\"jwks-rsa\");\nconst api_request_1 = require(\"../utils/api-request\");\nexports.ALGORITHM_RS256 = 'RS256';\n// `jsonwebtoken` converts errors from the `getKey` callback to its own `JsonWebTokenError` type\n// and prefixes the error message with the following. Use the prefix to identify errors thrown\n// from the key provider callback.\n// https://github.com/auth0/node-jsonwebtoken/blob/d71e383862fc735991fd2e759181480f066bf138/verify.js#L96\nconst JWT_CALLBACK_ERROR_PREFIX = 'error in secret or public key callback: ';\nconst NO_MATCHING_KID_ERROR_MESSAGE = 'no-matching-kid-error';\nconst NO_KID_IN_HEADER_ERROR_MESSAGE = 'no-kid-in-header-error';\nconst HOUR_IN_SECONDS = 3600;\nclass JwksFetcher {\n    constructor(jwksUrl, httpAgent) {\n        this.publicKeysExpireAt = 0;\n        if (!validator.isURL(jwksUrl)) {\n            throw new Error('The provided JWKS URL is not a valid URL.');\n        }\n        this.client = jwks({\n            jwksUri: jwksUrl,\n            cache: false,\n            requestAgent: httpAgent,\n        });\n    }\n    fetchPublicKeys() {\n        if (this.shouldRefresh()) {\n            return this.refresh();\n        }\n        return Promise.resolve(this.publicKeys);\n    }\n    shouldRefresh() {\n        return !this.publicKeys || this.publicKeysExpireAt <= Date.now();\n    }\n    refresh() {\n        return this.client.getSigningKeys()\n            .then((signingKeys) => {\n            // reset expire at from previous set of keys.\n            this.publicKeysExpireAt = 0;\n            const newKeys = signingKeys.reduce((map, signingKey) => {\n                map[signingKey.kid] = signingKey.getPublicKey();\n                return map;\n            }, {});\n            this.publicKeysExpireAt = Date.now() + (HOUR_IN_SECONDS * 6 * 1000);\n            this.publicKeys = newKeys;\n            return newKeys;\n        }).catch((err) => {\n            throw new Error(`Error fetching Json Web Keys: ${err.message}`);\n        });\n    }\n}\nexports.JwksFetcher = JwksFetcher;\n/**\n * Class to fetch public keys from a client certificates URL.\n */\nclass UrlKeyFetcher {\n    constructor(clientCertUrl, httpAgent) {\n        this.clientCertUrl = clientCertUrl;\n        this.httpAgent = httpAgent;\n        this.publicKeysExpireAt = 0;\n        if (!validator.isURL(clientCertUrl)) {\n            throw new Error('The provided public client certificate URL is not a valid URL.');\n        }\n    }\n    /**\n     * Fetches the public keys for the Google certs.\n     *\n     * @returns A promise fulfilled with public keys for the Google certs.\n     */\n    fetchPublicKeys() {\n        if (this.shouldRefresh()) {\n            return this.refresh();\n        }\n        return Promise.resolve(this.publicKeys);\n    }\n    /**\n     * Checks if the cached public keys need to be refreshed.\n     *\n     * @returns Whether the keys should be fetched from the client certs url or not.\n     */\n    shouldRefresh() {\n        return !this.publicKeys || this.publicKeysExpireAt <= Date.now();\n    }\n    refresh() {\n        const client = new api_request_1.HttpClient();\n        const request = {\n            method: 'GET',\n            url: this.clientCertUrl,\n            httpAgent: this.httpAgent,\n        };\n        return client.send(request).then((resp) => {\n            if (!resp.isJson() || resp.data.error) {\n                // Treat all non-json messages and messages with an 'error' field as\n                // error responses.\n                throw new api_request_1.RequestResponseError(resp);\n            }\n            // reset expire at from previous set of keys.\n            this.publicKeysExpireAt = 0;\n            if (Object.prototype.hasOwnProperty.call(resp.headers, 'cache-control')) {\n                const cacheControlHeader = resp.headers['cache-control'];\n                const parts = cacheControlHeader.split(',');\n                parts.forEach((part) => {\n                    const subParts = part.trim().split('=');\n                    if (subParts[0] === 'max-age') {\n                        const maxAge = +subParts[1];\n                        this.publicKeysExpireAt = Date.now() + (maxAge * 1000);\n                    }\n                });\n            }\n            this.publicKeys = resp.data;\n            return resp.data;\n        }).catch((err) => {\n            if (err instanceof api_request_1.RequestResponseError) {\n                let errorMessage = 'Error fetching public keys for Google certs: ';\n                const resp = err.response;\n                if (resp.isJson() && resp.data.error) {\n                    errorMessage += `${resp.data.error}`;\n                    if (resp.data.error_description) {\n                        errorMessage += ' (' + resp.data.error_description + ')';\n                    }\n                }\n                else {\n                    errorMessage += `${resp.text}`;\n                }\n                throw new Error(errorMessage);\n            }\n            throw err;\n        });\n    }\n}\nexports.UrlKeyFetcher = UrlKeyFetcher;\n/**\n * Class for verifying JWT signature with a public key.\n */\nclass PublicKeySignatureVerifier {\n    constructor(keyFetcher) {\n        this.keyFetcher = keyFetcher;\n        if (!validator.isNonNullObject(keyFetcher)) {\n            throw new Error('The provided key fetcher is not an object or null.');\n        }\n    }\n    static withCertificateUrl(clientCertUrl, httpAgent) {\n        return new PublicKeySignatureVerifier(new UrlKeyFetcher(clientCertUrl, httpAgent));\n    }\n    static withJwksUrl(jwksUrl, httpAgent) {\n        return new PublicKeySignatureVerifier(new JwksFetcher(jwksUrl, httpAgent));\n    }\n    verify(token) {\n        if (!validator.isString(token)) {\n            return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'The provided token must be a string.'));\n        }\n        return verifyJwtSignature(token, getKeyCallback(this.keyFetcher), { algorithms: [exports.ALGORITHM_RS256] })\n            .catch((error) => {\n            if (error.code === JwtErrorCode.NO_KID_IN_HEADER) {\n                // No kid in JWT header. Try with all the public keys.\n                return this.verifyWithoutKid(token);\n            }\n            throw error;\n        });\n    }\n    verifyWithoutKid(token) {\n        return this.keyFetcher.fetchPublicKeys()\n            .then(publicKeys => this.verifyWithAllKeys(token, publicKeys));\n    }\n    verifyWithAllKeys(token, keys) {\n        const promises = [];\n        Object.values(keys).forEach((key) => {\n            const result = verifyJwtSignature(token, key)\n                .then(() => true)\n                .catch((error) => {\n                if (error.code === JwtErrorCode.TOKEN_EXPIRED) {\n                    throw error;\n                }\n                return false;\n            });\n            promises.push(result);\n        });\n        return Promise.all(promises)\n            .then((result) => {\n            if (result.every((r) => r === false)) {\n                throw new JwtError(JwtErrorCode.INVALID_SIGNATURE, 'Invalid token signature.');\n            }\n        });\n    }\n}\nexports.PublicKeySignatureVerifier = PublicKeySignatureVerifier;\n/**\n * Class for verifying unsigned (emulator) JWTs.\n */\nclass EmulatorSignatureVerifier {\n    verify(token) {\n        // Signature checks skipped for emulator; no need to fetch public keys.\n        return verifyJwtSignature(token, undefined, { algorithms: ['none'] });\n    }\n}\nexports.EmulatorSignatureVerifier = EmulatorSignatureVerifier;\n/**\n * Provides a callback to fetch public keys.\n *\n * @param fetcher - KeyFetcher to fetch the keys from.\n * @returns A callback function that can be used to get keys in `jsonwebtoken`.\n */\nfunction getKeyCallback(fetcher) {\n    return (header, callback) => {\n        if (!header.kid) {\n            callback(new Error(NO_KID_IN_HEADER_ERROR_MESSAGE));\n        }\n        const kid = header.kid || '';\n        fetcher.fetchPublicKeys().then((publicKeys) => {\n            if (!Object.prototype.hasOwnProperty.call(publicKeys, kid)) {\n                callback(new Error(NO_MATCHING_KID_ERROR_MESSAGE));\n            }\n            else {\n                callback(null, publicKeys[kid]);\n            }\n        })\n            .catch(error => {\n            callback(error);\n        });\n    };\n}\n/**\n * Verifies the signature of a JWT using the provided secret or a function to fetch\n * the secret or public key.\n *\n * @param token - The JWT to be verified.\n * @param secretOrPublicKey - The secret or a function to fetch the secret or public key.\n * @param options - JWT verification options.\n * @returns A Promise resolving for a token with a valid signature.\n */\nfunction verifyJwtSignature(token, secretOrPublicKey, options) {\n    if (!validator.isString(token)) {\n        return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'The provided token must be a string.'));\n    }\n    return new Promise((resolve, reject) => {\n        jwt.verify(token, secretOrPublicKey, options, (error) => {\n            if (!error) {\n                return resolve();\n            }\n            if (error.name === 'TokenExpiredError') {\n                return reject(new JwtError(JwtErrorCode.TOKEN_EXPIRED, 'The provided token has expired. Get a fresh token from your ' +\n                    'client app and try again.'));\n            }\n            else if (error.name === 'JsonWebTokenError') {\n                if (error.message && error.message.includes(JWT_CALLBACK_ERROR_PREFIX)) {\n                    const message = error.message.split(JWT_CALLBACK_ERROR_PREFIX).pop() || 'Error fetching public keys.';\n                    let code = JwtErrorCode.KEY_FETCH_ERROR;\n                    if (message === NO_MATCHING_KID_ERROR_MESSAGE) {\n                        code = JwtErrorCode.NO_MATCHING_KID;\n                    }\n                    else if (message === NO_KID_IN_HEADER_ERROR_MESSAGE) {\n                        code = JwtErrorCode.NO_KID_IN_HEADER;\n                    }\n                    return reject(new JwtError(code, message));\n                }\n            }\n            return reject(new JwtError(JwtErrorCode.INVALID_SIGNATURE, error.message));\n        });\n    });\n}\nexports.verifyJwtSignature = verifyJwtSignature;\n/**\n * Decodes general purpose Firebase JWTs.\n *\n * @param jwtToken - JWT token to be decoded.\n * @returns Decoded token containing the header and payload.\n */\nfunction decodeJwt(jwtToken) {\n    if (!validator.isString(jwtToken)) {\n        return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'The provided token must be a string.'));\n    }\n    const fullDecodedToken = jwt.decode(jwtToken, {\n        complete: true,\n    });\n    if (!fullDecodedToken) {\n        return Promise.reject(new JwtError(JwtErrorCode.INVALID_ARGUMENT, 'Decoding token failed.'));\n    }\n    const header = fullDecodedToken?.header;\n    const payload = fullDecodedToken?.payload;\n    return Promise.resolve({ header, payload });\n}\nexports.decodeJwt = decodeJwt;\n/**\n * Jwt error code structure.\n *\n * @param code - The error code.\n * @param message - The error message.\n * @constructor\n */\nclass JwtError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.code = code;\n        this.message = message;\n        this.__proto__ = JwtError.prototype;\n    }\n}\nexports.JwtError = JwtError;\n/**\n * JWT error codes.\n */\nvar JwtErrorCode;\n(function (JwtErrorCode) {\n    JwtErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n    JwtErrorCode[\"INVALID_CREDENTIAL\"] = \"invalid-credential\";\n    JwtErrorCode[\"TOKEN_EXPIRED\"] = \"token-expired\";\n    JwtErrorCode[\"INVALID_SIGNATURE\"] = \"invalid-token\";\n    JwtErrorCode[\"NO_MATCHING_KID\"] = \"no-matching-kid-error\";\n    JwtErrorCode[\"NO_KID_IN_HEADER\"] = \"no-kid-error\";\n    JwtErrorCode[\"KEY_FETCH_ERROR\"] = \"key-fetch-error\";\n})(JwtErrorCode || (exports.JwtErrorCode = JwtErrorCode = {}));\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8107, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/token-verifier.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createSessionCookieVerifier = exports.createAuthBlockingTokenVerifier = exports.createIdTokenVerifier = exports.FirebaseTokenVerifier = exports.SESSION_COOKIE_INFO = exports.AUTH_BLOCKING_TOKEN_INFO = exports.ID_TOKEN_INFO = void 0;\nconst error_1 = require(\"../utils/error\");\nconst util = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst jwt_1 = require(\"../utils/jwt\");\n// Audience to use for Firebase Auth Custom tokens\nconst FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n// URL containing the public keys for the Google certs (whose private keys are used to sign Firebase\n// Auth ID tokens)\nconst CLIENT_CERT_URL = 'https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com';\n// URL containing the public keys for Firebase session cookies. This will be updated to a different URL soon.\nconst SESSION_COOKIE_CERT_URL = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/publicKeys';\nconst EMULATOR_VERIFIER = new jwt_1.EmulatorSignatureVerifier();\n/**\n * User facing token information related to the Firebase ID token.\n *\n * @internal\n */\nexports.ID_TOKEN_INFO = {\n    url: 'https://firebase.google.com/docs/auth/admin/verify-id-tokens',\n    verifyApiName: 'verifyIdToken()',\n    jwtName: 'Firebase ID token',\n    shortName: 'ID token',\n    expiredErrorCode: error_1.AuthClientErrorCode.ID_TOKEN_EXPIRED,\n};\n/**\n * User facing token information related to the Firebase Auth Blocking token.\n *\n * @internal\n */\nexports.AUTH_BLOCKING_TOKEN_INFO = {\n    url: 'https://cloud.google.com/identity-platform/docs/blocking-functions',\n    verifyApiName: '_verifyAuthBlockingToken()',\n    jwtName: 'Firebase Auth Blocking token',\n    shortName: 'Auth Blocking token',\n    expiredErrorCode: error_1.AuthClientErrorCode.AUTH_BLOCKING_TOKEN_EXPIRED,\n};\n/**\n * User facing token information related to the Firebase session cookie.\n *\n * @internal\n */\nexports.SESSION_COOKIE_INFO = {\n    url: 'https://firebase.google.com/docs/auth/admin/manage-cookies',\n    verifyApiName: 'verifySessionCookie()',\n    jwtName: 'Firebase session cookie',\n    shortName: 'session cookie',\n    expiredErrorCode: error_1.AuthClientErrorCode.SESSION_COOKIE_EXPIRED,\n};\n/**\n * Class for verifying general purpose Firebase JWTs. This verifies ID tokens and session cookies.\n *\n * @internal\n */\nclass FirebaseTokenVerifier {\n    constructor(clientCertUrl, issuer, tokenInfo, app) {\n        this.issuer = issuer;\n        this.tokenInfo = tokenInfo;\n        this.app = app;\n        if (!validator.isURL(clientCertUrl)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided public client certificate URL is an invalid URL.');\n        }\n        else if (!validator.isURL(issuer)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT issuer is an invalid URL.');\n        }\n        else if (!validator.isNonNullObject(tokenInfo)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT information is not an object or null.');\n        }\n        else if (!validator.isURL(tokenInfo.url)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT verification documentation URL is invalid.');\n        }\n        else if (!validator.isNonEmptyString(tokenInfo.verifyApiName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT verify API name must be a non-empty string.');\n        }\n        else if (!validator.isNonEmptyString(tokenInfo.jwtName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public full name must be a non-empty string.');\n        }\n        else if (!validator.isNonEmptyString(tokenInfo.shortName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public short name must be a non-empty string.');\n        }\n        else if (!validator.isNonNullObject(tokenInfo.expiredErrorCode) || !('code' in tokenInfo.expiredErrorCode)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT expiration error code must be a non-null ErrorInfo object.');\n        }\n        this.shortNameArticle = tokenInfo.shortName.charAt(0).match(/[aeiou]/i) ? 'an' : 'a';\n        this.signatureVerifier =\n            jwt_1.PublicKeySignatureVerifier.withCertificateUrl(clientCertUrl, app.options.httpAgent);\n        // For backward compatibility, the project ID is validated in the verification call.\n    }\n    /**\n     * Verifies the format and signature of a Firebase Auth JWT token.\n     *\n     * @param jwtToken - The Firebase Auth JWT token to verify.\n     * @param isEmulator - Whether to accept Auth Emulator tokens.\n     * @returns A promise fulfilled with the decoded claims of the Firebase Auth ID token.\n     */\n    verifyJWT(jwtToken, isEmulator = false) {\n        if (!validator.isString(jwtToken)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `First argument to ${this.tokenInfo.verifyApiName} must be a ${this.tokenInfo.jwtName} string.`);\n        }\n        return this.ensureProjectId()\n            .then((projectId) => {\n            return this.decodeAndVerify(jwtToken, projectId, isEmulator);\n        })\n            .then((decoded) => {\n            const decodedIdToken = decoded.payload;\n            decodedIdToken.uid = decodedIdToken.sub;\n            return decodedIdToken;\n        });\n    }\n    /** @alpha */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    _verifyAuthBlockingToken(jwtToken, isEmulator, audience) {\n        if (!validator.isString(jwtToken)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `First argument to ${this.tokenInfo.verifyApiName} must be a ${this.tokenInfo.jwtName} string.`);\n        }\n        return this.ensureProjectId()\n            .then((projectId) => {\n            if (typeof audience === 'undefined') {\n                audience = `${projectId}.cloudfunctions.net/`;\n            }\n            return this.decodeAndVerify(jwtToken, projectId, isEmulator, audience);\n        })\n            .then((decoded) => {\n            const decodedAuthBlockingToken = decoded.payload;\n            decodedAuthBlockingToken.uid = decodedAuthBlockingToken.sub;\n            return decodedAuthBlockingToken;\n        });\n    }\n    ensureProjectId() {\n        return util.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Must initialize app with a cert credential or set your Firebase project ID as the ' +\n                    `GOOGLE_CLOUD_PROJECT environment variable to call ${this.tokenInfo.verifyApiName}.`);\n            }\n            return Promise.resolve(projectId);\n        });\n    }\n    decodeAndVerify(token, projectId, isEmulator, audience) {\n        return this.safeDecode(token)\n            .then((decodedToken) => {\n            this.verifyContent(decodedToken, projectId, isEmulator, audience);\n            return this.verifySignature(token, isEmulator)\n                .then(() => decodedToken);\n        });\n    }\n    safeDecode(jwtToken) {\n        return (0, jwt_1.decodeJwt)(jwtToken)\n            .catch((err) => {\n            if (err.code === jwt_1.JwtErrorCode.INVALID_ARGUMENT) {\n                const verifyJwtTokenDocsMessage = ` See ${this.tokenInfo.url} ` +\n                    `for details on how to retrieve ${this.shortNameArticle} ${this.tokenInfo.shortName}.`;\n                const errorMessage = `Decoding ${this.tokenInfo.jwtName} failed. Make sure you passed ` +\n                    `the entire string JWT which represents ${this.shortNameArticle} ` +\n                    `${this.tokenInfo.shortName}.` + verifyJwtTokenDocsMessage;\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n            }\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, err.message);\n        });\n    }\n    /**\n     * Verifies the content of a Firebase Auth JWT.\n     *\n     * @param fullDecodedToken - The decoded JWT.\n     * @param projectId - The Firebase Project Id.\n     * @param isEmulator - Whether the token is an Emulator token.\n     */\n    verifyContent(fullDecodedToken, projectId, isEmulator, audience) {\n        const header = fullDecodedToken && fullDecodedToken.header;\n        const payload = fullDecodedToken && fullDecodedToken.payload;\n        const projectIdMatchMessage = ` Make sure the ${this.tokenInfo.shortName} comes from the same ` +\n            'Firebase project as the service account used to authenticate this SDK.';\n        const verifyJwtTokenDocsMessage = ` See ${this.tokenInfo.url} ` +\n            `for details on how to retrieve ${this.shortNameArticle} ${this.tokenInfo.shortName}.`;\n        let errorMessage;\n        if (!isEmulator && typeof header.kid === 'undefined') {\n            const isCustomToken = (payload.aud === FIREBASE_AUDIENCE);\n            const isLegacyCustomToken = (header.alg === 'HS256' && payload.v === 0 && 'd' in payload && 'uid' in payload.d);\n            if (isCustomToken) {\n                errorMessage = `${this.tokenInfo.verifyApiName} expects ${this.shortNameArticle} ` +\n                    `${this.tokenInfo.shortName}, but was given a custom token.`;\n            }\n            else if (isLegacyCustomToken) {\n                errorMessage = `${this.tokenInfo.verifyApiName} expects ${this.shortNameArticle} ` +\n                    `${this.tokenInfo.shortName}, but was given a legacy custom token.`;\n            }\n            else {\n                errorMessage = `${this.tokenInfo.jwtName} has no \"kid\" claim.`;\n            }\n            errorMessage += verifyJwtTokenDocsMessage;\n        }\n        else if (!isEmulator && header.alg !== jwt_1.ALGORITHM_RS256) {\n            errorMessage = `${this.tokenInfo.jwtName} has incorrect algorithm. Expected \"` + jwt_1.ALGORITHM_RS256 + '\" but got ' +\n                '\"' + header.alg + '\".' + verifyJwtTokenDocsMessage;\n        }\n        else if (typeof audience !== 'undefined' && !payload.aud.includes(audience)) {\n            errorMessage = `${this.tokenInfo.jwtName} has incorrect \"aud\" (audience) claim. Expected \"` +\n                audience + '\" but got \"' + payload.aud + '\".' + verifyJwtTokenDocsMessage;\n        }\n        else if (typeof audience === 'undefined' && payload.aud !== projectId) {\n            errorMessage = `${this.tokenInfo.jwtName} has incorrect \"aud\" (audience) claim. Expected \"` +\n                projectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage +\n                verifyJwtTokenDocsMessage;\n        }\n        else if (payload.iss !== this.issuer + projectId) {\n            errorMessage = `${this.tokenInfo.jwtName} has incorrect \"iss\" (issuer) claim. Expected ` +\n                `\"${this.issuer}` + projectId + '\" but got \"' +\n                payload.iss + '\".' + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n        }\n        else if (!(payload.event_type !== undefined &&\n            (payload.event_type === 'beforeSendSms' || payload.event_type === 'beforeSendEmail'))) {\n            // excluding `beforeSendSms` and `beforeSendEmail` from processing `sub` as there is no user record available.\n            // `sub` is the same as `uid` which is part of the user record.\n            if (typeof payload.sub !== 'string') {\n                errorMessage = `${this.tokenInfo.jwtName} has no \"sub\" (subject) claim.` + verifyJwtTokenDocsMessage;\n            }\n            else if (payload.sub === '') {\n                errorMessage = `${this.tokenInfo.jwtName} has an empty \"sub\" (subject) claim.` +\n                    verifyJwtTokenDocsMessage;\n            }\n            else if (payload.sub.length > 128) {\n                errorMessage = `${this.tokenInfo.jwtName} has a \"sub\" (subject) claim longer than 128 characters.` +\n                    verifyJwtTokenDocsMessage;\n            }\n        }\n        if (errorMessage) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n        }\n    }\n    verifySignature(jwtToken, isEmulator) {\n        const verifier = isEmulator ? EMULATOR_VERIFIER : this.signatureVerifier;\n        return verifier.verify(jwtToken)\n            .catch((error) => {\n            throw this.mapJwtErrorToAuthError(error);\n        });\n    }\n    /**\n     * Maps JwtError to FirebaseAuthError\n     *\n     * @param error - JwtError to be mapped.\n     * @returns FirebaseAuthError or Error instance.\n     */\n    mapJwtErrorToAuthError(error) {\n        const verifyJwtTokenDocsMessage = ` See ${this.tokenInfo.url} ` +\n            `for details on how to retrieve ${this.shortNameArticle} ${this.tokenInfo.shortName}.`;\n        if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n            const errorMessage = `${this.tokenInfo.jwtName} has expired. Get a fresh ${this.tokenInfo.shortName}` +\n                ` from your client app and try again (auth/${this.tokenInfo.expiredErrorCode.code}).` +\n                verifyJwtTokenDocsMessage;\n            return new error_1.FirebaseAuthError(this.tokenInfo.expiredErrorCode, errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n            const errorMessage = `${this.tokenInfo.jwtName} has invalid signature.` + verifyJwtTokenDocsMessage;\n            return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n            const errorMessage = `${this.tokenInfo.jwtName} has \"kid\" claim which does not ` +\n                `correspond to a known public key. Most likely the ${this.tokenInfo.shortName} ` +\n                'is expired, so get a fresh token from your client app and try again.';\n            return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n        }\n        return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, error.message);\n    }\n}\nexports.FirebaseTokenVerifier = FirebaseTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase ID tokens.\n *\n * @internal\n * @param app - Firebase app instance.\n * @returns FirebaseTokenVerifier\n */\nfunction createIdTokenVerifier(app) {\n    return new FirebaseTokenVerifier(CLIENT_CERT_URL, 'https://securetoken.google.com/', exports.ID_TOKEN_INFO, app);\n}\nexports.createIdTokenVerifier = createIdTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase Auth Blocking tokens.\n *\n * @internal\n * @param app - Firebase app instance.\n * @returns FirebaseTokenVerifier\n */\nfunction createAuthBlockingTokenVerifier(app) {\n    return new FirebaseTokenVerifier(CLIENT_CERT_URL, 'https://securetoken.google.com/', exports.AUTH_BLOCKING_TOKEN_INFO, app);\n}\nexports.createAuthBlockingTokenVerifier = createAuthBlockingTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase session cookies.\n *\n * @internal\n * @param app - Firebase app instance.\n * @returns FirebaseTokenVerifier\n */\nfunction createSessionCookieVerifier(app) {\n    return new FirebaseTokenVerifier(SESSION_COOKIE_CERT_URL, 'https://session.firebase.google.com/', exports.SESSION_COOKIE_INFO, app);\n}\nexports.createSessionCookieVerifier = createSessionCookieVerifier;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8367, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/user-record.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserRecord = exports.UserInfo = exports.UserMetadata = exports.MultiFactorSettings = exports.TotpMultiFactorInfo = exports.TotpInfo = exports.PhoneMultiFactorInfo = exports.MultiFactorInfo = void 0;\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst validator_1 = require(\"../utils/validator\");\nconst utils = require(\"../utils\");\nconst error_1 = require(\"../utils/error\");\n/**\n * 'REDACTED', encoded as a base64 string.\n */\nconst B64_REDACTED = Buffer.from('REDACTED').toString('base64');\n/**\n * Parses a time stamp string or number and returns the corresponding date if valid.\n *\n * @param time - The unix timestamp string or number in milliseconds.\n * @returns The corresponding date as a UTC string, if valid. Otherwise, null.\n */\nfunction parseDate(time) {\n    try {\n        const date = new Date(parseInt(time, 10));\n        if (!isNaN(date.getTime())) {\n            return date.toUTCString();\n        }\n    }\n    catch (e) {\n        // Do nothing. null will be returned.\n    }\n    return null;\n}\nvar MultiFactorId;\n(function (MultiFactorId) {\n    MultiFactorId[\"Phone\"] = \"phone\";\n    MultiFactorId[\"Totp\"] = \"totp\";\n})(MultiFactorId || (MultiFactorId = {}));\n/**\n * Interface representing the common properties of a user-enrolled second factor.\n */\nclass MultiFactorInfo {\n    /**\n     * Initializes the MultiFactorInfo associated subclass using the server side.\n     * If no MultiFactorInfo is associated with the response, null is returned.\n     *\n     * @param response - The server side response.\n     * @internal\n     */\n    static initMultiFactorInfo(response) {\n        let multiFactorInfo = null;\n        // PhoneMultiFactorInfo, TotpMultiFactorInfo currently available.\n        try {\n            if (response.phoneInfo !== undefined) {\n                multiFactorInfo = new PhoneMultiFactorInfo(response);\n            }\n            else if (response.totpInfo !== undefined) {\n                multiFactorInfo = new TotpMultiFactorInfo(response);\n            }\n            else {\n                // Ignore the other SDK unsupported MFA factors to prevent blocking developers using the current SDK.\n            }\n        }\n        catch (e) {\n            // Ignore error.\n        }\n        return multiFactorInfo;\n    }\n    /**\n     * Initializes the MultiFactorInfo object using the server side response.\n     *\n     * @param response - The server side response.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        this.initFromServerResponse(response);\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return {\n            uid: this.uid,\n            displayName: this.displayName,\n            factorId: this.factorId,\n            enrollmentTime: this.enrollmentTime,\n        };\n    }\n    /**\n     * Initializes the MultiFactorInfo object using the provided server response.\n     *\n     * @param response - The server side response.\n     */\n    initFromServerResponse(response) {\n        const factorId = response && this.getFactorId(response);\n        if (!factorId || !response || !response.mfaEnrollmentId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid multi-factor info response');\n        }\n        utils.addReadonlyGetter(this, 'uid', response.mfaEnrollmentId);\n        utils.addReadonlyGetter(this, 'factorId', factorId);\n        utils.addReadonlyGetter(this, 'displayName', response.displayName);\n        // Encoded using [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format.\n        // For example, \"2017-01-15T01:30:15.01Z\".\n        // This can be parsed directly via Date constructor.\n        // This can be computed using Data.prototype.toISOString.\n        if (response.enrolledAt) {\n            utils.addReadonlyGetter(this, 'enrollmentTime', new Date(response.enrolledAt).toUTCString());\n        }\n        else {\n            utils.addReadonlyGetter(this, 'enrollmentTime', null);\n        }\n    }\n}\nexports.MultiFactorInfo = MultiFactorInfo;\n/**\n * Interface representing a phone specific user-enrolled second factor.\n */\nclass PhoneMultiFactorInfo extends MultiFactorInfo {\n    /**\n     * Initializes the PhoneMultiFactorInfo object using the server side response.\n     *\n     * @param response - The server side response.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        super(response);\n        utils.addReadonlyGetter(this, 'phoneNumber', response.phoneInfo);\n    }\n    /**\n     * {@inheritdoc MultiFactorInfo.toJSON}\n     */\n    toJSON() {\n        return Object.assign(super.toJSON(), {\n            phoneNumber: this.phoneNumber,\n        });\n    }\n    /**\n     * Returns the factor ID based on the response provided.\n     *\n     * @param response - The server side response.\n     * @returns The multi-factor ID associated with the provided response. If the response is\n     *     not associated with any known multi-factor ID, null is returned.\n     *\n     * @internal\n     */\n    getFactorId(response) {\n        return (response && response.phoneInfo) ? MultiFactorId.Phone : null;\n    }\n}\nexports.PhoneMultiFactorInfo = PhoneMultiFactorInfo;\n/**\n * `TotpInfo` struct associated with a second factor\n */\nclass TotpInfo {\n}\nexports.TotpInfo = TotpInfo;\n/**\n * Interface representing a TOTP specific user-enrolled second factor.\n */\nclass TotpMultiFactorInfo extends MultiFactorInfo {\n    /**\n     * Initializes the `TotpMultiFactorInfo` object using the server side response.\n     *\n     * @param response - The server side response.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        super(response);\n        utils.addReadonlyGetter(this, 'totpInfo', response.totpInfo);\n    }\n    /**\n     * {@inheritdoc MultiFactorInfo.toJSON}\n     */\n    toJSON() {\n        return Object.assign(super.toJSON(), {\n            totpInfo: this.totpInfo,\n        });\n    }\n    /**\n     * Returns the factor ID based on the response provided.\n     *\n     * @param response - The server side response.\n     * @returns The multi-factor ID associated with the provided response. If the response is\n     *     not associated with any known multi-factor ID, `null` is returned.\n     *\n     * @internal\n     */\n    getFactorId(response) {\n        return (response && response.totpInfo) ? MultiFactorId.Totp : null;\n    }\n}\nexports.TotpMultiFactorInfo = TotpMultiFactorInfo;\n/**\n * The multi-factor related user settings.\n */\nclass MultiFactorSettings {\n    /**\n     * Initializes the `MultiFactor` object using the server side or JWT format response.\n     *\n     * @param response - The server side response.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        const parsedEnrolledFactors = [];\n        if (!(0, validator_1.isNonNullObject)(response)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid multi-factor response');\n        }\n        else if (response.mfaInfo) {\n            response.mfaInfo.forEach((factorResponse) => {\n                const multiFactorInfo = MultiFactorInfo.initMultiFactorInfo(factorResponse);\n                if (multiFactorInfo) {\n                    parsedEnrolledFactors.push(multiFactorInfo);\n                }\n            });\n        }\n        // Make enrolled factors immutable.\n        utils.addReadonlyGetter(this, 'enrolledFactors', Object.freeze(parsedEnrolledFactors));\n    }\n    /**\n     * Returns a JSON-serializable representation of this multi-factor object.\n     *\n     * @returns A JSON-serializable representation of this multi-factor object.\n     */\n    toJSON() {\n        return {\n            enrolledFactors: this.enrolledFactors.map((info) => info.toJSON()),\n        };\n    }\n}\nexports.MultiFactorSettings = MultiFactorSettings;\n/**\n * Represents a user's metadata.\n */\nclass UserMetadata {\n    /**\n     * @param response - The server side response returned from the `getAccountInfo`\n     *     endpoint.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        // Creation date should always be available but due to some backend bugs there\n        // were cases in the past where users did not have creation date properly set.\n        // This included legacy Firebase migrating project users and some anonymous users.\n        // These bugs have already been addressed since then.\n        utils.addReadonlyGetter(this, 'creationTime', parseDate(response.createdAt));\n        utils.addReadonlyGetter(this, 'lastSignInTime', parseDate(response.lastLoginAt));\n        const lastRefreshAt = response.lastRefreshAt ? new Date(response.lastRefreshAt).toUTCString() : null;\n        utils.addReadonlyGetter(this, 'lastRefreshTime', lastRefreshAt);\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return {\n            lastSignInTime: this.lastSignInTime,\n            creationTime: this.creationTime,\n            lastRefreshTime: this.lastRefreshTime,\n        };\n    }\n}\nexports.UserMetadata = UserMetadata;\n/**\n * Represents a user's info from a third-party identity provider\n * such as Google or Facebook.\n */\nclass UserInfo {\n    /**\n     * @param response - The server side response returned from the `getAccountInfo`\n     *     endpoint.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        // Provider user id and provider id are required.\n        if (!response.rawId || !response.providerId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user info response');\n        }\n        utils.addReadonlyGetter(this, 'uid', response.rawId);\n        utils.addReadonlyGetter(this, 'displayName', response.displayName);\n        utils.addReadonlyGetter(this, 'email', response.email);\n        utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n        utils.addReadonlyGetter(this, 'providerId', response.providerId);\n        utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber);\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return {\n            uid: this.uid,\n            displayName: this.displayName,\n            email: this.email,\n            photoURL: this.photoURL,\n            providerId: this.providerId,\n            phoneNumber: this.phoneNumber,\n        };\n    }\n}\nexports.UserInfo = UserInfo;\n/**\n * Represents a user.\n */\nclass UserRecord {\n    /**\n     * @param response - The server side response returned from the getAccountInfo\n     *     endpoint.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        // The Firebase user id is required.\n        if (!response.localId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid user response');\n        }\n        utils.addReadonlyGetter(this, 'uid', response.localId);\n        utils.addReadonlyGetter(this, 'email', response.email);\n        utils.addReadonlyGetter(this, 'emailVerified', !!response.emailVerified);\n        utils.addReadonlyGetter(this, 'displayName', response.displayName);\n        utils.addReadonlyGetter(this, 'photoURL', response.photoUrl);\n        utils.addReadonlyGetter(this, 'phoneNumber', response.phoneNumber);\n        // If disabled is not provided, the account is enabled by default.\n        utils.addReadonlyGetter(this, 'disabled', response.disabled || false);\n        utils.addReadonlyGetter(this, 'metadata', new UserMetadata(response));\n        const providerData = [];\n        for (const entry of (response.providerUserInfo || [])) {\n            providerData.push(new UserInfo(entry));\n        }\n        utils.addReadonlyGetter(this, 'providerData', providerData);\n        // If the password hash is redacted (probably due to missing permissions)\n        // then clear it out, similar to how the salt is returned. (Otherwise, it\n        // *looks* like a b64-encoded hash is present, which is confusing.)\n        if (response.passwordHash === B64_REDACTED) {\n            utils.addReadonlyGetter(this, 'passwordHash', undefined);\n        }\n        else {\n            utils.addReadonlyGetter(this, 'passwordHash', response.passwordHash);\n        }\n        utils.addReadonlyGetter(this, 'passwordSalt', response.salt);\n        if (response.customAttributes) {\n            utils.addReadonlyGetter(this, 'customClaims', JSON.parse(response.customAttributes));\n        }\n        let validAfterTime = null;\n        // Convert validSince first to UTC milliseconds and then to UTC date string.\n        if (typeof response.validSince !== 'undefined') {\n            validAfterTime = parseDate(parseInt(response.validSince, 10) * 1000);\n        }\n        utils.addReadonlyGetter(this, 'tokensValidAfterTime', validAfterTime || undefined);\n        utils.addReadonlyGetter(this, 'tenantId', response.tenantId);\n        const multiFactor = new MultiFactorSettings(response);\n        if (multiFactor.enrolledFactors.length > 0) {\n            utils.addReadonlyGetter(this, 'multiFactor', multiFactor);\n        }\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        const json = {\n            uid: this.uid,\n            email: this.email,\n            emailVerified: this.emailVerified,\n            displayName: this.displayName,\n            photoURL: this.photoURL,\n            phoneNumber: this.phoneNumber,\n            disabled: this.disabled,\n            // Convert metadata to json.\n            metadata: this.metadata.toJSON(),\n            passwordHash: this.passwordHash,\n            passwordSalt: this.passwordSalt,\n            customClaims: (0, deep_copy_1.deepCopy)(this.customClaims),\n            tokensValidAfterTime: this.tokensValidAfterTime,\n            tenantId: this.tenantId,\n        };\n        if (this.multiFactor) {\n            json.multiFactor = this.multiFactor.toJSON();\n        }\n        json.providerData = [];\n        for (const entry of this.providerData) {\n            // Convert each provider data to json.\n            json.providerData.push(entry.toJSON());\n        }\n        return json;\n    }\n}\nexports.UserRecord = UserRecord;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8749, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/base-auth.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseAuth = exports.createFirebaseTokenGenerator = void 0;\nconst error_1 = require(\"../utils/error\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst validator = require(\"../utils/validator\");\nconst auth_api_request_1 = require(\"./auth-api-request\");\nconst token_generator_1 = require(\"./token-generator\");\nconst token_verifier_1 = require(\"./token-verifier\");\nconst auth_config_1 = require(\"./auth-config\");\nconst user_record_1 = require(\"./user-record\");\nconst identifier_1 = require(\"./identifier\");\nconst crypto_signer_1 = require(\"../utils/crypto-signer\");\n/**\n * @internal\n */\nfunction createFirebaseTokenGenerator(app, tenantId) {\n    try {\n        const signer = (0, auth_api_request_1.useEmulator)() ? new token_generator_1.EmulatedSigner() : (0, crypto_signer_1.cryptoSignerFromApp)(app);\n        return new token_generator_1.FirebaseTokenGenerator(signer, tenantId);\n    }\n    catch (err) {\n        throw (0, token_generator_1.handleCryptoSignerError)(err);\n    }\n}\nexports.createFirebaseTokenGenerator = createFirebaseTokenGenerator;\n/**\n * Common parent interface for both `Auth` and `TenantAwareAuth` APIs.\n */\nclass BaseAuth {\n    /**\n     * The BaseAuth class constructor.\n     *\n     * @param app - The FirebaseApp to associate with this Auth instance.\n     * @param authRequestHandler - The RPC request handler for this instance.\n     * @param tokenGenerator - Optional token generator. If not specified, a\n     *     (non-tenant-aware) instance will be created. Use this paramter to\n     *     specify a tenant-aware tokenGenerator.\n     * @constructor\n     * @internal\n     */\n    constructor(app, \n    /** @internal */ authRequestHandler, tokenGenerator) {\n        this.authRequestHandler = authRequestHandler;\n        if (tokenGenerator) {\n            this.tokenGenerator = tokenGenerator;\n        }\n        else {\n            this.tokenGenerator = createFirebaseTokenGenerator(app);\n        }\n        this.sessionCookieVerifier = (0, token_verifier_1.createSessionCookieVerifier)(app);\n        this.idTokenVerifier = (0, token_verifier_1.createIdTokenVerifier)(app);\n        this.authBlockingTokenVerifier = (0, token_verifier_1.createAuthBlockingTokenVerifier)(app);\n    }\n    /**\n     * Creates a new Firebase custom token (JWT) that can be sent back to a client\n     * device to use to sign in with the client SDKs' `signInWithCustomToken()`\n     * methods. (Tenant-aware instances will also embed the tenant ID in the\n     * token.)\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/create-custom-tokens | Create Custom Tokens}\n     * for code samples and detailed documentation.\n     *\n     * @param uid - The `uid` to use as the custom token's subject.\n     * @param developerClaims - Optional additional claims to include\n     *   in the custom token's payload.\n     *\n     * @returns A promise fulfilled with a custom token for the\n     *   provided `uid` and payload.\n     */\n    createCustomToken(uid, developerClaims) {\n        return this.tokenGenerator.createCustomToken(uid, developerClaims);\n    }\n    /**\n     * Verifies a Firebase ID token (JWT). If the token is valid, the promise is\n     * fulfilled with the token's decoded claims; otherwise, the promise is\n     * rejected.\n     *\n     * If `checkRevoked` is set to true, first verifies whether the corresponding\n     * user is disabled. If yes, an `auth/user-disabled` error is thrown. If no,\n     * verifies if the session corresponding to the ID token was revoked. If the\n     * corresponding user's session was invalidated, an `auth/id-token-revoked`\n     * error is thrown. If not specified the check is not applied.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/verify-id-tokens | Verify ID Tokens}\n     * for code samples and detailed documentation.\n     *\n     * @param idToken - The ID token to verify.\n     * @param checkRevoked - Whether to check if the ID token was revoked.\n     *   This requires an extra request to the Firebase Auth backend to check\n     *   the `tokensValidAfterTime` time for the corresponding user.\n     *   When not specified, this additional check is not applied.\n     *\n     * @returns A promise fulfilled with the\n     *   token's decoded claims if the ID token is valid; otherwise, a rejected\n     *   promise.\n     */\n    verifyIdToken(idToken, checkRevoked = false) {\n        const isEmulator = (0, auth_api_request_1.useEmulator)();\n        return this.idTokenVerifier.verifyJWT(idToken, isEmulator)\n            .then((decodedIdToken) => {\n            // Whether to check if the token was revoked.\n            if (checkRevoked || isEmulator) {\n                return this.verifyDecodedJWTNotRevokedOrDisabled(decodedIdToken, error_1.AuthClientErrorCode.ID_TOKEN_REVOKED);\n            }\n            return decodedIdToken;\n        });\n    }\n    /**\n     * Gets the user data for the user corresponding to a given `uid`.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-users#retrieve_user_data | Retrieve user data}\n     * for code samples and detailed documentation.\n     *\n     * @param uid - The `uid` corresponding to the user whose data to fetch.\n     *\n     * @returns A promise fulfilled with the user\n     *   data corresponding to the provided `uid`.\n     */\n    getUser(uid) {\n        return this.authRequestHandler.getAccountInfoByUid(uid)\n            .then((response) => {\n            // Returns the user record populated with server response.\n            return new user_record_1.UserRecord(response.users[0]);\n        });\n    }\n    /**\n     * Gets the user data for the user corresponding to a given email.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-users#retrieve_user_data | Retrieve user data}\n     * for code samples and detailed documentation.\n     *\n     * @param email - The email corresponding to the user whose data to\n     *   fetch.\n     *\n     * @returns A promise fulfilled with the user\n     *   data corresponding to the provided email.\n     */\n    getUserByEmail(email) {\n        return this.authRequestHandler.getAccountInfoByEmail(email)\n            .then((response) => {\n            // Returns the user record populated with server response.\n            return new user_record_1.UserRecord(response.users[0]);\n        });\n    }\n    /**\n     * Gets the user data for the user corresponding to a given phone number. The\n     * phone number has to conform to the E.164 specification.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-users#retrieve_user_data | Retrieve user data}\n     * for code samples and detailed documentation.\n     *\n     * @param phoneNumber - The phone number corresponding to the user whose\n     *   data to fetch.\n     *\n     * @returns A promise fulfilled with the user\n     *   data corresponding to the provided phone number.\n     */\n    getUserByPhoneNumber(phoneNumber) {\n        return this.authRequestHandler.getAccountInfoByPhoneNumber(phoneNumber)\n            .then((response) => {\n            // Returns the user record populated with server response.\n            return new user_record_1.UserRecord(response.users[0]);\n        });\n    }\n    /**\n     * Gets the user data for the user corresponding to a given provider id.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-users#retrieve_user_data | Retrieve user data}\n     * for code samples and detailed documentation.\n     *\n     * @param providerId - The provider ID, for example, \"google.com\" for the\n     *   Google provider.\n     * @param uid - The user identifier for the given provider.\n     *\n     * @returns A promise fulfilled with the user data corresponding to the\n     *   given provider id.\n     */\n    getUserByProviderUid(providerId, uid) {\n        // Although we don't really advertise it, we want to also handle\n        // non-federated idps with this call. So if we detect one of them, we'll\n        // reroute this request appropriately.\n        if (providerId === 'phone') {\n            return this.getUserByPhoneNumber(uid);\n        }\n        else if (providerId === 'email') {\n            return this.getUserByEmail(uid);\n        }\n        return this.authRequestHandler.getAccountInfoByFederatedUid(providerId, uid)\n            .then((response) => {\n            // Returns the user record populated with server response.\n            return new user_record_1.UserRecord(response.users[0]);\n        });\n    }\n    /**\n     * Gets the user data corresponding to the specified identifiers.\n     *\n     * There are no ordering guarantees; in particular, the nth entry in the result list is not\n     * guaranteed to correspond to the nth entry in the input parameters list.\n     *\n     * Only a maximum of 100 identifiers may be supplied. If more than 100 identifiers are supplied,\n     * this method throws a FirebaseAuthError.\n     *\n     * @param identifiers - The identifiers used to indicate which user records should be returned.\n     *     Must not have more than 100 entries.\n     * @returns A promise that resolves to the corresponding user records.\n     * @throws FirebaseAuthError If any of the identifiers are invalid or if more than 100\n     *     identifiers are specified.\n     */\n    getUsers(identifiers) {\n        if (!validator.isArray(identifiers)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`identifiers` parameter must be an array');\n        }\n        return this.authRequestHandler\n            .getAccountInfoByIdentifiers(identifiers)\n            .then((response) => {\n            /**\n             * Checks if the specified identifier is within the list of\n             * UserRecords.\n             */\n            const isUserFound = ((id, userRecords) => {\n                return !!userRecords.find((userRecord) => {\n                    if ((0, identifier_1.isUidIdentifier)(id)) {\n                        return id.uid === userRecord.uid;\n                    }\n                    else if ((0, identifier_1.isEmailIdentifier)(id)) {\n                        return id.email === userRecord.email;\n                    }\n                    else if ((0, identifier_1.isPhoneIdentifier)(id)) {\n                        return id.phoneNumber === userRecord.phoneNumber;\n                    }\n                    else if ((0, identifier_1.isProviderIdentifier)(id)) {\n                        const matchingUserInfo = userRecord.providerData.find((userInfo) => {\n                            return id.providerId === userInfo.providerId;\n                        });\n                        return !!matchingUserInfo && id.providerUid === matchingUserInfo.uid;\n                    }\n                    else {\n                        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Unhandled identifier type');\n                    }\n                });\n            });\n            const users = response.users ? response.users.map((user) => new user_record_1.UserRecord(user)) : [];\n            const notFound = identifiers.filter((id) => !isUserFound(id, users));\n            return { users, notFound };\n        });\n    }\n    /**\n     * Retrieves a list of users (single batch only) with a size of `maxResults`\n     * starting from the offset as specified by `pageToken`. This is used to\n     * retrieve all the users of a specified project in batches.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-users#list_all_users | List all users}\n     * for code samples and detailed documentation.\n     *\n     * @param maxResults - The page size, 1000 if undefined. This is also\n     *   the maximum allowed limit.\n     * @param pageToken - The next page token. If not specified, returns\n     *   users starting without any offset.\n     * @returns A promise that resolves with\n     *   the current batch of downloaded users and the next page token.\n     */\n    listUsers(maxResults, pageToken) {\n        return this.authRequestHandler.downloadAccount(maxResults, pageToken)\n            .then((response) => {\n            // List of users to return.\n            const users = [];\n            // Convert each user response to a UserRecord.\n            response.users.forEach((userResponse) => {\n                users.push(new user_record_1.UserRecord(userResponse));\n            });\n            // Return list of user records and the next page token if available.\n            const result = {\n                users,\n                pageToken: response.nextPageToken,\n            };\n            // Delete result.pageToken if undefined.\n            if (typeof result.pageToken === 'undefined') {\n                delete result.pageToken;\n            }\n            return result;\n        });\n    }\n    /**\n     * Creates a new user.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-users#create_a_user | Create a user}\n     * for code samples and detailed documentation.\n     *\n     * @param properties - The properties to set on the\n     *   new user record to be created.\n     *\n     * @returns A promise fulfilled with the user\n     *   data corresponding to the newly created user.\n     */\n    createUser(properties) {\n        return this.authRequestHandler.createNewAccount(properties)\n            .then((uid) => {\n            // Return the corresponding user record.\n            return this.getUser(uid);\n        })\n            .catch((error) => {\n            if (error.code === 'auth/user-not-found') {\n                // Something must have happened after creating the user and then retrieving it.\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Unable to create the user record provided.');\n            }\n            throw error;\n        });\n    }\n    /**\n     * Deletes an existing user.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-users#delete_a_user | Delete a user}\n     * for code samples and detailed documentation.\n     *\n     * @param uid - The `uid` corresponding to the user to delete.\n     *\n     * @returns An empty promise fulfilled once the user has been\n     *   deleted.\n     */\n    deleteUser(uid) {\n        return this.authRequestHandler.deleteAccount(uid)\n            .then(() => {\n            // Return nothing on success.\n        });\n    }\n    /**\n     * Deletes the users specified by the given uids.\n     *\n     * Deleting a non-existing user won't generate an error (i.e. this method\n     * is idempotent.) Non-existing users are considered to be successfully\n     * deleted, and are therefore counted in the\n     * `DeleteUsersResult.successCount` value.\n     *\n     * Only a maximum of 1000 identifiers may be supplied. If more than 1000\n     * identifiers are supplied, this method throws a FirebaseAuthError.\n     *\n     * This API is currently rate limited at the server to 1 QPS. If you exceed\n     * this, you may get a quota exceeded error. Therefore, if you want to\n     * delete more than 1000 users, you may need to add a delay to ensure you\n     * don't go over this limit.\n     *\n     * @param uids - The `uids` corresponding to the users to delete.\n     *\n     * @returns A Promise that resolves to the total number of successful/failed\n     *     deletions, as well as the array of errors that corresponds to the\n     *     failed deletions.\n     */\n    deleteUsers(uids) {\n        if (!validator.isArray(uids)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`uids` parameter must be an array');\n        }\n        return this.authRequestHandler.deleteAccounts(uids, /*force=*/ true)\n            .then((batchDeleteAccountsResponse) => {\n            const result = {\n                failureCount: 0,\n                successCount: uids.length,\n                errors: [],\n            };\n            if (!validator.isNonEmptyArray(batchDeleteAccountsResponse.errors)) {\n                return result;\n            }\n            result.failureCount = batchDeleteAccountsResponse.errors.length;\n            result.successCount = uids.length - batchDeleteAccountsResponse.errors.length;\n            result.errors = batchDeleteAccountsResponse.errors.map((batchDeleteErrorInfo) => {\n                if (batchDeleteErrorInfo.index === undefined) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Corrupt BatchDeleteAccountsResponse detected');\n                }\n                const errMsgToError = (msg) => {\n                    // We unconditionally set force=true, so the 'NOT_DISABLED' error\n                    // should not be possible.\n                    const code = msg && msg.startsWith('NOT_DISABLED') ?\n                        error_1.AuthClientErrorCode.USER_NOT_DISABLED : error_1.AuthClientErrorCode.INTERNAL_ERROR;\n                    return new error_1.FirebaseAuthError(code, batchDeleteErrorInfo.message);\n                };\n                return {\n                    index: batchDeleteErrorInfo.index,\n                    error: errMsgToError(batchDeleteErrorInfo.message),\n                };\n            });\n            return result;\n        });\n    }\n    /**\n     * Updates an existing user.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-users#update_a_user | Update a user}\n     * for code samples and detailed documentation.\n     *\n     * @param uid - The `uid` corresponding to the user to update.\n     * @param properties - The properties to update on\n     *   the provided user.\n     *\n     * @returns A promise fulfilled with the\n     *   updated user data.\n     */\n    updateUser(uid, properties) {\n        // Although we don't really advertise it, we want to also handle linking of\n        // non-federated idps with this call. So if we detect one of them, we'll\n        // adjust the properties parameter appropriately. This *does* imply that a\n        // conflict could arise, e.g. if the user provides a phoneNumber property,\n        // but also provides a providerToLink with a 'phone' provider id. In that\n        // case, we'll throw an error.\n        properties = (0, deep_copy_1.deepCopy)(properties);\n        if (properties?.providerToLink) {\n            if (properties.providerToLink.providerId === 'email') {\n                if (typeof properties.email !== 'undefined') {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Both UpdateRequest.email and UpdateRequest.providerToLink.providerId='email' were set. To \"\n                        + 'link to the email/password provider, only specify the UpdateRequest.email field.');\n                }\n                properties.email = properties.providerToLink.uid;\n                delete properties.providerToLink;\n            }\n            else if (properties.providerToLink.providerId === 'phone') {\n                if (typeof properties.phoneNumber !== 'undefined') {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Both UpdateRequest.phoneNumber and UpdateRequest.providerToLink.providerId='phone' were set. To \"\n                        + 'link to a phone provider, only specify the UpdateRequest.phoneNumber field.');\n                }\n                properties.phoneNumber = properties.providerToLink.uid;\n                delete properties.providerToLink;\n            }\n        }\n        if (properties?.providersToUnlink) {\n            if (properties.providersToUnlink.indexOf('phone') !== -1) {\n                // If we've been told to unlink the phone provider both via setting\n                // phoneNumber to null *and* by setting providersToUnlink to include\n                // 'phone', then we'll reject that. Though it might also be reasonable\n                // to relax this restriction and just unlink it.\n                if (properties.phoneNumber === null) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Both UpdateRequest.phoneNumber=null and UpdateRequest.providersToUnlink=['phone'] were set. To \"\n                        + 'unlink from a phone provider, only specify the UpdateRequest.phoneNumber=null field.');\n                }\n            }\n        }\n        return this.authRequestHandler.updateExistingAccount(uid, properties)\n            .then((existingUid) => {\n            // Return the corresponding user record.\n            return this.getUser(existingUid);\n        });\n    }\n    /**\n     * Sets additional developer claims on an existing user identified by the\n     * provided `uid`, typically used to define user roles and levels of\n     * access. These claims should propagate to all devices where the user is\n     * already signed in (after token expiration or when token refresh is forced)\n     * and the next time the user signs in. If a reserved OIDC claim name\n     * is used (sub, iat, iss, etc), an error is thrown. They are set on the\n     * authenticated user's ID token JWT.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/custom-claims |\n     * Defining user roles and access levels}\n     * for code samples and detailed documentation.\n     *\n     * @param uid - The `uid` of the user to edit.\n     * @param customUserClaims - The developer claims to set. If null is\n     *   passed, existing custom claims are deleted. Passing a custom claims payload\n     *   larger than 1000 bytes will throw an error. Custom claims are added to the\n     *   user's ID token which is transmitted on every authenticated request.\n     *   For profile non-access related user attributes, use database or other\n     *   separate storage systems.\n     * @returns A promise that resolves when the operation completes\n     *   successfully.\n     */\n    setCustomUserClaims(uid, customUserClaims) {\n        return this.authRequestHandler.setCustomUserClaims(uid, customUserClaims)\n            .then(() => {\n            // Return nothing on success.\n        });\n    }\n    /**\n     * Revokes all refresh tokens for an existing user.\n     *\n     * This API will update the user's {@link UserRecord.tokensValidAfterTime} to\n     * the current UTC. It is important that the server on which this is called has\n     * its clock set correctly and synchronized.\n     *\n     * While this will revoke all sessions for a specified user and disable any\n     * new ID tokens for existing sessions from getting minted, existing ID tokens\n     * may remain active until their natural expiration (one hour). To verify that\n     * ID tokens are revoked, use {@link BaseAuth.verifyIdToken}\n     * where `checkRevoked` is set to true.\n     *\n     * @param uid - The `uid` corresponding to the user whose refresh tokens\n     *   are to be revoked.\n     *\n     * @returns An empty promise fulfilled once the user's refresh\n     *   tokens have been revoked.\n     */\n    revokeRefreshTokens(uid) {\n        return this.authRequestHandler.revokeRefreshTokens(uid)\n            .then(() => {\n            // Return nothing on success.\n        });\n    }\n    /**\n     * Imports the provided list of users into Firebase Auth.\n     * A maximum of 1000 users are allowed to be imported one at a time.\n     * When importing users with passwords,\n     * {@link UserImportOptions} are required to be\n     * specified.\n     * This operation is optimized for bulk imports and will ignore checks on `uid`,\n     * `email` and other identifier uniqueness which could result in duplications.\n     *\n     * @param users - The list of user records to import to Firebase Auth.\n     * @param options - The user import options, required when the users provided include\n     *   password credentials.\n     * @returns A promise that resolves when\n     *   the operation completes with the result of the import. This includes the\n     *   number of successful imports, the number of failed imports and their\n     *   corresponding errors.\n    */\n    importUsers(users, options) {\n        return this.authRequestHandler.uploadAccount(users, options);\n    }\n    /**\n     * Creates a new Firebase session cookie with the specified options. The created\n     * JWT string can be set as a server-side session cookie with a custom cookie\n     * policy, and be used for session management. The session cookie JWT will have\n     * the same payload claims as the provided ID token.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-cookies | Manage Session Cookies}\n     * for code samples and detailed documentation.\n     *\n     * @param idToken - The Firebase ID token to exchange for a session\n     *   cookie.\n     * @param sessionCookieOptions - The session\n     *   cookie options which includes custom session duration.\n     *\n     * @returns A promise that resolves on success with the\n     *   created session cookie.\n     */\n    createSessionCookie(idToken, sessionCookieOptions) {\n        // Return rejected promise if expiresIn is not available.\n        if (!validator.isNonNullObject(sessionCookieOptions) ||\n            !validator.isNumber(sessionCookieOptions.expiresIn)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\n        }\n        return this.authRequestHandler.createSessionCookie(idToken, sessionCookieOptions.expiresIn);\n    }\n    /**\n     * Verifies a Firebase session cookie. Returns a Promise with the cookie claims.\n     * Rejects the promise if the cookie could not be verified.\n     *\n     * If `checkRevoked` is set to true, first verifies whether the corresponding\n     * user is disabled: If yes, an `auth/user-disabled` error is thrown. If no,\n     * verifies if the session corresponding to the session cookie was revoked.\n     * If the corresponding user's session was invalidated, an\n     * `auth/session-cookie-revoked` error is thrown. If not specified the check\n     * is not performed.\n     *\n     * See {@link https://firebase.google.com/docs/auth/admin/manage-cookies#verify_session_cookie_and_check_permissions |\n     * Verify Session Cookies}\n     * for code samples and detailed documentation\n     *\n     * @param sessionCookie - The session cookie to verify.\n     * @param checkForRevocation -  Whether to check if the session cookie was\n     *   revoked. This requires an extra request to the Firebase Auth backend to\n     *   check the `tokensValidAfterTime` time for the corresponding user.\n     *   When not specified, this additional check is not performed.\n     *\n     * @returns A promise fulfilled with the\n     *   session cookie's decoded claims if the session cookie is valid; otherwise,\n     *   a rejected promise.\n     */\n    verifySessionCookie(sessionCookie, checkRevoked = false) {\n        const isEmulator = (0, auth_api_request_1.useEmulator)();\n        return this.sessionCookieVerifier.verifyJWT(sessionCookie, isEmulator)\n            .then((decodedIdToken) => {\n            // Whether to check if the token was revoked.\n            if (checkRevoked || isEmulator) {\n                return this.verifyDecodedJWTNotRevokedOrDisabled(decodedIdToken, error_1.AuthClientErrorCode.SESSION_COOKIE_REVOKED);\n            }\n            return decodedIdToken;\n        });\n    }\n    /**\n     * Generates the out of band email action link to reset a user's password.\n     * The link is generated for the user with the specified email address. The\n     * optional  {@link ActionCodeSettings} object\n     * defines whether the link is to be handled by a mobile app or browser and the\n     * additional state information to be passed in the deep link, etc.\n     *\n     * @example\n     * ```javascript\n     * var actionCodeSettings = {\n     *   url: 'https://www.example.com/?email=user@example.com',\n     *   iOS: {\n     *     bundleId: 'com.example.ios'\n     *   },\n     *   android: {\n     *     packageName: 'com.example.android',\n     *     installApp: true,\n     *     minimumVersion: '12'\n     *   },\n     *   handleCodeInApp: true,\n     *   dynamicLinkDomain: 'custom.page.link'\n     * };\n     * admin.auth()\n     *     .generatePasswordResetLink('user@example.com', actionCodeSettings)\n     *     .then(function(link) {\n     *       // The link was successfully generated.\n     *     })\n     *     .catch(function(error) {\n     *       // Some error occurred, you can inspect the code: error.code\n     *     });\n     * ```\n     *\n     * @param email - The email address of the user whose password is to be\n     *   reset.\n     * @param actionCodeSettings - The action\n     *     code settings. If specified, the state/continue URL is set as the\n     *     \"continueUrl\" parameter in the password reset link. The default password\n     *     reset landing page will use this to display a link to go back to the app\n     *     if it is installed.\n     *     If the actionCodeSettings is not specified, no URL is appended to the\n     *     action URL.\n     *     The state URL provided must belong to a domain that is whitelisted by the\n     *     developer in the console. Otherwise an error is thrown.\n     *     Mobile app redirects are only applicable if the developer configures\n     *     and accepts the Firebase Dynamic Links terms of service.\n     *     The Android package name and iOS bundle ID are respected only if they\n     *     are configured in the same Firebase Auth project.\n     * @returns A promise that resolves with the generated link.\n     */\n    generatePasswordResetLink(email, actionCodeSettings) {\n        return this.authRequestHandler.getEmailActionLink('PASSWORD_RESET', email, actionCodeSettings);\n    }\n    /**\n     * Generates the out of band email action link to verify the user's ownership\n     * of the specified email. The {@link ActionCodeSettings} object provided\n     * as an argument to this method defines whether the link is to be handled by a\n     * mobile app or browser along with additional state information to be passed in\n     * the deep link, etc.\n     *\n     * @example\n     * ```javascript\n     * var actionCodeSettings = {\n     *   url: 'https://www.example.com/cart?email=user@example.com&cartId=123',\n     *   iOS: {\n     *     bundleId: 'com.example.ios'\n     *   },\n     *   android: {\n     *     packageName: 'com.example.android',\n     *     installApp: true,\n     *     minimumVersion: '12'\n     *   },\n     *   handleCodeInApp: true,\n     *   dynamicLinkDomain: 'custom.page.link'\n     * };\n     * admin.auth()\n     *     .generateEmailVerificationLink('user@example.com', actionCodeSettings)\n     *     .then(function(link) {\n     *       // The link was successfully generated.\n     *     })\n     *     .catch(function(error) {\n     *       // Some error occurred, you can inspect the code: error.code\n     *     });\n     * ```\n     *\n     * @param email - The email account to verify.\n     * @param actionCodeSettings - The action\n     *     code settings. If specified, the state/continue URL is set as the\n     *     \"continueUrl\" parameter in the email verification link. The default email\n     *     verification landing page will use this to display a link to go back to\n     *     the app if it is installed.\n     *     If the actionCodeSettings is not specified, no URL is appended to the\n     *     action URL.\n     *     The state URL provided must belong to a domain that is whitelisted by the\n     *     developer in the console. Otherwise an error is thrown.\n     *     Mobile app redirects are only applicable if the developer configures\n     *     and accepts the Firebase Dynamic Links terms of service.\n     *     The Android package name and iOS bundle ID are respected only if they\n     *     are configured in the same Firebase Auth project.\n     * @returns A promise that resolves with the generated link.\n     */\n    generateEmailVerificationLink(email, actionCodeSettings) {\n        return this.authRequestHandler.getEmailActionLink('VERIFY_EMAIL', email, actionCodeSettings);\n    }\n    /**\n     * Generates an out-of-band email action link to verify the user's ownership\n     * of the specified email. The {@link ActionCodeSettings} object provided\n     * as an argument to this method defines whether the link is to be handled by a\n     * mobile app or browser along with additional state information to be passed in\n     * the deep link, etc.\n     *\n     * @param email - The current email account.\n     * @param newEmail - The email address the account is being updated to.\n     * @param actionCodeSettings - The action\n     *     code settings. If specified, the state/continue URL is set as the\n     *     \"continueUrl\" parameter in the email verification link. The default email\n     *     verification landing page will use this to display a link to go back to\n     *     the app if it is installed.\n     *     If the actionCodeSettings is not specified, no URL is appended to the\n     *     action URL.\n     *     The state URL provided must belong to a domain that is authorized\n     *     in the console, or an error will be thrown.\n     *     Mobile app redirects are only applicable if the developer configures\n     *     and accepts the Firebase Dynamic Links terms of service.\n     *     The Android package name and iOS bundle ID are respected only if they\n     *     are configured in the same Firebase Auth project.\n     * @returns A promise that resolves with the generated link.\n     */\n    generateVerifyAndChangeEmailLink(email, newEmail, actionCodeSettings) {\n        return this.authRequestHandler.getEmailActionLink('VERIFY_AND_CHANGE_EMAIL', email, actionCodeSettings, newEmail);\n    }\n    /**\n     * Generates the out of band email action link to verify the user's ownership\n     * of the specified email. The {@link ActionCodeSettings} object provided\n     * as an argument to this method defines whether the link is to be handled by a\n     * mobile app or browser along with additional state information to be passed in\n     * the deep link, etc.\n     *\n     * @example\n     * ```javascript\n     * var actionCodeSettings = {\n     *   url: 'https://www.example.com/cart?email=user@example.com&cartId=123',\n     *   iOS: {\n     *     bundleId: 'com.example.ios'\n     *   },\n     *   android: {\n     *     packageName: 'com.example.android',\n     *     installApp: true,\n     *     minimumVersion: '12'\n     *   },\n     *   handleCodeInApp: true,\n     *   dynamicLinkDomain: 'custom.page.link'\n     * };\n     * admin.auth()\n     *     .generateEmailVerificationLink('user@example.com', actionCodeSettings)\n     *     .then(function(link) {\n     *       // The link was successfully generated.\n     *     })\n     *     .catch(function(error) {\n     *       // Some error occurred, you can inspect the code: error.code\n     *     });\n     * ```\n     *\n     * @param email - The email account to verify.\n     * @param actionCodeSettings - The action\n     *     code settings. If specified, the state/continue URL is set as the\n     *     \"continueUrl\" parameter in the email verification link. The default email\n     *     verification landing page will use this to display a link to go back to\n     *     the app if it is installed.\n     *     If the actionCodeSettings is not specified, no URL is appended to the\n     *     action URL.\n     *     The state URL provided must belong to a domain that is whitelisted by the\n     *     developer in the console. Otherwise an error is thrown.\n     *     Mobile app redirects are only applicable if the developer configures\n     *     and accepts the Firebase Dynamic Links terms of service.\n     *     The Android package name and iOS bundle ID are respected only if they\n     *     are configured in the same Firebase Auth project.\n     * @returns A promise that resolves with the generated link.\n     */\n    generateSignInWithEmailLink(email, actionCodeSettings) {\n        return this.authRequestHandler.getEmailActionLink('EMAIL_SIGNIN', email, actionCodeSettings);\n    }\n    /**\n     * Returns the list of existing provider configurations matching the filter\n     * provided. At most, 100 provider configs can be listed at a time.\n     *\n     * SAML and OIDC provider support requires Google Cloud's Identity Platform\n     * (GCIP). To learn more about GCIP, including pricing and features,\n     * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n     *\n     * @param options - The provider config filter to apply.\n     * @returns A promise that resolves with the list of provider configs meeting the\n     *   filter requirements.\n     */\n    listProviderConfigs(options) {\n        const processResponse = (response, providerConfigs) => {\n            // Return list of provider configuration and the next page token if available.\n            const result = {\n                providerConfigs,\n            };\n            // Delete result.pageToken if undefined.\n            if (Object.prototype.hasOwnProperty.call(response, 'nextPageToken')) {\n                result.pageToken = response.nextPageToken;\n            }\n            return result;\n        };\n        if (options && options.type === 'oidc') {\n            return this.authRequestHandler.listOAuthIdpConfigs(options.maxResults, options.pageToken)\n                .then((response) => {\n                // List of provider configurations to return.\n                const providerConfigs = [];\n                // Convert each provider config response to a OIDCConfig.\n                response.oauthIdpConfigs.forEach((configResponse) => {\n                    providerConfigs.push(new auth_config_1.OIDCConfig(configResponse));\n                });\n                // Return list of provider configuration and the next page token if available.\n                return processResponse(response, providerConfigs);\n            });\n        }\n        else if (options && options.type === 'saml') {\n            return this.authRequestHandler.listInboundSamlConfigs(options.maxResults, options.pageToken)\n                .then((response) => {\n                // List of provider configurations to return.\n                const providerConfigs = [];\n                // Convert each provider config response to a SAMLConfig.\n                response.inboundSamlConfigs.forEach((configResponse) => {\n                    providerConfigs.push(new auth_config_1.SAMLConfig(configResponse));\n                });\n                // Return list of provider configuration and the next page token if available.\n                return processResponse(response, providerConfigs);\n            });\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"AuthProviderConfigFilter.type\" must be either \"saml\" or \"oidc\"'));\n    }\n    /**\n     * Looks up an Auth provider configuration by the provided ID.\n     * Returns a promise that resolves with the provider configuration\n     * corresponding to the provider ID specified. If the specified ID does not\n     * exist, an `auth/configuration-not-found` error is thrown.\n     *\n     * SAML and OIDC provider support requires Google Cloud's Identity Platform\n     * (GCIP). To learn more about GCIP, including pricing and features,\n     * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n     *\n     * @param providerId - The provider ID corresponding to the provider\n     *     config to return.\n     * @returns A promise that resolves\n     *     with the configuration corresponding to the provided ID.\n     */\n    getProviderConfig(providerId) {\n        if (auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.getOAuthIdpConfig(providerId)\n                .then((response) => {\n                return new auth_config_1.OIDCConfig(response);\n            });\n        }\n        else if (auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.getInboundSamlConfig(providerId)\n                .then((response) => {\n                return new auth_config_1.SAMLConfig(response);\n            });\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    /**\n     * Deletes the provider configuration corresponding to the provider ID passed.\n     * If the specified ID does not exist, an `auth/configuration-not-found` error\n     * is thrown.\n     *\n     * SAML and OIDC provider support requires Google Cloud's Identity Platform\n     * (GCIP). To learn more about GCIP, including pricing and features,\n     * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n     *\n     * @param providerId - The provider ID corresponding to the provider\n     *     config to delete.\n     * @returns A promise that resolves on completion.\n     */\n    deleteProviderConfig(providerId) {\n        if (auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.deleteOAuthIdpConfig(providerId);\n        }\n        else if (auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.deleteInboundSamlConfig(providerId);\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    /**\n     * Returns a promise that resolves with the updated `AuthProviderConfig`\n     * corresponding to the provider ID specified.\n     * If the specified ID does not exist, an `auth/configuration-not-found` error\n     * is thrown.\n     *\n     * SAML and OIDC provider support requires Google Cloud's Identity Platform\n     * (GCIP). To learn more about GCIP, including pricing and features,\n     * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n     *\n     * @param providerId - The provider ID corresponding to the provider\n     *     config to update.\n     * @param updatedConfig - The updated configuration.\n     * @returns A promise that resolves with the updated provider configuration.\n     */\n    updateProviderConfig(providerId, updatedConfig) {\n        if (!validator.isNonNullObject(updatedConfig)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, 'Request is missing \"UpdateAuthProviderRequest\" configuration.'));\n        }\n        if (auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.updateOAuthIdpConfig(providerId, updatedConfig)\n                .then((response) => {\n                return new auth_config_1.OIDCConfig(response);\n            });\n        }\n        else if (auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return this.authRequestHandler.updateInboundSamlConfig(providerId, updatedConfig)\n                .then((response) => {\n                return new auth_config_1.SAMLConfig(response);\n            });\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    /**\n     * Returns a promise that resolves with the newly created `AuthProviderConfig`\n     * when the new provider configuration is created.\n     *\n     * SAML and OIDC provider support requires Google Cloud's Identity Platform\n     * (GCIP). To learn more about GCIP, including pricing and features,\n     * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n     *\n     * @param config - The provider configuration to create.\n     * @returns A promise that resolves with the created provider configuration.\n     */\n    createProviderConfig(config) {\n        if (!validator.isNonNullObject(config)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONFIG, 'Request is missing \"AuthProviderConfig\" configuration.'));\n        }\n        if (auth_config_1.OIDCConfig.isProviderId(config.providerId)) {\n            return this.authRequestHandler.createOAuthIdpConfig(config)\n                .then((response) => {\n                return new auth_config_1.OIDCConfig(response);\n            });\n        }\n        else if (auth_config_1.SAMLConfig.isProviderId(config.providerId)) {\n            return this.authRequestHandler.createInboundSamlConfig(config)\n                .then((response) => {\n                return new auth_config_1.SAMLConfig(response);\n            });\n        }\n        return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    /** @alpha */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    _verifyAuthBlockingToken(token, audience) {\n        const isEmulator = (0, auth_api_request_1.useEmulator)();\n        return this.authBlockingTokenVerifier._verifyAuthBlockingToken(token, isEmulator, audience)\n            .then((decodedAuthBlockingToken) => {\n            return decodedAuthBlockingToken;\n        });\n    }\n    /**\n     * Verifies the decoded Firebase issued JWT is not revoked or disabled. Returns a promise that\n     * resolves with the decoded claims on success. Rejects the promise with revocation error if revoked\n     * or user disabled.\n     *\n     * @param decodedIdToken - The JWT's decoded claims.\n     * @param revocationErrorInfo - The revocation error info to throw on revocation\n     *     detection.\n     * @returns A promise that will be fulfilled after a successful verification.\n     */\n    verifyDecodedJWTNotRevokedOrDisabled(decodedIdToken, revocationErrorInfo) {\n        // Get tokens valid after time for the corresponding user.\n        return this.getUser(decodedIdToken.sub)\n            .then((user) => {\n            if (user.disabled) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_DISABLED, 'The user record is disabled.');\n            }\n            // If no tokens valid after time available, token is not revoked.\n            if (user.tokensValidAfterTime) {\n                // Get the ID token authentication time and convert to milliseconds UTC.\n                const authTimeUtc = decodedIdToken.auth_time * 1000;\n                // Get user tokens valid after time in milliseconds UTC.\n                const validSinceUtc = new Date(user.tokensValidAfterTime).getTime();\n                // Check if authentication time is older than valid since time.\n                if (authTimeUtc < validSinceUtc) {\n                    throw new error_1.FirebaseAuthError(revocationErrorInfo);\n                }\n            }\n            // All checks above passed. Return the decoded token.\n            return decodedIdToken;\n        });\n    }\n}\nexports.BaseAuth = BaseAuth;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9661, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/tenant-manager.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TenantManager = exports.TenantAwareAuth = void 0;\nconst validator = require(\"../utils/validator\");\nconst utils = require(\"../utils/index\");\nconst error_1 = require(\"../utils/error\");\nconst base_auth_1 = require(\"./base-auth\");\nconst tenant_1 = require(\"./tenant\");\nconst auth_api_request_1 = require(\"./auth-api-request\");\n/**\n * Tenant-aware `Auth` interface used for managing users, configuring SAML/OIDC providers,\n * generating email links for password reset, email verification, etc for specific tenants.\n *\n * Multi-tenancy support requires Google Cloud's Identity Platform\n * (GCIP). To learn more about GCIP, including pricing and features,\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n *\n * Each tenant contains its own identity providers, settings and sets of users.\n * Using `TenantAwareAuth`, users for a specific tenant and corresponding OIDC/SAML\n * configurations can also be managed, ID tokens for users signed in to a specific tenant\n * can be verified, and email action links can also be generated for users belonging to the\n * tenant.\n *\n * `TenantAwareAuth` instances for a specific `tenantId` can be instantiated by calling\n * {@link TenantManager.authForTenant}.\n */\nclass TenantAwareAuth extends base_auth_1.BaseAuth {\n    /**\n     * The TenantAwareAuth class constructor.\n     *\n     * @param app - The app that created this tenant.\n     * @param tenantId - The corresponding tenant ID.\n     * @constructor\n     * @internal\n     */\n    constructor(app, tenantId) {\n        super(app, new auth_api_request_1.TenantAwareAuthRequestHandler(app, tenantId), (0, base_auth_1.createFirebaseTokenGenerator)(app, tenantId));\n        utils.addReadonlyGetter(this, 'tenantId', tenantId);\n    }\n    /**\n     * {@inheritdoc BaseAuth.verifyIdToken}\n     */\n    verifyIdToken(idToken, checkRevoked = false) {\n        return super.verifyIdToken(idToken, checkRevoked)\n            .then((decodedClaims) => {\n            // Validate tenant ID.\n            if (decodedClaims.firebase.tenant !== this.tenantId) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n            }\n            return decodedClaims;\n        });\n    }\n    /**\n     * {@inheritdoc BaseAuth.createSessionCookie}\n     */\n    createSessionCookie(idToken, sessionCookieOptions) {\n        // Validate arguments before processing.\n        if (!validator.isNonEmptyString(idToken)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN));\n        }\n        if (!validator.isNonNullObject(sessionCookieOptions) ||\n            !validator.isNumber(sessionCookieOptions.expiresIn)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION));\n        }\n        // This will verify the ID token and then match the tenant ID before creating the session cookie.\n        return this.verifyIdToken(idToken)\n            .then(() => {\n            return super.createSessionCookie(idToken, sessionCookieOptions);\n        });\n    }\n    /**\n     * {@inheritdoc BaseAuth.verifySessionCookie}\n     */\n    verifySessionCookie(sessionCookie, checkRevoked = false) {\n        return super.verifySessionCookie(sessionCookie, checkRevoked)\n            .then((decodedClaims) => {\n            if (decodedClaims.firebase.tenant !== this.tenantId) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID);\n            }\n            return decodedClaims;\n        });\n    }\n}\nexports.TenantAwareAuth = TenantAwareAuth;\n/**\n * Defines the tenant manager used to help manage tenant related operations.\n * This includes:\n * <ul>\n * <li>The ability to create, update, list, get and delete tenants for the underlying\n *     project.</li>\n * <li>Getting a `TenantAwareAuth` instance for running Auth related operations\n *     (user management, provider configuration management, token verification,\n *     email link generation, etc) in the context of a specified tenant.</li>\n * </ul>\n */\nclass TenantManager {\n    /**\n     * Initializes a TenantManager instance for a specified FirebaseApp.\n     *\n     * @param app - The app for this TenantManager instance.\n     *\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        this.app = app;\n        this.authRequestHandler = new auth_api_request_1.AuthRequestHandler(app);\n        this.tenantsMap = {};\n    }\n    /**\n     * Returns a `TenantAwareAuth` instance bound to the given tenant ID.\n     *\n     * @param tenantId - The tenant ID whose `TenantAwareAuth` instance is to be returned.\n     *\n     * @returns The `TenantAwareAuth` instance corresponding to this tenant identifier.\n     */\n    authForTenant(tenantId) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n        }\n        if (typeof this.tenantsMap[tenantId] === 'undefined') {\n            this.tenantsMap[tenantId] = new TenantAwareAuth(this.app, tenantId);\n        }\n        return this.tenantsMap[tenantId];\n    }\n    /**\n     * Gets the tenant configuration for the tenant corresponding to a given `tenantId`.\n     *\n     * @param tenantId - The tenant identifier corresponding to the tenant whose data to fetch.\n     *\n     * @returns A promise fulfilled with the tenant configuration to the provided `tenantId`.\n     */\n    getTenant(tenantId) {\n        return this.authRequestHandler.getTenant(tenantId)\n            .then((response) => {\n            return new tenant_1.Tenant(response);\n        });\n    }\n    /**\n     * Retrieves a list of tenants (single batch only) with a size of `maxResults`\n     * starting from the offset as specified by `pageToken`. This is used to\n     * retrieve all the tenants of a specified project in batches.\n     *\n     * @param maxResults - The page size, 1000 if undefined. This is also\n     *   the maximum allowed limit.\n     * @param pageToken - The next page token. If not specified, returns\n     *   tenants starting without any offset.\n     *\n     * @returns A promise that resolves with\n     *   a batch of downloaded tenants and the next page token.\n     */\n    listTenants(maxResults, pageToken) {\n        return this.authRequestHandler.listTenants(maxResults, pageToken)\n            .then((response) => {\n            // List of tenants to return.\n            const tenants = [];\n            // Convert each user response to a Tenant.\n            response.tenants.forEach((tenantResponse) => {\n                tenants.push(new tenant_1.Tenant(tenantResponse));\n            });\n            // Return list of tenants and the next page token if available.\n            const result = {\n                tenants,\n                pageToken: response.nextPageToken,\n            };\n            // Delete result.pageToken if undefined.\n            if (typeof result.pageToken === 'undefined') {\n                delete result.pageToken;\n            }\n            return result;\n        });\n    }\n    /**\n     * Deletes an existing tenant.\n     *\n     * @param tenantId - The `tenantId` corresponding to the tenant to delete.\n     *\n     * @returns An empty promise fulfilled once the tenant has been deleted.\n     */\n    deleteTenant(tenantId) {\n        return this.authRequestHandler.deleteTenant(tenantId);\n    }\n    /**\n     * Creates a new tenant.\n     * When creating new tenants, tenants that use separate billing and quota will require their\n     * own project and must be defined as `full_service`.\n     *\n     * @param tenantOptions - The properties to set on the new tenant configuration to be created.\n     *\n     * @returns A promise fulfilled with the tenant configuration corresponding to the newly\n     *   created tenant.\n     */\n    createTenant(tenantOptions) {\n        return this.authRequestHandler.createTenant(tenantOptions)\n            .then((response) => {\n            return new tenant_1.Tenant(response);\n        });\n    }\n    /**\n     * Updates an existing tenant configuration.\n     *\n     * @param tenantId - The `tenantId` corresponding to the tenant to delete.\n     * @param tenantOptions - The properties to update on the provided tenant.\n     *\n     * @returns A promise fulfilled with the update tenant data.\n     */\n    updateTenant(tenantId, tenantOptions) {\n        return this.authRequestHandler.updateTenant(tenantId, tenantOptions)\n            .then((response) => {\n            return new tenant_1.Tenant(response);\n        });\n    }\n}\nexports.TenantManager = TenantManager;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9875, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/project-config-manager.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectConfigManager = void 0;\nconst project_config_1 = require(\"./project-config\");\nconst auth_api_request_1 = require(\"./auth-api-request\");\n/**\n * Manages (gets and updates) the current project config.\n */\nclass ProjectConfigManager {\n    /**\n     * Initializes a ProjectConfigManager instance for a specified FirebaseApp.\n     *\n     * @param app - The app for this ProjectConfigManager instance.\n     *\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        this.authRequestHandler = new auth_api_request_1.AuthRequestHandler(app);\n    }\n    /**\n     * Get the project configuration.\n     *\n     * @returns A promise fulfilled with the project configuration.\n     */\n    getProjectConfig() {\n        return this.authRequestHandler.getProjectConfig()\n            .then((response) => {\n            return new project_config_1.ProjectConfig(response);\n        });\n    }\n    /**\n     * Updates an existing project configuration.\n     *\n     * @param projectConfigOptions - The properties to update on the project.\n     *\n     * @returns A promise fulfilled with the updated project config.\n     */\n    updateProjectConfig(projectConfigOptions) {\n        return this.authRequestHandler.updateProjectConfig(projectConfigOptions)\n            .then((response) => {\n            return new project_config_1.ProjectConfig(response);\n        });\n    }\n}\nexports.ProjectConfigManager = ProjectConfigManager;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,KAAK;AACpC,MAAM;AACN,MAAM;AACN;;CAEC,GACD,MAAM;IACF;;;;;;;KAOC,GACD,YAAY,GAAG,CAAE;QACb,IAAI,CAAC,kBAAkB,GAAG,IAAI,mBAAmB,kBAAkB,CAAC;IACxE;IACA;;;;KAIC,GACD,mBAAmB;QACf,OAAO,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,GAC1C,IAAI,CAAC,CAAC;YACP,OAAO,IAAI,iBAAiB,aAAa,CAAC;QAC9C;IACJ;IACA;;;;;;KAMC,GACD,oBAAoB,oBAAoB,EAAE;QACtC,OAAO,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,sBAC9C,IAAI,CAAC,CAAC;YACP,OAAO,IAAI,iBAAiB,aAAa,CAAC;QAC9C;IACJ;AACJ;AACA,QAAQ,oBAAoB,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9922, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/auth.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Auth = void 0;\nconst auth_api_request_1 = require(\"./auth-api-request\");\nconst tenant_manager_1 = require(\"./tenant-manager\");\nconst base_auth_1 = require(\"./base-auth\");\nconst project_config_manager_1 = require(\"./project-config-manager\");\n/**\n * Auth service bound to the provided app.\n * An Auth instance can have multiple tenants.\n */\nclass Auth extends base_auth_1.BaseAuth {\n    /**\n     * @param app - The app for this Auth service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        super(app, new auth_api_request_1.AuthRequestHandler(app));\n        this.app_ = app;\n        this.tenantManager_ = new tenant_manager_1.TenantManager(app);\n        this.projectConfigManager_ = new project_config_manager_1.ProjectConfigManager(app);\n    }\n    /**\n     * Returns the app associated with this Auth instance.\n     *\n     * @returns The app associated with this Auth instance.\n     */\n    get app() {\n        return this.app_;\n    }\n    /**\n     * Returns the tenant manager instance associated with the current project.\n     *\n     * @returns The tenant manager instance associated with the current project.\n     */\n    tenantManager() {\n        return this.tenantManager_;\n    }\n    /**\n     * Returns the project config manager instance associated with the current project.\n     *\n     * @returns The project config manager instance associated with the current project.\n     */\n    projectConfigManager() {\n        return this.projectConfigManager_;\n    }\n}\nexports.Auth = Auth;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;;CAeC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,IAAI,GAAG,KAAK;AACpB,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN;;;CAGC,GACD,MAAM,aAAa,YAAY,QAAQ;IACnC;;;;KAIC,GACD,YAAY,GAAG,CAAE;QACb,KAAK,CAAC,KAAK,IAAI,mBAAmB,kBAAkB,CAAC;QACrD,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,cAAc,GAAG,IAAI,iBAAiB,aAAa,CAAC;QACzD,IAAI,CAAC,qBAAqB,GAAG,IAAI,yBAAyB,oBAAoB,CAAC;IACnF;IACA;;;;KAIC,GACD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,IAAI;IACpB;IACA;;;;KAIC,GACD,gBAAgB;QACZ,OAAO,IAAI,CAAC,cAAc;IAC9B;IACA;;;;KAIC,GACD,uBAAuB;QACnB,OAAO,IAAI,CAAC,qBAAqB;IACrC;AACJ;AACA,QAAQ,IAAI,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9988, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/messaging/messaging-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateMessage = exports.BLACKLISTED_OPTIONS_KEYS = exports.BLACKLISTED_DATA_PAYLOAD_KEYS = void 0;\nconst index_1 = require(\"../utils/index\");\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\n// Keys which are not allowed in the messaging data payload object.\nexports.BLACKLISTED_DATA_PAYLOAD_KEYS = ['from'];\n// Keys which are not allowed in the messaging options object.\nexports.BLACKLISTED_OPTIONS_KEYS = [\n    'condition', 'data', 'notification', 'registrationIds', 'registration_ids', 'to',\n];\n/**\n * Checks if the given Message object is valid. Recursively validates all the child objects\n * included in the message (android, apns, data etc.). If successful, transforms the message\n * in place by renaming the keys to what's expected by the remote FCM service.\n *\n * @param {Message} Message An object to be validated.\n */\nfunction validateMessage(message) {\n    if (!validator.isNonNullObject(message)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Message must be a non-null object');\n    }\n    const anyMessage = message;\n    if (anyMessage.topic) {\n        // If the topic name is prefixed, remove it.\n        if (anyMessage.topic.startsWith('/topics/')) {\n            anyMessage.topic = anyMessage.topic.replace(/^\\/topics\\//, '');\n        }\n        // Checks for illegal characters and empty string.\n        if (!/^[a-zA-Z0-9-_.~%]+$/.test(anyMessage.topic)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Malformed topic name');\n        }\n    }\n    const targets = [anyMessage.token, anyMessage.topic, anyMessage.condition];\n    if (targets.filter((v) => validator.isNonEmptyString(v)).length !== 1) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Exactly one of topic, token or condition is required');\n    }\n    validateStringMap(message.data, 'data');\n    validateAndroidConfig(message.android);\n    validateWebpushConfig(message.webpush);\n    validateApnsConfig(message.apns);\n    validateFcmOptions(message.fcmOptions);\n    validateNotification(message.notification);\n}\nexports.validateMessage = validateMessage;\n/**\n * Checks if the given object only contains strings as child values.\n *\n * @param {object} map An object to be validated.\n * @param {string} label A label to be included in the errors thrown.\n */\nfunction validateStringMap(map, label) {\n    if (typeof map === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(map)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `${label} must be a non-null object`);\n    }\n    Object.keys(map).forEach((key) => {\n        if (!validator.isString(map[key])) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `${label} must only contain string values`);\n        }\n    });\n}\n/**\n * Checks if the given WebpushConfig object is valid. The object must have valid headers and data.\n *\n * @param {WebpushConfig} config An object to be validated.\n */\nfunction validateWebpushConfig(config) {\n    if (typeof config === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(config)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'webpush must be a non-null object');\n    }\n    validateStringMap(config.headers, 'webpush.headers');\n    validateStringMap(config.data, 'webpush.data');\n}\n/**\n * Checks if the given ApnsConfig object is valid. The object must have valid headers and a\n * payload.\n *\n * @param {ApnsConfig} config An object to be validated.\n */\nfunction validateApnsConfig(config) {\n    if (typeof config === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(config)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns must be a non-null object');\n    }\n    validateStringMap(config.headers, 'apns.headers');\n    validateApnsPayload(config.payload);\n    validateApnsFcmOptions(config.fcmOptions);\n}\n/**\n * Checks if the given ApnsFcmOptions object is valid.\n *\n * @param {ApnsFcmOptions} fcmOptions An object to be validated.\n */\nfunction validateApnsFcmOptions(fcmOptions) {\n    if (typeof fcmOptions === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(fcmOptions)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n    }\n    if (typeof fcmOptions.imageUrl !== 'undefined' &&\n        !validator.isURL(fcmOptions.imageUrl)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'imageUrl must be a valid URL string');\n    }\n    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n    }\n    const propertyMappings = {\n        imageUrl: 'image',\n    };\n    Object.keys(propertyMappings).forEach((key) => {\n        if (key in fcmOptions && propertyMappings[key] in fcmOptions) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for ${key} in ApnsFcmOptions`);\n        }\n    });\n    (0, index_1.renameProperties)(fcmOptions, propertyMappings);\n}\n/**\n * Checks if the given FcmOptions object is valid.\n *\n * @param {FcmOptions} fcmOptions An object to be validated.\n */\nfunction validateFcmOptions(fcmOptions) {\n    if (typeof fcmOptions === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(fcmOptions)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n    }\n    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n    }\n}\n/**\n * Checks if the given Notification object is valid.\n *\n * @param {Notification} notification An object to be validated.\n */\nfunction validateNotification(notification) {\n    if (typeof notification === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(notification)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification must be a non-null object');\n    }\n    if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification.imageUrl must be a valid URL string');\n    }\n    const propertyMappings = {\n        imageUrl: 'image',\n    };\n    Object.keys(propertyMappings).forEach((key) => {\n        if (key in notification && propertyMappings[key] in notification) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for ${key} in Notification`);\n        }\n    });\n    (0, index_1.renameProperties)(notification, propertyMappings);\n}\n/**\n * Checks if the given ApnsPayload object is valid. The object must have a valid aps value.\n *\n * @param {ApnsPayload} payload An object to be validated.\n */\nfunction validateApnsPayload(payload) {\n    if (typeof payload === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(payload)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload must be a non-null object');\n    }\n    validateAps(payload.aps);\n}\n/**\n * Checks if the given Aps object is valid. The object must have a valid alert. If the validation\n * is successful, transforms the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {Aps} aps An object to be validated.\n */\nfunction validateAps(aps) {\n    if (typeof aps === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(aps)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps must be a non-null object');\n    }\n    validateApsAlert(aps.alert);\n    validateApsSound(aps.sound);\n    const propertyMappings = {\n        contentAvailable: 'content-available',\n        mutableContent: 'mutable-content',\n        threadId: 'thread-id',\n    };\n    Object.keys(propertyMappings).forEach((key) => {\n        if (key in aps && propertyMappings[key] in aps) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for ${key} in Aps`);\n        }\n    });\n    (0, index_1.renameProperties)(aps, propertyMappings);\n    const contentAvailable = aps['content-available'];\n    if (typeof contentAvailable !== 'undefined' && contentAvailable !== 1) {\n        if (contentAvailable === true) {\n            aps['content-available'] = 1;\n        }\n        else {\n            delete aps['content-available'];\n        }\n    }\n    const mutableContent = aps['mutable-content'];\n    if (typeof mutableContent !== 'undefined' && mutableContent !== 1) {\n        if (mutableContent === true) {\n            aps['mutable-content'] = 1;\n        }\n        else {\n            delete aps['mutable-content'];\n        }\n    }\n}\nfunction validateApsSound(sound) {\n    if (typeof sound === 'undefined' || validator.isNonEmptyString(sound)) {\n        return;\n    }\n    else if (!validator.isNonNullObject(sound)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound must be a non-empty string or a non-null object');\n    }\n    if (!validator.isNonEmptyString(sound.name)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.name must be a non-empty string');\n    }\n    const volume = sound.volume;\n    if (typeof volume !== 'undefined') {\n        if (!validator.isNumber(volume)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be a number');\n        }\n        if (volume < 0 || volume > 1) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be in the interval [0, 1]');\n        }\n    }\n    const soundObject = sound;\n    const key = 'critical';\n    const critical = soundObject[key];\n    if (typeof critical !== 'undefined' && critical !== 1) {\n        if (critical === true) {\n            soundObject[key] = 1;\n        }\n        else {\n            delete soundObject[key];\n        }\n    }\n}\n/**\n * Checks if the given alert object is valid. Alert could be a string or a complex object.\n * If specified as an object, it must have valid localization parameters. If successful, transforms\n * the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {string | ApsAlert} alert An alert string or an object to be validated.\n */\nfunction validateApsAlert(alert) {\n    if (typeof alert === 'undefined' || validator.isString(alert)) {\n        return;\n    }\n    else if (!validator.isNonNullObject(alert)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert must be a string or a non-null object');\n    }\n    const apsAlert = alert;\n    if (validator.isNonEmptyArray(apsAlert.locArgs) &&\n        !validator.isNonEmptyString(apsAlert.locKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.locKey is required when specifying locArgs');\n    }\n    if (validator.isNonEmptyArray(apsAlert.titleLocArgs) &&\n        !validator.isNonEmptyString(apsAlert.titleLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.titleLocKey is required when specifying titleLocArgs');\n    }\n    if (validator.isNonEmptyArray(apsAlert.subtitleLocArgs) &&\n        !validator.isNonEmptyString(apsAlert.subtitleLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.subtitleLocKey is required when specifying subtitleLocArgs');\n    }\n    const propertyMappings = {\n        locKey: 'loc-key',\n        locArgs: 'loc-args',\n        titleLocKey: 'title-loc-key',\n        titleLocArgs: 'title-loc-args',\n        subtitleLocKey: 'subtitle-loc-key',\n        subtitleLocArgs: 'subtitle-loc-args',\n        actionLocKey: 'action-loc-key',\n        launchImage: 'launch-image',\n    };\n    (0, index_1.renameProperties)(apsAlert, propertyMappings);\n}\n/**\n * Checks if the given AndroidConfig object is valid. The object must have valid ttl, data,\n * and notification fields. If successful, transforms the input object by renaming keys to valid\n * Android keys. Also transforms the ttl value to the format expected by FCM service.\n *\n * @param config - An object to be validated.\n */\nfunction validateAndroidConfig(config) {\n    if (typeof config === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(config)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android must be a non-null object');\n    }\n    if (typeof config.ttl !== 'undefined') {\n        if (!validator.isNumber(config.ttl) || config.ttl < 0) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'TTL must be a non-negative duration in milliseconds');\n        }\n        const duration = (0, index_1.transformMillisecondsToSecondsString)(config.ttl);\n        config.ttl = duration;\n    }\n    validateStringMap(config.data, 'android.data');\n    validateAndroidNotification(config.notification);\n    validateAndroidFcmOptions(config.fcmOptions);\n    const propertyMappings = {\n        collapseKey: 'collapse_key',\n        restrictedPackageName: 'restricted_package_name',\n    };\n    (0, index_1.renameProperties)(config, propertyMappings);\n}\n/**\n * Checks if the given AndroidNotification object is valid. The object must have valid color and\n * localization parameters. If successful, transforms the input object by renaming keys to valid\n * Android keys.\n *\n * @param {AndroidNotification} notification An object to be validated.\n */\nfunction validateAndroidNotification(notification) {\n    if (typeof notification === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(notification)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification must be a non-null object');\n    }\n    if (typeof notification.color !== 'undefined' && !/^#[0-9a-fA-F]{6}$/.test(notification.color)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.color must be in the form #RRGGBB');\n    }\n    if (validator.isNonEmptyArray(notification.bodyLocArgs) &&\n        !validator.isNonEmptyString(notification.bodyLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.bodyLocKey is required when specifying bodyLocArgs');\n    }\n    if (validator.isNonEmptyArray(notification.titleLocArgs) &&\n        !validator.isNonEmptyString(notification.titleLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.titleLocKey is required when specifying titleLocArgs');\n    }\n    if (typeof notification.imageUrl !== 'undefined' &&\n        !validator.isURL(notification.imageUrl)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.imageUrl must be a valid URL string');\n    }\n    if (typeof notification.eventTimestamp !== 'undefined') {\n        if (!(notification.eventTimestamp instanceof Date)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.eventTimestamp must be a valid `Date` object');\n        }\n        // Convert timestamp to RFC3339 UTC \"Zulu\" format, example \"2014-10-02T15:01:23.045123456Z\"\n        const zuluTimestamp = notification.eventTimestamp.toISOString();\n        notification.eventTimestamp = zuluTimestamp;\n    }\n    if (typeof notification.vibrateTimingsMillis !== 'undefined') {\n        if (!validator.isNonEmptyArray(notification.vibrateTimingsMillis)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be a non-empty array of numbers');\n        }\n        const vibrateTimings = [];\n        notification.vibrateTimingsMillis.forEach((value) => {\n            if (!validator.isNumber(value) || value < 0) {\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be non-negative durations in milliseconds');\n            }\n            const duration = (0, index_1.transformMillisecondsToSecondsString)(value);\n            vibrateTimings.push(duration);\n        });\n        notification.vibrateTimingsMillis = vibrateTimings;\n    }\n    if (typeof notification.priority !== 'undefined') {\n        const priority = 'PRIORITY_' + notification.priority.toUpperCase();\n        notification.priority = priority;\n    }\n    if (typeof notification.visibility !== 'undefined') {\n        const visibility = notification.visibility.toUpperCase();\n        notification.visibility = visibility;\n    }\n    validateLightSettings(notification.lightSettings);\n    const propertyMappings = {\n        clickAction: 'click_action',\n        bodyLocKey: 'body_loc_key',\n        bodyLocArgs: 'body_loc_args',\n        titleLocKey: 'title_loc_key',\n        titleLocArgs: 'title_loc_args',\n        channelId: 'channel_id',\n        imageUrl: 'image',\n        eventTimestamp: 'event_time',\n        localOnly: 'local_only',\n        priority: 'notification_priority',\n        vibrateTimingsMillis: 'vibrate_timings',\n        defaultVibrateTimings: 'default_vibrate_timings',\n        defaultSound: 'default_sound',\n        lightSettings: 'light_settings',\n        defaultLightSettings: 'default_light_settings',\n        notificationCount: 'notification_count',\n    };\n    (0, index_1.renameProperties)(notification, propertyMappings);\n}\n/**\n * Checks if the given LightSettings object is valid. The object must have valid color and\n * light on/off duration parameters. If successful, transforms the input object by renaming\n * keys to valid Android keys.\n *\n * @param {LightSettings} lightSettings An object to be validated.\n */\nfunction validateLightSettings(lightSettings) {\n    if (typeof lightSettings === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(lightSettings)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings must be a non-null object');\n    }\n    if (!validator.isNumber(lightSettings.lightOnDurationMillis) || lightSettings.lightOnDurationMillis < 0) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOnDurationMillis must be a non-negative duration in milliseconds');\n    }\n    const durationOn = (0, index_1.transformMillisecondsToSecondsString)(lightSettings.lightOnDurationMillis);\n    lightSettings.lightOnDurationMillis = durationOn;\n    if (!validator.isNumber(lightSettings.lightOffDurationMillis) || lightSettings.lightOffDurationMillis < 0) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOffDurationMillis must be a non-negative duration in milliseconds');\n    }\n    const durationOff = (0, index_1.transformMillisecondsToSecondsString)(lightSettings.lightOffDurationMillis);\n    lightSettings.lightOffDurationMillis = durationOff;\n    if (!validator.isString(lightSettings.color) ||\n        (!/^#[0-9a-fA-F]{6}$/.test(lightSettings.color) && !/^#[0-9a-fA-F]{8}$/.test(lightSettings.color))) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.color must be in the form #RRGGBB or #RRGGBBAA format');\n    }\n    const colorString = lightSettings.color.length === 7 ? lightSettings.color + 'FF' : lightSettings.color;\n    const rgb = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/i.exec(colorString);\n    if (!rgb || rgb.length < 4) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INTERNAL_ERROR, 'regex to extract rgba values from ' + colorString + ' failed.');\n    }\n    const color = {\n        red: parseInt(rgb[1], 16) / 255.0,\n        green: parseInt(rgb[2], 16) / 255.0,\n        blue: parseInt(rgb[3], 16) / 255.0,\n        alpha: parseInt(rgb[4], 16) / 255.0,\n    };\n    lightSettings.color = color;\n    const propertyMappings = {\n        lightOnDurationMillis: 'light_on_duration',\n        lightOffDurationMillis: 'light_off_duration',\n    };\n    (0, index_1.renameProperties)(lightSettings, propertyMappings);\n}\n/**\n * Checks if the given AndroidFcmOptions object is valid.\n *\n * @param {AndroidFcmOptions} fcmOptions An object to be validated.\n */\nfunction validateAndroidFcmOptions(fcmOptions) {\n    if (typeof fcmOptions === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(fcmOptions)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n    }\n    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10449, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/messaging/messaging-errors-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getErrorCode = exports.createFirebaseError = void 0;\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\n/**\n * Creates a new `FirebaseMessagingError` by extracting the error code, message and other relevant\n * details from a `RequestResponseError` response.\n *\n * @param err - The `RequestResponseError` to convert into a Firebase error\n * @returns A Firebase error that can be returned to the user.\n */\nfunction createFirebaseError(err) {\n    if (err.response.isJson()) {\n        // For JSON responses, map the server response to a client-side error.\n        const json = err.response.data;\n        const errorCode = getErrorCode(json);\n        const errorMessage = getErrorMessage(json);\n        return error_1.FirebaseMessagingError.fromServerError(errorCode, errorMessage, json);\n    }\n    // Non-JSON response\n    let error;\n    switch (err.response.status) {\n        case 400:\n            error = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\n            break;\n        case 401:\n        case 403:\n            error = error_1.MessagingClientErrorCode.AUTHENTICATION_ERROR;\n            break;\n        case 500:\n            error = error_1.MessagingClientErrorCode.INTERNAL_ERROR;\n            break;\n        case 503:\n            error = error_1.MessagingClientErrorCode.SERVER_UNAVAILABLE;\n            break;\n        default:\n            // Treat non-JSON responses with unexpected status codes as unknown errors.\n            error = error_1.MessagingClientErrorCode.UNKNOWN_ERROR;\n    }\n    return new error_1.FirebaseMessagingError({\n        code: error.code,\n        message: `${error.message} Raw server response: \"${err.response.text}\". Status code: ` +\n            `${err.response.status}.`,\n    });\n}\nexports.createFirebaseError = createFirebaseError;\n/**\n * @param response - The response to check for errors.\n * @returns The error code if present; null otherwise.\n */\nfunction getErrorCode(response) {\n    if (validator.isNonNullObject(response) && 'error' in response) {\n        const error = response.error;\n        if (validator.isString(error)) {\n            return error;\n        }\n        if (validator.isArray(error.details)) {\n            const fcmErrorType = 'type.googleapis.com/google.firebase.fcm.v1.FcmError';\n            for (const element of error.details) {\n                if (element['@type'] === fcmErrorType) {\n                    return element.errorCode;\n                }\n            }\n        }\n        if ('status' in error) {\n            return error.status;\n        }\n        else {\n            return error.message;\n        }\n    }\n    return null;\n}\nexports.getErrorCode = getErrorCode;\n/**\n * Extracts error message from the given response object.\n *\n * @param response - The response to check for errors.\n * @returns The error message if present; null otherwise.\n */\nfunction getErrorMessage(response) {\n    if (validator.isNonNullObject(response) &&\n        'error' in response &&\n        validator.isNonEmptyString(response.error.message)) {\n        return response.error.message;\n    }\n    return null;\n}\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,YAAY,GAAG,QAAQ,mBAAmB,GAAG,KAAK;AAC1D,MAAM;AACN,MAAM;AACN;;;;;;CAMC,GACD,SAAS,oBAAoB,GAAG;IAC5B,IAAI,IAAI,QAAQ,CAAC,MAAM,IAAI;QACvB,sEAAsE;QACtE,MAAM,OAAO,IAAI,QAAQ,CAAC,IAAI;QAC9B,MAAM,YAAY,aAAa;QAC/B,MAAM,eAAe,gBAAgB;QACrC,OAAO,QAAQ,sBAAsB,CAAC,eAAe,CAAC,WAAW,cAAc;IACnF;IACA,oBAAoB;IACpB,IAAI;IACJ,OAAQ,IAAI,QAAQ,CAAC,MAAM;QACvB,KAAK;YACD,QAAQ,QAAQ,wBAAwB,CAAC,gBAAgB;YACzD;QACJ,KAAK;QACL,KAAK;YACD,QAAQ,QAAQ,wBAAwB,CAAC,oBAAoB;YAC7D;QACJ,KAAK;YACD,QAAQ,QAAQ,wBAAwB,CAAC,cAAc;YACvD;QACJ,KAAK;YACD,QAAQ,QAAQ,wBAAwB,CAAC,kBAAkB;YAC3D;QACJ;YACI,2EAA2E;YAC3E,QAAQ,QAAQ,wBAAwB,CAAC,aAAa;IAC9D;IACA,OAAO,IAAI,QAAQ,sBAAsB,CAAC;QACtC,MAAM,MAAM,IAAI;QAChB,SAAS,GAAG,MAAM,OAAO,CAAC,uBAAuB,EAAE,IAAI,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAClF,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACjC;AACJ;AACA,QAAQ,mBAAmB,GAAG;AAC9B;;;CAGC,GACD,SAAS,aAAa,QAAQ;IAC1B,IAAI,UAAU,eAAe,CAAC,aAAa,WAAW,UAAU;QAC5D,MAAM,QAAQ,SAAS,KAAK;QAC5B,IAAI,UAAU,QAAQ,CAAC,QAAQ;YAC3B,OAAO;QACX;QACA,IAAI,UAAU,OAAO,CAAC,MAAM,OAAO,GAAG;YAClC,MAAM,eAAe;YACrB,KAAK,MAAM,WAAW,MAAM,OAAO,CAAE;gBACjC,IAAI,OAAO,CAAC,QAAQ,KAAK,cAAc;oBACnC,OAAO,QAAQ,SAAS;gBAC5B;YACJ;QACJ;QACA,IAAI,YAAY,OAAO;YACnB,OAAO,MAAM,MAAM;QACvB,OACK;YACD,OAAO,MAAM,OAAO;QACxB;IACJ;IACA,OAAO;AACX;AACA,QAAQ,YAAY,GAAG;AACvB;;;;;CAKC,GACD,SAAS,gBAAgB,QAAQ;IAC7B,IAAI,UAAU,eAAe,CAAC,aAC1B,WAAW,YACX,UAAU,gBAAgB,CAAC,SAAS,KAAK,CAAC,OAAO,GAAG;QACpD,OAAO,SAAS,KAAK,CAAC,OAAO;IACjC;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10552, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/messaging/batch-request-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BatchRequestClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst PART_BOUNDARY = '__END_OF_PART__';\nconst TEN_SECONDS_IN_MILLIS = 15000;\n/**\n * An HTTP client that can be used to make batch requests. This client is not tied to any service\n * (FCM or otherwise). Therefore it can be used to make batch requests to any service that allows\n * it. If this requirement ever arises we can move this implementation to the utils module\n * where it can be easily shared among other modules.\n */\nclass BatchRequestClient {\n    /**\n     * @param {HttpClient} httpClient The client that will be used to make HTTP calls.\n     * @param {string} batchUrl The URL that accepts batch requests.\n     * @param {object=} commonHeaders Optional headers that will be included in all requests.\n     *\n     * @constructor\n     */\n    constructor(httpClient, batchUrl, commonHeaders) {\n        this.httpClient = httpClient;\n        this.batchUrl = batchUrl;\n        this.commonHeaders = commonHeaders;\n    }\n    /**\n     * Sends the given array of sub requests as a single batch, and parses the results into an array\n     * of `RequestResponse` objects.\n     *\n     * @param requests - An array of sub requests to send.\n     * @returns A promise that resolves when the send operation is complete.\n     */\n    send(requests) {\n        requests = requests.map((req) => {\n            req.headers = Object.assign({}, this.commonHeaders, req.headers);\n            return req;\n        });\n        const requestHeaders = {\n            'Content-Type': `multipart/mixed; boundary=${PART_BOUNDARY}`,\n        };\n        const request = {\n            method: 'POST',\n            url: this.batchUrl,\n            data: this.getMultipartPayload(requests),\n            headers: Object.assign({}, this.commonHeaders, requestHeaders),\n            timeout: TEN_SECONDS_IN_MILLIS,\n        };\n        return this.httpClient.send(request).then((response) => {\n            if (!response.multipart) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a multipart response.');\n            }\n            return response.multipart.map((buff) => {\n                return (0, api_request_1.parseHttpResponse)(buff, request);\n            });\n        });\n    }\n    getMultipartPayload(requests) {\n        let buffer = '';\n        requests.forEach((request, idx) => {\n            buffer += createPart(request, PART_BOUNDARY, idx);\n        });\n        buffer += `--${PART_BOUNDARY}--\\r\\n`;\n        return Buffer.from(buffer, 'utf-8');\n    }\n}\nexports.BatchRequestClient = BatchRequestClient;\n/**\n * Creates a single part in a multipart HTTP request body. The part consists of several headers\n * followed by the serialized sub request as the body. As per the requirements of the FCM batch\n * API, sets the content-type header to application/http, and the content-transfer-encoding to\n * binary.\n *\n * @param request - A sub request that will be used to populate the part.\n * @param boundary - Multipart boundary string.\n * @param idx - An index number that is used to set the content-id header.\n * @returns The part as a string that can be included in the HTTP body.\n */\nfunction createPart(request, boundary, idx) {\n    const serializedRequest = serializeSubRequest(request);\n    let part = `--${boundary}\\r\\n`;\n    part += `Content-Length: ${serializedRequest.length}\\r\\n`;\n    part += 'Content-Type: application/http\\r\\n';\n    part += `content-id: ${idx + 1}\\r\\n`;\n    part += 'content-transfer-encoding: binary\\r\\n';\n    part += '\\r\\n';\n    part += `${serializedRequest}\\r\\n`;\n    return part;\n}\n/**\n * Serializes a sub request into a string that can be embedded in a multipart HTTP request. The\n * format of the string is the wire format of a typical HTTP request, consisting of a header and a\n * body.\n *\n * @param request - The sub request to be serialized.\n * @returns String representation of the SubRequest.\n */\nfunction serializeSubRequest(request) {\n    const requestBody = JSON.stringify(request.body);\n    let messagePayload = `POST ${request.url} HTTP/1.1\\r\\n`;\n    messagePayload += `Content-Length: ${requestBody.length}\\r\\n`;\n    messagePayload += 'Content-Type: application/json; charset=UTF-8\\r\\n';\n    if (request.headers) {\n        Object.keys(request.headers).forEach((key) => {\n            messagePayload += `${key}: ${request.headers[key]}\\r\\n`;\n        });\n    }\n    messagePayload += '\\r\\n';\n    messagePayload += requestBody;\n    return messagePayload;\n}\n"],"names":[],"mappings":"AAAA,2BAA2B,GA+EZ;AA9Ef;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,kBAAkB,GAAG,KAAK;AAClC,MAAM;AACN,MAAM;AACN,MAAM,gBAAgB;AACtB,MAAM,wBAAwB;AAC9B;;;;;CAKC,GACD,MAAM;IACF;;;;;;KAMC,GACD,YAAY,UAAU,EAAE,QAAQ,EAAE,aAAa,CAAE;QAC7C,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,aAAa,GAAG;IACzB;IACA;;;;;;KAMC,GACD,KAAK,QAAQ,EAAE;QACX,WAAW,SAAS,GAAG,CAAC,CAAC;YACrB,IAAI,OAAO,GAAG,OAAO,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE,IAAI,OAAO;YAC/D,OAAO;QACX;QACA,MAAM,iBAAiB;YACnB,gBAAgB,CAAC,0BAA0B,EAAE,eAAe;QAChE;QACA,MAAM,UAAU;YACZ,QAAQ;YACR,KAAK,IAAI,CAAC,QAAQ;YAClB,MAAM,IAAI,CAAC,mBAAmB,CAAC;YAC/B,SAAS,OAAO,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE;YAC/C,SAAS;QACb;QACA,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC;YACvC,IAAI,CAAC,SAAS,SAAS,EAAE;gBACrB,MAAM,IAAI,QAAQ,gBAAgB,CAAC,QAAQ,aAAa,CAAC,cAAc,EAAE;YAC7E;YACA,OAAO,SAAS,SAAS,CAAC,GAAG,CAAC,CAAC;gBAC3B,OAAO,CAAC,GAAG,cAAc,iBAAiB,EAAE,MAAM;YACtD;QACJ;IACJ;IACA,oBAAoB,QAAQ,EAAE;QAC1B,IAAI,SAAS;QACb,SAAS,OAAO,CAAC,CAAC,SAAS;YACvB,UAAU,WAAW,SAAS,eAAe;QACjD;QACA,UAAU,CAAC,EAAE,EAAE,cAAc,MAAM,CAAC;QACpC,OAAO,8JAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ;IAC/B;AACJ;AACA,QAAQ,kBAAkB,GAAG;AAC7B;;;;;;;;;;CAUC,GACD,SAAS,WAAW,OAAO,EAAE,QAAQ,EAAE,GAAG;IACtC,MAAM,oBAAoB,oBAAoB;IAC9C,IAAI,OAAO,CAAC,EAAE,EAAE,SAAS,IAAI,CAAC;IAC9B,QAAQ,CAAC,gBAAgB,EAAE,kBAAkB,MAAM,CAAC,IAAI,CAAC;IACzD,QAAQ;IACR,QAAQ,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC;IACpC,QAAQ;IACR,QAAQ;IACR,QAAQ,GAAG,kBAAkB,IAAI,CAAC;IAClC,OAAO;AACX;AACA;;;;;;;CAOC,GACD,SAAS,oBAAoB,OAAO;IAChC,MAAM,cAAc,KAAK,SAAS,CAAC,QAAQ,IAAI;IAC/C,IAAI,iBAAiB,CAAC,KAAK,EAAE,QAAQ,GAAG,CAAC,aAAa,CAAC;IACvD,kBAAkB,CAAC,gBAAgB,EAAE,YAAY,MAAM,CAAC,IAAI,CAAC;IAC7D,kBAAkB;IAClB,IAAI,QAAQ,OAAO,EAAE;QACjB,OAAO,IAAI,CAAC,QAAQ,OAAO,EAAE,OAAO,CAAC,CAAC;YAClC,kBAAkB,GAAG,IAAI,EAAE,EAAE,QAAQ,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;QAC3D;IACJ;IACA,kBAAkB;IAClB,kBAAkB;IAClB,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10680, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/messaging/messaging-api-request-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseMessagingRequestHandler = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst messaging_errors_internal_1 = require(\"./messaging-errors-internal\");\nconst batch_request_internal_1 = require(\"./batch-request-internal\");\nconst index_1 = require(\"../utils/index\");\n// FCM backend constants\nconst FIREBASE_MESSAGING_TIMEOUT = 15000;\nconst FIREBASE_MESSAGING_BATCH_URL = 'https://fcm.googleapis.com/batch';\nconst FIREBASE_MESSAGING_HTTP_METHOD = 'POST';\nconst FIREBASE_MESSAGING_HEADERS = {\n    'X-Firebase-Client': `fire-admin-node/${(0, index_1.getSdkVersion)()}`,\n    'X-Goog-Api-Client': `gl-node/${process.versions.node} fire-admin/${(0, index_1.getSdkVersion)()}`\n};\nconst LEGACY_FIREBASE_MESSAGING_HEADERS = {\n    'X-Firebase-Client': `fire-admin-node/${(0, index_1.getSdkVersion)()}`,\n    'X-Goog-Api-Client': `gl-node/${process.versions.node} fire-admin/${(0, index_1.getSdkVersion)()}`,\n    'access_token_auth': 'true',\n};\n/**\n * Class that provides a mechanism to send requests to the Firebase Cloud Messaging backend.\n */\nclass FirebaseMessagingRequestHandler {\n    /**\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @constructor\n     */\n    constructor(app) {\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n        this.http2Client = new api_request_1.AuthorizedHttp2Client(app);\n        this.batchClient = new batch_request_internal_1.BatchRequestClient(this.httpClient, FIREBASE_MESSAGING_BATCH_URL, FIREBASE_MESSAGING_HEADERS);\n    }\n    /**\n     * Invokes the request handler with the provided request data.\n     *\n     * @param host - The host to which to send the request.\n     * @param path - The path to which to send the request.\n     * @param requestData - The request data.\n     * @returns A promise that resolves with the response.\n     */\n    invokeRequestHandler(host, path, requestData) {\n        const request = {\n            method: FIREBASE_MESSAGING_HTTP_METHOD,\n            url: `https://${host}${path}`,\n            data: requestData,\n            headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\n            timeout: FIREBASE_MESSAGING_TIMEOUT,\n        };\n        return this.httpClient.send(request).then((response) => {\n            // Send non-JSON responses to the catch() below where they will be treated as errors.\n            if (!response.isJson()) {\n                throw new api_request_1.RequestResponseError(response);\n            }\n            // Check for backend errors in the response.\n            const errorCode = (0, messaging_errors_internal_1.getErrorCode)(response.data);\n            if (errorCode) {\n                throw new api_request_1.RequestResponseError(response);\n            }\n            // Return entire response.\n            return response.data;\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.RequestResponseError) {\n                throw (0, messaging_errors_internal_1.createFirebaseError)(err);\n            }\n            // Re-throw the error if it already has the proper format.\n            throw err;\n        });\n    }\n    /**\n     * Invokes the HTTP/1.1 request handler with the provided request data.\n     *\n     * @param host - The host to which to send the request.\n     * @param path - The path to which to send the request.\n     * @param requestData - The request data.\n     * @returns A promise that resolves with the {@link SendResponse}.\n     */\n    invokeHttpRequestHandlerForSendResponse(host, path, requestData) {\n        const request = {\n            method: FIREBASE_MESSAGING_HTTP_METHOD,\n            url: `https://${host}${path}`,\n            data: requestData,\n            headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\n            timeout: FIREBASE_MESSAGING_TIMEOUT,\n        };\n        return this.httpClient.send(request).then((response) => {\n            return this.buildSendResponse(response);\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.RequestResponseError) {\n                return this.buildSendResponseFromError(err);\n            }\n            // Re-throw the error if it already has the proper format.\n            throw err;\n        });\n    }\n    /**\n     * Invokes the HTTP/2 request handler with the provided request data.\n     *\n     * @param host - The host to which to send the request.\n     * @param path - The path to which to send the request.\n     * @param requestData - The request data.\n     * @returns A promise that resolves with the {@link SendResponse}.\n     */\n    invokeHttp2RequestHandlerForSendResponse(host, path, requestData, http2SessionHandler) {\n        const request = {\n            method: FIREBASE_MESSAGING_HTTP_METHOD,\n            url: `https://${host}${path}`,\n            data: requestData,\n            headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\n            timeout: FIREBASE_MESSAGING_TIMEOUT,\n            http2SessionHandler: http2SessionHandler\n        };\n        return this.http2Client.send(request).then((response) => {\n            return this.buildSendResponse(response);\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.RequestResponseError) {\n                return this.buildSendResponseFromError(err);\n            }\n            // Re-throw the error if it already has the proper format.\n            throw err;\n        });\n    }\n    /**\n     * Sends the given array of sub requests as a single batch to FCM, and parses the result into\n     * a `BatchResponse` object.\n     *\n     * @param requests - An array of sub requests to send.\n     * @returns A promise that resolves when the send operation is complete.\n     */\n    sendBatchRequest(requests) {\n        return this.batchClient.send(requests)\n            .then((responses) => {\n            return responses.map((part) => {\n                return this.buildSendResponse(part);\n            });\n        }).then((responses) => {\n            const successCount = responses.filter((resp) => resp.success).length;\n            return {\n                responses,\n                successCount,\n                failureCount: responses.length - successCount,\n            };\n        }).catch((err) => {\n            if (err instanceof api_request_1.RequestResponseError) {\n                throw (0, messaging_errors_internal_1.createFirebaseError)(err);\n            }\n            // Re-throw the error if it already has the proper format.\n            throw err;\n        });\n    }\n    buildSendResponse(response) {\n        const result = {\n            success: response.status === 200,\n        };\n        if (result.success) {\n            result.messageId = response.data.name;\n        }\n        else {\n            result.error = (0, messaging_errors_internal_1.createFirebaseError)(new api_request_1.RequestResponseError(response));\n        }\n        return result;\n    }\n    buildSendResponseFromError(err) {\n        return {\n            success: false,\n            error: (0, messaging_errors_internal_1.createFirebaseError)(err)\n        };\n    }\n}\nexports.FirebaseMessagingRequestHandler = FirebaseMessagingRequestHandler;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10865, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/messaging/messaging.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Messaging = void 0;\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils\");\nconst validator = require(\"../utils/validator\");\nconst messaging_internal_1 = require(\"./messaging-internal\");\nconst messaging_api_request_internal_1 = require(\"./messaging-api-request-internal\");\nconst api_request_1 = require(\"../utils/api-request\");\n// FCM endpoints\nconst FCM_SEND_HOST = 'fcm.googleapis.com';\nconst FCM_SEND_PATH = '/fcm/send';\nconst FCM_TOPIC_MANAGEMENT_HOST = 'iid.googleapis.com';\nconst FCM_TOPIC_MANAGEMENT_ADD_PATH = '/iid/v1:batchAdd';\nconst FCM_TOPIC_MANAGEMENT_REMOVE_PATH = '/iid/v1:batchRemove';\n// Maximum messages that can be included in a batch request.\nconst FCM_MAX_BATCH_SIZE = 500;\n// Key renames for the messaging notification payload object.\nconst CAMELCASED_NOTIFICATION_PAYLOAD_KEYS_MAP = {\n    bodyLocArgs: 'body_loc_args',\n    bodyLocKey: 'body_loc_key',\n    clickAction: 'click_action',\n    titleLocArgs: 'title_loc_args',\n    titleLocKey: 'title_loc_key',\n};\n// Key renames for the messaging options object.\nconst CAMELCASE_OPTIONS_KEYS_MAP = {\n    dryRun: 'dry_run',\n    timeToLive: 'time_to_live',\n    collapseKey: 'collapse_key',\n    mutableContent: 'mutable_content',\n    contentAvailable: 'content_available',\n    restrictedPackageName: 'restricted_package_name',\n};\n// Key renames for the MessagingDeviceResult object.\nconst MESSAGING_DEVICE_RESULT_KEYS_MAP = {\n    message_id: 'messageId',\n    registration_id: 'canonicalRegistrationToken',\n};\n// Key renames for the MessagingDevicesResponse object.\nconst MESSAGING_DEVICES_RESPONSE_KEYS_MAP = {\n    canonical_ids: 'canonicalRegistrationTokenCount',\n    failure: 'failureCount',\n    success: 'successCount',\n    multicast_id: 'multicastId',\n};\n// Key renames for the MessagingDeviceGroupResponse object.\nconst MESSAGING_DEVICE_GROUP_RESPONSE_KEYS_MAP = {\n    success: 'successCount',\n    failure: 'failureCount',\n    failed_registration_ids: 'failedRegistrationTokens',\n};\n// Key renames for the MessagingTopicResponse object.\nconst MESSAGING_TOPIC_RESPONSE_KEYS_MAP = {\n    message_id: 'messageId',\n};\n// Key renames for the MessagingConditionResponse object.\nconst MESSAGING_CONDITION_RESPONSE_KEYS_MAP = {\n    message_id: 'messageId',\n};\n/**\n * Maps a raw FCM server response to a `MessagingDevicesResponse` object.\n *\n * @param response - The raw FCM server response to map.\n *\n * @returns The mapped `MessagingDevicesResponse` object.\n */\nfunction mapRawResponseToDevicesResponse(response) {\n    // Rename properties on the server response\n    utils.renameProperties(response, MESSAGING_DEVICES_RESPONSE_KEYS_MAP);\n    if ('results' in response) {\n        response.results.forEach((messagingDeviceResult) => {\n            utils.renameProperties(messagingDeviceResult, MESSAGING_DEVICE_RESULT_KEYS_MAP);\n            // Map the FCM server's error strings to actual error objects.\n            if ('error' in messagingDeviceResult) {\n                const newError = error_1.FirebaseMessagingError.fromServerError(messagingDeviceResult.error, /* message */ undefined, messagingDeviceResult.error);\n                messagingDeviceResult.error = newError;\n            }\n        });\n    }\n    return response;\n}\n/**\n * Maps a raw FCM server response to a `MessagingDeviceGroupResponse` object.\n *\n * @param response - The raw FCM server response to map.\n *\n * @returns The mapped `MessagingDeviceGroupResponse` object.\n */\nfunction mapRawResponseToDeviceGroupResponse(response) {\n    // Rename properties on the server response\n    utils.renameProperties(response, MESSAGING_DEVICE_GROUP_RESPONSE_KEYS_MAP);\n    // Add the 'failedRegistrationTokens' property if it does not exist on the response, which\n    // it won't when the 'failureCount' property has a value of 0)\n    response.failedRegistrationTokens = response.failedRegistrationTokens || [];\n    return response;\n}\n/**\n * Maps a raw FCM server response to a `MessagingTopicManagementResponse` object.\n *\n * @param {object} response The raw FCM server response to map.\n *\n * @returns {MessagingTopicManagementResponse} The mapped `MessagingTopicManagementResponse` object.\n */\nfunction mapRawResponseToTopicManagementResponse(response) {\n    // Add the success and failure counts.\n    const result = {\n        successCount: 0,\n        failureCount: 0,\n        errors: [],\n    };\n    if ('results' in response) {\n        response.results.forEach((tokenManagementResult, index) => {\n            // Map the FCM server's error strings to actual error objects.\n            if ('error' in tokenManagementResult) {\n                result.failureCount += 1;\n                const newError = error_1.FirebaseMessagingError.fromTopicManagementServerError(tokenManagementResult.error, /* message */ undefined, tokenManagementResult.error);\n                result.errors.push({\n                    index,\n                    error: newError,\n                });\n            }\n            else {\n                result.successCount += 1;\n            }\n        });\n    }\n    return result;\n}\n/**\n * Messaging service bound to the provided app.\n */\nclass Messaging {\n    /**\n     * @internal\n     */\n    constructor(app) {\n        this.useLegacyTransport = false;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.messaging() must be a valid Firebase app instance.');\n        }\n        this.appInternal = app;\n        this.messagingRequestHandler = new messaging_api_request_internal_1.FirebaseMessagingRequestHandler(app);\n    }\n    /**\n     * The {@link firebase-admin.app#App} associated with the current `Messaging` service\n     * instance.\n     *\n     * @example\n     * ```javascript\n     * var app = messaging.app;\n     * ```\n     */\n    get app() {\n        return this.appInternal;\n    }\n    /**\n     * Enables the use of legacy HTTP/1.1 transport for `sendEach()` and `sendEachForMulticast()`.\n     *\n     * @example\n     * ```javascript\n     * const messaging = getMessaging(app);\n     * messaging.enableLegacyTransport();\n     * messaging.sendEach(messages);\n     * ```\n     *\n     * @deprecated This will be removed when the HTTP/2 transport implementation reaches the same\n     * stability as the legacy HTTP/1.1 implementation.\n     */\n    enableLegacyHttpTransport() {\n        this.useLegacyTransport = true;\n    }\n    /**\n     * Sends the given message via FCM.\n     *\n     * @param message - The message payload.\n     * @param dryRun - Whether to send the message in the dry-run\n     *   (validation only) mode.\n     * @returns A promise fulfilled with a unique message ID\n     *   string after the message has been successfully handed off to the FCM\n     *   service for delivery.\n     */\n    send(message, dryRun) {\n        const copy = (0, deep_copy_1.deepCopy)(message);\n        (0, messaging_internal_1.validateMessage)(copy);\n        if (typeof dryRun !== 'undefined' && !validator.isBoolean(dryRun)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'dryRun must be a boolean');\n        }\n        return this.getUrlPath()\n            .then((urlPath) => {\n            const request = { message: copy };\n            if (dryRun) {\n                request.validate_only = true;\n            }\n            return this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, urlPath, request);\n        })\n            .then((response) => {\n            return response.name;\n        });\n    }\n    /**\n    * Sends each message in the given array via Firebase Cloud Messaging.\n    *\n    * Unlike {@link Messaging.sendAll}, this method makes a single RPC call for each message\n    * in the given array.\n    *\n    * The responses list obtained from the return value corresponds to the order of `messages`.\n    * An error from this method or a `BatchResponse` with all failures indicates a total failure,\n    * meaning that none of the messages in the list could be sent. Partial failures or no\n    * failures are only indicated by a `BatchResponse` return value.\n    *\n    * @param messages - A non-empty array\n    *   containing up to 500 messages.\n    * @param dryRun - Whether to send the messages in the dry-run\n    *   (validation only) mode.\n    * @returns A Promise fulfilled with an object representing the result of the\n    *   send operation.\n    */\n    sendEach(messages, dryRun) {\n        if (validator.isArray(messages) && messages.constructor !== Array) {\n            // In more recent JS specs, an array-like object might have a constructor that is not of\n            // Array type. Our deepCopy() method doesn't handle them properly. Convert such objects to\n            // a regular array here before calling deepCopy(). See issue #566 for details.\n            messages = Array.from(messages);\n        }\n        const copy = (0, deep_copy_1.deepCopy)(messages);\n        if (!validator.isNonEmptyArray(copy)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'messages must be a non-empty array');\n        }\n        if (copy.length > FCM_MAX_BATCH_SIZE) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, `messages list must not contain more than ${FCM_MAX_BATCH_SIZE} items`);\n        }\n        if (typeof dryRun !== 'undefined' && !validator.isBoolean(dryRun)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'dryRun must be a boolean');\n        }\n        const http2SessionHandler = this.useLegacyTransport ? undefined : new api_request_1.Http2SessionHandler(`https://${FCM_SEND_HOST}`);\n        return this.getUrlPath()\n            .then((urlPath) => {\n            const requests = copy.map(async (message) => {\n                (0, messaging_internal_1.validateMessage)(message);\n                const request = { message };\n                if (dryRun) {\n                    request.validate_only = true;\n                }\n                if (http2SessionHandler) {\n                    return this.messagingRequestHandler.invokeHttp2RequestHandlerForSendResponse(FCM_SEND_HOST, urlPath, request, http2SessionHandler);\n                }\n                return this.messagingRequestHandler.invokeHttpRequestHandlerForSendResponse(FCM_SEND_HOST, urlPath, request);\n            });\n            return Promise.allSettled(requests);\n        })\n            .then((results) => {\n            const responses = [];\n            results.forEach(result => {\n                if (result.status === 'fulfilled') {\n                    responses.push(result.value);\n                }\n                else { // rejected\n                    responses.push({ success: false, error: result.reason });\n                }\n            });\n            const successCount = responses.filter((resp) => resp.success).length;\n            return {\n                responses,\n                successCount,\n                failureCount: responses.length - successCount,\n            };\n        })\n            .finally(() => {\n            if (http2SessionHandler) {\n                http2SessionHandler.close();\n            }\n        });\n    }\n    /**\n     * Sends the given multicast message to all the FCM registration tokens\n     * specified in it.\n     *\n     * This method uses the {@link Messaging.sendEach} API under the hood to send the given\n     * message to all the target recipients. The responses list obtained from the\n     * return value corresponds to the order of tokens in the `MulticastMessage`.\n     * An error from this method or a `BatchResponse` with all failures indicates a total\n     * failure, meaning that the messages in the list could be sent. Partial failures or\n     * failures are only indicated by a `BatchResponse` return value.\n     *\n     * @param message - A multicast message\n     *   containing up to 500 tokens.\n     * @param dryRun - Whether to send the message in the dry-run\n     *   (validation only) mode.\n     * @returns A Promise fulfilled with an object representing the result of the\n     *   send operation.\n     */\n    sendEachForMulticast(message, dryRun) {\n        const copy = (0, deep_copy_1.deepCopy)(message);\n        if (!validator.isNonNullObject(copy)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'MulticastMessage must be a non-null object');\n        }\n        if (!validator.isNonEmptyArray(copy.tokens)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'tokens must be a non-empty array');\n        }\n        if (copy.tokens.length > FCM_MAX_BATCH_SIZE) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, `tokens list must not contain more than ${FCM_MAX_BATCH_SIZE} items`);\n        }\n        const messages = copy.tokens.map((token) => {\n            return {\n                token,\n                android: copy.android,\n                apns: copy.apns,\n                data: copy.data,\n                notification: copy.notification,\n                webpush: copy.webpush,\n                fcmOptions: copy.fcmOptions,\n            };\n        });\n        return this.sendEach(messages, dryRun);\n    }\n    /**\n     * Sends all the messages in the given array via Firebase Cloud Messaging.\n     * Employs batching to send the entire list as a single RPC call. Compared\n     * to the `send()` method, this method is a significantly more efficient way\n     * to send multiple messages.\n     *\n     * The responses list obtained from the return value\n     * corresponds to the order of tokens in the `MulticastMessage`. An error\n     * from this method indicates a total failure, meaning that none of the messages\n     * in the list could be sent. Partial failures are indicated by a `BatchResponse`\n     * return value.\n     *\n     * @param messages - A non-empty array\n     *   containing up to 500 messages.\n     * @param dryRun - Whether to send the messages in the dry-run\n     *   (validation only) mode.\n     * @returns A Promise fulfilled with an object representing the result of the\n     *   send operation.\n     *\n     * @deprecated Use {@link Messaging.sendEach} instead.\n     */\n    sendAll(messages, dryRun) {\n        if (validator.isArray(messages) && messages.constructor !== Array) {\n            // In more recent JS specs, an array-like object might have a constructor that is not of\n            // Array type. Our deepCopy() method doesn't handle them properly. Convert such objects to\n            // a regular array here before calling deepCopy(). See issue #566 for details.\n            messages = Array.from(messages);\n        }\n        const copy = (0, deep_copy_1.deepCopy)(messages);\n        if (!validator.isNonEmptyArray(copy)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'messages must be a non-empty array');\n        }\n        if (copy.length > FCM_MAX_BATCH_SIZE) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, `messages list must not contain more than ${FCM_MAX_BATCH_SIZE} items`);\n        }\n        if (typeof dryRun !== 'undefined' && !validator.isBoolean(dryRun)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'dryRun must be a boolean');\n        }\n        return this.getUrlPath()\n            .then((urlPath) => {\n            const requests = copy.map((message) => {\n                (0, messaging_internal_1.validateMessage)(message);\n                const request = { message };\n                if (dryRun) {\n                    request.validate_only = true;\n                }\n                return {\n                    url: `https://${FCM_SEND_HOST}${urlPath}`,\n                    body: request,\n                };\n            });\n            return this.messagingRequestHandler.sendBatchRequest(requests);\n        });\n    }\n    /**\n     * Sends the given multicast message to all the FCM registration tokens\n     * specified in it.\n     *\n     * This method uses the `sendAll()` API under the hood to send the given\n     * message to all the target recipients. The responses list obtained from the\n     * return value corresponds to the order of tokens in the `MulticastMessage`.\n     * An error from this method indicates a total failure, meaning that the message\n     * was not sent to any of the tokens in the list. Partial failures are indicated\n     * by a `BatchResponse` return value.\n     *\n     * @param message - A multicast message\n     *   containing up to 500 tokens.\n     * @param dryRun - Whether to send the message in the dry-run\n     *   (validation only) mode.\n     * @returns A Promise fulfilled with an object representing the result of the\n     *   send operation.\n     *\n     * @deprecated Use {@link Messaging.sendEachForMulticast} instead.\n     */\n    sendMulticast(message, dryRun) {\n        const copy = (0, deep_copy_1.deepCopy)(message);\n        if (!validator.isNonNullObject(copy)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'MulticastMessage must be a non-null object');\n        }\n        if (!validator.isNonEmptyArray(copy.tokens)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'tokens must be a non-empty array');\n        }\n        if (copy.tokens.length > FCM_MAX_BATCH_SIZE) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, `tokens list must not contain more than ${FCM_MAX_BATCH_SIZE} items`);\n        }\n        const messages = copy.tokens.map((token) => {\n            return {\n                token,\n                android: copy.android,\n                apns: copy.apns,\n                data: copy.data,\n                notification: copy.notification,\n                webpush: copy.webpush,\n                fcmOptions: copy.fcmOptions,\n            };\n        });\n        return this.sendAll(messages, dryRun);\n    }\n    /**\n     * Sends an FCM message to a single device corresponding to the provided\n     * registration token.\n     *\n     * See {@link https://firebase.google.com/docs/cloud-messaging/admin/legacy-fcm#send_to_individual_devices |\n     * Send to individual devices}\n     * for code samples and detailed documentation. Takes either a\n     * `registrationToken` to send to a single device or a\n     * `registrationTokens` parameter containing an array of tokens to send\n     * to multiple devices.\n     *\n     * @param registrationToken - A device registration token or an array of\n     *   device registration tokens to which the message should be sent.\n     * @param payload - The message payload.\n     * @param options - Optional options to\n     *   alter the message.\n     *\n     * @returns A promise fulfilled with the server's response after the message\n     *   has been sent.\n     *\n     * @deprecated Use {@link Messaging.send} instead.\n     */\n    sendToDevice(registrationTokenOrTokens, payload, options = {}) {\n        // Validate the input argument types. Since these are common developer errors when getting\n        // started, throw an error instead of returning a rejected promise.\n        this.validateRegistrationTokensType(registrationTokenOrTokens, 'sendToDevice', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\n        this.validateMessagingPayloadAndOptionsTypes(payload, options);\n        return Promise.resolve()\n            .then(() => {\n            // Validate the contents of the input arguments. Because we are now in a promise, any thrown\n            // error will cause this method to return a rejected promise.\n            this.validateRegistrationTokens(registrationTokenOrTokens, 'sendToDevice', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\n            const payloadCopy = this.validateMessagingPayload(payload);\n            const optionsCopy = this.validateMessagingOptions(options);\n            const request = (0, deep_copy_1.deepCopy)(payloadCopy);\n            (0, deep_copy_1.deepExtend)(request, optionsCopy);\n            if (validator.isString(registrationTokenOrTokens)) {\n                request.to = registrationTokenOrTokens;\n            }\n            else {\n                request.registration_ids = registrationTokenOrTokens;\n            }\n            return this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\n        })\n            .then((response) => {\n            // The sendToDevice() and sendToDeviceGroup() methods both set the `to` query parameter in\n            // the underlying FCM request. If the provided registration token argument is actually a\n            // valid notification key, the response from the FCM server will be a device group response.\n            // If that is the case, we map the response to a MessagingDeviceGroupResponse.\n            // See b/35394951 for more context.\n            if ('multicast_id' in response) {\n                return mapRawResponseToDevicesResponse(response);\n            }\n            else {\n                const groupResponse = mapRawResponseToDeviceGroupResponse(response);\n                return {\n                    ...groupResponse,\n                    canonicalRegistrationTokenCount: -1,\n                    multicastId: -1,\n                    results: [],\n                };\n            }\n        });\n    }\n    /**\n     * Sends an FCM message to a device group corresponding to the provided\n     * notification key.\n     *\n     * See {@link https://firebase.google.com/docs/cloud-messaging/admin/legacy-fcm#send_to_a_device_group |\n     * Send to a device group} for code samples and detailed documentation.\n     *\n     * @param notificationKey - The notification key for the device group to\n     *   which to send the message.\n     * @param payload - The message payload.\n     * @param options - Optional options to\n     *   alter the message.\n     *\n     * @returns A promise fulfilled with the server's response after the message\n     *   has been sent.\n     *\n     * @deprecated Use {@link Messaging.send} instead.\n     */\n    sendToDeviceGroup(notificationKey, payload, options = {}) {\n        if (!validator.isNonEmptyString(notificationKey)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Notification key provided to sendToDeviceGroup() must be a non-empty string.');\n        }\n        else if (notificationKey.indexOf(':') !== -1) {\n            // It is possible the developer provides a registration token instead of a notification key\n            // to this method. We can detect some of those cases by checking to see if the string contains\n            // a colon. Not all registration tokens will contain a colon (only newer ones will), but no\n            // notification keys will contain a colon, so we can use it as a rough heuristic.\n            // See b/35394951 for more context.\n            return Promise.reject(new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Notification key provided to sendToDeviceGroup() has the format of a registration token. ' +\n                'You should use sendToDevice() instead.'));\n        }\n        // Validate the types of the payload and options arguments. Since these are common developer\n        // errors, throw an error instead of returning a rejected promise.\n        this.validateMessagingPayloadAndOptionsTypes(payload, options);\n        return Promise.resolve()\n            .then(() => {\n            // Validate the contents of the payload and options objects. Because we are now in a\n            // promise, any thrown error will cause this method to return a rejected promise.\n            const payloadCopy = this.validateMessagingPayload(payload);\n            const optionsCopy = this.validateMessagingOptions(options);\n            const request = (0, deep_copy_1.deepCopy)(payloadCopy);\n            (0, deep_copy_1.deepExtend)(request, optionsCopy);\n            request.to = notificationKey;\n            return this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\n        })\n            .then((response) => {\n            // The sendToDevice() and sendToDeviceGroup() methods both set the `to` query parameter in\n            // the underlying FCM request. If the provided notification key argument has an invalid\n            // format (that is, it is either a registration token or some random string), the response\n            // from the FCM server will default to a devices response (which we detect by looking for\n            // the `multicast_id` property). If that is the case, we either throw an error saying the\n            // provided notification key is invalid (if the message failed to send) or map the response\n            // to a MessagingDevicesResponse (if the message succeeded).\n            // See b/35394951 for more context.\n            if ('multicast_id' in response) {\n                if (response.success === 0) {\n                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Notification key provided to sendToDeviceGroup() is invalid.');\n                }\n                else {\n                    const devicesResponse = mapRawResponseToDevicesResponse(response);\n                    return {\n                        ...devicesResponse,\n                        failedRegistrationTokens: [],\n                    };\n                }\n            }\n            return mapRawResponseToDeviceGroupResponse(response);\n        });\n    }\n    /**\n     * Sends an FCM message to a topic.\n     *\n     * See {@link https://firebase.google.com/docs/cloud-messaging/admin/legacy-fcm#send_to_a_topic |\n     * Send to a topic} for code samples and detailed documentation.\n     *\n     * @param topic - The topic to which to send the message.\n     * @param payload - The message payload.\n     * @param options - Optional options to\n     *   alter the message.\n     *\n     * @returns A promise fulfilled with the server's response after the message\n     *   has been sent.\n     *\n     * @deprecated Use {@link Messaging.send} instead.\n     */\n    sendToTopic(topic, payload, options = {}) {\n        // Validate the input argument types. Since these are common developer errors when getting\n        // started, throw an error instead of returning a rejected promise.\n        this.validateTopicType(topic, 'sendToTopic', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\n        this.validateMessagingPayloadAndOptionsTypes(payload, options);\n        // Prepend the topic with /topics/ if necessary.\n        topic = this.normalizeTopic(topic);\n        return Promise.resolve()\n            .then(() => {\n            // Validate the contents of the payload and options objects. Because we are now in a\n            // promise, any thrown error will cause this method to return a rejected promise.\n            const payloadCopy = this.validateMessagingPayload(payload);\n            const optionsCopy = this.validateMessagingOptions(options);\n            this.validateTopic(topic, 'sendToTopic', error_1.MessagingClientErrorCode.INVALID_RECIPIENT);\n            const request = (0, deep_copy_1.deepCopy)(payloadCopy);\n            (0, deep_copy_1.deepExtend)(request, optionsCopy);\n            request.to = topic;\n            return this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\n        })\n            .then((response) => {\n            // Rename properties on the server response\n            utils.renameProperties(response, MESSAGING_TOPIC_RESPONSE_KEYS_MAP);\n            return response;\n        });\n    }\n    /**\n     * Sends an FCM message to a condition.\n     *\n     * See {@link https://firebase.google.com/docs/cloud-messaging/admin/legacy-fcm#send_to_a_condition |\n     * Send to a condition}\n     * for code samples and detailed documentation.\n     *\n     * @param condition - The condition determining to which topics to send\n     *   the message.\n     * @param payload - The message payload.\n     * @param options - Optional options to\n     *   alter the message.\n     *\n     * @returns A promise fulfilled with the server's response after the message\n     *   has been sent.\n     *\n     * @deprecated Use {@link Messaging.send} instead.\n     */\n    sendToCondition(condition, payload, options = {}) {\n        if (!validator.isNonEmptyString(condition)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_RECIPIENT, 'Condition provided to sendToCondition() must be a non-empty string.');\n        }\n        // Validate the types of the payload and options arguments. Since these are common developer\n        // errors, throw an error instead of returning a rejected promise.\n        this.validateMessagingPayloadAndOptionsTypes(payload, options);\n        // The FCM server rejects conditions which are surrounded in single quotes. When the condition\n        // is stringified over the wire, double quotes in it get converted to \\\" which the FCM server\n        // does not properly handle. We can get around this by replacing internal double quotes with\n        // single quotes.\n        condition = condition.replace(/\"/g, '\\'');\n        return Promise.resolve()\n            .then(() => {\n            // Validate the contents of the payload and options objects. Because we are now in a\n            // promise, any thrown error will cause this method to return a rejected promise.\n            const payloadCopy = this.validateMessagingPayload(payload);\n            const optionsCopy = this.validateMessagingOptions(options);\n            const request = (0, deep_copy_1.deepCopy)(payloadCopy);\n            (0, deep_copy_1.deepExtend)(request, optionsCopy);\n            request.condition = condition;\n            return this.messagingRequestHandler.invokeRequestHandler(FCM_SEND_HOST, FCM_SEND_PATH, request);\n        })\n            .then((response) => {\n            // Rename properties on the server response\n            utils.renameProperties(response, MESSAGING_CONDITION_RESPONSE_KEYS_MAP);\n            return response;\n        });\n    }\n    /**\n     * Subscribes a device to an FCM topic.\n     *\n     * See {@link https://firebase.google.com/docs/cloud-messaging/manage-topics#suscribe_and_unsubscribe_using_the |\n     * Subscribe to a topic}\n     * for code samples and detailed documentation. Optionally, you can provide an\n     * array of tokens to subscribe multiple devices.\n     *\n     * @param registrationTokens - A token or array of registration tokens\n     *   for the devices to subscribe to the topic.\n     * @param topic - The topic to which to subscribe.\n     *\n     * @returns A promise fulfilled with the server's response after the device has been\n     *   subscribed to the topic.\n     */\n    subscribeToTopic(registrationTokenOrTokens, topic) {\n        return this.sendTopicManagementRequest(registrationTokenOrTokens, topic, 'subscribeToTopic', FCM_TOPIC_MANAGEMENT_ADD_PATH);\n    }\n    /**\n     * Unsubscribes a device from an FCM topic.\n     *\n     * See {@link https://firebase.google.com/docs/cloud-messaging/admin/manage-topic-subscriptions#unsubscribe_from_a_topic |\n     * Unsubscribe from a topic}\n     * for code samples and detailed documentation.  Optionally, you can provide an\n     * array of tokens to unsubscribe multiple devices.\n     *\n     * @param registrationTokens - A device registration token or an array of\n     *   device registration tokens to unsubscribe from the topic.\n     * @param topic - The topic from which to unsubscribe.\n     *\n     * @returns A promise fulfilled with the server's response after the device has been\n     *   unsubscribed from the topic.\n     */\n    unsubscribeFromTopic(registrationTokenOrTokens, topic) {\n        return this.sendTopicManagementRequest(registrationTokenOrTokens, topic, 'unsubscribeFromTopic', FCM_TOPIC_MANAGEMENT_REMOVE_PATH);\n    }\n    getUrlPath() {\n        if (this.urlPath) {\n            return Promise.resolve(this.urlPath);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                // Assert for an explicit project ID (either via AppOptions or the cert itself).\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_ARGUMENT, 'Failed to determine project ID for Messaging. Initialize the '\n                    + 'SDK with service account credentials or set project ID as an app option. '\n                    + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n            }\n            this.urlPath = `/v1/projects/${projectId}/messages:send`;\n            return this.urlPath;\n        });\n    }\n    /**\n     * Helper method which sends and handles topic subscription management requests.\n     *\n     * @param registrationTokenOrTokens - The registration token or an array of\n     *     registration tokens to unsubscribe from the topic.\n     * @param topic - The topic to which to subscribe.\n     * @param methodName - The name of the original method called.\n     * @param path - The endpoint path to use for the request.\n     *\n     * @returns A Promise fulfilled with the parsed server\n     *   response.\n     */\n    sendTopicManagementRequest(registrationTokenOrTokens, topic, methodName, path) {\n        this.validateRegistrationTokensType(registrationTokenOrTokens, methodName);\n        this.validateTopicType(topic, methodName);\n        // Prepend the topic with /topics/ if necessary.\n        topic = this.normalizeTopic(topic);\n        return Promise.resolve()\n            .then(() => {\n            // Validate the contents of the input arguments. Because we are now in a promise, any thrown\n            // error will cause this method to return a rejected promise.\n            this.validateRegistrationTokens(registrationTokenOrTokens, methodName);\n            this.validateTopic(topic, methodName);\n            // Ensure the registration token(s) input argument is an array.\n            let registrationTokensArray = registrationTokenOrTokens;\n            if (validator.isString(registrationTokenOrTokens)) {\n                registrationTokensArray = [registrationTokenOrTokens];\n            }\n            const request = {\n                to: topic,\n                registration_tokens: registrationTokensArray,\n            };\n            return this.messagingRequestHandler.invokeRequestHandler(FCM_TOPIC_MANAGEMENT_HOST, path, request);\n        })\n            .then((response) => {\n            return mapRawResponseToTopicManagementResponse(response);\n        });\n    }\n    /**\n     * Validates the types of the messaging payload and options. If invalid, an error will be thrown.\n     *\n     * @param payload - The messaging payload to validate.\n     * @param options - The messaging options to validate.\n     */\n    validateMessagingPayloadAndOptionsTypes(payload, options) {\n        // Validate the payload is an object\n        if (!validator.isNonNullObject(payload)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Messaging payload must be an object with at least one of the \"data\" or \"notification\" properties.');\n        }\n        // Validate the options argument is an object\n        if (!validator.isNonNullObject(options)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, 'Messaging options must be an object.');\n        }\n    }\n    /**\n     * Validates the messaging payload. If invalid, an error will be thrown.\n     *\n     * @param payload - The messaging payload to validate.\n     *\n     * @returns A copy of the provided payload with whitelisted properties switched\n     *     from camelCase to underscore_case.\n     */\n    validateMessagingPayload(payload) {\n        const payloadCopy = (0, deep_copy_1.deepCopy)(payload);\n        const payloadKeys = Object.keys(payloadCopy);\n        const validPayloadKeys = ['data', 'notification'];\n        let containsDataOrNotificationKey = false;\n        payloadKeys.forEach((payloadKey) => {\n            // Validate the payload does not contain any invalid keys\n            if (validPayloadKeys.indexOf(payloadKey) === -1) {\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains an invalid \"${payloadKey}\" property. Valid properties are ` +\n                    '\"data\" and \"notification\".');\n            }\n            else {\n                containsDataOrNotificationKey = true;\n            }\n        });\n        // Validate the payload contains at least one of the \"data\" and \"notification\" keys\n        if (!containsDataOrNotificationKey) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Messaging payload must contain at least one of the \"data\" or \"notification\" properties.');\n        }\n        const validatePayload = (payloadKey, value) => {\n            // Validate each top-level key in the payload is an object\n            if (!validator.isNonNullObject(value)) {\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains an invalid value for the \"${payloadKey}\" property. ` +\n                    'Value must be an object.');\n            }\n            Object.keys(value).forEach((subKey) => {\n                if (!validator.isString(value[subKey])) {\n                    // Validate all sub-keys have a string value\n                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains an invalid value for the \"${payloadKey}.${subKey}\" ` +\n                        'property. Values must be strings.');\n                }\n                else if (payloadKey === 'data' && /^google\\./.test(subKey)) {\n                    // Validate the data payload does not contain keys which start with 'google.'.\n                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains the blacklisted \"data.${subKey}\" property.`);\n                }\n            });\n        };\n        if (payloadCopy.data !== undefined) {\n            validatePayload('data', payloadCopy.data);\n        }\n        if (payloadCopy.notification !== undefined) {\n            validatePayload('notification', payloadCopy.notification);\n        }\n        // Validate the data payload object does not contain blacklisted properties\n        if ('data' in payloadCopy) {\n            messaging_internal_1.BLACKLISTED_DATA_PAYLOAD_KEYS.forEach((blacklistedKey) => {\n                if (blacklistedKey in payloadCopy.data) {\n                    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Messaging payload contains the blacklisted \"data.${blacklistedKey}\" property.`);\n                }\n            });\n        }\n        // Convert whitelisted camelCase keys to underscore_case\n        if (payloadCopy.notification) {\n            utils.renameProperties(payloadCopy.notification, CAMELCASED_NOTIFICATION_PAYLOAD_KEYS_MAP);\n        }\n        return payloadCopy;\n    }\n    /**\n     * Validates the messaging options. If invalid, an error will be thrown.\n     *\n     * @param options - The messaging options to validate.\n     *\n     * @returns A copy of the provided options with whitelisted properties switched\n     *   from camelCase to underscore_case.\n     */\n    validateMessagingOptions(options) {\n        const optionsCopy = (0, deep_copy_1.deepCopy)(options);\n        // Validate the options object does not contain blacklisted properties\n        messaging_internal_1.BLACKLISTED_OPTIONS_KEYS.forEach((blacklistedKey) => {\n            if (blacklistedKey in optionsCopy) {\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains the blacklisted \"${blacklistedKey}\" property.`);\n            }\n        });\n        // Convert whitelisted camelCase keys to underscore_case\n        utils.renameProperties(optionsCopy, CAMELCASE_OPTIONS_KEYS_MAP);\n        // Validate the options object contains valid values for whitelisted properties\n        if ('collapse_key' in optionsCopy && !validator.isNonEmptyString(optionsCopy.collapse_key)) {\n            const keyName = ('collapseKey' in options) ? 'collapseKey' : 'collapse_key';\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the \"${keyName}\" property. Value must ` +\n                'be a non-empty string.');\n        }\n        else if ('dry_run' in optionsCopy && !validator.isBoolean(optionsCopy.dry_run)) {\n            const keyName = ('dryRun' in options) ? 'dryRun' : 'dry_run';\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the \"${keyName}\" property. Value must ` +\n                'be a boolean.');\n        }\n        else if ('priority' in optionsCopy && !validator.isNonEmptyString(optionsCopy.priority)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, 'Messaging options contains an invalid value for the \"priority\" property. Value must ' +\n                'be a non-empty string.');\n        }\n        else if ('restricted_package_name' in optionsCopy &&\n            !validator.isNonEmptyString(optionsCopy.restricted_package_name)) {\n            const keyName = ('restrictedPackageName' in options) ? 'restrictedPackageName' : 'restricted_package_name';\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the \"${keyName}\" property. Value must ` +\n                'be a non-empty string.');\n        }\n        else if ('time_to_live' in optionsCopy && !validator.isNumber(optionsCopy.time_to_live)) {\n            const keyName = ('timeToLive' in options) ? 'timeToLive' : 'time_to_live';\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the \"${keyName}\" property. Value must ` +\n                'be a number.');\n        }\n        else if ('content_available' in optionsCopy && !validator.isBoolean(optionsCopy.content_available)) {\n            const keyName = ('contentAvailable' in options) ? 'contentAvailable' : 'content_available';\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the \"${keyName}\" property. Value must ` +\n                'be a boolean.');\n        }\n        else if ('mutable_content' in optionsCopy && !validator.isBoolean(optionsCopy.mutable_content)) {\n            const keyName = ('mutableContent' in options) ? 'mutableContent' : 'mutable_content';\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_OPTIONS, `Messaging options contains an invalid value for the \"${keyName}\" property. Value must ` +\n                'be a boolean.');\n        }\n        return optionsCopy;\n    }\n    /**\n     * Validates the type of the provided registration token(s). If invalid, an error will be thrown.\n     *\n     * @param registrationTokenOrTokens - The registration token(s) to validate.\n     * @param method - The method name to use in error messages.\n     * @param errorInfo - The error info to use if the registration tokens are invalid.\n     */\n    validateRegistrationTokensType(registrationTokenOrTokens, methodName, errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT) {\n        if (!validator.isNonEmptyArray(registrationTokenOrTokens) &&\n            !validator.isNonEmptyString(registrationTokenOrTokens)) {\n            throw new error_1.FirebaseMessagingError(errorInfo, `Registration token(s) provided to ${methodName}() must be a non-empty string or a ` +\n                'non-empty array.');\n        }\n    }\n    /**\n     * Validates the provided registration tokens. If invalid, an error will be thrown.\n     *\n     * @param registrationTokenOrTokens - The registration token or an array of\n     *     registration tokens to validate.\n     * @param method - The method name to use in error messages.\n     * @param errorInfo - The error info to use if the registration tokens are invalid.\n     */\n    validateRegistrationTokens(registrationTokenOrTokens, methodName, errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT) {\n        if (validator.isArray(registrationTokenOrTokens)) {\n            // Validate the array contains no more than 1,000 registration tokens.\n            if (registrationTokenOrTokens.length > 1000) {\n                throw new error_1.FirebaseMessagingError(errorInfo, `Too many registration tokens provided in a single request to ${methodName}(). Batch ` +\n                    'your requests to contain no more than 1,000 registration tokens per request.');\n            }\n            // Validate the array contains registration tokens which are non-empty strings.\n            registrationTokenOrTokens.forEach((registrationToken, index) => {\n                if (!validator.isNonEmptyString(registrationToken)) {\n                    throw new error_1.FirebaseMessagingError(errorInfo, `Registration token provided to ${methodName}() at index ${index} must be a ` +\n                        'non-empty string.');\n                }\n            });\n        }\n    }\n    /**\n     * Validates the type of the provided topic. If invalid, an error will be thrown.\n     *\n     * @param topic - The topic to validate.\n     * @param method - The method name to use in error messages.\n     * @param errorInfo - The error info to use if the topic is invalid.\n     */\n    validateTopicType(topic, methodName, errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT) {\n        if (!validator.isNonEmptyString(topic)) {\n            throw new error_1.FirebaseMessagingError(errorInfo, `Topic provided to ${methodName}() must be a string which matches the format ` +\n                '\"/topics/[a-zA-Z0-9-_.~%]+\".');\n        }\n    }\n    /**\n     * Validates the provided topic. If invalid, an error will be thrown.\n     *\n     * @param topic - The topic to validate.\n     * @param method - The method name to use in error messages.\n     * @param errorInfo - The error info to use if the topic is invalid.\n     */\n    validateTopic(topic, methodName, errorInfo = error_1.MessagingClientErrorCode.INVALID_ARGUMENT) {\n        if (!validator.isTopic(topic)) {\n            throw new error_1.FirebaseMessagingError(errorInfo, `Topic provided to ${methodName}() must be a string which matches the format ` +\n                '\"/topics/[a-zA-Z0-9-_.~%]+\".');\n        }\n    }\n    /**\n     * Normalizes the provided topic name by prepending it with '/topics/', if necessary.\n     *\n     * @param topic - The topic name to normalize.\n     *\n     * @returns The normalized topic name.\n     */\n    normalizeTopic(topic) {\n        if (!/^\\/topics\\//.test(topic)) {\n            topic = `/topics/${topic}`;\n        }\n        return topic;\n    }\n}\nexports.Messaging = Messaging;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11765, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/storage/storage.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Storage = void 0;\nconst error_1 = require(\"../utils/error\");\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n/**\n * The default `Storage` service if no\n * app is provided or the `Storage` service associated with the provided\n * app.\n */\nclass Storage {\n    /**\n     * @param app - The app for this Storage service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseError({\n                code: 'storage/invalid-argument',\n                message: 'First argument passed to admin.storage() must be a valid Firebase app instance.',\n            });\n        }\n        if (!process.env.STORAGE_EMULATOR_HOST && process.env.FIREBASE_STORAGE_EMULATOR_HOST) {\n            const firebaseStorageEmulatorHost = process.env.FIREBASE_STORAGE_EMULATOR_HOST;\n            if (firebaseStorageEmulatorHost.match(/https?:\\/\\//)) {\n                throw new error_1.FirebaseError({\n                    code: 'storage/invalid-emulator-host',\n                    message: 'FIREBASE_STORAGE_EMULATOR_HOST should not contain a protocol (http or https).',\n                });\n            }\n            process.env.STORAGE_EMULATOR_HOST = `http://${process.env.FIREBASE_STORAGE_EMULATOR_HOST}`;\n        }\n        let storage;\n        try {\n            storage = require('@google-cloud/storage').Storage;\n        }\n        catch (err) {\n            throw new error_1.FirebaseError({\n                code: 'storage/missing-dependencies',\n                message: 'Failed to import the Cloud Storage client library for Node.js. '\n                    + 'Make sure to install the \"@google-cloud/storage\" npm package. '\n                    + `Original error: ${err}`,\n            });\n        }\n        const projectId = utils.getExplicitProjectId(app);\n        const credential = app.options.credential;\n        if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n            this.storageClient = new storage({\n                // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n                // guaranteed to be available.\n                projectId: projectId,\n                credentials: {\n                    private_key: credential.privateKey,\n                    client_email: credential.clientEmail,\n                },\n            });\n        }\n        else if ((0, credential_internal_1.isApplicationDefault)(app.options.credential)) {\n            // Try to use the Google application default credentials.\n            this.storageClient = new storage();\n        }\n        else {\n            throw new error_1.FirebaseError({\n                code: 'storage/invalid-credential',\n                message: 'Failed to initialize Google Cloud Storage client with the available credential. ' +\n                    'Must initialize the SDK with a certificate credential or application default credentials ' +\n                    'to use Cloud Storage API.',\n            });\n        }\n        this.appInternal = app;\n    }\n    /**\n     * Gets a reference to a Cloud Storage bucket.\n     *\n     * @param name - Optional name of the bucket to be retrieved. If name is not specified,\n     * retrieves a reference to the default bucket.\n     * @returns A {@link https://cloud.google.com/nodejs/docs/reference/storage/latest/Bucket | Bucket}\n     * instance as defined in the `@google-cloud/storage` package.\n     */\n    bucket(name) {\n        const bucketName = (typeof name !== 'undefined')\n            ? name : this.appInternal.options.storageBucket;\n        if (validator.isNonEmptyString(bucketName)) {\n            return this.storageClient.bucket(bucketName);\n        }\n        throw new error_1.FirebaseError({\n            code: 'storage/invalid-argument',\n            message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' +\n                'storageBucket option when initializing the app, or specify the bucket name ' +\n                'explicitly when calling the getBucket() method.',\n        });\n    }\n    /**\n     * Optional app whose `Storage` service to\n     * return. If not provided, the default `Storage` service will be returned.\n     */\n    get app() {\n        return this.appInternal;\n    }\n}\nexports.Storage = Storage;\n"],"names":[],"mappings":"AAAA,2BAA2B,GA0Cd;AAzCb;AACA;;;;;;;;;;;;;;;CAeC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,OAAO,GAAG,KAAK;AACvB,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN;;;;CAIC,GACD,MAAM;IACF;;;;KAIC,GACD,YAAY,GAAG,CAAE;QACb,IAAI,CAAC,UAAU,eAAe,CAAC,QAAQ,CAAC,CAAC,aAAa,GAAG,GAAG;YACxD,MAAM,IAAI,QAAQ,aAAa,CAAC;gBAC5B,MAAM;gBACN,SAAS;YACb;QACJ;QACA,IAAI,CAAC,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE;YAClF,MAAM,8BAA8B,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,8BAA8B;YAC9E,IAAI,4BAA4B,KAAK,CAAC,gBAAgB;gBAClD,MAAM,IAAI,QAAQ,aAAa,CAAC;oBAC5B,MAAM;oBACN,SAAS;gBACb;YACJ;YACA,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,CAAC,OAAO,EAAE,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE;QAC9F;QACA,IAAI;QACJ,IAAI;YACA,UAAU,yHAAiC,OAAO;QACtD,EACA,OAAO,KAAK;YACR,MAAM,IAAI,QAAQ,aAAa,CAAC;gBAC5B,MAAM;gBACN,SAAS,oEACH,mEACA,CAAC,gBAAgB,EAAE,KAAK;YAClC;QACJ;QACA,MAAM,YAAY,MAAM,oBAAoB,CAAC;QAC7C,MAAM,aAAa,IAAI,OAAO,CAAC,UAAU;QACzC,IAAI,sBAAsB,sBAAsB,wBAAwB,EAAE;YACtE,IAAI,CAAC,aAAa,GAAG,IAAI,QAAQ;gBAC7B,sFAAsF;gBACtF,8BAA8B;gBAC9B,WAAW;gBACX,aAAa;oBACT,aAAa,WAAW,UAAU;oBAClC,cAAc,WAAW,WAAW;gBACxC;YACJ;QACJ,OACK,IAAI,CAAC,GAAG,sBAAsB,oBAAoB,EAAE,IAAI,OAAO,CAAC,UAAU,GAAG;YAC9E,yDAAyD;YACzD,IAAI,CAAC,aAAa,GAAG,IAAI;QAC7B,OACK;YACD,MAAM,IAAI,QAAQ,aAAa,CAAC;gBAC5B,MAAM;gBACN,SAAS,qFACL,8FACA;YACR;QACJ;QACA,IAAI,CAAC,WAAW,GAAG;IACvB;IACA;;;;;;;KAOC,GACD,OAAO,IAAI,EAAE;QACT,MAAM,aAAa,AAAC,OAAO,SAAS,cAC9B,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa;QACnD,IAAI,UAAU,gBAAgB,CAAC,aAAa;YACxC,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;QACrC;QACA,MAAM,IAAI,QAAQ,aAAa,CAAC;YAC5B,MAAM;YACN,SAAS,+EACL,gFACA;QACR;IACJ;IACA;;;KAGC,GACD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,WAAW;IAC3B;AACJ;AACA,QAAQ,OAAO,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11878, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SDK_VERSION = exports.AppErrorCodes = exports.FirebaseAppError = exports.refreshToken = exports.cert = exports.applicationDefault = exports.deleteApp = exports.getApps = exports.getApp = exports.initializeApp = void 0;\nconst utils_1 = require(\"../utils\");\nvar lifecycle_1 = require(\"./lifecycle\");\nObject.defineProperty(exports, \"initializeApp\", { enumerable: true, get: function () { return lifecycle_1.initializeApp; } });\nObject.defineProperty(exports, \"getApp\", { enumerable: true, get: function () { return lifecycle_1.getApp; } });\nObject.defineProperty(exports, \"getApps\", { enumerable: true, get: function () { return lifecycle_1.getApps; } });\nObject.defineProperty(exports, \"deleteApp\", { enumerable: true, get: function () { return lifecycle_1.deleteApp; } });\nvar credential_factory_1 = require(\"./credential-factory\");\nObject.defineProperty(exports, \"applicationDefault\", { enumerable: true, get: function () { return credential_factory_1.applicationDefault; } });\nObject.defineProperty(exports, \"cert\", { enumerable: true, get: function () { return credential_factory_1.cert; } });\nObject.defineProperty(exports, \"refreshToken\", { enumerable: true, get: function () { return credential_factory_1.refreshToken; } });\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseAppError\", { enumerable: true, get: function () { return error_1.FirebaseAppError; } });\nObject.defineProperty(exports, \"AppErrorCodes\", { enumerable: true, get: function () { return error_1.AppErrorCodes; } });\nexports.SDK_VERSION = (0, utils_1.getSdkVersion)();\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;;CAeC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,WAAW,GAAG,QAAQ,aAAa,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,YAAY,GAAG,QAAQ,IAAI,GAAG,QAAQ,kBAAkB,GAAG,QAAQ,SAAS,GAAG,QAAQ,OAAO,GAAG,QAAQ,MAAM,GAAG,QAAQ,aAAa,GAAG,KAAK;AAChO,MAAM;AACN,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,iBAAiB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,YAAY,aAAa;IAAE;AAAE;AAC3H,OAAO,cAAc,CAAC,SAAS,UAAU;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,YAAY,MAAM;IAAE;AAAE;AAC7G,OAAO,cAAc,CAAC,SAAS,WAAW;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,YAAY,OAAO;IAAE;AAAE;AAC/G,OAAO,cAAc,CAAC,SAAS,aAAa;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,YAAY,SAAS;IAAE;AAAE;AACnH,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,sBAAsB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,qBAAqB,kBAAkB;IAAE;AAAE;AAC9I,OAAO,cAAc,CAAC,SAAS,QAAQ;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,qBAAqB,IAAI;IAAE;AAAE;AAClH,OAAO,cAAc,CAAC,SAAS,gBAAgB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,qBAAqB,YAAY;IAAE;AAAE;AAClI,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,oBAAoB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,gBAAgB;IAAE;AAAE;AAC7H,OAAO,cAAc,CAAC,SAAS,iBAAiB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,aAAa;IAAE;AAAE;AACvH,QAAQ,WAAW,GAAG,CAAC,GAAG,QAAQ,aAAa","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11962, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/storage/utils.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFirebaseMetadata = void 0;\nfunction getFirebaseMetadata(endpoint, file) {\n    const uri = `${endpoint}/b/${file.bucket.name}/o/${encodeURIComponent(file.name)}`;\n    return new Promise((resolve, reject) => {\n        file.storage.makeAuthenticatedRequest({\n            method: 'GET',\n            uri,\n        }, (err, body) => {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(body);\n            }\n        });\n    });\n}\nexports.getFirebaseMetadata = getFirebaseMetadata;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,mBAAmB,GAAG,KAAK;AACnC,SAAS,oBAAoB,QAAQ,EAAE,IAAI;IACvC,MAAM,MAAM,GAAG,SAAS,GAAG,EAAE,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,mBAAmB,KAAK,IAAI,GAAG;IAClF,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,KAAK,OAAO,CAAC,wBAAwB,CAAC;YAClC,QAAQ;YACR;QACJ,GAAG,CAAC,KAAK;YACL,IAAI,KAAK;gBACL,OAAO;YACX,OACK;gBACD,QAAQ;YACZ;QACJ;IACJ;AACJ;AACA,QAAQ,mBAAmB,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11988, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/storage/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDownloadURL = exports.getStorage = exports.Storage = void 0;\nconst app_1 = require(\"../app\");\nconst storage_1 = require(\"./storage\");\nconst error_1 = require(\"../utils/error\");\nconst utils_1 = require(\"./utils\");\nvar storage_2 = require(\"./storage\");\nObject.defineProperty(exports, \"Storage\", { enumerable: true, get: function () { return storage_2.Storage; } });\n/**\n * Gets the {@link Storage} service for the default app or a given app.\n *\n * `getStorage()` can be called with no arguments to access the default\n * app's `Storage` service or as `getStorage(app)` to access the\n * `Storage` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Storage service for the default app\n * const defaultStorage = getStorage();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Storage service for a given app\n * const otherStorage = getStorage(otherApp);\n * ```\n */\nfunction getStorage(app) {\n    if (typeof app === 'undefined') {\n        app = (0, app_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('storage', (app) => new storage_1.Storage(app));\n}\nexports.getStorage = getStorage;\n/**\n * Gets the download URL for the given {@link https://cloud.google.com/nodejs/docs/reference/storage/latest/storage/file | File}.\n *\n * @example\n * ```javascript\n * // Get the downloadUrl for a given file ref\n * const storage = getStorage();\n * const myRef = ref(storage, 'images/mountains.jpg');\n * const downloadUrl = await getDownloadURL(myRef);\n * ```\n */\nasync function getDownloadURL(file) {\n    const endpoint = (process.env.STORAGE_EMULATOR_HOST ||\n        'https://firebasestorage.googleapis.com') + '/v0';\n    const { downloadTokens } = await (0, utils_1.getFirebaseMetadata)(endpoint, file);\n    if (!downloadTokens) {\n        throw new error_1.FirebaseError({\n            code: 'storage/no-download-token',\n            message: 'No download token available. Please create one in the Firebase Console.',\n        });\n    }\n    const [token] = downloadTokens.split(',');\n    return `${endpoint}/b/${file.bucket.name}/o/${encodeURIComponent(file.name)}?alt=media&token=${token}`;\n}\nexports.getDownloadURL = getDownloadURL;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAgEL;AA/DtB;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,QAAQ,UAAU,GAAG,QAAQ,OAAO,GAAG,KAAK;AACrE,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,WAAW;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,UAAU,OAAO;IAAE;AAAE;AAC7G;;;;;;;;;;;;;;;;;;CAkBC,GACD,SAAS,WAAW,GAAG;IACnB,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,MAAM,MAAM;IAC1B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,WAAW,CAAC,MAAQ,IAAI,UAAU,OAAO,CAAC;AAClF;AACA,QAAQ,UAAU,GAAG;AACrB;;;;;;;;;;CAUC,GACD,eAAe,eAAe,IAAI;IAC9B,MAAM,WAAW,CAAC,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,qBAAqB,IAC/C,wCAAwC,IAAI;IAChD,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,CAAC,GAAG,QAAQ,mBAAmB,EAAE,UAAU;IAC5E,IAAI,CAAC,gBAAgB;QACjB,MAAM,IAAI,QAAQ,aAAa,CAAC;YAC5B,MAAM;YACN,SAAS;QACb;IACJ;IACA,MAAM,CAAC,MAAM,GAAG,eAAe,KAAK,CAAC;IACrC,OAAO,GAAG,SAAS,GAAG,EAAE,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,mBAAmB,KAAK,IAAI,EAAE,iBAAiB,EAAE,OAAO;AAC1G;AACA,QAAQ,cAAc,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12073, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/machine-learning/machine-learning-utils.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseMachineLearningError = void 0;\nconst error_1 = require(\"../utils/error\");\nclass FirebaseMachineLearningError extends error_1.PrefixedFirebaseError {\n    static fromOperationError(code, message) {\n        switch (code) {\n            case 1: return new FirebaseMachineLearningError('cancelled', message);\n            case 2: return new FirebaseMachineLearningError('unknown-error', message);\n            case 3: return new FirebaseMachineLearningError('invalid-argument', message);\n            case 4: return new FirebaseMachineLearningError('deadline-exceeded', message);\n            case 5: return new FirebaseMachineLearningError('not-found', message);\n            case 6: return new FirebaseMachineLearningError('already-exists', message);\n            case 7: return new FirebaseMachineLearningError('permission-denied', message);\n            case 8: return new FirebaseMachineLearningError('resource-exhausted', message);\n            case 9: return new FirebaseMachineLearningError('failed-precondition', message);\n            case 10: return new FirebaseMachineLearningError('aborted', message);\n            case 11: return new FirebaseMachineLearningError('out-of-range', message);\n            case 13: return new FirebaseMachineLearningError('internal-error', message);\n            case 14: return new FirebaseMachineLearningError('service-unavailable', message);\n            case 15: return new FirebaseMachineLearningError('data-loss', message);\n            case 16: return new FirebaseMachineLearningError('unauthenticated', message);\n            default:\n                return new FirebaseMachineLearningError('unknown-error', message);\n        }\n    }\n    constructor(code, message) {\n        super('machine-learning', code, message);\n    }\n}\nexports.FirebaseMachineLearningError = FirebaseMachineLearningError;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,4BAA4B,GAAG,KAAK;AAC5C,MAAM;AACN,MAAM,qCAAqC,QAAQ,qBAAqB;IACpE,OAAO,mBAAmB,IAAI,EAAE,OAAO,EAAE;QACrC,OAAQ;YACJ,KAAK;gBAAG,OAAO,IAAI,6BAA6B,aAAa;YAC7D,KAAK;gBAAG,OAAO,IAAI,6BAA6B,iBAAiB;YACjE,KAAK;gBAAG,OAAO,IAAI,6BAA6B,oBAAoB;YACpE,KAAK;gBAAG,OAAO,IAAI,6BAA6B,qBAAqB;YACrE,KAAK;gBAAG,OAAO,IAAI,6BAA6B,aAAa;YAC7D,KAAK;gBAAG,OAAO,IAAI,6BAA6B,kBAAkB;YAClE,KAAK;gBAAG,OAAO,IAAI,6BAA6B,qBAAqB;YACrE,KAAK;gBAAG,OAAO,IAAI,6BAA6B,sBAAsB;YACtE,KAAK;gBAAG,OAAO,IAAI,6BAA6B,uBAAuB;YACvE,KAAK;gBAAI,OAAO,IAAI,6BAA6B,WAAW;YAC5D,KAAK;gBAAI,OAAO,IAAI,6BAA6B,gBAAgB;YACjE,KAAK;gBAAI,OAAO,IAAI,6BAA6B,kBAAkB;YACnE,KAAK;gBAAI,OAAO,IAAI,6BAA6B,uBAAuB;YACxE,KAAK;gBAAI,OAAO,IAAI,6BAA6B,aAAa;YAC9D,KAAK;gBAAI,OAAO,IAAI,6BAA6B,mBAAmB;YACpE;gBACI,OAAO,IAAI,6BAA6B,iBAAiB;QACjE;IACJ;IACA,YAAY,IAAI,EAAE,OAAO,CAAE;QACvB,KAAK,CAAC,oBAAoB,MAAM;IACpC;AACJ;AACA,QAAQ,4BAA4B,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12140, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/machine-learning/machine-learning-api-client.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MachineLearningApiClient = exports.isGcsTfliteModelOptions = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst machine_learning_utils_1 = require(\"./machine-learning-utils\");\nconst ML_V1BETA2_API = 'https://firebaseml.googleapis.com/v1beta2';\nconst FIREBASE_VERSION_HEADER = {\n    'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`,\n};\n// Operation polling defaults\nconst POLL_DEFAULT_MAX_TIME_MILLISECONDS = 120000; // Maximum overall 2 minutes\nconst POLL_BASE_WAIT_TIME_MILLISECONDS = 3000; // Start with 3 second delay\nconst POLL_MAX_WAIT_TIME_MILLISECONDS = 30000; // Maximum 30 second delay\nfunction isGcsTfliteModelOptions(options) {\n    const gcsUri = options?.tfliteModel?.gcsTfliteUri;\n    return typeof gcsUri !== 'undefined';\n}\nexports.isGcsTfliteModelOptions = isGcsTfliteModelOptions;\n/**\n * Class that facilitates sending requests to the Firebase ML backend API.\n *\n * @internal\n */\nclass MachineLearningApiClient {\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'First argument passed to admin.machineLearning() must be a valid '\n                + 'Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    createModel(model) {\n        if (!validator.isNonNullObject(model) ||\n            !validator.isNonEmptyString(model.displayName)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model content.');\n            return Promise.reject(err);\n        }\n        return this.getProjectUrl()\n            .then((url) => {\n            const request = {\n                method: 'POST',\n                url: `${url}/models`,\n                data: model,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    updateModel(modelId, model, updateMask) {\n        if (!validator.isNonEmptyString(modelId) ||\n            !validator.isNonNullObject(model) ||\n            !validator.isNonEmptyArray(updateMask)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model or mask content.');\n            return Promise.reject(err);\n        }\n        return this.getProjectUrl()\n            .then((url) => {\n            const request = {\n                method: 'PATCH',\n                url: `${url}/models/${modelId}?updateMask=${updateMask.join()}`,\n                data: model,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    getModel(modelId) {\n        return Promise.resolve()\n            .then(() => {\n            return this.getModelName(modelId);\n        })\n            .then((modelName) => {\n            return this.getResourceWithShortName(modelName);\n        });\n    }\n    getOperation(operationName) {\n        return Promise.resolve()\n            .then(() => {\n            return this.getResourceWithFullName(operationName);\n        });\n    }\n    listModels(options = {}) {\n        if (!validator.isNonNullObject(options)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid ListModelsOptions');\n            return Promise.reject(err);\n        }\n        if (typeof options.filter !== 'undefined' && !validator.isNonEmptyString(options.filter)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid list filter.');\n            return Promise.reject(err);\n        }\n        if (typeof options.pageSize !== 'undefined') {\n            if (!validator.isNumber(options.pageSize)) {\n                const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid page size.');\n                return Promise.reject(err);\n            }\n            if (options.pageSize < 1 || options.pageSize > 100) {\n                const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Page size must be between 1 and 100.');\n                return Promise.reject(err);\n            }\n        }\n        if (typeof options.pageToken !== 'undefined' && !validator.isNonEmptyString(options.pageToken)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Next page token must be a non-empty string.');\n            return Promise.reject(err);\n        }\n        return this.getProjectUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/models`,\n                data: options,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    deleteModel(modelId) {\n        return this.getProjectUrl()\n            .then((url) => {\n            const modelName = this.getModelName(modelId);\n            const request = {\n                method: 'DELETE',\n                url: `${url}/${modelName}`,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    /**\n     * Handles a Long Running Operation coming back from the server.\n     *\n     * @param op - The operation to handle\n     * @param options - The options for polling\n     */\n    handleOperation(op, options) {\n        if (op.done) {\n            if (op.response) {\n                return Promise.resolve(op.response);\n            }\n            else if (op.error) {\n                const err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(op.error.code, op.error.message);\n                return Promise.reject(err);\n            }\n            // Done operations must have either a response or an error.\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', 'Invalid operation response.');\n        }\n        // Operation is not done\n        if (options?.wait) {\n            return this.pollOperationWithExponentialBackoff(op.name, options);\n        }\n        const metadata = op.metadata || {};\n        const metadataType = metadata['@type'] || '';\n        if (!metadataType.includes('ModelOperationMetadata')) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', `Unknown Metadata type: ${JSON.stringify(metadata)}`);\n        }\n        return this.getModel(extractModelId(metadata.name));\n    }\n    // baseWaitMillis and maxWaitMillis should only ever be modified by unit tests to run faster.\n    pollOperationWithExponentialBackoff(opName, options) {\n        const maxTimeMilliseconds = options?.maxTimeMillis ?? POLL_DEFAULT_MAX_TIME_MILLISECONDS;\n        const baseWaitMillis = options?.baseWaitMillis ?? POLL_BASE_WAIT_TIME_MILLISECONDS;\n        const maxWaitMillis = options?.maxWaitMillis ?? POLL_MAX_WAIT_TIME_MILLISECONDS;\n        const poller = new api_request_1.ExponentialBackoffPoller(baseWaitMillis, maxWaitMillis, maxTimeMilliseconds);\n        return poller.poll(() => {\n            return this.getOperation(opName)\n                .then((responseData) => {\n                if (!responseData.done) {\n                    return null;\n                }\n                if (responseData.error) {\n                    const err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(responseData.error.code, responseData.error.message);\n                    throw err;\n                }\n                return responseData.response;\n            });\n        });\n    }\n    /**\n     * Gets the specified resource from the ML API. Resource names must be the short names without project\n     * ID prefix (e.g. `models/123456789`).\n     *\n     * @param {string} name Short name of the resource to get. e.g. 'models/12345'\n     * @returns {Promise<T>} A promise that fulfills with the resource.\n     */\n    getResourceWithShortName(name) {\n        return this.getProjectUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/${name}`,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    /**\n     * Gets the specified resource from the ML API. Resource names must be the full names including project\n     * number prefix.\n     * @param fullName - Full resource name of the resource to get. e.g. projects/123465/operations/987654\n     * @returns {Promise<T>} A promise that fulfulls with the resource.\n     */\n    getResourceWithFullName(fullName) {\n        const request = {\n            method: 'GET',\n            url: `${ML_V1BETA2_API}/${fullName}`\n        };\n        return this.sendRequest(request);\n    }\n    sendRequest(request) {\n        request.headers = FIREBASE_VERSION_HEADER;\n        return this.httpClient.send(request)\n            .then((resp) => {\n            return resp.data;\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    toFirebaseError(err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        const response = err.response;\n        if (!response.isJson()) {\n            return new machine_learning_utils_1.FirebaseMachineLearningError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n        }\n        const error = response.data.error || {};\n        let code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        const message = error.message || `Unknown server error: ${response.text}`;\n        return new machine_learning_utils_1.FirebaseMachineLearningError(code, message);\n    }\n    getProjectUrl() {\n        return this.getProjectIdPrefix()\n            .then((projectIdPrefix) => {\n            return `${ML_V1BETA2_API}/${projectIdPrefix}`;\n        });\n    }\n    getProjectIdPrefix() {\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            this.projectIdPrefix = `projects/${projectId}`;\n            return this.projectIdPrefix;\n        });\n    }\n    getModelName(modelId) {\n        if (!validator.isNonEmptyString(modelId)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must be a non-empty string.');\n        }\n        if (modelId.indexOf('/') !== -1) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must not contain any \"/\" characters.');\n        }\n        return `models/${modelId}`;\n    }\n}\nexports.MachineLearningApiClient = MachineLearningApiClient;\nconst ERROR_CODE_MAPPING = {\n    INVALID_ARGUMENT: 'invalid-argument',\n    NOT_FOUND: 'not-found',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'authentication-error',\n    UNKNOWN: 'unknown-error',\n};\nfunction extractModelId(resourceName) {\n    return resourceName.split('/').pop();\n}\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,wBAAwB,GAAG,QAAQ,uBAAuB,GAAG,KAAK;AAC1E,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM,iBAAiB;AACvB,MAAM,0BAA0B;IAC5B,qBAAqB,CAAC,gBAAgB,EAAE,MAAM,aAAa,IAAI;AACnE;AACA,6BAA6B;AAC7B,MAAM,qCAAqC,QAAQ,4BAA4B;AAC/E,MAAM,mCAAmC,MAAM,4BAA4B;AAC3E,MAAM,kCAAkC,OAAO,0BAA0B;AACzE,SAAS,wBAAwB,OAAO;IACpC,MAAM,SAAS,SAAS,aAAa;IACrC,OAAO,OAAO,WAAW;AAC7B;AACA,QAAQ,uBAAuB,GAAG;AAClC;;;;CAIC,GACD,MAAM;IACF,YAAY,GAAG,CAAE;QACb,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,UAAU,eAAe,CAAC,QAAQ,CAAC,CAAC,aAAa,GAAG,GAAG;YACxD,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB,sEAC9E;QACV;QACA,IAAI,CAAC,UAAU,GAAG,IAAI,cAAc,oBAAoB,CAAC;IAC7D;IACA,YAAY,KAAK,EAAE;QACf,IAAI,CAAC,UAAU,eAAe,CAAC,UAC3B,CAAC,UAAU,gBAAgB,CAAC,MAAM,WAAW,GAAG;YAChD,MAAM,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB;YAC1F,OAAO,QAAQ,MAAM,CAAC;QAC1B;QACA,OAAO,IAAI,CAAC,aAAa,GACpB,IAAI,CAAC,CAAC;YACP,MAAM,UAAU;gBACZ,QAAQ;gBACR,KAAK,GAAG,IAAI,OAAO,CAAC;gBACpB,MAAM;YACV;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA,YAAY,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE;QACpC,IAAI,CAAC,UAAU,gBAAgB,CAAC,YAC5B,CAAC,UAAU,eAAe,CAAC,UAC3B,CAAC,UAAU,eAAe,CAAC,aAAa;YACxC,MAAM,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB;YAC1F,OAAO,QAAQ,MAAM,CAAC;QAC1B;QACA,OAAO,IAAI,CAAC,aAAa,GACpB,IAAI,CAAC,CAAC;YACP,MAAM,UAAU;gBACZ,QAAQ;gBACR,KAAK,GAAG,IAAI,QAAQ,EAAE,QAAQ,YAAY,EAAE,WAAW,IAAI,IAAI;gBAC/D,MAAM;YACV;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA,SAAS,OAAO,EAAE;QACd,OAAO,QAAQ,OAAO,GACjB,IAAI,CAAC;YACN,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,GACK,IAAI,CAAC,CAAC;YACP,OAAO,IAAI,CAAC,wBAAwB,CAAC;QACzC;IACJ;IACA,aAAa,aAAa,EAAE;QACxB,OAAO,QAAQ,OAAO,GACjB,IAAI,CAAC;YACN,OAAO,IAAI,CAAC,uBAAuB,CAAC;QACxC;IACJ;IACA,WAAW,UAAU,CAAC,CAAC,EAAE;QACrB,IAAI,CAAC,UAAU,eAAe,CAAC,UAAU;YACrC,MAAM,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB;YAC1F,OAAO,QAAQ,MAAM,CAAC;QAC1B;QACA,IAAI,OAAO,QAAQ,MAAM,KAAK,eAAe,CAAC,UAAU,gBAAgB,CAAC,QAAQ,MAAM,GAAG;YACtF,MAAM,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB;YAC1F,OAAO,QAAQ,MAAM,CAAC;QAC1B;QACA,IAAI,OAAO,QAAQ,QAAQ,KAAK,aAAa;YACzC,IAAI,CAAC,UAAU,QAAQ,CAAC,QAAQ,QAAQ,GAAG;gBACvC,MAAM,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB;gBAC1F,OAAO,QAAQ,MAAM,CAAC;YAC1B;YACA,IAAI,QAAQ,QAAQ,GAAG,KAAK,QAAQ,QAAQ,GAAG,KAAK;gBAChD,MAAM,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB;gBAC1F,OAAO,QAAQ,MAAM,CAAC;YAC1B;QACJ;QACA,IAAI,OAAO,QAAQ,SAAS,KAAK,eAAe,CAAC,UAAU,gBAAgB,CAAC,QAAQ,SAAS,GAAG;YAC5F,MAAM,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB;YAC1F,OAAO,QAAQ,MAAM,CAAC;QAC1B;QACA,OAAO,IAAI,CAAC,aAAa,GACpB,IAAI,CAAC,CAAC;YACP,MAAM,UAAU;gBACZ,QAAQ;gBACR,KAAK,GAAG,IAAI,OAAO,CAAC;gBACpB,MAAM;YACV;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA,YAAY,OAAO,EAAE;QACjB,OAAO,IAAI,CAAC,aAAa,GACpB,IAAI,CAAC,CAAC;YACP,MAAM,YAAY,IAAI,CAAC,YAAY,CAAC;YACpC,MAAM,UAAU;gBACZ,QAAQ;gBACR,KAAK,GAAG,IAAI,CAAC,EAAE,WAAW;YAC9B;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA;;;;;KAKC,GACD,gBAAgB,EAAE,EAAE,OAAO,EAAE;QACzB,IAAI,GAAG,IAAI,EAAE;YACT,IAAI,GAAG,QAAQ,EAAE;gBACb,OAAO,QAAQ,OAAO,CAAC,GAAG,QAAQ;YACtC,OACK,IAAI,GAAG,KAAK,EAAE;gBACf,MAAM,MAAM,yBAAyB,4BAA4B,CAAC,kBAAkB,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,OAAO;gBACpH,OAAO,QAAQ,MAAM,CAAC;YAC1B;YACA,2DAA2D;YAC3D,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,2BAA2B;QAC/F;QACA,wBAAwB;QACxB,IAAI,SAAS,MAAM;YACf,OAAO,IAAI,CAAC,mCAAmC,CAAC,GAAG,IAAI,EAAE;QAC7D;QACA,MAAM,WAAW,GAAG,QAAQ,IAAI,CAAC;QACjC,MAAM,eAAe,QAAQ,CAAC,QAAQ,IAAI;QAC1C,IAAI,CAAC,aAAa,QAAQ,CAAC,2BAA2B;YAClD,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,2BAA2B,CAAC,uBAAuB,EAAE,KAAK,SAAS,CAAC,WAAW;QACnJ;QACA,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,SAAS,IAAI;IACrD;IACA,6FAA6F;IAC7F,oCAAoC,MAAM,EAAE,OAAO,EAAE;QACjD,MAAM,sBAAsB,SAAS,iBAAiB;QACtD,MAAM,iBAAiB,SAAS,kBAAkB;QAClD,MAAM,gBAAgB,SAAS,iBAAiB;QAChD,MAAM,SAAS,IAAI,cAAc,wBAAwB,CAAC,gBAAgB,eAAe;QACzF,OAAO,OAAO,IAAI,CAAC;YACf,OAAO,IAAI,CAAC,YAAY,CAAC,QACpB,IAAI,CAAC,CAAC;gBACP,IAAI,CAAC,aAAa,IAAI,EAAE;oBACpB,OAAO;gBACX;gBACA,IAAI,aAAa,KAAK,EAAE;oBACpB,MAAM,MAAM,yBAAyB,4BAA4B,CAAC,kBAAkB,CAAC,aAAa,KAAK,CAAC,IAAI,EAAE,aAAa,KAAK,CAAC,OAAO;oBACxI,MAAM;gBACV;gBACA,OAAO,aAAa,QAAQ;YAChC;QACJ;IACJ;IACA;;;;;;KAMC,GACD,yBAAyB,IAAI,EAAE;QAC3B,OAAO,IAAI,CAAC,aAAa,GACpB,IAAI,CAAC,CAAC;YACP,MAAM,UAAU;gBACZ,QAAQ;gBACR,KAAK,GAAG,IAAI,CAAC,EAAE,MAAM;YACzB;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA;;;;;KAKC,GACD,wBAAwB,QAAQ,EAAE;QAC9B,MAAM,UAAU;YACZ,QAAQ;YACR,KAAK,GAAG,eAAe,CAAC,EAAE,UAAU;QACxC;QACA,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B;IACA,YAAY,OAAO,EAAE;QACjB,QAAQ,OAAO,GAAG;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SACvB,IAAI,CAAC,CAAC;YACP,OAAO,KAAK,IAAI;QACpB,GACK,KAAK,CAAC,CAAC;YACR,MAAM,IAAI,CAAC,eAAe,CAAC;QAC/B;IACJ;IACA,gBAAgB,GAAG,EAAE;QACjB,IAAI,eAAe,QAAQ,qBAAqB,EAAE;YAC9C,OAAO;QACX;QACA,MAAM,WAAW,IAAI,QAAQ;QAC7B,IAAI,CAAC,SAAS,MAAM,IAAI;YACpB,OAAO,IAAI,yBAAyB,4BAA4B,CAAC,iBAAiB,CAAC,iCAAiC,EAAE,SAAS,MAAM,CAAC,WAAW,EAAE,SAAS,IAAI,EAAE;QACtK;QACA,MAAM,QAAQ,SAAS,IAAI,CAAC,KAAK,IAAI,CAAC;QACtC,IAAI,OAAO;QACX,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,oBAAoB;YACpD,OAAO,kBAAkB,CAAC,MAAM,MAAM,CAAC;QAC3C;QACA,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,sBAAsB,EAAE,SAAS,IAAI,EAAE;QACzE,OAAO,IAAI,yBAAyB,4BAA4B,CAAC,MAAM;IAC3E;IACA,gBAAgB;QACZ,OAAO,IAAI,CAAC,kBAAkB,GACzB,IAAI,CAAC,CAAC;YACP,OAAO,GAAG,eAAe,CAAC,EAAE,iBAAiB;QACjD;IACJ;IACA,qBAAqB;QACjB,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,OAAO,QAAQ,OAAO,CAAC,IAAI,CAAC,eAAe;QAC/C;QACA,OAAO,MAAM,aAAa,CAAC,IAAI,CAAC,GAAG,EAC9B,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,UAAU,gBAAgB,CAAC,YAAY;gBACxC,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB,6FAC9E,kFACA;YACV;YACA,IAAI,CAAC,eAAe,GAAG,CAAC,SAAS,EAAE,WAAW;YAC9C,OAAO,IAAI,CAAC,eAAe;QAC/B;IACJ;IACA,aAAa,OAAO,EAAE;QAClB,IAAI,CAAC,UAAU,gBAAgB,CAAC,UAAU;YACtC,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB;QACxF;QACA,IAAI,QAAQ,OAAO,CAAC,SAAS,CAAC,GAAG;YAC7B,MAAM,IAAI,yBAAyB,4BAA4B,CAAC,oBAAoB;QACxF;QACA,OAAO,CAAC,OAAO,EAAE,SAAS;IAC9B;AACJ;AACA,QAAQ,wBAAwB,GAAG;AACnC,MAAM,qBAAqB;IACvB,kBAAkB;IAClB,WAAW;IACX,oBAAoB;IACpB,iBAAiB;IACjB,SAAS;AACb;AACA,SAAS,eAAe,YAAY;IAChC,OAAO,aAAa,KAAK,CAAC,KAAK,GAAG;AACtC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12411, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/machine-learning/machine-learning.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Model = exports.MachineLearning = void 0;\nconst index_1 = require(\"../storage/index\");\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst utils = require(\"../utils\");\nconst machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\nconst machine_learning_utils_1 = require(\"./machine-learning-utils\");\n/**\n * The Firebase `MachineLearning` service interface.\n */\nclass MachineLearning {\n    /**\n     * @param app - The app for this ML service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseError({\n                code: 'machine-learning/invalid-argument',\n                message: 'First argument passed to admin.machineLearning() must be a ' +\n                    'valid Firebase app instance.',\n            });\n        }\n        this.appInternal = app;\n        this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\n    }\n    /**\n     *  The {@link firebase-admin.app#App} associated with the current `MachineLearning`\n     *  service instance.\n     */\n    get app() {\n        return this.appInternal;\n    }\n    /**\n     * Creates a model in the current Firebase project.\n     *\n     * @param model - The model to create.\n     *\n     * @returns A Promise fulfilled with the created model.\n     */\n    createModel(model) {\n        return this.signUrlIfPresent(model)\n            .then((modelContent) => this.client.createModel(modelContent))\n            .then((operation) => this.client.handleOperation(operation))\n            .then((modelResponse) => new Model(modelResponse, this.client));\n    }\n    /**\n     * Updates a model's metadata or model file.\n     *\n     * @param modelId - The ID of the model to update.\n     * @param model - The model fields to update.\n     *\n     * @returns A Promise fulfilled with the updated model.\n     */\n    updateModel(modelId, model) {\n        const updateMask = utils.generateUpdateMask(model);\n        return this.signUrlIfPresent(model)\n            .then((modelContent) => this.client.updateModel(modelId, modelContent, updateMask))\n            .then((operation) => this.client.handleOperation(operation))\n            .then((modelResponse) => new Model(modelResponse, this.client));\n    }\n    /**\n     * Publishes a Firebase ML model.\n     *\n     * A published model can be downloaded to client apps.\n     *\n     * @param modelId - The ID of the model to publish.\n     *\n     * @returns A Promise fulfilled with the published model.\n     */\n    publishModel(modelId) {\n        return this.setPublishStatus(modelId, true);\n    }\n    /**\n     * Unpublishes a Firebase ML model.\n     *\n     * @param modelId - The ID of the model to unpublish.\n     *\n     * @returns A Promise fulfilled with the unpublished model.\n     */\n    unpublishModel(modelId) {\n        return this.setPublishStatus(modelId, false);\n    }\n    /**\n     * Gets the model specified by the given ID.\n     *\n     * @param modelId - The ID of the model to get.\n     *\n     * @returns A Promise fulfilled with the model object.\n     */\n    getModel(modelId) {\n        return this.client.getModel(modelId)\n            .then((modelResponse) => new Model(modelResponse, this.client));\n    }\n    /**\n     * Lists the current project's models.\n     *\n     * @param options - The listing options.\n     *\n     * @returns A promise that\n     *     resolves with the current (filtered) list of models and the next page\n     *     token. For the last page, an empty list of models and no page token\n     *     are returned.\n     */\n    listModels(options = {}) {\n        return this.client.listModels(options)\n            .then((resp) => {\n            if (!validator.isNonNullObject(resp)) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', `Invalid ListModels response: ${JSON.stringify(resp)}`);\n            }\n            let models = [];\n            if (resp.models) {\n                models = resp.models.map((rs) => new Model(rs, this.client));\n            }\n            const result = { models };\n            if (resp.nextPageToken) {\n                result.pageToken = resp.nextPageToken;\n            }\n            return result;\n        });\n    }\n    /**\n     * Deletes a model from the current project.\n     *\n     * @param modelId - The ID of the model to delete.\n     */\n    deleteModel(modelId) {\n        return this.client.deleteModel(modelId);\n    }\n    setPublishStatus(modelId, publish) {\n        const updateMask = ['state.published'];\n        const options = { state: { published: publish } };\n        return this.client.updateModel(modelId, options, updateMask)\n            .then((operation) => this.client.handleOperation(operation))\n            .then((modelResponse) => new Model(modelResponse, this.client));\n    }\n    signUrlIfPresent(options) {\n        const modelOptions = (0, deep_copy_1.deepCopy)(options);\n        if ((0, machine_learning_api_client_1.isGcsTfliteModelOptions)(modelOptions)) {\n            return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri)\n                .then((uri) => {\n                modelOptions.tfliteModel.gcsTfliteUri = uri;\n                return modelOptions;\n            })\n                .catch((err) => {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', `Error during signing upload url: ${err.message}`);\n            });\n        }\n        return Promise.resolve(modelOptions);\n    }\n    signUrl(unsignedUrl) {\n        const MINUTES_IN_MILLIS = 60 * 1000;\n        const URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\n        const gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\n        const matches = gcsRegex.exec(unsignedUrl);\n        if (!matches) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', `Invalid unsigned url: ${unsignedUrl}`);\n        }\n        const bucketName = matches[1];\n        const blobName = matches[2];\n        const bucket = (0, index_1.getStorage)(this.app).bucket(bucketName);\n        const blob = bucket.file(blobName);\n        return blob.getSignedUrl({\n            action: 'read',\n            expires: Date.now() + URL_VALID_DURATION,\n        }).then((signUrl) => signUrl[0]);\n    }\n}\nexports.MachineLearning = MachineLearning;\n/**\n * A Firebase ML Model output object.\n */\nclass Model {\n    /**\n     * @internal\n     */\n    constructor(model, client) {\n        this.model = Model.validateAndClone(model);\n        this.client = client;\n    }\n    /** The ID of the model. */\n    get modelId() {\n        return extractModelId(this.model.name);\n    }\n    /**\n     * The model's name. This is the name you use from your app to load the\n     * model.\n     */\n    get displayName() {\n        return this.model.displayName;\n    }\n    /**\n     * The model's tags, which can be used to group or filter models in list\n     * operations.\n     */\n    get tags() {\n        return this.model.tags || [];\n    }\n    /** The timestamp of the model's creation. */\n    get createTime() {\n        return new Date(this.model.createTime).toUTCString();\n    }\n    /** The timestamp of the model's most recent update. */\n    get updateTime() {\n        return new Date(this.model.updateTime).toUTCString();\n    }\n    /** Error message when model validation fails. */\n    get validationError() {\n        return this.model.state?.validationError?.message;\n    }\n    /** True if the model is published. */\n    get published() {\n        return this.model.state?.published || false;\n    }\n    /**\n     * The ETag identifier of the current version of the model. This value\n     * changes whenever you update any of the model's properties.\n     */\n    get etag() {\n        return this.model.etag;\n    }\n    /**\n     * The hash of the model's `tflite` file. This value changes only when\n     * you upload a new TensorFlow Lite model.\n     */\n    get modelHash() {\n        return this.model.modelHash;\n    }\n    /** Metadata about the model's TensorFlow Lite model file. */\n    get tfliteModel() {\n        // Make a copy so people can't directly modify the private this.model object.\n        return (0, deep_copy_1.deepCopy)(this.model.tfliteModel);\n    }\n    /**\n     * True if the model is locked by a server-side operation. You can't make\n     * changes to a locked model. See {@link Model.waitForUnlocked}.\n     */\n    get locked() {\n        return (this.model.activeOperations?.length ?? 0) > 0;\n    }\n    /**\n     * Return the model as a JSON object.\n     */\n    toJSON() {\n        // We can't just return this.model because it has extra fields and\n        // different formats etc. So we build the expected model object.\n        const jsonModel = {\n            modelId: this.modelId,\n            displayName: this.displayName,\n            tags: this.tags,\n            createTime: this.createTime,\n            updateTime: this.updateTime,\n            published: this.published,\n            etag: this.etag,\n            locked: this.locked,\n        };\n        // Also add possibly undefined fields if they exist.\n        if (this.validationError) {\n            jsonModel['validationError'] = this.validationError;\n        }\n        if (this.modelHash) {\n            jsonModel['modelHash'] = this.modelHash;\n        }\n        if (this.tfliteModel) {\n            jsonModel['tfliteModel'] = this.tfliteModel;\n        }\n        return jsonModel;\n    }\n    /**\n     * Wait for the model to be unlocked.\n     *\n     * @param maxTimeMillis - The maximum time in milliseconds to wait.\n     *     If not specified, a default maximum of 2 minutes is used.\n     *\n     * @returns A promise that resolves when the model is unlocked\n     *   or the maximum wait time has passed.\n     */\n    waitForUnlocked(maxTimeMillis) {\n        if ((this.model.activeOperations?.length ?? 0) > 0) {\n            // The client will always be defined on Models that have activeOperations\n            // because models with active operations came back from the server and\n            // were constructed with a non-empty client.\n            return this.client.handleOperation(this.model.activeOperations[0], { wait: true, maxTimeMillis })\n                .then((modelResponse) => {\n                this.model = Model.validateAndClone(modelResponse);\n            });\n        }\n        return Promise.resolve();\n    }\n    static validateAndClone(model) {\n        if (!validator.isNonNullObject(model) ||\n            !validator.isNonEmptyString(model.name) ||\n            !validator.isNonEmptyString(model.createTime) ||\n            !validator.isNonEmptyString(model.updateTime) ||\n            !validator.isNonEmptyString(model.displayName) ||\n            !validator.isNonEmptyString(model.etag)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', `Invalid Model response: ${JSON.stringify(model)}`);\n        }\n        const tmpModel = (0, deep_copy_1.deepCopy)(model);\n        // If tflite Model is specified, it must have a source of {gcsTfliteUri}\n        if (model.tfliteModel &&\n            !validator.isNonEmptyString(model.tfliteModel.gcsTfliteUri)) {\n            // If we have some other source, ignore the whole tfliteModel.\n            delete tmpModel.tfliteModel;\n        }\n        // Remove '@type' field. We don't need it.\n        if (tmpModel['@type']) {\n            delete tmpModel['@type'];\n        }\n        return tmpModel;\n    }\n}\nexports.Model = Model;\nfunction extractModelId(resourceName) {\n    return resourceName.split('/').pop();\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12718, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/installations/installations-request-handler.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseInstallationsRequestHandler = void 0;\nconst error_1 = require(\"../utils/error\");\nconst api_request_1 = require(\"../utils/api-request\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n/** Firebase IID backend host. */\nconst FIREBASE_IID_HOST = 'console.firebase.google.com';\n/** Firebase IID backend path. */\nconst FIREBASE_IID_PATH = '/v1/';\n/** Firebase IID request timeout duration in milliseconds. */\nconst FIREBASE_IID_TIMEOUT = 10000;\n/** HTTP error codes raised by the backend server. */\nconst ERROR_CODES = {\n    400: 'Malformed installation ID argument.',\n    401: 'Request not authorized.',\n    403: 'Project does not match installation ID or the client does not have sufficient privileges.',\n    404: 'Failed to find the installation ID.',\n    409: 'Already deleted.',\n    429: 'Request throttled out by the backend server.',\n    500: 'Internal server error.',\n    503: 'Backend servers are over capacity. Try again later.',\n};\n/**\n * Class that provides mechanism to send requests to the FIS backend endpoints.\n */\nclass FirebaseInstallationsRequestHandler {\n    /**\n     * @param app - The app used to fetch access tokens to sign API requests.\n     *\n     * @constructor\n     */\n    constructor(app) {\n        this.app = app;\n        this.host = FIREBASE_IID_HOST;\n        this.timeout = FIREBASE_IID_TIMEOUT;\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    deleteInstallation(fid) {\n        if (!validator.isNonEmptyString(fid)) {\n            return Promise.reject(new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_INSTALLATION_ID, 'Installation ID must be a non-empty string.'));\n        }\n        return this.invokeRequestHandler(new api_request_1.ApiSettings(fid, 'DELETE'));\n    }\n    /**\n     * Invokes the request handler based on the API settings object passed.\n     *\n     * @param apiSettings - The API endpoint settings to apply to request and response.\n     * @returns A promise that resolves when the request is complete.\n     */\n    invokeRequestHandler(apiSettings) {\n        return this.getPathPrefix()\n            .then((path) => {\n            const req = {\n                url: `https://${this.host}${path}${apiSettings.getEndpoint()}`,\n                method: apiSettings.getHttpMethod(),\n                timeout: this.timeout,\n            };\n            return this.httpClient.send(req);\n        })\n            .then(() => {\n            // return nothing on success\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.RequestResponseError) {\n                const response = err.response;\n                const errorMessage = (response.isJson() && 'error' in response.data) ?\n                    response.data.error : response.text;\n                const template = ERROR_CODES[response.status];\n                const message = template ?\n                    `Installation ID \"${apiSettings.getEndpoint()}\": ${template}` : errorMessage;\n                throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.API_ERROR, message);\n            }\n            // In case of timeouts and other network errors, the HttpClient returns a\n            // FirebaseError wrapped in the response. Simply throw it here.\n            throw err;\n        });\n    }\n    getPathPrefix() {\n        if (this.path) {\n            return Promise.resolve(this.path);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                // Assert for an explicit projct ID (either via AppOptions or the cert itself).\n                throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_PROJECT_ID, 'Failed to determine project ID for Installations. Initialize the '\n                    + 'SDK with service account credentials or set project ID as an app option. '\n                    + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n            }\n            this.path = FIREBASE_IID_PATH + `project/${projectId}/instanceId/`;\n            return this.path;\n        });\n    }\n}\nexports.FirebaseInstallationsRequestHandler = FirebaseInstallationsRequestHandler;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;;CAeC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,mCAAmC,GAAG,KAAK;AACnD,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,+BAA+B,GAC/B,MAAM,oBAAoB;AAC1B,+BAA+B,GAC/B,MAAM,oBAAoB;AAC1B,2DAA2D,GAC3D,MAAM,uBAAuB;AAC7B,mDAAmD,GACnD,MAAM,cAAc;IAChB,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACT;AACA;;CAEC,GACD,MAAM;IACF;;;;KAIC,GACD,YAAY,GAAG,CAAE;QACb,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,UAAU,GAAG,IAAI,cAAc,oBAAoB,CAAC;IAC7D;IACA,mBAAmB,GAAG,EAAE;QACpB,IAAI,CAAC,UAAU,gBAAgB,CAAC,MAAM;YAClC,OAAO,QAAQ,MAAM,CAAC,IAAI,QAAQ,0BAA0B,CAAC,QAAQ,4BAA4B,CAAC,uBAAuB,EAAE;QAC/H;QACA,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,cAAc,WAAW,CAAC,KAAK;IACxE;IACA;;;;;KAKC,GACD,qBAAqB,WAAW,EAAE;QAC9B,OAAO,IAAI,CAAC,aAAa,GACpB,IAAI,CAAC,CAAC;YACP,MAAM,MAAM;gBACR,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,GAAG,OAAO,YAAY,WAAW,IAAI;gBAC9D,QAAQ,YAAY,aAAa;gBACjC,SAAS,IAAI,CAAC,OAAO;YACzB;YACA,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;QAChC,GACK,IAAI,CAAC;QACN,4BAA4B;QAChC,GACK,KAAK,CAAC,CAAC;YACR,IAAI,eAAe,cAAc,oBAAoB,EAAE;gBACnD,MAAM,WAAW,IAAI,QAAQ;gBAC7B,MAAM,eAAe,AAAC,SAAS,MAAM,MAAM,WAAW,SAAS,IAAI,GAC/D,SAAS,IAAI,CAAC,KAAK,GAAG,SAAS,IAAI;gBACvC,MAAM,WAAW,WAAW,CAAC,SAAS,MAAM,CAAC;gBAC7C,MAAM,UAAU,WACZ,CAAC,iBAAiB,EAAE,YAAY,WAAW,GAAG,GAAG,EAAE,UAAU,GAAG;gBACpE,MAAM,IAAI,QAAQ,0BAA0B,CAAC,QAAQ,4BAA4B,CAAC,SAAS,EAAE;YACjG;YACA,yEAAyE;YACzE,+DAA+D;YAC/D,MAAM;QACV;IACJ;IACA,gBAAgB;QACZ,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,OAAO,QAAQ,OAAO,CAAC,IAAI,CAAC,IAAI;QACpC;QACA,OAAO,MAAM,aAAa,CAAC,IAAI,CAAC,GAAG,EAC9B,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,UAAU,gBAAgB,CAAC,YAAY;gBACxC,+EAA+E;gBAC/E,MAAM,IAAI,QAAQ,0BAA0B,CAAC,QAAQ,4BAA4B,CAAC,kBAAkB,EAAE,sEAChG,8EACA;YACV;YACA,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC,QAAQ,EAAE,UAAU,YAAY,CAAC;YAClE,OAAO,IAAI,CAAC,IAAI;QACpB;IACJ;AACJ;AACA,QAAQ,mCAAmC,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12822, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/installations/installations.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Installations = void 0;\nconst error_1 = require(\"../utils/error\");\nconst installations_request_handler_1 = require(\"./installations-request-handler\");\nconst validator = require(\"../utils/validator\");\n/**\n * The `Installations` service for the current app.\n */\nclass Installations {\n    /**\n     * @param app - The app for this Installations service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.installations() must be a valid Firebase app instance.');\n        }\n        this.app_ = app;\n        this.requestHandler = new installations_request_handler_1.FirebaseInstallationsRequestHandler(app);\n    }\n    /**\n     * Deletes the specified installation ID and the associated data from Firebase.\n     *\n     * @param fid - The Firebase installation ID to be deleted.\n     *\n     * @returns A promise fulfilled when the installation ID is deleted.\n     */\n    deleteInstallation(fid) {\n        return this.requestHandler.deleteInstallation(fid);\n    }\n    /**\n     * Returns the app associated with this Installations instance.\n     *\n     * @returns The app associated with this Installations instance.\n     */\n    get app() {\n        return this.app_;\n    }\n}\nexports.Installations = Installations;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,aAAa,GAAG,KAAK;AAC7B,MAAM;AACN,MAAM;AACN,MAAM;AACN;;CAEC,GACD,MAAM;IACF;;;;KAIC,GACD,YAAY,GAAG,CAAE;QACb,IAAI,CAAC,UAAU,eAAe,CAAC,QAAQ,CAAC,CAAC,aAAa,GAAG,GAAG;YACxD,MAAM,IAAI,QAAQ,0BAA0B,CAAC,QAAQ,4BAA4B,CAAC,gBAAgB,EAAE;QACxG;QACA,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,cAAc,GAAG,IAAI,gCAAgC,mCAAmC,CAAC;IAClG;IACA;;;;;;KAMC,GACD,mBAAmB,GAAG,EAAE;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC;IAClD;IACA;;;;KAIC,GACD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,IAAI;IACpB;AACJ;AACA,QAAQ,aAAa,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12881, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/installations/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InstallationsClientErrorCode = exports.FirebaseInstallationsError = exports.getInstallations = exports.Installations = void 0;\n/**\n * Firebase Instance ID service.\n *\n * @packageDocumentation\n */\nconst index_1 = require(\"../app/index\");\nconst installations_1 = require(\"./installations\");\nObject.defineProperty(exports, \"Installations\", { enumerable: true, get: function () { return installations_1.Installations; } });\n/**\n  * Gets the {@link Installations} service for the default app or a given app.\n  *\n  * `getInstallations()` can be called with no arguments to access the default\n  * app's `Installations` service or as `getInstallations(app)` to access the\n  * `Installations` service associated with a specific app.\n  *\n  * @example\n  * ```javascript\n  * // Get the Installations service for the default app\n  * const defaultInstallations = getInstallations();\n  * ```\n  *\n  * @example\n  * ```javascript\n  * // Get the Installations service for a given app\n  * const otherInstallations = getInstallations(otherApp);\n  *```\n  *\n  * @param app - Optional app whose `Installations` service to\n  *   return. If not provided, the default `Installations` service will be\n  *   returned.\n  *\n  * @returns The default `Installations` service if\n  *   no app is provided or the `Installations` service associated with the\n  *   provided app.\n  */\nfunction getInstallations(app) {\n    if (typeof app === 'undefined') {\n        app = (0, index_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('installations', (app) => new installations_1.Installations(app));\n}\nexports.getInstallations = getInstallations;\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseInstallationsError\", { enumerable: true, get: function () { return error_1.FirebaseInstallationsError; } });\nObject.defineProperty(exports, \"InstallationsClientErrorCode\", { enumerable: true, get: function () { return error_1.InstallationsClientErrorCode; } });\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,4BAA4B,GAAG,QAAQ,0BAA0B,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,aAAa,GAAG,KAAK;AACpI;;;;CAIC,GACD,MAAM;AACN,MAAM;AACN,OAAO,cAAc,CAAC,SAAS,iBAAiB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,gBAAgB,aAAa;IAAE;AAAE;AAC/H;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BE,GACF,SAAS,iBAAiB,GAAG;IACzB,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,QAAQ,MAAM;IAC5B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,iBAAiB,CAAC,MAAQ,IAAI,gBAAgB,aAAa,CAAC;AACpG;AACA,QAAQ,gBAAgB,GAAG;AAC3B,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,8BAA8B;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,0BAA0B;IAAE;AAAE;AACjJ,OAAO,cAAc,CAAC,SAAS,gCAAgC;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,4BAA4B;IAAE;AAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12964, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/instance-id/instance-id.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InstanceId = void 0;\nconst installations_1 = require(\"../installations\");\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\n/**\n * The `InstanceId` service enables deleting the Firebase instance IDs\n * associated with Firebase client app instances.\n *\n * @deprecated Use {@link firebase-admin.installations#Installations} instead.\n */\nclass InstanceId {\n    /**\n     * @param app - The app for this InstanceId service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseInstanceIdError(error_1.InstanceIdClientErrorCode.INVALID_ARGUMENT, 'First argument passed to instanceId() must be a valid Firebase app instance.');\n        }\n        this.app_ = app;\n    }\n    /**\n     * Deletes the specified instance ID and the associated data from Firebase.\n     *\n     * Note that Google Analytics for Firebase uses its own form of Instance ID to\n     * keep track of analytics data. Therefore deleting a Firebase Instance ID does\n     * not delete Analytics data. See\n     * {@link https://firebase.google.com/support/privacy/manage-iids#delete_an_instance_id |\n     * Delete an Instance ID}\n     * for more information.\n     *\n     * @param instanceId - The instance ID to be deleted.\n     *\n     * @returns A promise fulfilled when the instance ID is deleted.\n     */\n    deleteInstanceId(instanceId) {\n        return (0, installations_1.getInstallations)(this.app).deleteInstallation(instanceId)\n            .catch((err) => {\n            if (err instanceof error_1.FirebaseInstallationsError) {\n                let code = err.code.replace('installations/', '');\n                if (code === error_1.InstallationsClientErrorCode.INVALID_INSTALLATION_ID.code) {\n                    code = error_1.InstanceIdClientErrorCode.INVALID_INSTANCE_ID.code;\n                }\n                throw new error_1.FirebaseInstanceIdError({ code, message: err.message });\n            }\n            throw err;\n        });\n    }\n    /**\n     * Returns the app associated with this InstanceId instance.\n     *\n     * @returns The app associated with this InstanceId instance.\n     */\n    get app() {\n        return this.app_;\n    }\n}\nexports.InstanceId = InstanceId;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,UAAU,GAAG,KAAK;AAC1B,MAAM;AACN,MAAM;AACN,MAAM;AACN;;;;;CAKC,GACD,MAAM;IACF;;;;KAIC,GACD,YAAY,GAAG,CAAE;QACb,IAAI,CAAC,UAAU,eAAe,CAAC,QAAQ,CAAC,CAAC,aAAa,GAAG,GAAG;YACxD,MAAM,IAAI,QAAQ,uBAAuB,CAAC,QAAQ,yBAAyB,CAAC,gBAAgB,EAAE;QAClG;QACA,IAAI,CAAC,IAAI,GAAG;IAChB;IACA;;;;;;;;;;;;;KAaC,GACD,iBAAiB,UAAU,EAAE;QACzB,OAAO,CAAC,GAAG,gBAAgB,gBAAgB,EAAE,IAAI,CAAC,GAAG,EAAE,kBAAkB,CAAC,YACrE,KAAK,CAAC,CAAC;YACR,IAAI,eAAe,QAAQ,0BAA0B,EAAE;gBACnD,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,kBAAkB;gBAC9C,IAAI,SAAS,QAAQ,4BAA4B,CAAC,uBAAuB,CAAC,IAAI,EAAE;oBAC5E,OAAO,QAAQ,yBAAyB,CAAC,mBAAmB,CAAC,IAAI;gBACrE;gBACA,MAAM,IAAI,QAAQ,uBAAuB,CAAC;oBAAE;oBAAM,SAAS,IAAI,OAAO;gBAAC;YAC3E;YACA,MAAM;QACV;IACJ;IACA;;;;KAIC,GACD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,IAAI;IACpB;AACJ;AACA,QAAQ,UAAU,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13044, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/project-management/project-management-api-request-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectManagementRequestHandler = exports.assertServerResponse = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst index_1 = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n/** Project management backend host and port. */\nconst PROJECT_MANAGEMENT_HOST_AND_PORT = 'firebase.googleapis.com:443';\n/** Project management backend path. */\nconst PROJECT_MANAGEMENT_PATH = '/v1/';\n/** Project management beta backend path. */\nconst PROJECT_MANAGEMENT_BETA_PATH = '/v1beta1/';\n/** Project management request header. */\nconst PROJECT_MANAGEMENT_HEADERS = {\n    'X-Client-Version': `Node/Admin/${(0, index_1.getSdkVersion)()}`,\n};\n/** Project management request timeout duration in milliseconds. */\nconst PROJECT_MANAGEMENT_TIMEOUT_MILLIS = 10000;\nconst LIST_APPS_MAX_PAGE_SIZE = 100;\nconst CERT_TYPE_API_MAP = {\n    sha1: 'SHA_1',\n    sha256: 'SHA_256',\n};\nfunction assertServerResponse(condition, responseData, message) {\n    if (!condition) {\n        throw new error_1.FirebaseProjectManagementError('invalid-server-response', `${message} Response data: ${JSON.stringify(responseData, null, 2)}`);\n    }\n}\nexports.assertServerResponse = assertServerResponse;\n/**\n * Class that provides mechanism to send requests to the Firebase project management backend\n * endpoints.\n *\n * @internal\n */\nclass ProjectManagementRequestHandler {\n    static wrapAndRethrowHttpError(errStatusCode, errText) {\n        let errorCode;\n        let errorMessage;\n        switch (errStatusCode) {\n            case 400:\n                errorCode = 'invalid-argument';\n                errorMessage = 'Invalid argument provided.';\n                break;\n            case 401:\n            case 403:\n                errorCode = 'authentication-error';\n                errorMessage = 'An error occurred when trying to authenticate. Make sure the credential '\n                    + 'used to authenticate this SDK has the proper permissions. See '\n                    + 'https://firebase.google.com/docs/admin/setup for setup instructions.';\n                break;\n            case 404:\n                errorCode = 'not-found';\n                errorMessage = 'The specified entity could not be found.';\n                break;\n            case 409:\n                errorCode = 'already-exists';\n                errorMessage = 'The specified entity already exists.';\n                break;\n            case 500:\n                errorCode = 'internal-error';\n                errorMessage = 'An internal error has occurred. Please retry the request.';\n                break;\n            case 503:\n                errorCode = 'service-unavailable';\n                errorMessage = 'The server could not process the request in time. See the error '\n                    + 'documentation for more details.';\n                break;\n            default:\n                errorCode = 'unknown-error';\n                errorMessage = 'An unknown server error was returned.';\n        }\n        if (!errText) {\n            errText = '<missing>';\n        }\n        throw new error_1.FirebaseProjectManagementError(errorCode, `${errorMessage} Status code: ${errStatusCode}. Raw server response: \"${errText}\".`);\n    }\n    /**\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @constructor\n     */\n    constructor(app) {\n        this.baseUrl = `https://${PROJECT_MANAGEMENT_HOST_AND_PORT}${PROJECT_MANAGEMENT_PATH}`;\n        this.baseBetaUrl = `https://${PROJECT_MANAGEMENT_HOST_AND_PORT}${PROJECT_MANAGEMENT_BETA_PATH}`;\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project whose Android\n     *     apps you want to list.\n     */\n    listAndroidApps(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}/androidApps?page_size=${LIST_APPS_MAX_PAGE_SIZE}`, \n        /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project whose iOS apps\n     *     you want to list.\n     */\n    listIosApps(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}/iosApps?page_size=${LIST_APPS_MAX_PAGE_SIZE}`, \n        /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project whose iOS apps\n     *     you want to list.\n     */\n    listAppMetadata(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}:searchApps?page_size=${LIST_APPS_MAX_PAGE_SIZE}`, \n        /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project that you want\n     *     to create the Android app within.\n     */\n    createAndroidApp(parentResourceName, packageName, displayName) {\n        const requestData = {\n            packageName,\n        };\n        if (validator.isNonEmptyString(displayName)) {\n            requestData.displayName = displayName;\n        }\n        return this\n            .invokeRequestHandler('POST', `${parentResourceName}/androidApps`, requestData, 'v1beta1')\n            .then((responseData) => {\n            assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp\\'s responseData must be a non-null object.');\n            assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createAndroidApp\\'s responseData.name must be a non-empty string.');\n            return this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n        });\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project that you want\n     *     to create the iOS app within.\n     */\n    createIosApp(parentResourceName, bundleId, displayName) {\n        const requestData = {\n            bundleId,\n        };\n        if (validator.isNonEmptyString(displayName)) {\n            requestData.displayName = displayName;\n        }\n        return this\n            .invokeRequestHandler('POST', `${parentResourceName}/iosApps`, requestData, 'v1beta1')\n            .then((responseData) => {\n            assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp\\'s responseData must be a non-null object.');\n            assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createIosApp\\'s responseData.name must be a non-empty string.');\n            return this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n        });\n    }\n    /**\n     * @param resourceName - Fully-qualified resource name of the entity whose display name you\n     *     want to set.\n     */\n    setDisplayName(resourceName, newDisplayName) {\n        const requestData = {\n            displayName: newDisplayName,\n        };\n        return this\n            .invokeRequestHandler('PATCH', `${resourceName}?update_mask=display_name`, requestData, 'v1beta1')\n            .then(() => undefined);\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the Android app whose SHA\n     *     certificates you want to get.\n     */\n    getAndroidShaCertificates(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}/sha`, /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the Android app that you\n     *     want to add the given SHA certificate to.\n     */\n    addAndroidShaCertificate(parentResourceName, certificate) {\n        const requestData = {\n            shaHash: certificate.shaHash,\n            certType: CERT_TYPE_API_MAP[certificate.certType],\n        };\n        return this\n            .invokeRequestHandler('POST', `${parentResourceName}/sha`, requestData, 'v1beta1')\n            .then(() => undefined);\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the app whose config you\n     *     want to get.\n     */\n    getConfig(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}/config`, /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the entity that you want to\n     *     get.\n     */\n    getResource(parentResourceName) {\n        return this.invokeRequestHandler('GET', parentResourceName, /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param resourceName - Fully-qualified resource name of the entity that you want to\n     *     delete.\n     */\n    deleteResource(resourceName) {\n        return this\n            .invokeRequestHandler('DELETE', resourceName, /* requestData */ null, 'v1beta1')\n            .then(() => undefined);\n    }\n    pollRemoteOperationWithExponentialBackoff(operationResourceName) {\n        const poller = new api_request_1.ExponentialBackoffPoller();\n        return poller.poll(() => {\n            return this.invokeRequestHandler('GET', operationResourceName, /* requestData */ null)\n                .then((responseData) => {\n                if (responseData.error) {\n                    const errStatusCode = responseData.error.code || 500;\n                    const errText = responseData.error.message || JSON.stringify(responseData.error);\n                    ProjectManagementRequestHandler.wrapAndRethrowHttpError(errStatusCode, errText);\n                }\n                if (!responseData.done) {\n                    // Continue polling.\n                    return null;\n                }\n                // Polling complete. Resolve with operation response JSON.\n                return responseData.response;\n            });\n        });\n    }\n    /**\n     * Invokes the request handler with the provided request data.\n     */\n    invokeRequestHandler(method, path, requestData, apiVersion = 'v1') {\n        const baseUrlToUse = (apiVersion === 'v1') ? this.baseUrl : this.baseBetaUrl;\n        const request = {\n            method,\n            url: `${baseUrlToUse}${path}`,\n            headers: PROJECT_MANAGEMENT_HEADERS,\n            data: requestData,\n            timeout: PROJECT_MANAGEMENT_TIMEOUT_MILLIS,\n        };\n        return this.httpClient.send(request)\n            .then((response) => {\n            // Send non-JSON responses to the catch() below, where they will be treated as errors.\n            if (!response.isJson()) {\n                throw new api_request_1.RequestResponseError(response);\n            }\n            return response.data;\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.RequestResponseError) {\n                ProjectManagementRequestHandler.wrapAndRethrowHttpError(err.response.status, err.response.text);\n            }\n            throw err;\n        });\n    }\n}\nexports.ProjectManagementRequestHandler = ProjectManagementRequestHandler;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13279, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/project-management/app-metadata.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppPlatform = void 0;\n/**\n * Platforms with which a Firebase App can be associated.\n */\nvar AppPlatform;\n(function (AppPlatform) {\n    /**\n     * Unknown state. This is only used for distinguishing unset values.\n     */\n    AppPlatform[\"PLATFORM_UNKNOWN\"] = \"PLATFORM_UNKNOWN\";\n    /**\n     * The Firebase App is associated with iOS.\n     */\n    AppPlatform[\"IOS\"] = \"IOS\";\n    /**\n     * The Firebase App is associated with Android.\n     */\n    AppPlatform[\"ANDROID\"] = \"ANDROID\";\n})(AppPlatform || (exports.AppPlatform = AppPlatform = {}));\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,WAAW,GAAG,KAAK;AAC3B;;CAEC,GACD,IAAI;AACJ,CAAC,SAAU,WAAW;IAClB;;KAEC,GACD,WAAW,CAAC,mBAAmB,GAAG;IAClC;;KAEC,GACD,WAAW,CAAC,MAAM,GAAG;IACrB;;KAEC,GACD,WAAW,CAAC,UAAU,GAAG;AAC7B,CAAC,EAAE,eAAe,CAAC,QAAQ,WAAW,GAAG,cAAc,CAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13317, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/project-management/android-app.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShaCertificate = exports.AndroidApp = void 0;\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\nconst project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nconst app_metadata_1 = require(\"./app-metadata\");\n/**\n * A reference to a Firebase Android app.\n *\n * Do not call this constructor directly. Instead, use {@link ProjectManagement.androidApp}.\n */\nclass AndroidApp {\n    /**\n     * @internal\n     */\n    constructor(appId, requestHandler) {\n        this.appId = appId;\n        this.requestHandler = requestHandler;\n        if (!validator.isNonEmptyString(appId)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n        }\n        this.resourceName = `projects/-/androidApps/${appId}`;\n    }\n    /**\n     * Retrieves metadata about this Android app.\n     *\n     * @returns A promise that resolves to the retrieved metadata about this Android app.\n     */\n    getMetadata() {\n        return this.requestHandler.getResource(this.resourceName)\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n            const requiredFieldsList = ['name', 'appId', 'projectId', 'packageName'];\n            requiredFieldsList.forEach((requiredField) => {\n                (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData[requiredField]), responseData, `getMetadata()'s responseData.${requiredField} must be a non-empty string.`);\n            });\n            const metadata = {\n                platform: app_metadata_1.AppPlatform.ANDROID,\n                resourceName: responseData.name,\n                appId: responseData.appId,\n                displayName: responseData.displayName || null,\n                projectId: responseData.projectId,\n                packageName: responseData.packageName,\n            };\n            return metadata;\n        });\n    }\n    /**\n     * Sets the optional user-assigned display name of the app.\n     *\n     * @param newDisplayName - The new display name to set.\n     *\n     * @returns A promise that resolves when the display name has been set.\n     */\n    setDisplayName(newDisplayName) {\n        return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n    }\n    /**\n     * Gets the list of SHA certificates associated with this Android app in Firebase.\n     *\n     * @returns The list of SHA-1 and SHA-256 certificates associated with this Android app in\n     *     Firebase.\n     */\n    getShaCertificates() {\n        return this.requestHandler.getAndroidShaCertificates(this.resourceName)\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getShaCertificates()\\'s responseData must be a non-null object.');\n            if (!responseData.certificates) {\n                return [];\n            }\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isArray(responseData.certificates), responseData, '\"certificates\" field must be present in the getShaCertificates() response data.');\n            const requiredFieldsList = ['name', 'shaHash'];\n            return responseData.certificates.map((certificateJson) => {\n                requiredFieldsList.forEach((requiredField) => {\n                    (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(certificateJson[requiredField]), responseData, `getShaCertificates()'s responseData.certificates[].${requiredField} must be a `\n                        + 'non-empty string.');\n                });\n                return new ShaCertificate(certificateJson.shaHash, certificateJson.name);\n            });\n        });\n    }\n    /**\n     * Adds the given SHA certificate to this Android app.\n     *\n     * @param certificateToAdd - The SHA certificate to add.\n     *\n     * @returns A promise that resolves when the given certificate\n     *     has been added to the Android app.\n     */\n    addShaCertificate(certificateToAdd) {\n        return this.requestHandler.addAndroidShaCertificate(this.resourceName, certificateToAdd);\n    }\n    /**\n     * Deletes the specified SHA certificate from this Android app.\n     *\n     * @param certificateToDelete - The SHA certificate to delete.\n     *\n     * @returns A promise that resolves when the specified\n     *     certificate has been removed from the Android app.\n     */\n    deleteShaCertificate(certificateToDelete) {\n        if (!certificateToDelete.resourceName) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'Specified certificate does not include a resourceName. (Use AndroidApp.getShaCertificates() to retrieve ' +\n                'certificates with a resourceName.');\n        }\n        return this.requestHandler.deleteResource(certificateToDelete.resourceName);\n    }\n    /**\n     * Gets the configuration artifact associated with this app.\n     *\n     * @returns A promise that resolves to the Android app's\n     *     Firebase config file, in UTF-8 string format. This string is typically\n     *     intended to be written to a JSON file that gets shipped with your Android\n     *     app.\n     */\n    getConfig() {\n        return this.requestHandler.getConfig(this.resourceName)\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n            const base64ConfigFileContents = responseData.configFileContents;\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isBase64String(base64ConfigFileContents), responseData, 'getConfig()\\'s responseData.configFileContents must be a base64 string.');\n            return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n        });\n    }\n}\nexports.AndroidApp = AndroidApp;\n/**\n * A SHA-1 or SHA-256 certificate.\n *\n * Do not call this constructor directly. Instead, use\n * [`projectManagement.shaCertificate()`](projectManagement.ProjectManagement#shaCertificate).\n */\nclass ShaCertificate {\n    /**\n     * Creates a ShaCertificate using the given hash. The ShaCertificate's type (eg. 'sha256') is\n     * automatically determined from the hash itself.\n     *\n     * @param shaHash - The sha256 or sha1 hash for this certificate.\n     * @example\n     * ```javascript\n     * var shaHash = shaCertificate.shaHash;\n     * ```\n     * @param resourceName - The Firebase resource name for this certificate. This does not need to be\n     *     set when creating a new certificate.\n     * @example\n     * ```javascript\n     * var resourceName = shaCertificate.resourceName;\n     * ```\n     *\n     * @internal\n     */\n    constructor(shaHash, resourceName) {\n        this.shaHash = shaHash;\n        this.resourceName = resourceName;\n        if (/^[a-fA-F0-9]{40}$/.test(shaHash)) {\n            this.certType = 'sha1';\n        }\n        else if (/^[a-fA-F0-9]{64}$/.test(shaHash)) {\n            this.certType = 'sha256';\n        }\n        else {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'shaHash must be either a sha256 hash or a sha1 hash.');\n        }\n    }\n}\nexports.ShaCertificate = ShaCertificate;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13497, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/project-management/ios-app.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IosApp = void 0;\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\nconst project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nconst app_metadata_1 = require(\"./app-metadata\");\n/**\n * A reference to a Firebase iOS app.\n *\n * Do not call this constructor directly. Instead, use {@link ProjectManagement.iosApp}.\n */\nclass IosApp {\n    /**\n     * @internal\n     */\n    constructor(appId, requestHandler) {\n        this.appId = appId;\n        this.requestHandler = requestHandler;\n        if (!validator.isNonEmptyString(appId)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n        }\n        this.resourceName = `projects/-/iosApps/${appId}`;\n    }\n    /**\n     * Retrieves metadata about this iOS app.\n     *\n     * @returns A promise that\n     *     resolves to the retrieved metadata about this iOS app.\n     */\n    getMetadata() {\n        return this.requestHandler.getResource(this.resourceName)\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n            const requiredFieldsList = ['name', 'appId', 'projectId', 'bundleId'];\n            requiredFieldsList.forEach((requiredField) => {\n                (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData[requiredField]), responseData, `getMetadata()'s responseData.${requiredField} must be a non-empty string.`);\n            });\n            const metadata = {\n                platform: app_metadata_1.AppPlatform.IOS,\n                resourceName: responseData.name,\n                appId: responseData.appId,\n                displayName: responseData.displayName || null,\n                projectId: responseData.projectId,\n                bundleId: responseData.bundleId,\n            };\n            return metadata;\n        });\n    }\n    /**\n     * Sets the optional user-assigned display name of the app.\n     *\n     * @param newDisplayName - The new display name to set.\n     *\n     * @returns A promise that resolves when the display name has\n     *     been set.\n     */\n    setDisplayName(newDisplayName) {\n        return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n    }\n    /**\n     * Gets the configuration artifact associated with this app.\n     *\n     * @returns A promise that resolves to the iOS app's Firebase\n     *     config file, in UTF-8 string format. This string is typically intended to\n     *     be written to a plist file that gets shipped with your iOS app.\n     */\n    getConfig() {\n        return this.requestHandler.getConfig(this.resourceName)\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n            const base64ConfigFileContents = responseData.configFileContents;\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isBase64String(base64ConfigFileContents), responseData, 'getConfig()\\'s responseData.configFileContents must be a base64 string.');\n            return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n        });\n    }\n}\nexports.IosApp = IosApp;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAyFR;AAxFnB;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,MAAM,GAAG,KAAK;AACtB,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN;;;;CAIC,GACD,MAAM;IACF;;KAEC,GACD,YAAY,KAAK,EAAE,cAAc,CAAE;QAC/B,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,cAAc,GAAG;QACtB,IAAI,CAAC,UAAU,gBAAgB,CAAC,QAAQ;YACpC,MAAM,IAAI,QAAQ,8BAA8B,CAAC,oBAAoB;QACzE;QACA,IAAI,CAAC,YAAY,GAAG,CAAC,mBAAmB,EAAE,OAAO;IACrD;IACA;;;;;KAKC,GACD,cAAc;QACV,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EACnD,IAAI,CAAC,CAAC;YACP,CAAC,GAAG,0CAA0C,oBAAoB,EAAE,UAAU,eAAe,CAAC,eAAe,cAAc;YAC3H,MAAM,qBAAqB;gBAAC;gBAAQ;gBAAS;gBAAa;aAAW;YACrE,mBAAmB,OAAO,CAAC,CAAC;gBACxB,CAAC,GAAG,0CAA0C,oBAAoB,EAAE,UAAU,gBAAgB,CAAC,YAAY,CAAC,cAAc,GAAG,cAAc,CAAC,6BAA6B,EAAE,cAAc,4BAA4B,CAAC;YAC1N;YACA,MAAM,WAAW;gBACb,UAAU,eAAe,WAAW,CAAC,GAAG;gBACxC,cAAc,aAAa,IAAI;gBAC/B,OAAO,aAAa,KAAK;gBACzB,aAAa,aAAa,WAAW,IAAI;gBACzC,WAAW,aAAa,SAAS;gBACjC,UAAU,aAAa,QAAQ;YACnC;YACA,OAAO;QACX;IACJ;IACA;;;;;;;KAOC,GACD,eAAe,cAAc,EAAE;QAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,EAAE;IACjE;IACA;;;;;;KAMC,GACD,YAAY;QACR,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EACjD,IAAI,CAAC,CAAC;YACP,CAAC,GAAG,0CAA0C,oBAAoB,EAAE,UAAU,eAAe,CAAC,eAAe,cAAc;YAC3H,MAAM,2BAA2B,aAAa,kBAAkB;YAChE,CAAC,GAAG,0CAA0C,oBAAoB,EAAE,UAAU,cAAc,CAAC,2BAA2B,cAAc;YACtI,OAAO,8JAAA,CAAA,SAAM,CAAC,IAAI,CAAC,0BAA0B,UAAU,QAAQ,CAAC;QACpE;IACJ;AACJ;AACA,QAAQ,MAAM,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13595, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/project-management/project-management.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectManagement = void 0;\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst android_app_1 = require(\"./android-app\");\nconst ios_app_1 = require(\"./ios-app\");\nconst project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nconst app_metadata_1 = require(\"./app-metadata\");\n/**\n * The Firebase ProjectManagement service interface.\n */\nclass ProjectManagement {\n    /**\n     * @param app - The app for this ProjectManagement service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app '\n                + 'instance.');\n        }\n        this.requestHandler = new project_management_api_request_internal_1.ProjectManagementRequestHandler(app);\n    }\n    /**\n     * Lists up to 100 Firebase Android apps associated with this Firebase project.\n     *\n     * @returns The list of Android apps.\n     */\n    listAndroidApps() {\n        return this.listPlatformApps('android', 'listAndroidApps()');\n    }\n    /**\n     * Lists up to 100 Firebase iOS apps associated with this Firebase project.\n     *\n     * @returns The list of iOS apps.\n     */\n    listIosApps() {\n        return this.listPlatformApps('ios', 'listIosApps()');\n    }\n    /**\n     * Creates an `AndroidApp` object, referencing the specified Android app within\n     * this Firebase project.\n     *\n     * This method does not perform an RPC.\n     *\n     * @param appId - The `appId` of the Android app to reference.\n     *\n     * @returns An `AndroidApp` object that references the specified Firebase Android app.\n     */\n    androidApp(appId) {\n        return new android_app_1.AndroidApp(appId, this.requestHandler);\n    }\n    /**\n     * Creates an `iOSApp` object, referencing the specified iOS app within\n     * this Firebase project.\n     *\n     * This method does not perform an RPC.\n     *\n     * @param appId - The `appId` of the iOS app to reference.\n     *\n     * @returns An `iOSApp` object that references the specified Firebase iOS app.\n     */\n    iosApp(appId) {\n        return new ios_app_1.IosApp(appId, this.requestHandler);\n    }\n    /**\n     * Creates a `ShaCertificate` object.\n     *\n     * This method does not perform an RPC.\n     *\n     * @param shaHash - The SHA-1 or SHA-256 hash for this certificate.\n     *\n     * @returns A `ShaCertificate` object contains the specified SHA hash.\n     */\n    shaCertificate(shaHash) {\n        return new android_app_1.ShaCertificate(shaHash);\n    }\n    /**\n     * Creates a new Firebase Android app associated with this Firebase project.\n     *\n     * @param packageName - The canonical package name of the Android App,\n     *     as would appear in the Google Play Developer Console.\n     * @param displayName - An optional user-assigned display name for this\n     *     new app.\n     *\n     * @returns A promise that resolves to the newly created Android app.\n     */\n    createAndroidApp(packageName, displayName) {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return this.requestHandler.createAndroidApp(resourceName, packageName, displayName);\n        })\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createAndroidApp()\\'s response data.');\n            return new android_app_1.AndroidApp(responseData.appId, this.requestHandler);\n        });\n    }\n    /**\n     * Creates a new Firebase iOS app associated with this Firebase project.\n     *\n     * @param bundleId - The iOS app bundle ID to use for this new app.\n     * @param displayName - An optional user-assigned display name for this\n     *     new app.\n     *\n     * @returns A promise that resolves to the newly created iOS app.\n     */\n    createIosApp(bundleId, displayName) {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return this.requestHandler.createIosApp(resourceName, bundleId, displayName);\n        })\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createIosApp()\\'s response data.');\n            return new ios_app_1.IosApp(responseData.appId, this.requestHandler);\n        });\n    }\n    /**\n     * Lists up to 100 Firebase apps associated with this Firebase project.\n     *\n     * @returns A promise that resolves to the metadata list of the apps.\n     */\n    listAppMetadata() {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return this.requestHandler.listAppMetadata(resourceName);\n        })\n            .then((responseData) => {\n            return this.getProjectId()\n                .then((projectId) => {\n                return this.transformResponseToAppMetadata(responseData, projectId);\n            });\n        });\n    }\n    /**\n     * Update the display name of this Firebase project.\n     *\n     * @param newDisplayName - The new display name to be updated.\n     *\n     * @returns A promise that resolves when the project display name has been updated.\n     */\n    setDisplayName(newDisplayName) {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return this.requestHandler.setDisplayName(resourceName, newDisplayName);\n        });\n    }\n    transformResponseToAppMetadata(responseData, projectId) {\n        this.assertListAppsResponseData(responseData, 'listAppMetadata()');\n        if (!responseData.apps) {\n            return [];\n        }\n        return responseData.apps.map((appJson) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(appJson.appId), responseData, '\"apps[].appId\" field must be present in the listAppMetadata() response data.');\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(appJson.platform), responseData, '\"apps[].platform\" field must be present in the listAppMetadata() response data.');\n            const metadata = {\n                appId: appJson.appId,\n                platform: app_metadata_1.AppPlatform[appJson.platform] || app_metadata_1.AppPlatform.PLATFORM_UNKNOWN,\n                projectId,\n                resourceName: appJson.name,\n            };\n            if (appJson.displayName) {\n                metadata.displayName = appJson.displayName;\n            }\n            return metadata;\n        });\n    }\n    getResourceName() {\n        return this.getProjectId()\n            .then((projectId) => {\n            return `projects/${projectId}`;\n        });\n    }\n    getProjectId() {\n        if (this.projectId) {\n            return Promise.resolve(this.projectId);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            // Assert that a specific project ID was provided within the app.\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            this.projectId = projectId;\n            return this.projectId;\n        });\n    }\n    /**\n     * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\n     */\n    listPlatformApps(platform, callerName) {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return (platform === 'android') ?\n                this.requestHandler.listAndroidApps(resourceName)\n                : this.requestHandler.listIosApps(resourceName);\n        })\n            .then((responseData) => {\n            this.assertListAppsResponseData(responseData, callerName);\n            if (!responseData.apps) {\n                return [];\n            }\n            return responseData.apps.map((appJson) => {\n                (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(appJson.appId), responseData, `\"apps[].appId\" field must be present in the ${callerName} response data.`);\n                if (platform === 'android') {\n                    return new android_app_1.AndroidApp(appJson.appId, this.requestHandler);\n                }\n                else {\n                    return new ios_app_1.IosApp(appJson.appId, this.requestHandler);\n                }\n            });\n        });\n    }\n    assertListAppsResponseData(responseData, callerName) {\n        (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, `${callerName}'s responseData must be a non-null object.`);\n        if (responseData.apps) {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isArray(responseData.apps), responseData, `\"apps\" field must be present in the ${callerName} response data.`);\n        }\n    }\n}\nexports.ProjectManagement = ProjectManagement;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13814, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/security-rules/security-rules-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseSecurityRulesError = void 0;\nconst error_1 = require(\"../utils/error\");\nclass FirebaseSecurityRulesError extends error_1.PrefixedFirebaseError {\n    constructor(code, message) {\n        super('security-rules', code, message);\n    }\n}\nexports.FirebaseSecurityRulesError = FirebaseSecurityRulesError;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,0BAA0B,GAAG,KAAK;AAC1C,MAAM;AACN,MAAM,mCAAmC,QAAQ,qBAAqB;IAClE,YAAY,IAAI,EAAE,OAAO,CAAE;QACvB,KAAK,CAAC,kBAAkB,MAAM;IAClC;AACJ;AACA,QAAQ,0BAA0B,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13845, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/security-rules/security-rules-api-client-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecurityRulesApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst security_rules_internal_1 = require(\"./security-rules-internal\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst RULES_V1_API = 'https://firebaserules.googleapis.com/v1';\nconst FIREBASE_VERSION_HEADER = {\n    'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`,\n};\n/**\n * Class that facilitates sending requests to the Firebase security rules backend API.\n *\n * @private\n */\nclass SecurityRulesApiClient {\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'First argument passed to admin.securityRules() must be a valid Firebase app '\n                + 'instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    getRuleset(name) {\n        return Promise.resolve()\n            .then(() => {\n            return this.getRulesetName(name);\n        })\n            .then((rulesetName) => {\n            return this.getResource(rulesetName);\n        });\n    }\n    createRuleset(ruleset) {\n        if (!validator.isNonNullObject(ruleset) ||\n            !validator.isNonNullObject(ruleset.source) ||\n            !validator.isNonEmptyArray(ruleset.source.files)) {\n            const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid rules content.');\n            return Promise.reject(err);\n        }\n        for (const rf of ruleset.source.files) {\n            if (!validator.isNonNullObject(rf) ||\n                !validator.isNonEmptyString(rf.name) ||\n                !validator.isNonEmptyString(rf.content)) {\n                const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', `Invalid rules file argument: ${JSON.stringify(rf)}`);\n                return Promise.reject(err);\n            }\n        }\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'POST',\n                url: `${url}/rulesets`,\n                data: ruleset,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    deleteRuleset(name) {\n        return this.getUrl()\n            .then((url) => {\n            const rulesetName = this.getRulesetName(name);\n            const request = {\n                method: 'DELETE',\n                url: `${url}/${rulesetName}`,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    listRulesets(pageSize = 100, pageToken) {\n        if (!validator.isNumber(pageSize)) {\n            const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid page size.');\n            return Promise.reject(err);\n        }\n        if (pageSize < 1 || pageSize > 100) {\n            const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Page size must be between 1 and 100.');\n            return Promise.reject(err);\n        }\n        if (typeof pageToken !== 'undefined' && !validator.isNonEmptyString(pageToken)) {\n            const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Next page token must be a non-empty string.');\n            return Promise.reject(err);\n        }\n        const data = {\n            pageSize,\n            pageToken,\n        };\n        if (!pageToken) {\n            delete data.pageToken;\n        }\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/rulesets`,\n                data,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    getRelease(name) {\n        return this.getResource(`releases/${name}`);\n    }\n    updateOrCreateRelease(name, rulesetName) {\n        return this.updateRelease(name, rulesetName).catch((error) => {\n            // if ruleset update failed with a NOT_FOUND error, attempt to create instead.\n            if (error.code === `security-rules/${ERROR_CODE_MAPPING.NOT_FOUND}`) {\n                return this.createRelease(name, rulesetName);\n            }\n            throw error;\n        });\n    }\n    updateRelease(name, rulesetName) {\n        return this.getUrl()\n            .then((url) => {\n            return this.getReleaseDescription(name, rulesetName)\n                .then((release) => {\n                const request = {\n                    method: 'PATCH',\n                    url: `${url}/releases/${name}`,\n                    data: { release },\n                };\n                return this.sendRequest(request);\n            });\n        });\n    }\n    createRelease(name, rulesetName) {\n        return this.getUrl()\n            .then((url) => {\n            return this.getReleaseDescription(name, rulesetName)\n                .then((release) => {\n                const request = {\n                    method: 'POST',\n                    url: `${url}/releases`,\n                    data: release,\n                };\n                return this.sendRequest(request);\n            });\n        });\n    }\n    getUrl() {\n        return this.getProjectIdPrefix()\n            .then((projectIdPrefix) => {\n            return `${RULES_V1_API}/${projectIdPrefix}`;\n        });\n    }\n    getProjectIdPrefix() {\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            this.projectIdPrefix = `projects/${projectId}`;\n            return this.projectIdPrefix;\n        });\n    }\n    /**\n     * Gets the specified resource from the rules API. Resource names must be the short names without project\n     * ID prefix (e.g. `rulesets/ruleset-name`).\n     *\n     * @param {string} name Full qualified name of the resource to get.\n     * @returns {Promise<T>} A promise that fulfills with the resource.\n     */\n    getResource(name) {\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/${name}`,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    getReleaseDescription(name, rulesetName) {\n        return this.getProjectIdPrefix()\n            .then((projectIdPrefix) => {\n            return {\n                name: `${projectIdPrefix}/releases/${name}`,\n                rulesetName: `${projectIdPrefix}/${this.getRulesetName(rulesetName)}`,\n            };\n        });\n    }\n    getRulesetName(name) {\n        if (!validator.isNonEmptyString(name)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must be a non-empty string.');\n        }\n        if (name.indexOf('/') !== -1) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must not contain any \"/\" characters.');\n        }\n        return `rulesets/${name}`;\n    }\n    sendRequest(request) {\n        request.headers = FIREBASE_VERSION_HEADER;\n        return this.httpClient.send(request)\n            .then((resp) => {\n            return resp.data;\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    toFirebaseError(err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        const response = err.response;\n        if (!response.isJson()) {\n            return new security_rules_internal_1.FirebaseSecurityRulesError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n        }\n        const error = response.data.error || {};\n        let code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        const message = error.message || `Unknown server error: ${response.text}`;\n        return new security_rules_internal_1.FirebaseSecurityRulesError(code, message);\n    }\n}\nexports.SecurityRulesApiClient = SecurityRulesApiClient;\nconst ERROR_CODE_MAPPING = {\n    INVALID_ARGUMENT: 'invalid-argument',\n    NOT_FOUND: 'not-found',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'authentication-error',\n    UNKNOWN: 'unknown-error',\n};\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,sBAAsB,GAAG,KAAK;AACtC,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM,eAAe;AACrB,MAAM,0BAA0B;IAC5B,qBAAqB,CAAC,gBAAgB,EAAE,MAAM,aAAa,IAAI;AACnE;AACA;;;;CAIC,GACD,MAAM;IACF,YAAY,GAAG,CAAE;QACb,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,UAAU,eAAe,CAAC,QAAQ,CAAC,CAAC,aAAa,GAAG,GAAG;YACxD,MAAM,IAAI,0BAA0B,0BAA0B,CAAC,oBAAoB,iFAC7E;QACV;QACA,IAAI,CAAC,UAAU,GAAG,IAAI,cAAc,oBAAoB,CAAC;IAC7D;IACA,WAAW,IAAI,EAAE;QACb,OAAO,QAAQ,OAAO,GACjB,IAAI,CAAC;YACN,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,GACK,IAAI,CAAC,CAAC;YACP,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA,cAAc,OAAO,EAAE;QACnB,IAAI,CAAC,UAAU,eAAe,CAAC,YAC3B,CAAC,UAAU,eAAe,CAAC,QAAQ,MAAM,KACzC,CAAC,UAAU,eAAe,CAAC,QAAQ,MAAM,CAAC,KAAK,GAAG;YAClD,MAAM,MAAM,IAAI,0BAA0B,0BAA0B,CAAC,oBAAoB;YACzF,OAAO,QAAQ,MAAM,CAAC;QAC1B;QACA,KAAK,MAAM,MAAM,QAAQ,MAAM,CAAC,KAAK,CAAE;YACnC,IAAI,CAAC,UAAU,eAAe,CAAC,OAC3B,CAAC,UAAU,gBAAgB,CAAC,GAAG,IAAI,KACnC,CAAC,UAAU,gBAAgB,CAAC,GAAG,OAAO,GAAG;gBACzC,MAAM,MAAM,IAAI,0BAA0B,0BAA0B,CAAC,oBAAoB,CAAC,6BAA6B,EAAE,KAAK,SAAS,CAAC,KAAK;gBAC7I,OAAO,QAAQ,MAAM,CAAC;YAC1B;QACJ;QACA,OAAO,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,CAAC;YACP,MAAM,UAAU;gBACZ,QAAQ;gBACR,KAAK,GAAG,IAAI,SAAS,CAAC;gBACtB,MAAM;YACV;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA,cAAc,IAAI,EAAE;QAChB,OAAO,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,CAAC;YACP,MAAM,cAAc,IAAI,CAAC,cAAc,CAAC;YACxC,MAAM,UAAU;gBACZ,QAAQ;gBACR,KAAK,GAAG,IAAI,CAAC,EAAE,aAAa;YAChC;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA,aAAa,WAAW,GAAG,EAAE,SAAS,EAAE;QACpC,IAAI,CAAC,UAAU,QAAQ,CAAC,WAAW;YAC/B,MAAM,MAAM,IAAI,0BAA0B,0BAA0B,CAAC,oBAAoB;YACzF,OAAO,QAAQ,MAAM,CAAC;QAC1B;QACA,IAAI,WAAW,KAAK,WAAW,KAAK;YAChC,MAAM,MAAM,IAAI,0BAA0B,0BAA0B,CAAC,oBAAoB;YACzF,OAAO,QAAQ,MAAM,CAAC;QAC1B;QACA,IAAI,OAAO,cAAc,eAAe,CAAC,UAAU,gBAAgB,CAAC,YAAY;YAC5E,MAAM,MAAM,IAAI,0BAA0B,0BAA0B,CAAC,oBAAoB;YACzF,OAAO,QAAQ,MAAM,CAAC;QAC1B;QACA,MAAM,OAAO;YACT;YACA;QACJ;QACA,IAAI,CAAC,WAAW;YACZ,OAAO,KAAK,SAAS;QACzB;QACA,OAAO,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,CAAC;YACP,MAAM,UAAU;gBACZ,QAAQ;gBACR,KAAK,GAAG,IAAI,SAAS,CAAC;gBACtB;YACJ;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA,WAAW,IAAI,EAAE;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,MAAM;IAC9C;IACA,sBAAsB,IAAI,EAAE,WAAW,EAAE;QACrC,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,aAAa,KAAK,CAAC,CAAC;YAChD,8EAA8E;YAC9E,IAAI,MAAM,IAAI,KAAK,CAAC,eAAe,EAAE,mBAAmB,SAAS,EAAE,EAAE;gBACjE,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM;YACpC;YACA,MAAM;QACV;IACJ;IACA,cAAc,IAAI,EAAE,WAAW,EAAE;QAC7B,OAAO,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,CAAC;YACP,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,aACnC,IAAI,CAAC,CAAC;gBACP,MAAM,UAAU;oBACZ,QAAQ;oBACR,KAAK,GAAG,IAAI,UAAU,EAAE,MAAM;oBAC9B,MAAM;wBAAE;oBAAQ;gBACpB;gBACA,OAAO,IAAI,CAAC,WAAW,CAAC;YAC5B;QACJ;IACJ;IACA,cAAc,IAAI,EAAE,WAAW,EAAE;QAC7B,OAAO,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,CAAC;YACP,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,aACnC,IAAI,CAAC,CAAC;gBACP,MAAM,UAAU;oBACZ,QAAQ;oBACR,KAAK,GAAG,IAAI,SAAS,CAAC;oBACtB,MAAM;gBACV;gBACA,OAAO,IAAI,CAAC,WAAW,CAAC;YAC5B;QACJ;IACJ;IACA,SAAS;QACL,OAAO,IAAI,CAAC,kBAAkB,GACzB,IAAI,CAAC,CAAC;YACP,OAAO,GAAG,aAAa,CAAC,EAAE,iBAAiB;QAC/C;IACJ;IACA,qBAAqB;QACjB,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,OAAO,QAAQ,OAAO,CAAC,IAAI,CAAC,eAAe;QAC/C;QACA,OAAO,MAAM,aAAa,CAAC,IAAI,CAAC,GAAG,EAC9B,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,UAAU,gBAAgB,CAAC,YAAY;gBACxC,MAAM,IAAI,0BAA0B,0BAA0B,CAAC,oBAAoB,6FAC7E,kFACA;YACV;YACA,IAAI,CAAC,eAAe,GAAG,CAAC,SAAS,EAAE,WAAW;YAC9C,OAAO,IAAI,CAAC,eAAe;QAC/B;IACJ;IACA;;;;;;KAMC,GACD,YAAY,IAAI,EAAE;QACd,OAAO,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,CAAC;YACP,MAAM,UAAU;gBACZ,QAAQ;gBACR,KAAK,GAAG,IAAI,CAAC,EAAE,MAAM;YACzB;YACA,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B;IACJ;IACA,sBAAsB,IAAI,EAAE,WAAW,EAAE;QACrC,OAAO,IAAI,CAAC,kBAAkB,GACzB,IAAI,CAAC,CAAC;YACP,OAAO;gBACH,MAAM,GAAG,gBAAgB,UAAU,EAAE,MAAM;gBAC3C,aAAa,GAAG,gBAAgB,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,cAAc;YACzE;QACJ;IACJ;IACA,eAAe,IAAI,EAAE;QACjB,IAAI,CAAC,UAAU,gBAAgB,CAAC,OAAO;YACnC,MAAM,IAAI,0BAA0B,0BAA0B,CAAC,oBAAoB;QACvF;QACA,IAAI,KAAK,OAAO,CAAC,SAAS,CAAC,GAAG;YAC1B,MAAM,IAAI,0BAA0B,0BAA0B,CAAC,oBAAoB;QACvF;QACA,OAAO,CAAC,SAAS,EAAE,MAAM;IAC7B;IACA,YAAY,OAAO,EAAE;QACjB,QAAQ,OAAO,GAAG;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SACvB,IAAI,CAAC,CAAC;YACP,OAAO,KAAK,IAAI;QACpB,GACK,KAAK,CAAC,CAAC;YACR,MAAM,IAAI,CAAC,eAAe,CAAC;QAC/B;IACJ;IACA,gBAAgB,GAAG,EAAE;QACjB,IAAI,eAAe,QAAQ,qBAAqB,EAAE;YAC9C,OAAO;QACX;QACA,MAAM,WAAW,IAAI,QAAQ;QAC7B,IAAI,CAAC,SAAS,MAAM,IAAI;YACpB,OAAO,IAAI,0BAA0B,0BAA0B,CAAC,iBAAiB,CAAC,iCAAiC,EAAE,SAAS,MAAM,CAAC,WAAW,EAAE,SAAS,IAAI,EAAE;QACrK;QACA,MAAM,QAAQ,SAAS,IAAI,CAAC,KAAK,IAAI,CAAC;QACtC,IAAI,OAAO;QACX,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,IAAI,oBAAoB;YACpD,OAAO,kBAAkB,CAAC,MAAM,MAAM,CAAC;QAC3C;QACA,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,sBAAsB,EAAE,SAAS,IAAI,EAAE;QACzE,OAAO,IAAI,0BAA0B,0BAA0B,CAAC,MAAM;IAC1E;AACJ;AACA,QAAQ,sBAAsB,GAAG;AACjC,MAAM,qBAAqB;IACvB,kBAAkB;IAClB,WAAW;IACX,oBAAoB;IACpB,iBAAiB;IACjB,SAAS;AACb","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14076, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/security-rules/security-rules.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecurityRules = exports.Ruleset = exports.RulesetMetadataList = void 0;\nconst validator = require(\"../utils/validator\");\nconst security_rules_api_client_internal_1 = require(\"./security-rules-api-client-internal\");\nconst security_rules_internal_1 = require(\"./security-rules-internal\");\n/**\n * A page of ruleset metadata.\n */\nclass RulesetMetadataList {\n    /**\n     * @internal\n     */\n    constructor(response) {\n        if (!validator.isNonNullObject(response) || !validator.isArray(response.rulesets)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', `Invalid ListRulesets response: ${JSON.stringify(response)}`);\n        }\n        this.rulesets = response.rulesets.map((rs) => {\n            return {\n                name: stripProjectIdPrefix(rs.name),\n                createTime: new Date(rs.createTime).toUTCString(),\n            };\n        });\n        if (response.nextPageToken) {\n            this.nextPageToken = response.nextPageToken;\n        }\n    }\n}\nexports.RulesetMetadataList = RulesetMetadataList;\n/**\n * A set of Firebase security rules.\n */\nclass Ruleset {\n    /**\n     * @internal\n     */\n    constructor(ruleset) {\n        if (!validator.isNonNullObject(ruleset) ||\n            !validator.isNonEmptyString(ruleset.name) ||\n            !validator.isNonEmptyString(ruleset.createTime) ||\n            !validator.isNonNullObject(ruleset.source)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', `Invalid Ruleset response: ${JSON.stringify(ruleset)}`);\n        }\n        this.name = stripProjectIdPrefix(ruleset.name);\n        this.createTime = new Date(ruleset.createTime).toUTCString();\n        this.source = ruleset.source.files || [];\n    }\n}\nexports.Ruleset = Ruleset;\n/**\n * The Firebase `SecurityRules` service interface.\n */\nclass SecurityRules {\n    /**\n     * @param app - The app for this SecurityRules service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        this.app = app;\n        this.client = new security_rules_api_client_internal_1.SecurityRulesApiClient(app);\n    }\n    /**\n     * Gets the {@link Ruleset} identified by the given\n     * name. The input name should be the short name string without the project ID\n     * prefix. For example, to retrieve the `projects/project-id/rulesets/my-ruleset`,\n     * pass the short name \"my-ruleset\". Rejects with a `not-found` error if the\n     * specified `Ruleset` cannot be found.\n     *\n     * @param name - Name of the `Ruleset` to retrieve.\n     * @returns A promise that fulfills with the specified `Ruleset`.\n     */\n    getRuleset(name) {\n        return this.client.getRuleset(name)\n            .then((rulesetResponse) => {\n            return new Ruleset(rulesetResponse);\n        });\n    }\n    /**\n     * Gets the {@link Ruleset} currently applied to\n     * Cloud Firestore. Rejects with a `not-found` error if no ruleset is applied\n     * on Firestore.\n     *\n     * @returns A promise that fulfills with the Firestore ruleset.\n     */\n    getFirestoreRuleset() {\n        return this.getRulesetForRelease(SecurityRules.CLOUD_FIRESTORE);\n    }\n    /**\n     * Creates a new {@link Ruleset} from the given\n     * source, and applies it to Cloud Firestore.\n     *\n     * @param source - Rules source to apply.\n     * @returns A promise that fulfills when the ruleset is created and released.\n     */\n    releaseFirestoreRulesetFromSource(source) {\n        return Promise.resolve()\n            .then(() => {\n            const rulesFile = this.createRulesFileFromSource('firestore.rules', source);\n            return this.createRuleset(rulesFile);\n        })\n            .then((ruleset) => {\n            return this.releaseFirestoreRuleset(ruleset)\n                .then(() => {\n                return ruleset;\n            });\n        });\n    }\n    /**\n     * Applies the specified {@link Ruleset} ruleset\n     * to Cloud Firestore.\n     *\n     * @param ruleset - Name of the ruleset to apply or a `RulesetMetadata` object\n     *   containing the name.\n     * @returns A promise that fulfills when the ruleset is released.\n     */\n    releaseFirestoreRuleset(ruleset) {\n        return this.releaseRuleset(ruleset, SecurityRules.CLOUD_FIRESTORE);\n    }\n    /**\n     * Gets the {@link Ruleset} currently applied to a\n     * Cloud Storage bucket. Rejects with a `not-found` error if no ruleset is applied\n     * on the bucket.\n     *\n     * @param bucket - Optional name of the Cloud Storage bucket to be retrieved. If not\n     *   specified, retrieves the ruleset applied on the default bucket configured via\n     *   `AppOptions`.\n     * @returns A promise that fulfills with the Cloud Storage ruleset.\n     */\n    getStorageRuleset(bucket) {\n        return Promise.resolve()\n            .then(() => {\n            return this.getBucketName(bucket);\n        })\n            .then((bucketName) => {\n            return this.getRulesetForRelease(`${SecurityRules.FIREBASE_STORAGE}/${bucketName}`);\n        });\n    }\n    /**\n     * Creates a new {@link Ruleset} from the given\n     * source, and applies it to a Cloud Storage bucket.\n     *\n     * @param source - Rules source to apply.\n     * @param bucket - Optional name of the Cloud Storage bucket to apply the rules on. If\n     *   not specified, applies the ruleset on the default bucket configured via\n     *   {@link firebase-admin.app#AppOptions}.\n     * @returns A promise that fulfills when the ruleset is created and released.\n     */\n    releaseStorageRulesetFromSource(source, bucket) {\n        return Promise.resolve()\n            .then(() => {\n            // Bucket name is not required until the last step. But since there's a createRuleset step\n            // before then, make sure to run this check and fail early if the bucket name is invalid.\n            this.getBucketName(bucket);\n            const rulesFile = this.createRulesFileFromSource('storage.rules', source);\n            return this.createRuleset(rulesFile);\n        })\n            .then((ruleset) => {\n            return this.releaseStorageRuleset(ruleset, bucket)\n                .then(() => {\n                return ruleset;\n            });\n        });\n    }\n    /**\n     * Applies the specified {@link Ruleset} ruleset\n     * to a Cloud Storage bucket.\n     *\n     * @param ruleset - Name of the ruleset to apply or a `RulesetMetadata` object\n     *   containing the name.\n     * @param bucket - Optional name of the Cloud Storage bucket to apply the rules on. If\n     *   not specified, applies the ruleset on the default bucket configured via\n     *   {@link firebase-admin.app#AppOptions}.\n     * @returns A promise that fulfills when the ruleset is released.\n     */\n    releaseStorageRuleset(ruleset, bucket) {\n        return Promise.resolve()\n            .then(() => {\n            return this.getBucketName(bucket);\n        })\n            .then((bucketName) => {\n            return this.releaseRuleset(ruleset, `${SecurityRules.FIREBASE_STORAGE}/${bucketName}`);\n        });\n    }\n    /**\n     * Creates a {@link RulesFile} with the given name\n     * and source. Throws an error if any of the arguments are invalid. This is a local\n     * operation, and does not involve any network API calls.\n     *\n     * @example\n     * ```javascript\n     * const source = '// Some rules source';\n     * const rulesFile = admin.securityRules().createRulesFileFromSource(\n     *   'firestore.rules', source);\n     * ```\n     *\n     * @param name - Name to assign to the rules file. This is usually a short file name that\n     *   helps identify the file in a ruleset.\n     * @param source - Contents of the rules file.\n     * @returns A new rules file instance.\n     */\n    createRulesFileFromSource(name, source) {\n        if (!validator.isNonEmptyString(name)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Name must be a non-empty string.');\n        }\n        let content;\n        if (validator.isNonEmptyString(source)) {\n            content = source;\n        }\n        else if (validator.isBuffer(source)) {\n            content = source.toString('utf-8');\n        }\n        else {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Source must be a non-empty string or a Buffer.');\n        }\n        return {\n            name,\n            content,\n        };\n    }\n    /**\n     * Creates a new {@link Ruleset} from the given {@link RulesFile}.\n     *\n     * @param file - Rules file to include in the new `Ruleset`.\n     * @returns A promise that fulfills with the newly created `Ruleset`.\n     */\n    createRuleset(file) {\n        const ruleset = {\n            source: {\n                files: [file],\n            },\n        };\n        return this.client.createRuleset(ruleset)\n            .then((rulesetResponse) => {\n            return new Ruleset(rulesetResponse);\n        });\n    }\n    /**\n     * Deletes the {@link Ruleset} identified by the given\n     * name. The input name should be the short name string without the project ID\n     * prefix. For example, to delete the `projects/project-id/rulesets/my-ruleset`,\n     * pass the  short name \"my-ruleset\". Rejects with a `not-found` error if the\n     * specified `Ruleset` cannot be found.\n     *\n     * @param name - Name of the `Ruleset` to delete.\n     * @returns A promise that fulfills when the `Ruleset` is deleted.\n     */\n    deleteRuleset(name) {\n        return this.client.deleteRuleset(name);\n    }\n    /**\n     * Retrieves a page of ruleset metadata.\n     *\n     * @param pageSize - The page size, 100 if undefined. This is also the maximum allowed\n     *   limit.\n     * @param nextPageToken - The next page token. If not specified, returns rulesets\n     *   starting without any offset.\n     * @returns A promise that fulfills with a page of rulesets.\n     */\n    listRulesetMetadata(pageSize = 100, nextPageToken) {\n        return this.client.listRulesets(pageSize, nextPageToken)\n            .then((response) => {\n            return new RulesetMetadataList(response);\n        });\n    }\n    getRulesetForRelease(releaseName) {\n        return this.client.getRelease(releaseName)\n            .then((release) => {\n            const rulesetName = release.rulesetName;\n            if (!validator.isNonEmptyString(rulesetName)) {\n                throw new security_rules_internal_1.FirebaseSecurityRulesError('not-found', `Ruleset name not found for ${releaseName}.`);\n            }\n            return this.getRuleset(stripProjectIdPrefix(rulesetName));\n        });\n    }\n    releaseRuleset(ruleset, releaseName) {\n        if (!validator.isNonEmptyString(ruleset) &&\n            (!validator.isNonNullObject(ruleset) || !validator.isNonEmptyString(ruleset.name))) {\n            const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'ruleset must be a non-empty name or a RulesetMetadata object.');\n            return Promise.reject(err);\n        }\n        const rulesetName = validator.isString(ruleset) ? ruleset : ruleset.name;\n        return this.client.updateOrCreateRelease(releaseName, rulesetName)\n            .then(() => {\n            return;\n        });\n    }\n    getBucketName(bucket) {\n        const bucketName = (typeof bucket !== 'undefined') ? bucket : this.app.options.storageBucket;\n        if (!validator.isNonEmptyString(bucketName)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Bucket name not specified or invalid. Specify a default bucket name via the ' +\n                'storageBucket option when initializing the app, or specify the bucket name ' +\n                'explicitly when calling the rules API.');\n        }\n        return bucketName;\n    }\n}\nexports.SecurityRules = SecurityRules;\nSecurityRules.CLOUD_FIRESTORE = 'cloud.firestore';\nSecurityRules.FIREBASE_STORAGE = 'firebase.storage';\nfunction stripProjectIdPrefix(name) {\n    return name.split('/').pop();\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14362, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/remote-config/remote-config-api-client-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseRemoteConfigError = exports.RemoteConfigApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\n// Remote Config backend constants\n/**\n  * Allows the `FIREBASE_REMOTE_CONFIG_URL_BASE` environment\n  * variable to override the default API endpoint URL.\n  */\nconst FIREBASE_REMOTE_CONFIG_URL_BASE = process.env.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\nconst FIREBASE_REMOTE_CONFIG_HEADERS = {\n    'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`,\n    // There is a known issue in which the ETag is not properly returned in cases where the request\n    // does not specify a compression type. Currently, it is required to include the header\n    // `Accept-Encoding: gzip` or equivalent in all requests.\n    // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\n    'Accept-Encoding': 'gzip',\n};\n/**\n * Class that facilitates sending requests to the Firebase Remote Config backend API.\n *\n * @internal\n */\nclass RemoteConfigApiClient {\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    getTemplate() {\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/remoteConfig`,\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return this.toRemoteConfigTemplate(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    getTemplateAtVersion(versionNumber) {\n        const data = { versionNumber: this.validateVersionNumber(versionNumber) };\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/remoteConfig`,\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n                data\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return this.toRemoteConfigTemplate(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    validateTemplate(template) {\n        template = this.validateInputRemoteConfigTemplate(template);\n        return this.sendPutRequest(template, template.etag, true)\n            .then((resp) => {\n            // validating a template returns an etag with the suffix -0 means that your update\n            // was successfully validated. We set the etag back to the original etag of the template\n            // to allow future operations.\n            this.validateEtag(resp.headers['etag']);\n            return this.toRemoteConfigTemplate(resp, template.etag);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    publishTemplate(template, options) {\n        template = this.validateInputRemoteConfigTemplate(template);\n        let ifMatch = template.etag;\n        if (options && options.force === true) {\n            // setting `If-Match: *` forces the Remote Config template to be updated\n            // and circumvent the ETag, and the protection from that it provides.\n            ifMatch = '*';\n        }\n        return this.sendPutRequest(template, ifMatch)\n            .then((resp) => {\n            return this.toRemoteConfigTemplate(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    rollback(versionNumber) {\n        const data = { versionNumber: this.validateVersionNumber(versionNumber) };\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'POST',\n                url: `${url}/remoteConfig:rollback`,\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n                data\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return this.toRemoteConfigTemplate(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    listVersions(options) {\n        if (typeof options !== 'undefined') {\n            options = this.validateListVersionsOptions(options);\n        }\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/remoteConfig:listVersions`,\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n                data: options\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return resp.data;\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    getServerTemplate() {\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/namespaces/firebase-server/serverRemoteConfig`,\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return this.toRemoteConfigServerTemplate(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    sendPutRequest(template, etag, validateOnly) {\n        let path = 'remoteConfig';\n        if (validateOnly) {\n            path += '?validate_only=true';\n        }\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'PUT',\n                url: `${url}/${path}`,\n                headers: { ...FIREBASE_REMOTE_CONFIG_HEADERS, 'If-Match': etag },\n                data: {\n                    conditions: template.conditions,\n                    parameters: template.parameters,\n                    parameterGroups: template.parameterGroups,\n                    version: template.version,\n                }\n            };\n            return this.httpClient.send(request);\n        });\n    }\n    getUrl() {\n        return this.getProjectIdPrefix()\n            .then((projectIdPrefix) => {\n            return `${FIREBASE_REMOTE_CONFIG_URL_BASE}/v1/${projectIdPrefix}`;\n        });\n    }\n    getProjectIdPrefix() {\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            this.projectIdPrefix = `projects/${projectId}`;\n            return this.projectIdPrefix;\n        });\n    }\n    toFirebaseError(err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        const response = err.response;\n        if (!response.isJson()) {\n            return new FirebaseRemoteConfigError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n        }\n        const error = response.data.error || {};\n        let code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        const message = error.message || `Unknown server error: ${response.text}`;\n        return new FirebaseRemoteConfigError(code, message);\n    }\n    /**\n     * Creates a RemoteConfigTemplate from the API response.\n     * If provided, customEtag is used instead of the etag returned in the API response.\n     *\n     * @param {HttpResponse} resp API response object.\n     * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\n     */\n    toRemoteConfigTemplate(resp, customEtag) {\n        const etag = (typeof customEtag === 'undefined') ? resp.headers['etag'] : customEtag;\n        this.validateEtag(etag);\n        return {\n            conditions: resp.data.conditions,\n            parameters: resp.data.parameters,\n            parameterGroups: resp.data.parameterGroups,\n            etag,\n            version: resp.data.version,\n        };\n    }\n    /**\n     * Creates a RemoteConfigServerTemplate from the API response.\n     * If provided, customEtag is used instead of the etag returned in the API response.\n     *\n     * @param {HttpResponse} resp API response object.\n     * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\n     */\n    toRemoteConfigServerTemplate(resp, customEtag) {\n        const etag = (typeof customEtag === 'undefined') ? resp.headers['etag'] : customEtag;\n        this.validateEtag(etag);\n        return {\n            conditions: resp.data.conditions,\n            parameters: resp.data.parameters,\n            etag,\n            version: resp.data.version,\n        };\n    }\n    /**\n     * Checks if the given RemoteConfigTemplate object is valid.\n     * The object must have valid parameters, parameter groups, conditions, and an etag.\n     * Removes output only properties from version metadata.\n     *\n     * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.\n     *\n     * @returns {RemoteConfigTemplate} The validated RemoteConfigTemplate object.\n     */\n    validateInputRemoteConfigTemplate(template) {\n        const templateCopy = (0, deep_copy_1.deepCopy)(template);\n        if (!validator.isNonNullObject(templateCopy)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(templateCopy)}`);\n        }\n        if (!validator.isNonEmptyString(templateCopy.etag)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');\n        }\n        if (!validator.isNonNullObject(templateCopy.parameters)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n        }\n        if (!validator.isNonNullObject(templateCopy.parameterGroups)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n        }\n        if (!validator.isArray(templateCopy.conditions)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n        }\n        if (typeof templateCopy.version !== 'undefined') {\n            // exclude output only properties and keep the only input property: description\n            templateCopy.version = { description: templateCopy.version.description };\n        }\n        return templateCopy;\n    }\n    /**\n     * Checks if a given version number is valid.\n     * A version number must be an integer or a string in int64 format.\n     * If valid, returns the string representation of the provided version number.\n     *\n     * @param {string|number} versionNumber A version number to be validated.\n     *\n     * @returns {string} The validated version number as a string.\n     */\n    validateVersionNumber(versionNumber, propertyName = 'versionNumber') {\n        if (!validator.isNonEmptyString(versionNumber) &&\n            !validator.isNumber(versionNumber)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be a non-empty string in int64 format or a number`);\n        }\n        if (!Number.isInteger(Number(versionNumber))) {\n            throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be an integer or a string in int64 format`);\n        }\n        return versionNumber.toString();\n    }\n    validateEtag(etag) {\n        if (!validator.isNonEmptyString(etag)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n        }\n    }\n    /**\n     * Checks if a given `ListVersionsOptions` object is valid. If successful, creates a copy of the\n     * options object and convert `startTime` and `endTime` to RFC3339 UTC \"Zulu\" format, if present.\n     *\n     * @param {ListVersionsOptions} options An options object to be validated.\n     *\n     * @returns {ListVersionsOptions} A copy of the provided options object with timestamps converted\n     * to UTC Zulu format.\n     */\n    validateListVersionsOptions(options) {\n        const optionsCopy = (0, deep_copy_1.deepCopy)(options);\n        if (!validator.isNonNullObject(optionsCopy)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'ListVersionsOptions must be a non-null object.');\n        }\n        if (typeof optionsCopy.pageSize !== 'undefined') {\n            if (!validator.isNumber(optionsCopy.pageSize)) {\n                throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number.');\n            }\n            if (optionsCopy.pageSize < 1 || optionsCopy.pageSize > 300) {\n                throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number between 1 and 300 (inclusive).');\n            }\n        }\n        if (typeof optionsCopy.pageToken !== 'undefined' && !validator.isNonEmptyString(optionsCopy.pageToken)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'pageToken must be a string value.');\n        }\n        if (typeof optionsCopy.endVersionNumber !== 'undefined') {\n            optionsCopy.endVersionNumber = this.validateVersionNumber(optionsCopy.endVersionNumber, 'endVersionNumber');\n        }\n        if (typeof optionsCopy.startTime !== 'undefined') {\n            if (!(optionsCopy.startTime instanceof Date) && !validator.isUTCDateString(optionsCopy.startTime)) {\n                throw new FirebaseRemoteConfigError('invalid-argument', 'startTime must be a valid Date object or a UTC date string.');\n            }\n            // Convert startTime to RFC3339 UTC \"Zulu\" format.\n            if (optionsCopy.startTime instanceof Date) {\n                optionsCopy.startTime = optionsCopy.startTime.toISOString();\n            }\n            else {\n                optionsCopy.startTime = new Date(optionsCopy.startTime).toISOString();\n            }\n        }\n        if (typeof optionsCopy.endTime !== 'undefined') {\n            if (!(optionsCopy.endTime instanceof Date) && !validator.isUTCDateString(optionsCopy.endTime)) {\n                throw new FirebaseRemoteConfigError('invalid-argument', 'endTime must be a valid Date object or a UTC date string.');\n            }\n            // Convert endTime to RFC3339 UTC \"Zulu\" format.\n            if (optionsCopy.endTime instanceof Date) {\n                optionsCopy.endTime = optionsCopy.endTime.toISOString();\n            }\n            else {\n                optionsCopy.endTime = new Date(optionsCopy.endTime).toISOString();\n            }\n        }\n        // Remove undefined fields from optionsCopy\n        Object.keys(optionsCopy).forEach(key => (typeof optionsCopy[key] === 'undefined') && delete optionsCopy[key]);\n        return optionsCopy;\n    }\n}\nexports.RemoteConfigApiClient = RemoteConfigApiClient;\nconst ERROR_CODE_MAPPING = {\n    ABORTED: 'aborted',\n    ALREADY_EXISTS: 'already-exists',\n    INVALID_ARGUMENT: 'invalid-argument',\n    INTERNAL: 'internal-error',\n    FAILED_PRECONDITION: 'failed-precondition',\n    NOT_FOUND: 'not-found',\n    OUT_OF_RANGE: 'out-of-range',\n    PERMISSION_DENIED: 'permission-denied',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'unauthenticated',\n    UNKNOWN: 'unknown-error',\n};\n/**\n * Firebase Remote Config error code structure. This extends PrefixedFirebaseError.\n *\n * @param {RemoteConfigErrorCode} code The error code.\n * @param {string} message The error message.\n * @constructor\n */\nclass FirebaseRemoteConfigError extends error_1.PrefixedFirebaseError {\n    constructor(code, message) {\n        super('remote-config', code, message);\n    }\n}\nexports.FirebaseRemoteConfigError = FirebaseRemoteConfigError;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14749, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/remote-config/remote-config-api.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomSignalOperator = exports.PercentConditionOperator = void 0;\n/**\n * Defines supported operators for percent conditions.\n */\nvar PercentConditionOperator;\n(function (PercentConditionOperator) {\n    /**\n     * A catchall error case.\n     */\n    PercentConditionOperator[\"UNKNOWN\"] = \"UNKNOWN\";\n    /**\n     * Target percentiles less than or equal to the target percent.\n     * A condition using this operator must specify microPercent.\n     */\n    PercentConditionOperator[\"LESS_OR_EQUAL\"] = \"LESS_OR_EQUAL\";\n    /**\n     * Target percentiles greater than the target percent.\n     * A condition using this operator must specify microPercent.\n     */\n    PercentConditionOperator[\"GREATER_THAN\"] = \"GREATER_THAN\";\n    /**\n     * Target percentiles within an interval defined by a lower bound and an\n     * upper bound. The lower bound is an exclusive (open) bound and the\n     * micro_percent_range_upper_bound is an inclusive (closed) bound.\n     * A condition using this operator must specify microPercentRange.\n     */\n    PercentConditionOperator[\"BETWEEN\"] = \"BETWEEN\";\n})(PercentConditionOperator || (exports.PercentConditionOperator = PercentConditionOperator = {}));\n/**\n * Defines supported operators for custom signal conditions.\n */\nvar CustomSignalOperator;\n(function (CustomSignalOperator) {\n    /**\n     * A catchall error case.\n     */\n    CustomSignalOperator[\"UNKNOWN\"] = \"UNKNOWN\";\n    /**\n     * Matches a numeric value less than the target value.\n     */\n    CustomSignalOperator[\"NUMERIC_LESS_THAN\"] = \"NUMERIC_LESS_THAN\";\n    /**\n     * Matches a numeric value less than or equal to the target value.\n     */\n    CustomSignalOperator[\"NUMERIC_LESS_EQUAL\"] = \"NUMERIC_LESS_EQUAL\";\n    /**\n     * Matches a numeric value equal to the target value.\n     */\n    CustomSignalOperator[\"NUMERIC_EQUAL\"] = \"NUMERIC_EQUAL\";\n    /**\n     * Matches a numeric value not equal to the target value.\n     */\n    CustomSignalOperator[\"NUMERIC_NOT_EQUAL\"] = \"NUMERIC_NOT_EQUAL\";\n    /**\n     * Matches a numeric value greater than the target value.\n     */\n    CustomSignalOperator[\"NUMERIC_GREATER_THAN\"] = \"NUMERIC_GREATER_THAN\";\n    /**\n     * Matches a numeric value greater than or equal to the target value.\n     */\n    CustomSignalOperator[\"NUMERIC_GREATER_EQUAL\"] = \"NUMERIC_GREATER_EQUAL\";\n    /**\n     * Matches if at least one of the target values is a substring of the actual custom\n     * signal value (e.g. \"abc\" contains the string \"a\", \"bc\").\n     */\n    CustomSignalOperator[\"STRING_CONTAINS\"] = \"STRING_CONTAINS\";\n    /**\n     * Matches if none of the target values is a substring of the actual custom signal value.\n     */\n    CustomSignalOperator[\"STRING_DOES_NOT_CONTAIN\"] = \"STRING_DOES_NOT_CONTAIN\";\n    /**\n     * Matches if the actual value exactly matches at least one of the target values.\n     */\n    CustomSignalOperator[\"STRING_EXACTLY_MATCHES\"] = \"STRING_EXACTLY_MATCHES\";\n    /**\n     * The target regular expression matches at least one of the actual values.\n     * The regex conforms to RE2 format. See https://github.com/google/re2/wiki/Syntax\n     */\n    CustomSignalOperator[\"STRING_CONTAINS_REGEX\"] = \"STRING_CONTAINS_REGEX\";\n    /**\n     * Matches if the actual version value is less than the target value.\n     */\n    CustomSignalOperator[\"SEMANTIC_VERSION_LESS_THAN\"] = \"SEMANTIC_VERSION_LESS_THAN\";\n    /**\n     * Matches if the actual version value is less than or equal to the target value.\n     */\n    CustomSignalOperator[\"SEMANTIC_VERSION_LESS_EQUAL\"] = \"SEMANTIC_VERSION_LESS_EQUAL\";\n    /**\n     * Matches if the actual version value is equal to the target value.\n     */\n    CustomSignalOperator[\"SEMANTIC_VERSION_EQUAL\"] = \"SEMANTIC_VERSION_EQUAL\";\n    /**\n     * Matches if the actual version value is not equal to the target value.\n     */\n    CustomSignalOperator[\"SEMANTIC_VERSION_NOT_EQUAL\"] = \"SEMANTIC_VERSION_NOT_EQUAL\";\n    /**\n     * Matches if the actual version value is greater than the target value.\n     */\n    CustomSignalOperator[\"SEMANTIC_VERSION_GREATER_THAN\"] = \"SEMANTIC_VERSION_GREATER_THAN\";\n    /**\n     * Matches if the actual version value is greater than or equal to the target value.\n     */\n    CustomSignalOperator[\"SEMANTIC_VERSION_GREATER_EQUAL\"] = \"SEMANTIC_VERSION_GREATER_EQUAL\";\n})(CustomSignalOperator || (exports.CustomSignalOperator = CustomSignalOperator = {}));\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,QAAQ,wBAAwB,GAAG,KAAK;AACvE;;CAEC,GACD,IAAI;AACJ,CAAC,SAAU,wBAAwB;IAC/B;;KAEC,GACD,wBAAwB,CAAC,UAAU,GAAG;IACtC;;;KAGC,GACD,wBAAwB,CAAC,gBAAgB,GAAG;IAC5C;;;KAGC,GACD,wBAAwB,CAAC,eAAe,GAAG;IAC3C;;;;;KAKC,GACD,wBAAwB,CAAC,UAAU,GAAG;AAC1C,CAAC,EAAE,4BAA4B,CAAC,QAAQ,wBAAwB,GAAG,2BAA2B,CAAC,CAAC;AAChG;;CAEC,GACD,IAAI;AACJ,CAAC,SAAU,oBAAoB;IAC3B;;KAEC,GACD,oBAAoB,CAAC,UAAU,GAAG;IAClC;;KAEC,GACD,oBAAoB,CAAC,oBAAoB,GAAG;IAC5C;;KAEC,GACD,oBAAoB,CAAC,qBAAqB,GAAG;IAC7C;;KAEC,GACD,oBAAoB,CAAC,gBAAgB,GAAG;IACxC;;KAEC,GACD,oBAAoB,CAAC,oBAAoB,GAAG;IAC5C;;KAEC,GACD,oBAAoB,CAAC,uBAAuB,GAAG;IAC/C;;KAEC,GACD,oBAAoB,CAAC,wBAAwB,GAAG;IAChD;;;KAGC,GACD,oBAAoB,CAAC,kBAAkB,GAAG;IAC1C;;KAEC,GACD,oBAAoB,CAAC,0BAA0B,GAAG;IAClD;;KAEC,GACD,oBAAoB,CAAC,yBAAyB,GAAG;IACjD;;;KAGC,GACD,oBAAoB,CAAC,wBAAwB,GAAG;IAChD;;KAEC,GACD,oBAAoB,CAAC,6BAA6B,GAAG;IACrD;;KAEC,GACD,oBAAoB,CAAC,8BAA8B,GAAG;IACtD;;KAEC,GACD,oBAAoB,CAAC,yBAAyB,GAAG;IACjD;;KAEC,GACD,oBAAoB,CAAC,6BAA6B,GAAG;IACrD;;KAEC,GACD,oBAAoB,CAAC,gCAAgC,GAAG;IACxD;;KAEC,GACD,oBAAoB,CAAC,iCAAiC,GAAG;AAC7D,CAAC,EAAE,wBAAwB,CAAC,QAAQ,oBAAoB,GAAG,uBAAuB,CAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14853, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/remote-config/condition-evaluator-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n/*!\n * Copyright 2024 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConditionEvaluator = void 0;\nconst remote_config_api_1 = require(\"./remote-config-api\");\nconst farmhash = require(\"farmhash-modern\");\n/**\n * Encapsulates condition evaluation logic to simplify organization and\n * facilitate testing.\n *\n * @internal\n */\nclass ConditionEvaluator {\n    evaluateConditions(namedConditions, context) {\n        // The order of the conditions is significant.\n        // A JS Map preserves the order of insertion (\"Iteration happens in insertion order\"\n        // - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#description).\n        const evaluatedConditions = new Map();\n        for (const namedCondition of namedConditions) {\n            evaluatedConditions.set(namedCondition.name, this.evaluateCondition(namedCondition.condition, context));\n        }\n        return evaluatedConditions;\n    }\n    evaluateCondition(condition, context, nestingLevel = 0) {\n        if (nestingLevel >= ConditionEvaluator.MAX_CONDITION_RECURSION_DEPTH) {\n            // TODO: add logging once we have a wrapped logger.\n            return false;\n        }\n        if (condition.orCondition) {\n            return this.evaluateOrCondition(condition.orCondition, context, nestingLevel + 1);\n        }\n        if (condition.andCondition) {\n            return this.evaluateAndCondition(condition.andCondition, context, nestingLevel + 1);\n        }\n        if (condition.true) {\n            return true;\n        }\n        if (condition.false) {\n            return false;\n        }\n        if (condition.percent) {\n            return this.evaluatePercentCondition(condition.percent, context);\n        }\n        if (condition.customSignal) {\n            return this.evaluateCustomSignalCondition(condition.customSignal, context);\n        }\n        // TODO: add logging once we have a wrapped logger.\n        return false;\n    }\n    evaluateOrCondition(orCondition, context, nestingLevel) {\n        const subConditions = orCondition.conditions || [];\n        for (const subCondition of subConditions) {\n            // Recursive call.\n            const result = this.evaluateCondition(subCondition, context, nestingLevel + 1);\n            // Short-circuit the evaluation result for true.\n            if (result) {\n                return result;\n            }\n        }\n        return false;\n    }\n    evaluateAndCondition(andCondition, context, nestingLevel) {\n        const subConditions = andCondition.conditions || [];\n        for (const subCondition of subConditions) {\n            // Recursive call.\n            const result = this.evaluateCondition(subCondition, context, nestingLevel + 1);\n            // Short-circuit the evaluation result for false.\n            if (!result) {\n                return result;\n            }\n        }\n        return true;\n    }\n    evaluatePercentCondition(percentCondition, context) {\n        if (!context.randomizationId) {\n            // TODO: add logging once we have a wrapped logger.\n            return false;\n        }\n        // This is the entry point for processing percent condition data from the response.\n        // We're not using a proto library, so we can't assume undefined fields have\n        // default values.\n        const { seed, percentOperator, microPercent, microPercentRange } = percentCondition;\n        if (!percentOperator) {\n            // TODO: add logging once we have a wrapped logger.\n            return false;\n        }\n        const normalizedMicroPercent = microPercent || 0;\n        const normalizedMicroPercentUpperBound = microPercentRange?.microPercentUpperBound || 0;\n        const normalizedMicroPercentLowerBound = microPercentRange?.microPercentLowerBound || 0;\n        const seedPrefix = seed && seed.length > 0 ? `${seed}.` : '';\n        const stringToHash = `${seedPrefix}${context.randomizationId}`;\n        const hash64 = ConditionEvaluator.hashSeededRandomizationId(stringToHash);\n        const instanceMicroPercentile = hash64 % BigInt(100 * 1000000);\n        switch (percentOperator) {\n            case remote_config_api_1.PercentConditionOperator.LESS_OR_EQUAL:\n                return instanceMicroPercentile <= normalizedMicroPercent;\n            case remote_config_api_1.PercentConditionOperator.GREATER_THAN:\n                return instanceMicroPercentile > normalizedMicroPercent;\n            case remote_config_api_1.PercentConditionOperator.BETWEEN:\n                return instanceMicroPercentile > normalizedMicroPercentLowerBound\n                    && instanceMicroPercentile <= normalizedMicroPercentUpperBound;\n            case remote_config_api_1.PercentConditionOperator.UNKNOWN:\n            default:\n                break;\n        }\n        // TODO: add logging once we have a wrapped logger.\n        return false;\n    }\n    static hashSeededRandomizationId(seededRandomizationId) {\n        // For consistency with the Remote Config fetch endpoint's percent condition behavior\n        // we use Farmhash's fingerprint64 algorithm and interpret the resulting unsigned value\n        // as a signed value.\n        let hash64 = BigInt.asIntN(64, farmhash.fingerprint64(seededRandomizationId));\n        // Manually negate the hash if its value is less than 0, since Math.abs doesn't\n        // support BigInt.\n        if (hash64 < 0) {\n            hash64 = -hash64;\n        }\n        return hash64;\n    }\n    evaluateCustomSignalCondition(customSignalCondition, context) {\n        const { customSignalOperator, customSignalKey, targetCustomSignalValues, } = customSignalCondition;\n        if (!customSignalOperator || !customSignalKey || !targetCustomSignalValues) {\n            // TODO: add logging once we have a wrapped logger.\n            return false;\n        }\n        if (!targetCustomSignalValues.length) {\n            return false;\n        }\n        // Extract the value of the signal from the evaluation context.\n        const actualCustomSignalValue = context[customSignalKey];\n        if (actualCustomSignalValue == undefined) {\n            return false;\n        }\n        switch (customSignalOperator) {\n            case remote_config_api_1.CustomSignalOperator.STRING_CONTAINS:\n                return compareStrings(targetCustomSignalValues, actualCustomSignalValue, (target, actual) => actual.includes(target));\n            case remote_config_api_1.CustomSignalOperator.STRING_DOES_NOT_CONTAIN:\n                return !compareStrings(targetCustomSignalValues, actualCustomSignalValue, (target, actual) => actual.includes(target));\n            case remote_config_api_1.CustomSignalOperator.STRING_EXACTLY_MATCHES:\n                return compareStrings(targetCustomSignalValues, actualCustomSignalValue, (target, actual) => actual.trim() === target.trim());\n            case remote_config_api_1.CustomSignalOperator.STRING_CONTAINS_REGEX:\n                return compareStrings(targetCustomSignalValues, actualCustomSignalValue, (target, actual) => new RegExp(target).test(actual));\n            // For numeric operators only one target value is allowed.\n            case remote_config_api_1.CustomSignalOperator.NUMERIC_LESS_THAN:\n                return compareNumbers(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r < 0);\n            case remote_config_api_1.CustomSignalOperator.NUMERIC_LESS_EQUAL:\n                return compareNumbers(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r <= 0);\n            case remote_config_api_1.CustomSignalOperator.NUMERIC_EQUAL:\n                return compareNumbers(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r === 0);\n            case remote_config_api_1.CustomSignalOperator.NUMERIC_NOT_EQUAL:\n                return compareNumbers(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r !== 0);\n            case remote_config_api_1.CustomSignalOperator.NUMERIC_GREATER_THAN:\n                return compareNumbers(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r > 0);\n            case remote_config_api_1.CustomSignalOperator.NUMERIC_GREATER_EQUAL:\n                return compareNumbers(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r >= 0);\n            // For semantic operators only one target value is allowed.\n            case remote_config_api_1.CustomSignalOperator.SEMANTIC_VERSION_LESS_THAN:\n                return compareSemanticVersions(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r < 0);\n            case remote_config_api_1.CustomSignalOperator.SEMANTIC_VERSION_LESS_EQUAL:\n                return compareSemanticVersions(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r <= 0);\n            case remote_config_api_1.CustomSignalOperator.SEMANTIC_VERSION_EQUAL:\n                return compareSemanticVersions(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r === 0);\n            case remote_config_api_1.CustomSignalOperator.SEMANTIC_VERSION_NOT_EQUAL:\n                return compareSemanticVersions(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r !== 0);\n            case remote_config_api_1.CustomSignalOperator.SEMANTIC_VERSION_GREATER_THAN:\n                return compareSemanticVersions(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r > 0);\n            case remote_config_api_1.CustomSignalOperator.SEMANTIC_VERSION_GREATER_EQUAL:\n                return compareSemanticVersions(actualCustomSignalValue, targetCustomSignalValues[0], (r) => r >= 0);\n        }\n        // TODO: add logging once we have a wrapped logger.\n        return false;\n    }\n}\nexports.ConditionEvaluator = ConditionEvaluator;\nConditionEvaluator.MAX_CONDITION_RECURSION_DEPTH = 10;\n// Compares the actual string value of a signal against a list of target\n// values. If any of the target values are a match, returns true.\nfunction compareStrings(targetValues, actualValue, predicateFn) {\n    const actual = String(actualValue);\n    return targetValues.some((target) => predicateFn(target, actual));\n}\n// Compares two numbers against each other.\n// Calls the predicate function with  -1, 0, 1 if actual is less than, equal to, or greater than target.\nfunction compareNumbers(actualValue, targetValue, predicateFn) {\n    const target = Number(targetValue);\n    const actual = Number(actualValue);\n    if (isNaN(target) || isNaN(actual)) {\n        return false;\n    }\n    return predicateFn(actual < target ? -1 : actual > target ? 1 : 0);\n}\n// Max number of segments a numeric version can have. This is enforced by the server as well.\nconst MAX_LENGTH = 5;\n// Compares semantic version strings against each other.\n// Calls the predicate function with  -1, 0, 1 if actual is less than, equal to, or greater than target.\nfunction compareSemanticVersions(actualValue, targetValue, predicateFn) {\n    const version1 = String(actualValue).split('.').map(Number);\n    const version2 = targetValue.split('.').map(Number);\n    for (let i = 0; i < MAX_LENGTH; i++) {\n        // Check to see if segments are present. Note that these may be present and be NaN.\n        const version1HasSegment = version1[i] !== undefined;\n        const version2HasSegment = version2[i] !== undefined;\n        // If both are undefined, we've consumed everything and they're equal.\n        if (!version1HasSegment && !version2HasSegment)\n            return predicateFn(0);\n        // Insert zeros if undefined for easier comparison.\n        if (!version1HasSegment)\n            version1[i] = 0;\n        if (!version2HasSegment)\n            version2[i] = 0;\n        // At this point, if either segment is NaN, we return false directly.\n        if (isNaN(version1[i]) || isNaN(version2[i]))\n            return false;\n        // Check if we have a difference in segments. Otherwise continue to next segment.\n        if (version1[i] < version2[i])\n            return predicateFn(-1);\n        if (version1[i] > version2[i])\n            return predicateFn(1);\n    }\n    return false;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15087, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/remote-config/internal/value-impl.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n/*!\n * Copyright 2024 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueImpl = void 0;\n/**\n * Implements type-safe getters for parameter values.\n *\n * Visible for testing.\n *\n * @internal\n */\nclass ValueImpl {\n    constructor(source, value = ValueImpl.DEFAULT_VALUE_FOR_STRING) {\n        this.source = source;\n        this.value = value;\n    }\n    asString() {\n        return this.value;\n    }\n    asBoolean() {\n        if (this.source === 'static') {\n            return ValueImpl.DEFAULT_VALUE_FOR_BOOLEAN;\n        }\n        return ValueImpl.BOOLEAN_TRUTHY_VALUES.indexOf(this.value.toLowerCase()) >= 0;\n    }\n    asNumber() {\n        if (this.source === 'static') {\n            return ValueImpl.DEFAULT_VALUE_FOR_NUMBER;\n        }\n        const num = Number(this.value);\n        if (isNaN(num)) {\n            return ValueImpl.DEFAULT_VALUE_FOR_NUMBER;\n        }\n        return num;\n    }\n    getSource() {\n        return this.source;\n    }\n}\nexports.ValueImpl = ValueImpl;\nValueImpl.DEFAULT_VALUE_FOR_BOOLEAN = false;\nValueImpl.DEFAULT_VALUE_FOR_STRING = '';\nValueImpl.DEFAULT_VALUE_FOR_NUMBER = 0;\nValueImpl.BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;;;;;;;;;;;;;;CAcC,GACD;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,SAAS,GAAG,KAAK;AACzB;;;;;;CAMC,GACD,MAAM;IACF,YAAY,MAAM,EAAE,QAAQ,UAAU,wBAAwB,CAAE;QAC5D,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,KAAK,GAAG;IACjB;IACA,WAAW;QACP,OAAO,IAAI,CAAC,KAAK;IACrB;IACA,YAAY;QACR,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU;YAC1B,OAAO,UAAU,yBAAyB;QAC9C;QACA,OAAO,UAAU,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,OAAO;IAChF;IACA,WAAW;QACP,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU;YAC1B,OAAO,UAAU,wBAAwB;QAC7C;QACA,MAAM,MAAM,OAAO,IAAI,CAAC,KAAK;QAC7B,IAAI,MAAM,MAAM;YACZ,OAAO,UAAU,wBAAwB;QAC7C;QACA,OAAO;IACX;IACA,YAAY;QACR,OAAO,IAAI,CAAC,MAAM;IACtB;AACJ;AACA,QAAQ,SAAS,GAAG;AACpB,UAAU,yBAAyB,GAAG;AACtC,UAAU,wBAAwB,GAAG;AACrC,UAAU,wBAAwB,GAAG;AACrC,UAAU,qBAAqB,GAAG;IAAC;IAAK;IAAQ;IAAK;IAAO;IAAK;CAAK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15157, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/remote-config/remote-config.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteConfig = void 0;\nconst validator = require(\"../utils/validator\");\nconst remote_config_api_client_internal_1 = require(\"./remote-config-api-client-internal\");\nconst condition_evaluator_internal_1 = require(\"./condition-evaluator-internal\");\nconst value_impl_1 = require(\"./internal/value-impl\");\n/**\n * The Firebase `RemoteConfig` service interface.\n */\nclass RemoteConfig {\n    /**\n     * @param app - The app for this RemoteConfig service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        this.app = app;\n        this.client = new remote_config_api_client_internal_1.RemoteConfigApiClient(app);\n    }\n    /**\n     * Gets the current active version of the {@link RemoteConfigTemplate} of the project.\n     *\n     * @returns A promise that fulfills with a `RemoteConfigTemplate`.\n     */\n    getTemplate() {\n        return this.client.getTemplate()\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Gets the requested version of the {@link RemoteConfigTemplate} of the project.\n     *\n     * @param versionNumber - Version number of the Remote Config template to look up.\n     *\n     * @returns A promise that fulfills with a `RemoteConfigTemplate`.\n     */\n    getTemplateAtVersion(versionNumber) {\n        return this.client.getTemplateAtVersion(versionNumber)\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Validates a {@link RemoteConfigTemplate}.\n     *\n     * @param template - The Remote Config template to be validated.\n     * @returns A promise that fulfills with the validated `RemoteConfigTemplate`.\n     */\n    validateTemplate(template) {\n        return this.client.validateTemplate(template)\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Publishes a Remote Config template.\n     *\n     * @param template - The Remote Config template to be published.\n     * @param options - Optional options object when publishing a Remote Config template:\n     *    - `force`: Setting this to `true` forces the Remote Config template to\n     *      be updated and circumvent the ETag. This approach is not recommended\n     *      because it risks causing the loss of updates to your Remote Config\n     *      template if multiple clients are updating the Remote Config template.\n     *      See {@link https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates |\n     *      ETag usage and forced updates}.\n     *\n     * @returns A Promise that fulfills with the published `RemoteConfigTemplate`.\n     */\n    publishTemplate(template, options) {\n        return this.client.publishTemplate(template, options)\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Rolls back a project's published Remote Config template to the specified version.\n     * A rollback is equivalent to getting a previously published Remote Config\n     * template and re-publishing it using a force update.\n     *\n     * @param versionNumber - The version number of the Remote Config template to roll back to.\n     *    The specified version number must be lower than the current version number, and not have\n     *    been deleted due to staleness. Only the last 300 versions are stored.\n     *    All versions that correspond to non-active Remote Config templates (that is, all except the\n     *    template that is being fetched by clients) are also deleted if they are more than 90 days old.\n     * @returns A promise that fulfills with the published `RemoteConfigTemplate`.\n     */\n    rollback(versionNumber) {\n        return this.client.rollback(versionNumber)\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Gets a list of Remote Config template versions that have been published, sorted in reverse\n     * chronological order. Only the last 300 versions are stored.\n     * All versions that correspond to non-active Remote Config templates (i.e., all except the\n     * template that is being fetched by clients) are also deleted if they are older than 90 days.\n     *\n     * @param options - Optional options object for getting a list of versions.\n     * @returns A promise that fulfills with a `ListVersionsResult`.\n     */\n    listVersions(options) {\n        return this.client.listVersions(options)\n            .then((listVersionsResponse) => {\n            return {\n                versions: listVersionsResponse.versions?.map(version => new VersionImpl(version)) ?? [],\n                nextPageToken: listVersionsResponse.nextPageToken,\n            };\n        });\n    }\n    /**\n     * Creates and returns a new Remote Config template from a JSON string.\n     *\n     * @param json - The JSON string to populate a Remote Config template.\n     *\n     * @returns A new template instance.\n     */\n    createTemplateFromJSON(json) {\n        if (!validator.isNonEmptyString(json)) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'JSON string must be a valid non-empty string');\n        }\n        let template;\n        try {\n            template = JSON.parse(json);\n        }\n        catch (e) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Failed to parse the JSON string: ${json}. ` + e);\n        }\n        return new RemoteConfigTemplateImpl(template);\n    }\n    /**\n     * Instantiates {@link ServerTemplate} and then fetches and caches the latest\n     * template version of the project.\n     */\n    async getServerTemplate(options) {\n        const template = this.initServerTemplate(options);\n        await template.load();\n        return template;\n    }\n    /**\n     * Synchronously instantiates {@link ServerTemplate}.\n     */\n    initServerTemplate(options) {\n        const template = new ServerTemplateImpl(this.client, new condition_evaluator_internal_1.ConditionEvaluator(), options?.defaultConfig);\n        if (options?.template) {\n            template.set(options?.template);\n        }\n        return template;\n    }\n}\nexports.RemoteConfig = RemoteConfig;\n/**\n * Remote Config template internal implementation.\n */\nclass RemoteConfigTemplateImpl {\n    constructor(config) {\n        if (!validator.isNonNullObject(config) ||\n            !validator.isNonEmptyString(config.etag)) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(config)}`);\n        }\n        this.etagInternal = config.etag;\n        if (typeof config.parameters !== 'undefined') {\n            if (!validator.isNonNullObject(config.parameters)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n            }\n            this.parameters = config.parameters;\n        }\n        else {\n            this.parameters = {};\n        }\n        if (typeof config.parameterGroups !== 'undefined') {\n            if (!validator.isNonNullObject(config.parameterGroups)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n            }\n            this.parameterGroups = config.parameterGroups;\n        }\n        else {\n            this.parameterGroups = {};\n        }\n        if (typeof config.conditions !== 'undefined') {\n            if (!validator.isArray(config.conditions)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n            }\n            this.conditions = config.conditions;\n        }\n        else {\n            this.conditions = [];\n        }\n        if (typeof config.version !== 'undefined') {\n            this.version = new VersionImpl(config.version);\n        }\n    }\n    /**\n     * Gets the ETag of the template.\n     *\n     * @returns The ETag of the Remote Config template.\n     */\n    get etag() {\n        return this.etagInternal;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return {\n            conditions: this.conditions,\n            parameters: this.parameters,\n            parameterGroups: this.parameterGroups,\n            etag: this.etag,\n            version: this.version,\n        };\n    }\n}\n/**\n * Remote Config dataplane template data implementation.\n */\nclass ServerTemplateImpl {\n    constructor(apiClient, conditionEvaluator, defaultConfig = {}) {\n        this.apiClient = apiClient;\n        this.conditionEvaluator = conditionEvaluator;\n        this.defaultConfig = defaultConfig;\n        this.stringifiedDefaultConfig = {};\n        // RC stores all remote values as string, but it's more intuitive\n        // to declare default values with specific types, so this converts\n        // the external declaration to an internal string representation.\n        for (const key in defaultConfig) {\n            this.stringifiedDefaultConfig[key] = String(defaultConfig[key]);\n        }\n    }\n    /**\n     * Fetches and caches the current active version of the project's {@link ServerTemplate}.\n     */\n    load() {\n        return this.apiClient.getServerTemplate()\n            .then((template) => {\n            this.cache = new ServerTemplateDataImpl(template);\n        });\n    }\n    /**\n     * Parses a {@link ServerTemplateDataType} and caches it.\n     */\n    set(template) {\n        let parsed;\n        if (validator.isString(template)) {\n            try {\n                parsed = JSON.parse(template);\n            }\n            catch (e) {\n                // Transforms JSON parse errors to Firebase error.\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Failed to parse the JSON string: ${template}. ` + e);\n            }\n        }\n        else {\n            parsed = template;\n        }\n        // Throws template parse errors.\n        this.cache = new ServerTemplateDataImpl(parsed);\n    }\n    /**\n     * Evaluates the current template in cache to produce a {@link ServerConfig}.\n     */\n    evaluate(context = {}) {\n        if (!this.cache) {\n            // This is the only place we should throw during evaluation, since it's under the\n            // control of application logic. To preserve forward-compatibility, we should only\n            // return false in cases where the SDK is unsure how to evaluate the fetched template.\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('failed-precondition', 'No Remote Config Server template in cache. Call load() before calling evaluate().');\n        }\n        const evaluatedConditions = this.conditionEvaluator.evaluateConditions(this.cache.conditions, context);\n        const configValues = {};\n        // Initializes config Value objects with default values.\n        for (const key in this.stringifiedDefaultConfig) {\n            configValues[key] = new value_impl_1.ValueImpl('default', this.stringifiedDefaultConfig[key]);\n        }\n        // Overlays config Value objects derived by evaluating the template.\n        for (const [key, parameter] of Object.entries(this.cache.parameters)) {\n            const { conditionalValues, defaultValue } = parameter;\n            // Supports parameters with no conditional values.\n            const normalizedConditionalValues = conditionalValues || {};\n            let parameterValueWrapper = undefined;\n            // Iterates in order over condition list. If there is a value associated\n            // with a condition, this checks if the condition is true.\n            for (const [conditionName, conditionEvaluation] of evaluatedConditions) {\n                if (normalizedConditionalValues[conditionName] && conditionEvaluation) {\n                    parameterValueWrapper = normalizedConditionalValues[conditionName];\n                    break;\n                }\n            }\n            if (parameterValueWrapper && parameterValueWrapper.useInAppDefault) {\n                // TODO: add logging once we have a wrapped logger.\n                continue;\n            }\n            if (parameterValueWrapper) {\n                const parameterValue = parameterValueWrapper.value;\n                configValues[key] = new value_impl_1.ValueImpl('remote', parameterValue);\n                continue;\n            }\n            if (!defaultValue) {\n                // TODO: add logging once we have a wrapped logger.\n                continue;\n            }\n            if (defaultValue.useInAppDefault) {\n                // TODO: add logging once we have a wrapped logger.\n                continue;\n            }\n            const parameterDefaultValue = defaultValue.value;\n            configValues[key] = new value_impl_1.ValueImpl('remote', parameterDefaultValue);\n        }\n        return new ServerConfigImpl(configValues);\n    }\n    /**\n     * @returns JSON representation of the server template\n     */\n    toJSON() {\n        return this.cache;\n    }\n}\nclass ServerConfigImpl {\n    constructor(configValues) {\n        this.configValues = configValues;\n    }\n    getBoolean(key) {\n        return this.getValue(key).asBoolean();\n    }\n    getNumber(key) {\n        return this.getValue(key).asNumber();\n    }\n    getString(key) {\n        return this.getValue(key).asString();\n    }\n    getValue(key) {\n        return this.configValues[key] || new value_impl_1.ValueImpl('static');\n    }\n}\n/**\n * Remote Config dataplane template data implementation.\n */\nclass ServerTemplateDataImpl {\n    constructor(template) {\n        if (!validator.isNonNullObject(template) ||\n            !validator.isNonEmptyString(template.etag)) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(template)}`);\n        }\n        this.etag = template.etag;\n        if (typeof template.parameters !== 'undefined') {\n            if (!validator.isNonNullObject(template.parameters)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n            }\n            this.parameters = template.parameters;\n        }\n        else {\n            this.parameters = {};\n        }\n        if (typeof template.conditions !== 'undefined') {\n            if (!validator.isArray(template.conditions)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n            }\n            this.conditions = template.conditions;\n        }\n        else {\n            this.conditions = [];\n        }\n        if (typeof template.version !== 'undefined') {\n            this.version = new VersionImpl(template.version);\n        }\n    }\n}\n/**\n* Remote Config Version internal implementation.\n*/\nclass VersionImpl {\n    constructor(version) {\n        if (!validator.isNonNullObject(version)) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config version instance: ${JSON.stringify(version)}`);\n        }\n        if (typeof version.versionNumber !== 'undefined') {\n            if (!validator.isNonEmptyString(version.versionNumber) &&\n                !validator.isNumber(version.versionNumber)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be a non-empty string in int64 format or a number');\n            }\n            if (!Number.isInteger(Number(version.versionNumber))) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be an integer or a string in int64 format');\n            }\n            this.versionNumber = version.versionNumber;\n        }\n        if (typeof version.updateOrigin !== 'undefined') {\n            if (!validator.isNonEmptyString(version.updateOrigin)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update origin must be a non-empty string');\n            }\n            this.updateOrigin = version.updateOrigin;\n        }\n        if (typeof version.updateType !== 'undefined') {\n            if (!validator.isNonEmptyString(version.updateType)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update type must be a non-empty string');\n            }\n            this.updateType = version.updateType;\n        }\n        if (typeof version.updateUser !== 'undefined') {\n            if (!validator.isNonNullObject(version.updateUser)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update user must be a non-null object');\n            }\n            this.updateUser = version.updateUser;\n        }\n        if (typeof version.description !== 'undefined') {\n            if (!validator.isNonEmptyString(version.description)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version description must be a non-empty string');\n            }\n            this.description = version.description;\n        }\n        if (typeof version.rollbackSource !== 'undefined') {\n            if (!validator.isNonEmptyString(version.rollbackSource)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version rollback source must be a non-empty string');\n            }\n            this.rollbackSource = version.rollbackSource;\n        }\n        if (typeof version.isLegacy !== 'undefined') {\n            if (!validator.isBoolean(version.isLegacy)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version.isLegacy must be a boolean');\n            }\n            this.isLegacy = version.isLegacy;\n        }\n        // The backend API provides timestamps in ISO date strings. The Admin SDK exposes timestamps\n        // in UTC date strings. If a developer uses a previously obtained template with UTC timestamps\n        // we could still validate it below.\n        if (typeof version.updateTime !== 'undefined') {\n            if (!this.isValidTimestamp(version.updateTime)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update time must be a valid date string');\n            }\n            this.updateTime = new Date(version.updateTime).toUTCString();\n        }\n    }\n    /**\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return {\n            versionNumber: this.versionNumber,\n            updateOrigin: this.updateOrigin,\n            updateType: this.updateType,\n            updateUser: this.updateUser,\n            description: this.description,\n            rollbackSource: this.rollbackSource,\n            isLegacy: this.isLegacy,\n            updateTime: this.updateTime,\n        };\n    }\n    isValidTimestamp(timestamp) {\n        // This validation fails for timestamps earlier than January 1, 1970 and considers strings\n        // such as \"1.2\" as valid timestamps.\n        return validator.isNonEmptyString(timestamp) && (new Date(timestamp)).getTime() > 0;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15591, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app-check/app-check-api-client-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseAppCheckError = exports.APP_CHECK_ERROR_CODE_MAPPING = exports.AppCheckApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n// App Check backend constants\nconst FIREBASE_APP_CHECK_V1_API_URL_FORMAT = 'https://firebaseappcheck.googleapis.com/v1/projects/{projectId}/apps/{appId}:exchangeCustomToken';\nconst ONE_TIME_USE_TOKEN_VERIFICATION_URL_FORMAT = 'https://firebaseappcheck.googleapis.com/v1beta/projects/{projectId}:verifyAppCheckToken';\nconst FIREBASE_APP_CHECK_CONFIG_HEADERS = {\n    'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`\n};\n/**\n * Class that facilitates sending requests to the Firebase App Check backend API.\n *\n * @internal\n */\nclass AppCheckApiClient {\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new FirebaseAppCheckError('invalid-argument', 'First argument passed to admin.appCheck() must be a valid Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    /**\n     * Exchange a signed custom token to App Check token\n     *\n     * @param customToken - The custom token to be exchanged.\n     * @param appId - The mobile App ID.\n     * @returns A promise that fulfills with a `AppCheckToken`.\n     */\n    exchangeToken(customToken, appId) {\n        if (!validator.isNonEmptyString(appId)) {\n            throw new FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');\n        }\n        if (!validator.isNonEmptyString(customToken)) {\n            throw new FirebaseAppCheckError('invalid-argument', '`customToken` must be a non-empty string.');\n        }\n        return this.getUrl(appId)\n            .then((url) => {\n            const request = {\n                method: 'POST',\n                url,\n                headers: FIREBASE_APP_CHECK_CONFIG_HEADERS,\n                data: { customToken }\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return this.toAppCheckToken(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    verifyReplayProtection(token) {\n        if (!validator.isNonEmptyString(token)) {\n            throw new FirebaseAppCheckError('invalid-argument', '`token` must be a non-empty string.');\n        }\n        return this.getVerifyTokenUrl()\n            .then((url) => {\n            const request = {\n                method: 'POST',\n                url,\n                headers: FIREBASE_APP_CHECK_CONFIG_HEADERS,\n                data: { app_check_token: token }\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            if (typeof resp.data.alreadyConsumed !== 'undefined'\n                && !validator.isBoolean(resp.data?.alreadyConsumed)) {\n                throw new FirebaseAppCheckError('invalid-argument', '`alreadyConsumed` must be a boolean value.');\n            }\n            return resp.data.alreadyConsumed || false;\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    getUrl(appId) {\n        return this.getProjectId()\n            .then((projectId) => {\n            const urlParams = {\n                projectId,\n                appId,\n            };\n            const baseUrl = utils.formatString(FIREBASE_APP_CHECK_V1_API_URL_FORMAT, urlParams);\n            return utils.formatString(baseUrl);\n        });\n    }\n    getVerifyTokenUrl() {\n        return this.getProjectId()\n            .then((projectId) => {\n            const urlParams = {\n                projectId\n            };\n            const baseUrl = utils.formatString(ONE_TIME_USE_TOKEN_VERIFICATION_URL_FORMAT, urlParams);\n            return utils.formatString(baseUrl);\n        });\n    }\n    getProjectId() {\n        if (this.projectId) {\n            return Promise.resolve(this.projectId);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new FirebaseAppCheckError('unknown-error', 'Failed to determine project ID. Initialize the '\n                    + 'SDK with service account credentials or set project ID as an app option. '\n                    + 'Alternatively, set the GOOGLE_CLOUD_PROJECT environment variable.');\n            }\n            this.projectId = projectId;\n            return projectId;\n        });\n    }\n    toFirebaseError(err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        const response = err.response;\n        if (!response.isJson()) {\n            return new FirebaseAppCheckError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n        }\n        const error = response.data.error || {};\n        let code = 'unknown-error';\n        if (error.status && error.status in exports.APP_CHECK_ERROR_CODE_MAPPING) {\n            code = exports.APP_CHECK_ERROR_CODE_MAPPING[error.status];\n        }\n        const message = error.message || `Unknown server error: ${response.text}`;\n        return new FirebaseAppCheckError(code, message);\n    }\n    /**\n     * Creates an AppCheckToken from the API response.\n     *\n     * @param resp - API response object.\n     * @returns An AppCheckToken instance.\n     */\n    toAppCheckToken(resp) {\n        const token = resp.data.token;\n        // `ttl` is a string with the suffix \"s\" preceded by the number of seconds,\n        // with nanoseconds expressed as fractional seconds.\n        const ttlMillis = this.stringToMilliseconds(resp.data.ttl);\n        return {\n            token,\n            ttlMillis\n        };\n    }\n    /**\n     * Converts a duration string with the suffix `s` to milliseconds.\n     *\n     * @param duration - The duration as a string with the suffix \"s\" preceded by the\n     * number of seconds, with fractional seconds. For example, 3 seconds with 0 nanoseconds\n     * is expressed as \"3s\", while 3 seconds and 1 nanosecond is expressed as \"3.000000001s\",\n     * and 3 seconds and 1 microsecond is expressed as \"3.000001s\".\n     *\n     * @returns The duration in milliseconds.\n     */\n    stringToMilliseconds(duration) {\n        if (!validator.isNonEmptyString(duration) || !duration.endsWith('s')) {\n            throw new FirebaseAppCheckError('invalid-argument', '`ttl` must be a valid duration string with the suffix `s`.');\n        }\n        const seconds = duration.slice(0, -1);\n        return Math.floor(Number(seconds) * 1000);\n    }\n}\nexports.AppCheckApiClient = AppCheckApiClient;\nexports.APP_CHECK_ERROR_CODE_MAPPING = {\n    ABORTED: 'aborted',\n    INVALID_ARGUMENT: 'invalid-argument',\n    INVALID_CREDENTIAL: 'invalid-credential',\n    INTERNAL: 'internal-error',\n    PERMISSION_DENIED: 'permission-denied',\n    UNAUTHENTICATED: 'unauthenticated',\n    NOT_FOUND: 'not-found',\n    UNKNOWN: 'unknown-error',\n};\n/**\n * Firebase App Check error code structure. This extends PrefixedFirebaseError.\n *\n * @param code - The error code.\n * @param message - The error message.\n * @constructor\n */\nclass FirebaseAppCheckError extends error_1.PrefixedFirebaseError {\n    constructor(code, message) {\n        super('app-check', code, message);\n        /* tslint:disable:max-line-length */\n        // Set the prototype explicitly. See the following link for more details:\n        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        /* tslint:enable:max-line-length */\n        this.__proto__ = FirebaseAppCheckError.prototype;\n    }\n}\nexports.FirebaseAppCheckError = FirebaseAppCheckError;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15795, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app-check/token-generator.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.appCheckErrorFromCryptoSignerError = exports.AppCheckTokenGenerator = void 0;\nconst validator = require(\"../utils/validator\");\nconst utils_1 = require(\"../utils\");\nconst crypto_signer_1 = require(\"../utils/crypto-signer\");\nconst app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nconst ONE_MINUTE_IN_SECONDS = 60;\nconst ONE_MINUTE_IN_MILLIS = ONE_MINUTE_IN_SECONDS * 1000;\nconst ONE_DAY_IN_MILLIS = 24 * 60 * 60 * 1000;\n// Audience to use for Firebase App Check Custom tokens\nconst FIREBASE_APP_CHECK_AUDIENCE = 'https://firebaseappcheck.googleapis.com/google.firebase.appcheck.v1.TokenExchangeService';\n/**\n * Class for generating Firebase App Check tokens.\n *\n * @internal\n */\nclass AppCheckTokenGenerator {\n    /**\n     * The AppCheckTokenGenerator class constructor.\n     *\n     * @param signer - The CryptoSigner instance for this token generator.\n     * @constructor\n     */\n    constructor(signer) {\n        if (!validator.isNonNullObject(signer)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'INTERNAL ASSERT: Must provide a CryptoSigner to use AppCheckTokenGenerator.');\n        }\n        this.signer = signer;\n    }\n    /**\n     * Creates a new custom token that can be exchanged to an App Check token.\n     *\n     * @param appId - The Application ID to use for the generated token.\n     *\n     * @returns A Promise fulfilled with a custom token signed with a service account key\n     * that can be exchanged to an App Check token.\n     */\n    createCustomToken(appId, options) {\n        if (!validator.isNonEmptyString(appId)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');\n        }\n        let customOptions = {};\n        if (typeof options !== 'undefined') {\n            customOptions = this.validateTokenOptions(options);\n        }\n        return this.signer.getAccountId().then((account) => {\n            const header = {\n                alg: this.signer.algorithm,\n                typ: 'JWT',\n            };\n            const iat = Math.floor(Date.now() / 1000);\n            const body = {\n                iss: account,\n                sub: account,\n                app_id: appId,\n                aud: FIREBASE_APP_CHECK_AUDIENCE,\n                exp: iat + (ONE_MINUTE_IN_SECONDS * 5),\n                iat,\n                ...customOptions,\n            };\n            const token = `${this.encodeSegment(header)}.${this.encodeSegment(body)}`;\n            return this.signer.sign(Buffer.from(token))\n                .then((signature) => {\n                return `${token}.${this.encodeSegment(signature)}`;\n            });\n        }).catch((err) => {\n            throw appCheckErrorFromCryptoSignerError(err);\n        });\n    }\n    encodeSegment(segment) {\n        const buffer = (segment instanceof Buffer) ? segment : Buffer.from(JSON.stringify(segment));\n        return (0, utils_1.toWebSafeBase64)(buffer).replace(/=+$/, '');\n    }\n    /**\n     * Checks if a given `AppCheckTokenOptions` object is valid. If successful, returns an object with\n     * custom properties.\n     *\n     * @param options - An options object to be validated.\n     * @returns A custom object with ttl converted to protobuf Duration string format.\n     */\n    validateTokenOptions(options) {\n        if (!validator.isNonNullObject(options)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'AppCheckTokenOptions must be a non-null object.');\n        }\n        if (typeof options.ttlMillis !== 'undefined') {\n            if (!validator.isNumber(options.ttlMillis)) {\n                throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'ttlMillis must be a duration in milliseconds.');\n            }\n            // ttlMillis must be between 30 minutes and 7 days (inclusive)\n            if (options.ttlMillis < (ONE_MINUTE_IN_MILLIS * 30) || options.ttlMillis > (ONE_DAY_IN_MILLIS * 7)) {\n                throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'ttlMillis must be a duration in milliseconds between 30 minutes and 7 days (inclusive).');\n            }\n            return { ttl: (0, utils_1.transformMillisecondsToSecondsString)(options.ttlMillis) };\n        }\n        return {};\n    }\n}\nexports.AppCheckTokenGenerator = AppCheckTokenGenerator;\n/**\n * Creates a new `FirebaseAppCheckError` by extracting the error code, message and other relevant\n * details from a `CryptoSignerError`.\n *\n * @param err - The Error to convert into a `FirebaseAppCheckError` error\n * @returns A Firebase App Check error that can be returned to the user.\n */\nfunction appCheckErrorFromCryptoSignerError(err) {\n    if (!(err instanceof crypto_signer_1.CryptoSignerError)) {\n        return err;\n    }\n    if (err.code === crypto_signer_1.CryptoSignerErrorCode.SERVER_ERROR && validator.isNonNullObject(err.cause)) {\n        const httpError = err.cause;\n        const errorResponse = httpError.response.data;\n        if (errorResponse?.error) {\n            const status = errorResponse.error.status;\n            const description = errorResponse.error.message || JSON.stringify(httpError.response);\n            let code = 'unknown-error';\n            if (status && status in app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING) {\n                code = app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING[status];\n            }\n            return new app_check_api_client_internal_1.FirebaseAppCheckError(code, `Error returned from server while signing a custom token: ${description}`);\n        }\n        return new app_check_api_client_internal_1.FirebaseAppCheckError('internal-error', 'Error returned from server: ' + JSON.stringify(errorResponse) + '.');\n    }\n    return new app_check_api_client_internal_1.FirebaseAppCheckError(mapToAppCheckErrorCode(err.code), err.message);\n}\nexports.appCheckErrorFromCryptoSignerError = appCheckErrorFromCryptoSignerError;\nfunction mapToAppCheckErrorCode(code) {\n    switch (code) {\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_CREDENTIAL:\n            return 'invalid-credential';\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_ARGUMENT:\n            return 'invalid-argument';\n        default:\n            return 'internal-error';\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15951, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app-check/token-verifier.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppCheckTokenVerifier = void 0;\nconst validator = require(\"../utils/validator\");\nconst util = require(\"../utils/index\");\nconst app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nconst jwt_1 = require(\"../utils/jwt\");\nconst APP_CHECK_ISSUER = 'https://firebaseappcheck.googleapis.com/';\nconst JWKS_URL = 'https://firebaseappcheck.googleapis.com/v1/jwks';\n/**\n * Class for verifying Firebase App Check tokens.\n *\n * @internal\n */\nclass AppCheckTokenVerifier {\n    constructor(app) {\n        this.app = app;\n        this.signatureVerifier = jwt_1.PublicKeySignatureVerifier.withJwksUrl(JWKS_URL, app.options.httpAgent);\n    }\n    /**\n     * Verifies the format and signature of a Firebase App Check token.\n     *\n     * @param token - The Firebase Auth JWT token to verify.\n     * @returns A promise fulfilled with the decoded claims of the Firebase App Check token.\n     */\n    verifyToken(token) {\n        if (!validator.isString(token)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'App check token must be a non-null string.');\n        }\n        return this.ensureProjectId()\n            .then((projectId) => {\n            return this.decodeAndVerify(token, projectId);\n        })\n            .then((decoded) => {\n            const decodedAppCheckToken = decoded.payload;\n            decodedAppCheckToken.app_id = decodedAppCheckToken.sub;\n            return decodedAppCheckToken;\n        });\n    }\n    ensureProjectId() {\n        return util.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-credential', 'Must initialize app with a cert credential or set your Firebase project ID as the ' +\n                    'GOOGLE_CLOUD_PROJECT environment variable to verify an App Check token.');\n            }\n            return projectId;\n        });\n    }\n    decodeAndVerify(token, projectId) {\n        return this.safeDecode(token)\n            .then((decodedToken) => {\n            this.verifyContent(decodedToken, projectId);\n            return this.verifySignature(token)\n                .then(() => decodedToken);\n        });\n    }\n    safeDecode(jwtToken) {\n        return (0, jwt_1.decodeJwt)(jwtToken)\n            .catch(() => {\n            const errorMessage = 'Decoding App Check token failed. Make sure you passed ' +\n                'the entire string JWT which represents the Firebase App Check token.';\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        });\n    }\n    /**\n     * Verifies the content of a Firebase App Check JWT.\n     *\n     * @param fullDecodedToken - The decoded JWT.\n     * @param projectId - The Firebase Project Id.\n     */\n    verifyContent(fullDecodedToken, projectId) {\n        const header = fullDecodedToken.header;\n        const payload = fullDecodedToken.payload;\n        const projectIdMatchMessage = ' Make sure the App Check token comes from the same ' +\n            'Firebase project as the service account used to authenticate this SDK.';\n        const scopedProjectId = `projects/${projectId}`;\n        let errorMessage;\n        if (header.alg !== jwt_1.ALGORITHM_RS256) {\n            errorMessage = 'The provided App Check token has incorrect algorithm. Expected \"' +\n                jwt_1.ALGORITHM_RS256 + '\" but got ' + '\"' + header.alg + '\".';\n        }\n        else if (!validator.isNonEmptyArray(payload.aud) || !payload.aud.includes(scopedProjectId)) {\n            errorMessage = 'The provided App Check token has incorrect \"aud\" (audience) claim. Expected \"' +\n                scopedProjectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage;\n        }\n        else if (typeof payload.iss !== 'string' || !payload.iss.startsWith(APP_CHECK_ISSUER)) {\n            errorMessage = 'The provided App Check token has incorrect \"iss\" (issuer) claim.';\n        }\n        else if (typeof payload.sub !== 'string') {\n            errorMessage = 'The provided App Check token has no \"sub\" (subject) claim.';\n        }\n        else if (payload.sub === '') {\n            errorMessage = 'The provided App Check token has an empty string \"sub\" (subject) claim.';\n        }\n        if (errorMessage) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        }\n    }\n    verifySignature(jwtToken) {\n        return this.signatureVerifier.verify(jwtToken)\n            .catch((error) => {\n            throw this.mapJwtErrorToAppCheckError(error);\n        });\n    }\n    /**\n     * Maps JwtError to FirebaseAppCheckError\n     *\n     * @param error - JwtError to be mapped.\n     * @returns FirebaseAppCheckError instance.\n     */\n    mapJwtErrorToAppCheckError(error) {\n        if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n            const errorMessage = 'The provided App Check token has expired. Get a fresh App Check token' +\n                ' from your client app and try again.';\n            return new app_check_api_client_internal_1.FirebaseAppCheckError('app-check-token-expired', errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n            const errorMessage = 'The provided App Check token has invalid signature.';\n            return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n            const errorMessage = 'The provided App Check token has \"kid\" claim which does not ' +\n                'correspond to a known public key. Most likely the provided App Check token ' +\n                'is expired, so get a fresh token from your client app and try again.';\n            return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        }\n        return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', error.message);\n    }\n}\nexports.AppCheckTokenVerifier = AppCheckTokenVerifier;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16078, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app-check/app-check.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppCheck = void 0;\nconst validator = require(\"../utils/validator\");\nconst app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nconst token_generator_1 = require(\"./token-generator\");\nconst token_verifier_1 = require(\"./token-verifier\");\nconst crypto_signer_1 = require(\"../utils/crypto-signer\");\n/**\n * The Firebase `AppCheck` service interface.\n */\nclass AppCheck {\n    /**\n     * @param app - The app for this AppCheck service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        this.app = app;\n        this.client = new app_check_api_client_internal_1.AppCheckApiClient(app);\n        try {\n            this.tokenGenerator = new token_generator_1.AppCheckTokenGenerator((0, crypto_signer_1.cryptoSignerFromApp)(app));\n        }\n        catch (err) {\n            throw (0, token_generator_1.appCheckErrorFromCryptoSignerError)(err);\n        }\n        this.appCheckTokenVerifier = new token_verifier_1.AppCheckTokenVerifier(app);\n    }\n    /**\n     * Creates a new {@link AppCheckToken} that can be sent\n     * back to a client.\n     *\n     * @param appId - The app ID to use as the JWT app_id.\n     * @param options - Optional options object when creating a new App Check Token.\n     *\n     * @returns A promise that fulfills with a `AppCheckToken`.\n     */\n    createToken(appId, options) {\n        return this.tokenGenerator.createCustomToken(appId, options)\n            .then((customToken) => {\n            return this.client.exchangeToken(customToken, appId);\n        });\n    }\n    /**\n     * Verifies a Firebase App Check token (JWT). If the token is valid, the promise is\n     * fulfilled with the token's decoded claims; otherwise, the promise is\n     * rejected.\n     *\n     * @param appCheckToken - The App Check token to verify.\n     * @param options - Optional {@link VerifyAppCheckTokenOptions} object when verifying an App Check Token.\n     *\n     * @returns A promise fulfilled with the token's decoded claims\n     *   if the App Check token is valid; otherwise, a rejected promise.\n     */\n    verifyToken(appCheckToken, options) {\n        this.validateVerifyAppCheckTokenOptions(options);\n        return this.appCheckTokenVerifier.verifyToken(appCheckToken)\n            .then((decodedToken) => {\n            if (options?.consume) {\n                return this.client.verifyReplayProtection(appCheckToken)\n                    .then((alreadyConsumed) => {\n                    return {\n                        alreadyConsumed,\n                        appId: decodedToken.app_id,\n                        token: decodedToken,\n                    };\n                });\n            }\n            return {\n                appId: decodedToken.app_id,\n                token: decodedToken,\n            };\n        });\n    }\n    validateVerifyAppCheckTokenOptions(options) {\n        if (typeof options === 'undefined') {\n            return;\n        }\n        if (!validator.isNonNullObject(options)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'VerifyAppCheckTokenOptions must be a non-null object.');\n        }\n    }\n}\nexports.AppCheck = AppCheck;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;;CAeC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,QAAQ,GAAG,KAAK;AACxB,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN;;CAEC,GACD,MAAM;IACF;;;;KAIC,GACD,YAAY,GAAG,CAAE;QACb,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,MAAM,GAAG,IAAI,gCAAgC,iBAAiB,CAAC;QACpE,IAAI;YACA,IAAI,CAAC,cAAc,GAAG,IAAI,kBAAkB,sBAAsB,CAAC,CAAC,GAAG,gBAAgB,mBAAmB,EAAE;QAChH,EACA,OAAO,KAAK;YACR,MAAM,CAAC,GAAG,kBAAkB,kCAAkC,EAAE;QACpE;QACA,IAAI,CAAC,qBAAqB,GAAG,IAAI,iBAAiB,qBAAqB,CAAC;IAC5E;IACA;;;;;;;;KAQC,GACD,YAAY,KAAK,EAAE,OAAO,EAAE;QACxB,OAAO,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,OAAO,SAC/C,IAAI,CAAC,CAAC;YACP,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa;QAClD;IACJ;IACA;;;;;;;;;;KAUC,GACD,YAAY,aAAa,EAAE,OAAO,EAAE;QAChC,IAAI,CAAC,kCAAkC,CAAC;QACxC,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,eACzC,IAAI,CAAC,CAAC;YACP,IAAI,SAAS,SAAS;gBAClB,OAAO,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,eACrC,IAAI,CAAC,CAAC;oBACP,OAAO;wBACH;wBACA,OAAO,aAAa,MAAM;wBAC1B,OAAO;oBACX;gBACJ;YACJ;YACA,OAAO;gBACH,OAAO,aAAa,MAAM;gBAC1B,OAAO;YACX;QACJ;IACJ;IACA,mCAAmC,OAAO,EAAE;QACxC,IAAI,OAAO,YAAY,aAAa;YAChC;QACJ;QACA,IAAI,CAAC,UAAU,eAAe,CAAC,UAAU;YACrC,MAAM,IAAI,gCAAgC,qBAAqB,CAAC,oBAAoB;QACxF;IACJ;AACJ;AACA,QAAQ,QAAQ,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16176, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/auth/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthClientErrorCode = exports.FirebaseAuthError = exports.UserRecord = exports.UserMetadata = exports.UserInfo = exports.PhoneMultiFactorInfo = exports.MultiFactorSettings = exports.MultiFactorInfo = exports.ProjectConfigManager = exports.ProjectConfig = exports.TenantManager = exports.TenantAwareAuth = exports.Tenant = exports.BaseAuth = exports.Auth = exports.getAuth = void 0;\n/**\n * Firebase Authentication.\n *\n * @packageDocumentation\n */\nconst index_1 = require(\"../app/index\");\nconst auth_1 = require(\"./auth\");\n/**\n * Gets the {@link Auth} service for the default app or a\n * given app.\n *\n * `getAuth()` can be called with no arguments to access the default app's\n * {@link Auth} service or as `getAuth(app)` to access the\n * {@link Auth} service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Auth service for the default app\n * const defaultAuth = getAuth();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Auth service for a given app\n * const otherAuth = getAuth(otherApp);\n * ```\n *\n */\nfunction getAuth(app) {\n    if (typeof app === 'undefined') {\n        app = (0, index_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('auth', (app) => new auth_1.Auth(app));\n}\nexports.getAuth = getAuth;\nvar auth_2 = require(\"./auth\");\nObject.defineProperty(exports, \"Auth\", { enumerable: true, get: function () { return auth_2.Auth; } });\nvar base_auth_1 = require(\"./base-auth\");\nObject.defineProperty(exports, \"BaseAuth\", { enumerable: true, get: function () { return base_auth_1.BaseAuth; } });\nvar tenant_1 = require(\"./tenant\");\nObject.defineProperty(exports, \"Tenant\", { enumerable: true, get: function () { return tenant_1.Tenant; } });\nvar tenant_manager_1 = require(\"./tenant-manager\");\nObject.defineProperty(exports, \"TenantAwareAuth\", { enumerable: true, get: function () { return tenant_manager_1.TenantAwareAuth; } });\nObject.defineProperty(exports, \"TenantManager\", { enumerable: true, get: function () { return tenant_manager_1.TenantManager; } });\nvar project_config_1 = require(\"./project-config\");\nObject.defineProperty(exports, \"ProjectConfig\", { enumerable: true, get: function () { return project_config_1.ProjectConfig; } });\nvar project_config_manager_1 = require(\"./project-config-manager\");\nObject.defineProperty(exports, \"ProjectConfigManager\", { enumerable: true, get: function () { return project_config_manager_1.ProjectConfigManager; } });\nvar user_record_1 = require(\"./user-record\");\nObject.defineProperty(exports, \"MultiFactorInfo\", { enumerable: true, get: function () { return user_record_1.MultiFactorInfo; } });\nObject.defineProperty(exports, \"MultiFactorSettings\", { enumerable: true, get: function () { return user_record_1.MultiFactorSettings; } });\nObject.defineProperty(exports, \"PhoneMultiFactorInfo\", { enumerable: true, get: function () { return user_record_1.PhoneMultiFactorInfo; } });\nObject.defineProperty(exports, \"UserInfo\", { enumerable: true, get: function () { return user_record_1.UserInfo; } });\nObject.defineProperty(exports, \"UserMetadata\", { enumerable: true, get: function () { return user_record_1.UserMetadata; } });\nObject.defineProperty(exports, \"UserRecord\", { enumerable: true, get: function () { return user_record_1.UserRecord; } });\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseAuthError\", { enumerable: true, get: function () { return error_1.FirebaseAuthError; } });\nObject.defineProperty(exports, \"AuthClientErrorCode\", { enumerable: true, get: function () { return error_1.AuthClientErrorCode; } });\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,mBAAmB,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,UAAU,GAAG,QAAQ,YAAY,GAAG,QAAQ,QAAQ,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,mBAAmB,GAAG,QAAQ,eAAe,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,aAAa,GAAG,QAAQ,aAAa,GAAG,QAAQ,eAAe,GAAG,QAAQ,MAAM,GAAG,QAAQ,QAAQ,GAAG,QAAQ,IAAI,GAAG,QAAQ,OAAO,GAAG,KAAK;AACnY;;;;CAIC,GACD,MAAM;AACN,MAAM;AACN;;;;;;;;;;;;;;;;;;;;CAoBC,GACD,SAAS,QAAQ,GAAG;IAChB,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,QAAQ,MAAM;IAC5B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,QAAQ,CAAC,MAAQ,IAAI,OAAO,IAAI,CAAC;AACzE;AACA,QAAQ,OAAO,GAAG;AAClB,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,QAAQ;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,OAAO,IAAI;IAAE;AAAE;AACpG,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,YAAY;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,YAAY,QAAQ;IAAE;AAAE;AACjH,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,UAAU;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,SAAS,MAAM;IAAE;AAAE;AAC1G,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,mBAAmB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,iBAAiB,eAAe;IAAE;AAAE;AACpI,OAAO,cAAc,CAAC,SAAS,iBAAiB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,iBAAiB,aAAa;IAAE;AAAE;AAChI,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,iBAAiB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,iBAAiB,aAAa;IAAE;AAAE;AAChI,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,wBAAwB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,yBAAyB,oBAAoB;IAAE;AAAE;AACtJ,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,mBAAmB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,cAAc,eAAe;IAAE;AAAE;AACjI,OAAO,cAAc,CAAC,SAAS,uBAAuB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,cAAc,mBAAmB;IAAE;AAAE;AACzI,OAAO,cAAc,CAAC,SAAS,wBAAwB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,cAAc,oBAAoB;IAAE;AAAE;AAC3I,OAAO,cAAc,CAAC,SAAS,YAAY;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,cAAc,QAAQ;IAAE;AAAE;AACnH,OAAO,cAAc,CAAC,SAAS,gBAAgB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,cAAc,YAAY;IAAE;AAAE;AAC3H,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,cAAc,UAAU;IAAE;AAAE;AACvH,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,qBAAqB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,iBAAiB;IAAE;AAAE;AAC/H,OAAO,cAAc,CAAC,SAAS,uBAAuB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,mBAAmB;IAAE;AAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16332, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app-check/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAppCheck = exports.AppCheck = void 0;\n/**\n * Firebase App Check.\n *\n * @packageDocumentation\n */\nconst app_1 = require(\"../app\");\nconst app_check_1 = require(\"./app-check\");\nvar app_check_2 = require(\"./app-check\");\nObject.defineProperty(exports, \"AppCheck\", { enumerable: true, get: function () { return app_check_2.AppCheck; } });\n/**\n * Gets the {@link AppCheck} service for the default app or a given app.\n *\n * `getAppCheck()` can be called with no arguments to access the default\n * app's `AppCheck` service or as `getAppCheck(app)` to access the\n * `AppCheck` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the `AppCheck` service for the default app\n * const defaultAppCheck = getAppCheck();\n * ```\n *\n * @example\n * ```javascript\n * // Get the `AppCheck` service for a given app\n * const otherAppCheck = getAppCheck(otherApp);\n * ```\n *\n * @param app - Optional app for which to return the `AppCheck` service.\n *   If not provided, the default `AppCheck` service is returned.\n *\n * @returns The default `AppCheck` service if no\n *   app is provided, or the `AppCheck` service associated with the provided\n *   app.\n */\nfunction getAppCheck(app) {\n    if (typeof app === 'undefined') {\n        app = (0, app_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('appCheck', (app) => new app_check_1.AppCheck(app));\n}\nexports.getAppCheck = getAppCheck;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;;CAeC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,WAAW,GAAG,QAAQ,QAAQ,GAAG,KAAK;AAC9C;;;;CAIC,GACD,MAAM;AACN,MAAM;AACN,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,YAAY;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,YAAY,QAAQ;IAAE;AAAE;AACjH;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,SAAS,YAAY,GAAG;IACpB,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,MAAM,MAAM;IAC1B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,YAAY,CAAC,MAAQ,IAAI,YAAY,QAAQ,CAAC;AACtF;AACA,QAAQ,WAAW,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16403, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/database/database.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatabaseService = void 0;\nconst url_1 = require(\"url\");\nconst path = require(\"path\");\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\nconst api_request_1 = require(\"../utils/api-request\");\nconst index_1 = require(\"../utils/index\");\nconst TOKEN_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\nclass DatabaseService {\n    constructor(app) {\n        this.databases = {};\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseDatabaseError({\n                code: 'invalid-argument',\n                message: 'First argument passed to admin.database() must be a valid Firebase app instance.',\n            });\n        }\n        this.appInternal = app;\n    }\n    get firebaseApp() {\n        return this.app;\n    }\n    /**\n     * @internal\n     */\n    delete() {\n        if (this.tokenListener) {\n            this.firebaseApp.INTERNAL.removeAuthTokenListener(this.tokenListener);\n            clearTimeout(this.tokenRefreshTimeout);\n        }\n        const promises = [];\n        for (const dbUrl of Object.keys(this.databases)) {\n            const db = this.databases[dbUrl];\n            promises.push(db.INTERNAL.delete());\n        }\n        return Promise.all(promises).then(() => {\n            this.databases = {};\n        });\n    }\n    /**\n     * Returns the app associated with this DatabaseService instance.\n     *\n     * @returns The app associated with this DatabaseService instance.\n     */\n    get app() {\n        return this.appInternal;\n    }\n    getDatabase(url) {\n        const dbUrl = this.ensureUrl(url);\n        if (!validator.isNonEmptyString(dbUrl)) {\n            throw new error_1.FirebaseDatabaseError({\n                code: 'invalid-argument',\n                message: 'Database URL must be a valid, non-empty URL string.',\n            });\n        }\n        let db = this.databases[dbUrl];\n        if (typeof db === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const rtdb = require('@firebase/database-compat/standalone');\n            db = rtdb.initStandalone(this.appInternal, dbUrl, (0, index_1.getSdkVersion)()).instance;\n            const rulesClient = new DatabaseRulesClient(this.app, dbUrl);\n            db.getRules = () => {\n                return rulesClient.getRules();\n            };\n            db.getRulesJSON = () => {\n                return rulesClient.getRulesJSON();\n            };\n            db.setRules = (source) => {\n                return rulesClient.setRules(source);\n            };\n            this.databases[dbUrl] = db;\n        }\n        if (!this.tokenListener) {\n            this.tokenListener = this.onTokenChange.bind(this);\n            this.firebaseApp.INTERNAL.addAuthTokenListener(this.tokenListener);\n        }\n        return db;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onTokenChange(_) {\n        const token = this.firebaseApp.INTERNAL.getCachedToken();\n        if (token) {\n            const delayMillis = token.expirationTime - TOKEN_REFRESH_THRESHOLD_MILLIS - Date.now();\n            // If the new token is set to expire soon (unlikely), do nothing. Somebody will eventually\n            // notice and refresh the token, at which point this callback will fire again.\n            if (delayMillis > 0) {\n                this.scheduleTokenRefresh(delayMillis);\n            }\n        }\n    }\n    scheduleTokenRefresh(delayMillis) {\n        clearTimeout(this.tokenRefreshTimeout);\n        this.tokenRefreshTimeout = setTimeout(() => {\n            this.firebaseApp.INTERNAL.getToken(/*forceRefresh=*/ true)\n                .catch(() => {\n                // Ignore the error since this might just be an intermittent failure. If we really cannot\n                // refresh the token, an error will be logged once the existing token expires and we try\n                // to fetch a fresh one.\n            });\n        }, delayMillis);\n    }\n    ensureUrl(url) {\n        if (typeof url !== 'undefined') {\n            return url;\n        }\n        else if (typeof this.appInternal.options.databaseURL !== 'undefined') {\n            return this.appInternal.options.databaseURL;\n        }\n        throw new error_1.FirebaseDatabaseError({\n            code: 'invalid-argument',\n            message: 'Can\\'t determine Firebase Database URL.',\n        });\n    }\n}\nexports.DatabaseService = DatabaseService;\nconst RULES_URL_PATH = '.settings/rules.json';\n/**\n * A helper client for managing RTDB security rules.\n */\nclass DatabaseRulesClient {\n    constructor(app, dbUrl) {\n        let parsedUrl = new url_1.URL(dbUrl);\n        const emulatorHost = process.env.FIREBASE_DATABASE_EMULATOR_HOST;\n        if (emulatorHost) {\n            const namespace = extractNamespace(parsedUrl);\n            parsedUrl = new url_1.URL(`http://${emulatorHost}?ns=${namespace}`);\n        }\n        parsedUrl.pathname = path.join(parsedUrl.pathname, RULES_URL_PATH);\n        this.dbUrl = parsedUrl.toString();\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    /**\n     * Gets the currently applied security rules as a string. The return value consists of\n     * the rules source including comments.\n     *\n     * @returns A promise fulfilled with the rules as a raw string.\n     */\n    getRules() {\n        const req = {\n            method: 'GET',\n            url: this.dbUrl,\n        };\n        return this.httpClient.send(req)\n            .then((resp) => {\n            if (!resp.text) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'HTTP response missing data.');\n            }\n            return resp.text;\n        })\n            .catch((err) => {\n            throw this.handleError(err);\n        });\n    }\n    /**\n     * Gets the currently applied security rules as a parsed JSON object. Any comments in\n     * the original source are stripped away.\n     *\n     * @returns {Promise<object>} A promise fulfilled with the parsed rules source.\n     */\n    getRulesJSON() {\n        const req = {\n            method: 'GET',\n            url: this.dbUrl,\n            data: { format: 'strict' },\n        };\n        return this.httpClient.send(req)\n            .then((resp) => {\n            return resp.data;\n        })\n            .catch((err) => {\n            throw this.handleError(err);\n        });\n    }\n    /**\n     * Sets the specified rules on the Firebase Database instance. If the rules source is\n     * specified as a string or a Buffer, it may include comments.\n     *\n     * @param {string|Buffer|object} source Source of the rules to apply. Must not be `null`\n     *  or empty.\n     * @returns {Promise<void>} Resolves when the rules are set on the Database.\n     */\n    setRules(source) {\n        if (!validator.isNonEmptyString(source) &&\n            !validator.isBuffer(source) &&\n            !validator.isNonNullObject(source)) {\n            const error = new error_1.FirebaseDatabaseError({\n                code: 'invalid-argument',\n                message: 'Source must be a non-empty string, Buffer or an object.',\n            });\n            return Promise.reject(error);\n        }\n        const req = {\n            method: 'PUT',\n            url: this.dbUrl,\n            data: source,\n            headers: {\n                'content-type': 'application/json; charset=utf-8',\n            },\n        };\n        return this.httpClient.send(req)\n            .then(() => {\n            return;\n        })\n            .catch((err) => {\n            throw this.handleError(err);\n        });\n    }\n    handleError(err) {\n        if (err instanceof api_request_1.RequestResponseError) {\n            return new error_1.FirebaseDatabaseError({\n                code: error_1.AppErrorCodes.INTERNAL_ERROR,\n                message: this.getErrorMessage(err),\n            });\n        }\n        return err;\n    }\n    getErrorMessage(err) {\n        const intro = 'Error while accessing security rules';\n        try {\n            const body = err.response.data;\n            if (body && body.error) {\n                return `${intro}: ${body.error.trim()}`;\n            }\n        }\n        catch {\n            // Ignore parsing errors\n        }\n        return `${intro}: ${err.response.text}`;\n    }\n}\nfunction extractNamespace(parsedUrl) {\n    const ns = parsedUrl.searchParams.get('ns');\n    if (ns) {\n        return ns;\n    }\n    const hostname = parsedUrl.hostname;\n    const dotIndex = hostname.indexOf('.');\n    return hostname.substring(0, dotIndex).toLowerCase();\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16651, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/database/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseDatabaseError = exports.getDatabaseWithUrl = exports.getDatabase = exports.ServerValue = exports.enableLogging = void 0;\nconst standalone_1 = require(\"@firebase/database-compat/standalone\");\nconst app_1 = require(\"../app\");\nconst database_1 = require(\"./database\");\n// TODO: Remove the following any-cast once the typins in @firebase/database-types are fixed.\n/**\n * {@link https://firebase.google.com/docs/reference/js/v8/firebase.database#enablelogging | enableLogging}\n * function from the `@firebase/database-compat` package.\n */\nexports.enableLogging = standalone_1.enableLogging;\n/**\n * {@link https://firebase.google.com/docs/reference/js/v8/firebase.database.ServerValue | ServerValue}\n * constant from the `@firebase/database-compat` package.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.ServerValue = standalone_1.ServerValue;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabase()` can be called with no arguments to access the default\n * app's `Database` service or as `getDatabase(app)` to access the\n * `Database` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabase();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabase(app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\nfunction getDatabase(app) {\n    return getDatabaseInstance({ app });\n}\nexports.getDatabase = getDatabase;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabaseWithUrl()` can be called with no arguments to access the default\n * app's {@link Database} service or as `getDatabaseWithUrl(app)` to access the\n * {@link Database} service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabaseWithUrl('https://example.firebaseio.com');\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabaseWithUrl('https://example.firebaseio.com', app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\nfunction getDatabaseWithUrl(url, app) {\n    return getDatabaseInstance({ url, app });\n}\nexports.getDatabaseWithUrl = getDatabaseWithUrl;\nfunction getDatabaseInstance(options) {\n    let { app } = options;\n    if (typeof app === 'undefined') {\n        app = (0, app_1.getApp)();\n    }\n    const firebaseApp = app;\n    const dbService = firebaseApp.getOrInitService('database', (app) => new database_1.DatabaseService(app));\n    return dbService.getDatabase(options.url);\n}\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseDatabaseError\", { enumerable: true, get: function () { return error_1.FirebaseDatabaseError; } });\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,qBAAqB,GAAG,QAAQ,kBAAkB,GAAG,QAAQ,WAAW,GAAG,QAAQ,WAAW,GAAG,QAAQ,aAAa,GAAG,KAAK;AACtI,MAAM;AACN,MAAM;AACN,MAAM;AACN,6FAA6F;AAC7F;;;CAGC,GACD,QAAQ,aAAa,GAAG,aAAa,aAAa;AAClD;;;CAGC,GACD,gEAAgE;AAChE,QAAQ,WAAW,GAAG,aAAa,WAAW;AAC9C;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,SAAS,YAAY,GAAG;IACpB,OAAO,oBAAoB;QAAE;IAAI;AACrC;AACA,QAAQ,WAAW,GAAG;AACtB;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,SAAS,mBAAmB,GAAG,EAAE,GAAG;IAChC,OAAO,oBAAoB;QAAE;QAAK;IAAI;AAC1C;AACA,QAAQ,kBAAkB,GAAG;AAC7B,SAAS,oBAAoB,OAAO;IAChC,IAAI,EAAE,GAAG,EAAE,GAAG;IACd,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,MAAM,MAAM;IAC1B;IACA,MAAM,cAAc;IACpB,MAAM,YAAY,YAAY,gBAAgB,CAAC,YAAY,CAAC,MAAQ,IAAI,WAAW,eAAe,CAAC;IACnG,OAAO,UAAU,WAAW,CAAC,QAAQ,GAAG;AAC5C;AACA,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,yBAAyB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,qBAAqB;IAAE;AAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16767, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/messaging/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessagingClientErrorCode = exports.FirebaseMessagingError = exports.getMessaging = exports.Messaging = void 0;\n/**\n * Firebase Cloud Messaging (FCM).\n *\n * @packageDocumentation\n */\nconst app_1 = require(\"../app\");\nconst messaging_1 = require(\"./messaging\");\nvar messaging_2 = require(\"./messaging\");\nObject.defineProperty(exports, \"Messaging\", { enumerable: true, get: function () { return messaging_2.Messaging; } });\n/**\n * Gets the {@link Messaging} service for the default app or a given app.\n *\n * `admin.messaging()` can be called with no arguments to access the default\n * app's `Messaging` service or as `admin.messaging(app)` to access the\n * `Messaging` service associated with aspecific app.\n *\n * @example\n * ```javascript\n * // Get the Messaging service for the default app\n * const defaultMessaging = getMessaging();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Messaging service for a given app\n * const otherMessaging = getMessaging(otherApp);\n * ```\n *\n * @param app - Optional app whose `Messaging` service to\n *   return. If not provided, the default `Messaging` service will be returned.\n *\n * @returns The default `Messaging` service if no\n *   app is provided or the `Messaging` service associated with the provided\n *   app.\n */\nfunction getMessaging(app) {\n    if (typeof app === 'undefined') {\n        app = (0, app_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('messaging', (app) => new messaging_1.Messaging(app));\n}\nexports.getMessaging = getMessaging;\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseMessagingError\", { enumerable: true, get: function () { return error_1.FirebaseMessagingError; } });\nObject.defineProperty(exports, \"MessagingClientErrorCode\", { enumerable: true, get: function () { return error_1.MessagingClientErrorCode; } });\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,wBAAwB,GAAG,QAAQ,sBAAsB,GAAG,QAAQ,YAAY,GAAG,QAAQ,SAAS,GAAG,KAAK;AACpH;;;;CAIC,GACD,MAAM;AACN,MAAM;AACN,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,aAAa;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,YAAY,SAAS;IAAE;AAAE;AACnH;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,SAAS,aAAa,GAAG;IACrB,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,MAAM,MAAM;IAC1B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,aAAa,CAAC,MAAQ,IAAI,YAAY,SAAS,CAAC;AACxF;AACA,QAAQ,YAAY,GAAG;AACvB,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,0BAA0B;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,sBAAsB;IAAE;AAAE;AACzI,OAAO,cAAc,CAAC,SAAS,4BAA4B;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,wBAAwB;IAAE;AAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16850, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/firestore/firestore-internal.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFirestoreOptions = exports.FirestoreService = void 0;\nconst error_1 = require(\"../utils/error\");\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst validator = require(\"../utils/validator\");\nconst utils = require(\"../utils/index\");\nclass FirestoreService {\n    constructor(app) {\n        this.databases = new Map();\n        this.firestoreSettings = new Map();\n        this.appInternal = app;\n    }\n    initializeDatabase(databaseId, settings) {\n        const existingInstance = this.databases.get(databaseId);\n        if (existingInstance) {\n            const initialSettings = this.firestoreSettings.get(databaseId) ?? {};\n            if (this.checkIfSameSettings(settings, initialSettings)) {\n                return existingInstance;\n            }\n            throw new error_1.FirebaseFirestoreError({\n                code: 'failed-precondition',\n                message: 'initializeFirestore() has already been called with ' +\n                    'different options. To avoid this error, call initializeFirestore() with the ' +\n                    'same options as when it was originally called, or call getFirestore() to return the' +\n                    ' already initialized instance.'\n            });\n        }\n        const newInstance = initFirestore(this.app, databaseId, settings);\n        this.databases.set(databaseId, newInstance);\n        this.firestoreSettings.set(databaseId, settings);\n        return newInstance;\n    }\n    getDatabase(databaseId) {\n        let database = this.databases.get(databaseId);\n        if (database === undefined) {\n            database = initFirestore(this.app, databaseId, {});\n            this.databases.set(databaseId, database);\n            this.firestoreSettings.set(databaseId, {});\n        }\n        return database;\n    }\n    checkIfSameSettings(settingsA, settingsB) {\n        const a = settingsA ?? {};\n        const b = settingsB ?? {};\n        // If we start passing more settings to Firestore constructor,\n        // replace this with deep equality check.\n        return (a.preferRest === b.preferRest);\n    }\n    /**\n     * Returns the app associated with this Storage instance.\n     *\n     * @returns The app associated with this Storage instance.\n     */\n    get app() {\n        return this.appInternal;\n    }\n}\nexports.FirestoreService = FirestoreService;\nfunction getFirestoreOptions(app, firestoreSettings) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n        throw new error_1.FirebaseFirestoreError({\n            code: 'invalid-argument',\n            message: 'First argument passed to admin.firestore() must be a valid Firebase app instance.',\n        });\n    }\n    const projectId = utils.getExplicitProjectId(app);\n    const credential = app.options.credential;\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { version: firebaseVersion } = require('../../package.json');\n    const preferRest = firestoreSettings?.preferRest;\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return {\n            credentials: {\n                private_key: credential.privateKey,\n                client_email: credential.clientEmail,\n            },\n            // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n            // guaranteed to be available.\n            projectId: projectId,\n            firebaseVersion,\n            preferRest,\n        };\n    }\n    else if ((0, credential_internal_1.isApplicationDefault)(app.options.credential)) {\n        // Try to use the Google application default credentials.\n        // If an explicit project ID is not available, let Firestore client discover one from the\n        // environment. This prevents the users from having to set GOOGLE_CLOUD_PROJECT in GCP runtimes.\n        return validator.isNonEmptyString(projectId)\n            ? { projectId, firebaseVersion, preferRest }\n            : { firebaseVersion, preferRest };\n    }\n    throw new error_1.FirebaseFirestoreError({\n        code: 'invalid-credential',\n        message: 'Failed to initialize Google Cloud Firestore client with the available credentials. ' +\n            'Must initialize the SDK with a certificate credential or application default credentials ' +\n            'to use Cloud Firestore API.',\n    });\n}\nexports.getFirestoreOptions = getFirestoreOptions;\nfunction initFirestore(app, databaseId, firestoreSettings) {\n    const options = getFirestoreOptions(app, firestoreSettings);\n    options.databaseId = databaseId;\n    let firestoreDatabase;\n    try {\n        // Lazy-load the Firestore implementation here, which in turns loads gRPC.\n        firestoreDatabase = require('@google-cloud/firestore').Firestore;\n    }\n    catch (err) {\n        throw new error_1.FirebaseFirestoreError({\n            code: 'missing-dependencies',\n            message: 'Failed to import the Cloud Firestore client library for Node.js. '\n                + 'Make sure to install the \"@google-cloud/firestore\" npm package. '\n                + `Original error: ${err}`,\n        });\n    }\n    return new firestoreDatabase(options);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16985, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/firestore/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseFirestoreError = exports.initializeFirestore = exports.getFirestore = exports.setLogFunction = exports.v1 = exports.WriteResult = exports.WriteBatch = exports.Transaction = exports.Timestamp = exports.QuerySnapshot = exports.QueryPartition = exports.QueryDocumentSnapshot = exports.Query = exports.GrpcStatus = exports.GeoPoint = exports.Firestore = exports.Filter = exports.FieldValue = exports.FieldPath = exports.DocumentSnapshot = exports.DocumentReference = exports.CollectionReference = exports.CollectionGroup = exports.BundleBuilder = exports.BulkWriter = exports.AggregateQuerySnapshot = exports.AggregateQuery = exports.AggregateField = void 0;\nconst app_1 = require(\"../app\");\nconst firestore_internal_1 = require(\"./firestore-internal\");\nconst path_1 = require(\"@google-cloud/firestore/build/src/path\");\nvar firestore_1 = require(\"@google-cloud/firestore\");\nObject.defineProperty(exports, \"AggregateField\", { enumerable: true, get: function () { return firestore_1.AggregateField; } });\nObject.defineProperty(exports, \"AggregateQuery\", { enumerable: true, get: function () { return firestore_1.AggregateQuery; } });\nObject.defineProperty(exports, \"AggregateQuerySnapshot\", { enumerable: true, get: function () { return firestore_1.AggregateQuerySnapshot; } });\nObject.defineProperty(exports, \"BulkWriter\", { enumerable: true, get: function () { return firestore_1.BulkWriter; } });\nObject.defineProperty(exports, \"BundleBuilder\", { enumerable: true, get: function () { return firestore_1.BundleBuilder; } });\nObject.defineProperty(exports, \"CollectionGroup\", { enumerable: true, get: function () { return firestore_1.CollectionGroup; } });\nObject.defineProperty(exports, \"CollectionReference\", { enumerable: true, get: function () { return firestore_1.CollectionReference; } });\nObject.defineProperty(exports, \"DocumentReference\", { enumerable: true, get: function () { return firestore_1.DocumentReference; } });\nObject.defineProperty(exports, \"DocumentSnapshot\", { enumerable: true, get: function () { return firestore_1.DocumentSnapshot; } });\nObject.defineProperty(exports, \"FieldPath\", { enumerable: true, get: function () { return firestore_1.FieldPath; } });\nObject.defineProperty(exports, \"FieldValue\", { enumerable: true, get: function () { return firestore_1.FieldValue; } });\nObject.defineProperty(exports, \"Filter\", { enumerable: true, get: function () { return firestore_1.Filter; } });\nObject.defineProperty(exports, \"Firestore\", { enumerable: true, get: function () { return firestore_1.Firestore; } });\nObject.defineProperty(exports, \"GeoPoint\", { enumerable: true, get: function () { return firestore_1.GeoPoint; } });\nObject.defineProperty(exports, \"GrpcStatus\", { enumerable: true, get: function () { return firestore_1.GrpcStatus; } });\nObject.defineProperty(exports, \"Query\", { enumerable: true, get: function () { return firestore_1.Query; } });\nObject.defineProperty(exports, \"QueryDocumentSnapshot\", { enumerable: true, get: function () { return firestore_1.QueryDocumentSnapshot; } });\nObject.defineProperty(exports, \"QueryPartition\", { enumerable: true, get: function () { return firestore_1.QueryPartition; } });\nObject.defineProperty(exports, \"QuerySnapshot\", { enumerable: true, get: function () { return firestore_1.QuerySnapshot; } });\nObject.defineProperty(exports, \"Timestamp\", { enumerable: true, get: function () { return firestore_1.Timestamp; } });\nObject.defineProperty(exports, \"Transaction\", { enumerable: true, get: function () { return firestore_1.Transaction; } });\nObject.defineProperty(exports, \"WriteBatch\", { enumerable: true, get: function () { return firestore_1.WriteBatch; } });\nObject.defineProperty(exports, \"WriteResult\", { enumerable: true, get: function () { return firestore_1.WriteResult; } });\nObject.defineProperty(exports, \"v1\", { enumerable: true, get: function () { return firestore_1.v1; } });\nObject.defineProperty(exports, \"setLogFunction\", { enumerable: true, get: function () { return firestore_1.setLogFunction; } });\nfunction getFirestore(appOrDatabaseId, optionalDatabaseId) {\n    const app = typeof appOrDatabaseId === 'object' ? appOrDatabaseId : (0, app_1.getApp)();\n    const databaseId = (typeof appOrDatabaseId === 'string' ? appOrDatabaseId : optionalDatabaseId) || path_1.DEFAULT_DATABASE_ID;\n    const firebaseApp = app;\n    const firestoreService = firebaseApp.getOrInitService('firestore', (app) => new firestore_internal_1.FirestoreService(app));\n    return firestoreService.getDatabase(databaseId);\n}\nexports.getFirestore = getFirestore;\nfunction initializeFirestore(app, settings, databaseId) {\n    settings ?? (settings = {});\n    databaseId ?? (databaseId = path_1.DEFAULT_DATABASE_ID);\n    const firebaseApp = app;\n    const firestoreService = firebaseApp.getOrInitService('firestore', (app) => new firestore_internal_1.FirestoreService(app));\n    return firestoreService.initializeDatabase(databaseId, settings);\n}\nexports.initializeFirestore = initializeFirestore;\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseFirestoreError\", { enumerable: true, get: function () { return error_1.FirebaseFirestoreError; } });\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17186, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/instance-id/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InstanceIdClientErrorCode = exports.FirebaseInstanceIdError = exports.getInstanceId = exports.InstanceId = void 0;\n/**\n * Firebase Instance ID service.\n *\n * @packageDocumentation\n */\nconst index_1 = require(\"../app/index\");\nconst instance_id_1 = require(\"./instance-id\");\nObject.defineProperty(exports, \"InstanceId\", { enumerable: true, get: function () { return instance_id_1.InstanceId; } });\n/**\n * Gets the {@link InstanceId} service for the default app or a given app.\n *\n * This API is deprecated. Developers are advised to use the\n * {@link firebase-admin.installations#getInstallations}\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * `getInstanceId()` can be called with no arguments to access the default\n * app's `InstanceId` service or as `getInstanceId(app)` to access the\n * `InstanceId` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for the default app\n * const defaultInstanceId = getInstanceId();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for a given app\n * const otherInstanceId = getInstanceId(otherApp);\n *```\n *\n * This API is deprecated. Developers are advised to use the `admin.installations()`\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * @param app - Optional app whose `InstanceId` service to\n *   return. If not provided, the default `InstanceId` service will be\n *   returned.\n *\n * @returns The default `InstanceId` service if\n *   no app is provided or the `InstanceId` service associated with the\n *   provided app.\n *\n * @deprecated Use {@link firebase-admin.installations#getInstallations} instead.\n */\nfunction getInstanceId(app) {\n    if (typeof app === 'undefined') {\n        app = (0, index_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('instanceId', (app) => new instance_id_1.InstanceId(app));\n}\nexports.getInstanceId = getInstanceId;\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseInstanceIdError\", { enumerable: true, get: function () { return error_1.FirebaseInstanceIdError; } });\nObject.defineProperty(exports, \"InstanceIdClientErrorCode\", { enumerable: true, get: function () { return error_1.InstanceIdClientErrorCode; } });\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,yBAAyB,GAAG,QAAQ,uBAAuB,GAAG,QAAQ,aAAa,GAAG,QAAQ,UAAU,GAAG,KAAK;AACxH;;;;CAIC,GACD,MAAM;AACN,MAAM;AACN,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,cAAc,UAAU;IAAE;AAAE;AACvH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCC,GACD,SAAS,cAAc,GAAG;IACtB,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,QAAQ,MAAM;IAC5B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,cAAc,CAAC,MAAQ,IAAI,cAAc,UAAU,CAAC;AAC5F;AACA,QAAQ,aAAa,GAAG;AACxB,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,2BAA2B;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,uBAAuB;IAAE;AAAE;AAC3I,OAAO,cAAc,CAAC,SAAS,6BAA6B;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,yBAAyB;IAAE;AAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17278, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/machine-learning/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMachineLearning = exports.Model = exports.MachineLearning = void 0;\n/**\n * Firebase Machine Learning.\n *\n * @packageDocumentation\n */\nconst app_1 = require(\"../app\");\nconst machine_learning_1 = require(\"./machine-learning\");\nvar machine_learning_2 = require(\"./machine-learning\");\nObject.defineProperty(exports, \"MachineLearning\", { enumerable: true, get: function () { return machine_learning_2.MachineLearning; } });\nObject.defineProperty(exports, \"Model\", { enumerable: true, get: function () { return machine_learning_2.Model; } });\n/**\n * Gets the {@link MachineLearning} service for the default app or a given app.\n *\n * `getMachineLearning()` can be called with no arguments to access the\n * default app's `MachineLearning` service or as `getMachineLearning(app)` to access\n * the `MachineLearning` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the MachineLearning service for the default app\n * const defaultMachineLearning = getMachineLearning();\n * ```\n *\n * @example\n * ```javascript\n * // Get the MachineLearning service for a given app\n * const otherMachineLearning = getMachineLearning(otherApp);\n * ```\n *\n * @param app - Optional app whose `MachineLearning` service to\n *   return. If not provided, the default `MachineLearning` service\n *   will be returned.\n *\n * @returns The default `MachineLearning` service if no app is provided or the\n *   `MachineLearning` service associated with the provided app.\n */\nfunction getMachineLearning(app) {\n    if (typeof app === 'undefined') {\n        app = (0, app_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('machineLearning', (app) => new machine_learning_1.MachineLearning(app));\n}\nexports.getMachineLearning = getMachineLearning;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,kBAAkB,GAAG,QAAQ,KAAK,GAAG,QAAQ,eAAe,GAAG,KAAK;AAC5E;;;;CAIC,GACD,MAAM;AACN,MAAM;AACN,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,mBAAmB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,mBAAmB,eAAe;IAAE;AAAE;AACtI,OAAO,cAAc,CAAC,SAAS,SAAS;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,mBAAmB,KAAK;IAAE;AAAE;AAClH;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,SAAS,mBAAmB,GAAG;IAC3B,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,MAAM,MAAM;IAC1B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,mBAAmB,CAAC,MAAQ,IAAI,mBAAmB,eAAe,CAAC;AAC3G;AACA,QAAQ,kBAAkB,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17354, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/project-management/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseProjectManagementError = exports.getProjectManagement = exports.IosApp = exports.ShaCertificate = exports.AndroidApp = exports.ProjectManagement = exports.AppPlatform = void 0;\n/**\n * Firebase project management.\n *\n * @packageDocumentation\n */\nconst app_1 = require(\"../app\");\nconst project_management_1 = require(\"./project-management\");\nvar app_metadata_1 = require(\"./app-metadata\");\nObject.defineProperty(exports, \"AppPlatform\", { enumerable: true, get: function () { return app_metadata_1.AppPlatform; } });\nvar project_management_2 = require(\"./project-management\");\nObject.defineProperty(exports, \"ProjectManagement\", { enumerable: true, get: function () { return project_management_2.ProjectManagement; } });\nvar android_app_1 = require(\"./android-app\");\nObject.defineProperty(exports, \"AndroidApp\", { enumerable: true, get: function () { return android_app_1.AndroidApp; } });\nObject.defineProperty(exports, \"ShaCertificate\", { enumerable: true, get: function () { return android_app_1.ShaCertificate; } });\nvar ios_app_1 = require(\"./ios-app\");\nObject.defineProperty(exports, \"IosApp\", { enumerable: true, get: function () { return ios_app_1.IosApp; } });\n/**\n * Gets the {@link ProjectManagement} service for the default app or a given app.\n *\n * `getProjectManagement()` can be called with no arguments to access the\n * default app's `ProjectManagement` service, or as `getProjectManagement(app)` to access\n * the `ProjectManagement` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the ProjectManagement service for the default app\n * const defaultProjectManagement = getProjectManagement();\n * ```\n *\n * @example\n * ```javascript\n * // Get the ProjectManagement service for a given app\n * const otherProjectManagement = getProjectManagement(otherApp);\n * ```\n *\n * @param app - Optional app whose `ProjectManagement` service\n *     to return. If not provided, the default `ProjectManagement` service will\n *     be returned. *\n * @returns The default `ProjectManagement` service if no app is provided or the\n *   `ProjectManagement` service associated with the provided app.\n */\nfunction getProjectManagement(app) {\n    if (typeof app === 'undefined') {\n        app = (0, app_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('projectManagement', (app) => new project_management_1.ProjectManagement(app));\n}\nexports.getProjectManagement = getProjectManagement;\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseProjectManagementError\", { enumerable: true, get: function () { return error_1.FirebaseProjectManagementError; } });\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,8BAA8B,GAAG,QAAQ,oBAAoB,GAAG,QAAQ,MAAM,GAAG,QAAQ,cAAc,GAAG,QAAQ,UAAU,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,WAAW,GAAG,KAAK;AAC9L;;;;CAIC,GACD,MAAM;AACN,MAAM;AACN,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,eAAe;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,eAAe,WAAW;IAAE;AAAE;AAC1H,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,qBAAqB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,qBAAqB,iBAAiB;IAAE;AAAE;AAC5I,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,cAAc,UAAU;IAAE;AAAE;AACvH,OAAO,cAAc,CAAC,SAAS,kBAAkB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,cAAc,cAAc;IAAE;AAAE;AAC/H,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,UAAU;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,UAAU,MAAM;IAAE;AAAE;AAC3G;;;;;;;;;;;;;;;;;;;;;;;;CAwBC,GACD,SAAS,qBAAqB,GAAG;IAC7B,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,MAAM,MAAM;IAC1B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,qBAAqB,CAAC,MAAQ,IAAI,qBAAqB,iBAAiB,CAAC;AACjH;AACA,QAAQ,oBAAoB,GAAG;AAC/B,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,kCAAkC;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,QAAQ,8BAA8B;IAAE;AAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17457, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/security-rules/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSecurityRules = exports.SecurityRules = exports.RulesetMetadataList = exports.Ruleset = void 0;\n/**\n * Security Rules for Cloud Firestore and Cloud Storage.\n *\n * @packageDocumentation\n */\nconst app_1 = require(\"../app\");\nconst security_rules_1 = require(\"./security-rules\");\nvar security_rules_2 = require(\"./security-rules\");\nObject.defineProperty(exports, \"Ruleset\", { enumerable: true, get: function () { return security_rules_2.Ruleset; } });\nObject.defineProperty(exports, \"RulesetMetadataList\", { enumerable: true, get: function () { return security_rules_2.RulesetMetadataList; } });\nObject.defineProperty(exports, \"SecurityRules\", { enumerable: true, get: function () { return security_rules_2.SecurityRules; } });\n/**\n * Gets the {@link SecurityRules} service for the default app or a given app.\n *\n * `admin.securityRules()` can be called with no arguments to access the\n * default app's `SecurityRules` service, or as `admin.securityRules(app)` to access\n * the `SecurityRules` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the SecurityRules service for the default app\n * const defaultSecurityRules = getSecurityRules();\n * ```\n *\n * @example\n * ```javascript\n * // Get the SecurityRules service for a given app\n * const otherSecurityRules = getSecurityRules(otherApp);\n * ```\n *\n * @param app - Optional app to return the `SecurityRules` service\n *     for. If not provided, the default `SecurityRules` service\n *     is returned.\n * @returns The default `SecurityRules` service if no app is provided, or the\n *   `SecurityRules` service associated with the provided app.\n */\nfunction getSecurityRules(app) {\n    if (typeof app === 'undefined') {\n        app = (0, app_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('securityRules', (app) => new security_rules_1.SecurityRules(app));\n}\nexports.getSecurityRules = getSecurityRules;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,QAAQ,aAAa,GAAG,QAAQ,mBAAmB,GAAG,QAAQ,OAAO,GAAG,KAAK;AACxG;;;;CAIC,GACD,MAAM;AACN,MAAM;AACN,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,WAAW;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,iBAAiB,OAAO;IAAE;AAAE;AACpH,OAAO,cAAc,CAAC,SAAS,uBAAuB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,iBAAiB,mBAAmB;IAAE;AAAE;AAC5I,OAAO,cAAc,CAAC,SAAS,iBAAiB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,iBAAiB,aAAa;IAAE;AAAE;AAChI;;;;;;;;;;;;;;;;;;;;;;;;CAwBC,GACD,SAAS,iBAAiB,GAAG;IACzB,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,MAAM,MAAM;IAC1B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,iBAAiB,CAAC,MAAQ,IAAI,iBAAiB,aAAa,CAAC;AACrG;AACA,QAAQ,gBAAgB,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17538, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/remote-config/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRemoteConfig = exports.RemoteConfig = exports.PercentConditionOperator = exports.CustomSignalOperator = void 0;\n/**\n * Firebase Remote Config.\n *\n * @packageDocumentation\n */\nconst app_1 = require(\"../app\");\nconst remote_config_1 = require(\"./remote-config\");\nvar remote_config_api_1 = require(\"./remote-config-api\");\nObject.defineProperty(exports, \"CustomSignalOperator\", { enumerable: true, get: function () { return remote_config_api_1.CustomSignalOperator; } });\nObject.defineProperty(exports, \"PercentConditionOperator\", { enumerable: true, get: function () { return remote_config_api_1.PercentConditionOperator; } });\nvar remote_config_2 = require(\"./remote-config\");\nObject.defineProperty(exports, \"RemoteConfig\", { enumerable: true, get: function () { return remote_config_2.RemoteConfig; } });\n/**\n * Gets the {@link RemoteConfig} service for the default app or a given app.\n *\n * `getRemoteConfig()` can be called with no arguments to access the default\n * app's `RemoteConfig` service or as `getRemoteConfig(app)` to access the\n * `RemoteConfig` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the `RemoteConfig` service for the default app\n * const defaultRemoteConfig = getRemoteConfig();\n * ```\n *\n * @example\n * ```javascript\n * // Get the `RemoteConfig` service for a given app\n * const otherRemoteConfig = getRemoteConfig(otherApp);\n * ```\n *\n * @param app - Optional app for which to return the `RemoteConfig` service.\n *   If not provided, the default `RemoteConfig` service is returned.\n *\n * @returns The default `RemoteConfig` service if no\n *   app is provided, or the `RemoteConfig` service associated with the provided\n *   app.\n */\nfunction getRemoteConfig(app) {\n    if (typeof app === 'undefined') {\n        app = (0, app_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('remoteConfig', (app) => new remote_config_1.RemoteConfig(app));\n}\nexports.getRemoteConfig = getRemoteConfig;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;CAcC,GACD,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,eAAe,GAAG,QAAQ,YAAY,GAAG,QAAQ,wBAAwB,GAAG,QAAQ,oBAAoB,GAAG,KAAK;AACxH;;;;CAIC,GACD,MAAM;AACN,MAAM;AACN,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,wBAAwB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,oBAAoB,oBAAoB;IAAE;AAAE;AACjJ,OAAO,cAAc,CAAC,SAAS,4BAA4B;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,oBAAoB,wBAAwB;IAAE;AAAE;AACzJ,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,gBAAgB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,gBAAgB,YAAY;IAAE;AAAE;AAC7H;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,SAAS,gBAAgB,GAAG;IACxB,IAAI,OAAO,QAAQ,aAAa;QAC5B,MAAM,CAAC,GAAG,MAAM,MAAM;IAC1B;IACA,MAAM,cAAc;IACpB,OAAO,YAAY,gBAAgB,CAAC,gBAAgB,CAAC,MAAQ,IAAI,gBAAgB,YAAY,CAAC;AAClG;AACA,QAAQ,eAAe,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17621, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/app/firebase-namespace.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultNamespace = exports.FirebaseNamespace = exports.FirebaseNamespaceInternals = void 0;\nconst lifecycle_1 = require(\"./lifecycle\");\nconst credential_factory_1 = require(\"./credential-factory\");\nconst index_1 = require(\"../utils/index\");\n/**\n * Internals of a FirebaseNamespace instance.\n */\nclass FirebaseNamespaceInternals {\n    constructor(appStore) {\n        this.appStore = appStore;\n    }\n    /**\n     * Initializes the App instance.\n     *\n     * @param options - Optional options for the App instance. If none present will try to initialize\n     *   from the FIREBASE_CONFIG environment variable. If the environment variable contains a string\n     *   that starts with '{' it will be parsed as JSON, otherwise it will be assumed to be pointing\n     *   to a file.\n     * @param appName - Optional name of the FirebaseApp instance.\n     *\n     * @returns A new App instance.\n     */\n    initializeApp(options, appName) {\n        const app = this.appStore.initializeApp(options, appName);\n        return extendApp(app);\n    }\n    /**\n     * Returns the App instance with the provided name (or the default App instance\n     * if no name is provided).\n     *\n     * @param appName - Optional name of the FirebaseApp instance to return.\n     * @returns The App instance which has the provided name.\n     */\n    app(appName) {\n        const app = this.appStore.getApp(appName);\n        return extendApp(app);\n    }\n    /*\n     * Returns an array of all the non-deleted App instances.\n     */\n    get apps() {\n        return this.appStore.getApps().map((app) => extendApp(app));\n    }\n}\nexports.FirebaseNamespaceInternals = FirebaseNamespaceInternals;\nconst firebaseCredential = {\n    cert: credential_factory_1.cert, refreshToken: credential_factory_1.refreshToken, applicationDefault: credential_factory_1.applicationDefault\n};\n/**\n * Global Firebase context object.\n */\nclass FirebaseNamespace {\n    /* tslint:enable */\n    constructor(appStore) {\n        // Hack to prevent Babel from modifying the object returned as the default admin namespace.\n        /* tslint:disable:variable-name */\n        this.__esModule = true;\n        /* tslint:enable:variable-name */\n        this.credential = firebaseCredential;\n        this.SDK_VERSION = (0, index_1.getSdkVersion)();\n        /* tslint:disable */\n        // TODO(jwenger): Database is the only consumer of firebase.Promise. We should update it to use\n        // use the native Promise and then remove this.\n        this.Promise = Promise;\n        this.INTERNAL = new FirebaseNamespaceInternals(appStore ?? new lifecycle_1.AppStore());\n    }\n    /**\n     * Gets the `Auth` service namespace. The returned namespace can be used to get the\n     * `Auth` service for the default app or an explicitly specified app.\n     */\n    get auth() {\n        const fn = (app) => {\n            return this.ensureApp(app).auth();\n        };\n        const auth = require('../auth/auth').Auth;\n        return Object.assign(fn, { Auth: auth });\n    }\n    /**\n     * Gets the `Database` service namespace. The returned namespace can be used to get the\n     * `Database` service for the default app or an explicitly specified app.\n     */\n    get database() {\n        const fn = (app) => {\n            return this.ensureApp(app).database();\n        };\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        return Object.assign(fn, require('@firebase/database-compat/standalone'));\n    }\n    /**\n     * Gets the `Messaging` service namespace. The returned namespace can be used to get the\n     * `Messaging` service for the default app or an explicitly specified app.\n     */\n    get messaging() {\n        const fn = (app) => {\n            return this.ensureApp(app).messaging();\n        };\n        const messaging = require('../messaging/messaging').Messaging;\n        return Object.assign(fn, { Messaging: messaging });\n    }\n    /**\n     * Gets the `Storage` service namespace. The returned namespace can be used to get the\n     * `Storage` service for the default app or an explicitly specified app.\n     */\n    get storage() {\n        const fn = (app) => {\n            return this.ensureApp(app).storage();\n        };\n        const storage = require('../storage/storage').Storage;\n        return Object.assign(fn, { Storage: storage });\n    }\n    /**\n     * Gets the `Firestore` service namespace. The returned namespace can be used to get the\n     * `Firestore` service for the default app or an explicitly specified app.\n     */\n    get firestore() {\n        let fn = (app) => {\n            return this.ensureApp(app).firestore();\n        };\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const firestore = require('@google-cloud/firestore');\n        fn = Object.assign(fn, firestore.Firestore);\n        // `v1beta1` and `v1` are lazy-loaded in the Firestore SDK. We use the same trick here\n        // to avoid triggering this lazy-loading upon initialization.\n        Object.defineProperty(fn, 'v1beta1', {\n            get: () => {\n                return firestore.v1beta1;\n            },\n        });\n        Object.defineProperty(fn, 'v1', {\n            get: () => {\n                return firestore.v1;\n            },\n        });\n        return fn;\n    }\n    /**\n     * Gets the `MachineLearning` service namespace. The returned namespace can be\n     * used to get the `MachineLearning` service for the default app or an\n     * explicityly specified app.\n     */\n    get machineLearning() {\n        const fn = (app) => {\n            return this.ensureApp(app).machineLearning();\n        };\n        const machineLearning = require('../machine-learning/machine-learning').MachineLearning;\n        return Object.assign(fn, { MachineLearning: machineLearning });\n    }\n    /**\n     * Gets the `Installations` service namespace. The returned namespace can be used to get the\n     * `Installations` service for the default app or an explicitly specified app.\n     */\n    get installations() {\n        const fn = (app) => {\n            return this.ensureApp(app).installations();\n        };\n        const installations = require('../installations/installations').Installations;\n        return Object.assign(fn, { Installations: installations });\n    }\n    /**\n     * Gets the `InstanceId` service namespace. The returned namespace can be used to get the\n     * `Instance` service for the default app or an explicitly specified app.\n     */\n    get instanceId() {\n        const fn = (app) => {\n            return this.ensureApp(app).instanceId();\n        };\n        const instanceId = require('../instance-id/instance-id').InstanceId;\n        return Object.assign(fn, { InstanceId: instanceId });\n    }\n    /**\n     * Gets the `ProjectManagement` service namespace. The returned namespace can be used to get the\n     * `ProjectManagement` service for the default app or an explicitly specified app.\n     */\n    get projectManagement() {\n        const fn = (app) => {\n            return this.ensureApp(app).projectManagement();\n        };\n        const projectManagement = require('../project-management/project-management').ProjectManagement;\n        return Object.assign(fn, { ProjectManagement: projectManagement });\n    }\n    /**\n     * Gets the `SecurityRules` service namespace. The returned namespace can be used to get the\n     * `SecurityRules` service for the default app or an explicitly specified app.\n     */\n    get securityRules() {\n        const fn = (app) => {\n            return this.ensureApp(app).securityRules();\n        };\n        const securityRules = require('../security-rules/security-rules').SecurityRules;\n        return Object.assign(fn, { SecurityRules: securityRules });\n    }\n    /**\n     * Gets the `RemoteConfig` service namespace. The returned namespace can be used to get the\n     * `RemoteConfig` service for the default app or an explicitly specified app.\n     */\n    get remoteConfig() {\n        const fn = (app) => {\n            return this.ensureApp(app).remoteConfig();\n        };\n        const remoteConfig = require('../remote-config/remote-config').RemoteConfig;\n        return Object.assign(fn, { RemoteConfig: remoteConfig });\n    }\n    /**\n     * Gets the `AppCheck` service namespace. The returned namespace can be used to get the\n     * `AppCheck` service for the default app or an explicitly specified app.\n     */\n    get appCheck() {\n        const fn = (app) => {\n            return this.ensureApp(app).appCheck();\n        };\n        const appCheck = require('../app-check/app-check').AppCheck;\n        return Object.assign(fn, { AppCheck: appCheck });\n    }\n    // TODO: Change the return types to app.App in the following methods.\n    /**\n     * Initializes the FirebaseApp instance.\n     *\n     * @param options - Optional options for the FirebaseApp instance.\n     *   If none present will try to initialize from the FIREBASE_CONFIG environment variable.\n     *   If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n     *   otherwise it will be assumed to be pointing to a file.\n     * @param appName - Optional name of the FirebaseApp instance.\n     *\n     * @returns A new FirebaseApp instance.\n     */\n    initializeApp(options, appName) {\n        return this.INTERNAL.initializeApp(options, appName);\n    }\n    /**\n     * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\n     * if no name is provided).\n     *\n     * @param appName - Optional name of the FirebaseApp instance to return.\n     * @returns The FirebaseApp instance which has the provided name.\n     */\n    app(appName) {\n        return this.INTERNAL.app(appName);\n    }\n    /*\n     * Returns an array of all the non-deleted FirebaseApp instances.\n     */\n    get apps() {\n        return this.INTERNAL.apps;\n    }\n    ensureApp(app) {\n        if (typeof app === 'undefined') {\n            app = this.app();\n        }\n        return app;\n    }\n}\nexports.FirebaseNamespace = FirebaseNamespace;\n/**\n * In order to maintain backward compatibility, we instantiate a default namespace instance in\n * this module, and delegate all app lifecycle operations to it. In a future implementation where\n * the old admin namespace is no longer supported, we should remove this.\n *\n * @internal\n */\nexports.defaultNamespace = new FirebaseNamespace(lifecycle_1.defaultAppStore);\nfunction extendApp(app) {\n    const result = app;\n    if (result.__extended) {\n        return result;\n    }\n    result.auth = () => {\n        const fn = require('../auth/index').getAuth;\n        return fn(app);\n    };\n    result.appCheck = () => {\n        const fn = require('../app-check/index').getAppCheck;\n        return fn(app);\n    };\n    result.database = (url) => {\n        const fn = require('../database/index').getDatabaseWithUrl;\n        return fn(url, app);\n    };\n    result.messaging = () => {\n        const fn = require('../messaging/index').getMessaging;\n        return fn(app);\n    };\n    result.storage = () => {\n        const fn = require('../storage/index').getStorage;\n        return fn(app);\n    };\n    result.firestore = () => {\n        const fn = require('../firestore/index').getFirestore;\n        return fn(app);\n    };\n    result.instanceId = () => {\n        const fn = require('../instance-id/index').getInstanceId;\n        return fn(app);\n    };\n    result.installations = () => {\n        const fn = require('../installations/index').getInstallations;\n        return fn(app);\n    };\n    result.machineLearning = () => {\n        const fn = require('../machine-learning/index').getMachineLearning;\n        return fn(app);\n    };\n    result.projectManagement = () => {\n        const fn = require('../project-management/index').getProjectManagement;\n        return fn(app);\n    };\n    result.securityRules = () => {\n        const fn = require('../security-rules/index').getSecurityRules;\n        return fn(app);\n    };\n    result.remoteConfig = () => {\n        const fn = require('../remote-config/index').getRemoteConfig;\n        return fn(app);\n    };\n    result.__extended = true;\n    return result;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17958, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/default-namespace.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst firebase_namespace_1 = require(\"./app/firebase-namespace\");\n// Inject a circular default export to allow users to use both:\n//\n//   import firebaseAdmin from 'firebase-admin';\n//   which becomes: var firebaseAdmin = require('firebase-admin').default;\n//\n// as well as the more correct:\n//\n//   import * as firebaseAdmin from 'firebase-admin';\n//   which becomes: var firebaseAdmin = require('firebase-admin');\nfirebase_namespace_1.defaultNamespace.default = firebase_namespace_1.defaultNamespace;\nmodule.exports = firebase_namespace_1.defaultNamespace;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAC3B;AACA;;;;;;;;;;;;;;;CAeC,GACD,MAAM;AACN,+DAA+D;AAC/D,EAAE;AACF,gDAAgD;AAChD,0EAA0E;AAC1E,EAAE;AACF,+BAA+B;AAC/B,EAAE;AACF,qDAAqD;AACrD,kEAAkE;AAClE,qBAAqB,gBAAgB,CAAC,OAAO,GAAG,qBAAqB,gBAAgB;AACrF,OAAO,OAAO,GAAG,qBAAqB,gBAAgB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17991, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst firebase = require(\"./default-namespace\");\n// Only Node.js has a process variable that is of [[Class]] process\nconst processGlobal = typeof process !== 'undefined' ? process : 0;\nif (Object.prototype.toString.call(processGlobal) !== '[object process]') {\n    const message = `\n======== WARNING! ========\n\nfirebase-admin appears to have been installed in an unsupported environment.\nThis package should only be used in server-side or backend Node.js environments,\nand should not be used in web browsers or other client-side environments.\n\nUse the Firebase JS SDK for client-side Firebase integrations:\n\nhttps://firebase.google.com/docs/web/setup\n`;\n    // tslint:disable-next-line:no-console\n    console.error(message);\n}\nmodule.exports = firebase;\n"],"names":[],"mappings":"AAAA,2BAA2B,GAoBE;AAnB7B;AACA;;;;;;;;;;;;;;;CAeC,GACD,MAAM;AACN,mEAAmE;AACnE,MAAM,gBAAgB,OAAO,gKAAA,CAAA,UAAO,KAAK,cAAc,gKAAA,CAAA,UAAO,GAAG;AACjE,IAAI,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,oBAAoB;IACtE,MAAM,UAAU,CAAC;;;;;;;;;;AAUrB,CAAC;IACG,sCAAsC;IACtC,QAAQ,KAAK,CAAC;AAClB;AACA,OAAO,OAAO,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18033, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/node_modules/firebase-admin/lib/esm/firestore/index.js"],"sourcesContent":["import mod from \"../../firestore/index.js\";\n\nexport const AggregateField = mod.AggregateField;\nexport const AggregateQuery = mod.AggregateQuery;\nexport const AggregateQuerySnapshot = mod.AggregateQuerySnapshot;\nexport const BulkWriter = mod.BulkWriter;\nexport const BundleBuilder = mod.BundleBuilder;\nexport const CollectionGroup = mod.CollectionGroup;\nexport const CollectionReference = mod.CollectionReference;\nexport const DocumentReference = mod.DocumentReference;\nexport const DocumentSnapshot = mod.DocumentSnapshot;\nexport const FieldPath = mod.FieldPath;\nexport const FieldValue = mod.FieldValue;\nexport const Filter = mod.Filter;\nexport const FirebaseFirestoreError = mod.FirebaseFirestoreError;\nexport const Firestore = mod.Firestore;\nexport const GeoPoint = mod.GeoPoint;\nexport const GrpcStatus = mod.GrpcStatus;\nexport const Query = mod.Query;\nexport const QueryDocumentSnapshot = mod.QueryDocumentSnapshot;\nexport const QueryPartition = mod.QueryPartition;\nexport const QuerySnapshot = mod.QuerySnapshot;\nexport const Timestamp = mod.Timestamp;\nexport const Transaction = mod.Transaction;\nexport const WriteBatch = mod.WriteBatch;\nexport const WriteResult = mod.WriteResult;\nexport const getFirestore = mod.getFirestore;\nexport const initializeFirestore = mod.initializeFirestore;\nexport const setLogFunction = mod.setLogFunction;\nexport const v1 = mod.v1;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEO,MAAM,iBAAiB,iKAAA,CAAA,UAAG,CAAC,cAAc;AACzC,MAAM,iBAAiB,iKAAA,CAAA,UAAG,CAAC,cAAc;AACzC,MAAM,yBAAyB,iKAAA,CAAA,UAAG,CAAC,sBAAsB;AACzD,MAAM,aAAa,iKAAA,CAAA,UAAG,CAAC,UAAU;AACjC,MAAM,gBAAgB,iKAAA,CAAA,UAAG,CAAC,aAAa;AACvC,MAAM,kBAAkB,iKAAA,CAAA,UAAG,CAAC,eAAe;AAC3C,MAAM,sBAAsB,iKAAA,CAAA,UAAG,CAAC,mBAAmB;AACnD,MAAM,oBAAoB,iKAAA,CAAA,UAAG,CAAC,iBAAiB;AAC/C,MAAM,mBAAmB,iKAAA,CAAA,UAAG,CAAC,gBAAgB;AAC7C,MAAM,YAAY,iKAAA,CAAA,UAAG,CAAC,SAAS;AAC/B,MAAM,aAAa,iKAAA,CAAA,UAAG,CAAC,UAAU;AACjC,MAAM,SAAS,iKAAA,CAAA,UAAG,CAAC,MAAM;AACzB,MAAM,yBAAyB,iKAAA,CAAA,UAAG,CAAC,sBAAsB;AACzD,MAAM,YAAY,iKAAA,CAAA,UAAG,CAAC,SAAS;AAC/B,MAAM,WAAW,iKAAA,CAAA,UAAG,CAAC,QAAQ;AAC7B,MAAM,aAAa,iKAAA,CAAA,UAAG,CAAC,UAAU;AACjC,MAAM,QAAQ,iKAAA,CAAA,UAAG,CAAC,KAAK;AACvB,MAAM,wBAAwB,iKAAA,CAAA,UAAG,CAAC,qBAAqB;AACvD,MAAM,iBAAiB,iKAAA,CAAA,UAAG,CAAC,cAAc;AACzC,MAAM,gBAAgB,iKAAA,CAAA,UAAG,CAAC,aAAa;AACvC,MAAM,YAAY,iKAAA,CAAA,UAAG,CAAC,SAAS;AAC/B,MAAM,cAAc,iKAAA,CAAA,UAAG,CAAC,WAAW;AACnC,MAAM,aAAa,iKAAA,CAAA,UAAG,CAAC,UAAU;AACjC,MAAM,cAAc,iKAAA,CAAA,UAAG,CAAC,WAAW;AACnC,MAAM,eAAe,iKAAA,CAAA,UAAG,CAAC,YAAY;AACrC,MAAM,sBAAsB,iKAAA,CAAA,UAAG,CAAC,mBAAmB;AACnD,MAAM,iBAAiB,iKAAA,CAAA,UAAG,CAAC,cAAc;AACzC,MAAM,KAAK,iKAAA,CAAA,UAAG,CAAC,EAAE","ignoreList":[0],"debugId":null}}]
}