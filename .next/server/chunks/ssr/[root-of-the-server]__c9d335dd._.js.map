{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebaseAdmin.ts"],"sourcesContent":["\n// src/lib/firebaseAdmin.ts\nimport admin from 'firebase-admin';\n\n// THIS IS THE NEW LOGGING LINE:\nconsole.log(\"[firebaseAdmin.ts] SERVER START: Current value of process.env.GOOGLE_APPLICATION_CREDENTIALS:\", process.env.GOOGLE_APPLICATION_CREDENTIALS || \"NOT SET\");\n\nconst serviceAccountPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;\nlet adminDBInstance: admin.firestore.Firestore | undefined;\nlet adminAuthInstance: admin.auth.Auth | undefined;\n\nif (!admin.apps.length) {\n  if (!serviceAccountPath) {\n    console.warn(\n      'WARNING: GOOGLE_APPLICATION_CREDENTIALS environment variable is NOT SET. ' +\n      'Firebase Admin SDK will attempt to initialize with application default credentials. ' +\n      'This might only work in specific Google Cloud environments (e.g., Cloud Functions, App Engine). ' +\n      'For local development and most other deployments, you MUST provide a service account JSON file path via this variable.'\n    );\n    try {\n      admin.initializeApp();\n      console.log('Firebase Admin SDK: Initialized with application default credentials.');\n    } catch (e: any) {\n      console.error('Firebase Admin SDK: CRITICAL - Initialization FAILED with default credentials:', e.message);\n      console.error('Firebase Admin SDK: Ensure your environment is set up for default credentials or set GOOGLE_APPLICATION_CREDENTIALS.');\n    }\n  } else {\n    console.log('Firebase Admin SDK: GOOGLE_APPLICATION_CREDENTIALS is SET. Path from env var:', serviceAccountPath);\n    try {\n      admin.initializeApp({\n        credential: admin.credential.cert(serviceAccountPath),\n      });\n      console.log('Firebase Admin SDK: Initialized successfully with service account from path:', serviceAccountPath);\n    } catch (e: any) {\n      console.error('Firebase Admin SDK: CRITICAL - Initialization FAILED with service account. Path used:', serviceAccountPath, 'Error:', e.message);\n      console.error('Firebase Admin SDK: Ensure the GOOGLE_APPLICATION_CREDENTIALS path is correct, the file exists, is valid JSON, and the Node.js process has read permissions.');\n    }\n  }\n\n  // Verify initialization and attempt to get instances\n  if (admin.apps.length > 0) {\n    try {\n      adminDBInstance = admin.firestore();\n      adminAuthInstance = admin.auth();\n      if (adminDBInstance && adminAuthInstance) {\n        console.log('Firebase Admin SDK: Successfully retrieved Firestore and Auth instances. Admin SDK should be operational.');\n      } else {\n        console.error('Firebase Admin SDK: CRITICAL - admin.firestore() or admin.auth() returned undefined/null even after app initialization. This is unexpected.');\n      }\n    } catch (e: any) {\n      console.error('Firebase Admin SDK: CRITICAL - Error when trying to get Firestore/Auth instance after app initialization:', e.message);\n    }\n  } else {\n    console.error('Firebase Admin SDK: CRITICAL - admin.apps.length is 0. Initialization definitely failed.');\n  }\n\n} else {\n  console.log('Firebase Admin SDK: Already initialized (admin.apps.length > 0). Retrieving existing instances.');\n  // This block executes if the SDK was initialized elsewhere or in a previous hot reload cycle.\n  // It's generally safer to ensure instances are always freshly retrieved from the default app if available.\n  try {\n    if (!adminDBInstance) adminDBInstance = admin.firestore();\n    if (!adminAuthInstance) adminAuthInstance = admin.auth();\n     if (adminDBInstance && adminAuthInstance) {\n        console.log('Firebase Admin SDK: Re-confirmed Firestore and Auth instances from existing app.');\n      }\n  } catch (e:any) {\n      console.error('Firebase Admin SDK: Error retrieving instances from existing app:', e.message);\n  }\n}\n\n// Export the potentially undefined instances. Service functions MUST check them.\nexport const adminDB = adminDBInstance;\nexport const adminAuth = adminAuthInstance;\n"],"names":[],"mappings":"AACA,2BAA2B;;;;;AAC3B;;AAEA,gCAAgC;AAChC,QAAQ,GAAG,CAAC,iGAAiG,QAAQ,GAAG,CAAC,8BAA8B,IAAI;AAE3J,MAAM,qBAAqB,QAAQ,GAAG,CAAC,8BAA8B;AACrE,IAAI;AACJ,IAAI;AAEJ,IAAI,CAAC,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,EAAE;IACtB,IAAI,CAAC,oBAAoB;QACvB,QAAQ,IAAI,CACV,8EACA,yFACA,qGACA;QAEF,IAAI;YACF,2HAAA,CAAA,UAAK,CAAC,aAAa;YACnB,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,GAAQ;YACf,QAAQ,KAAK,CAAC,kFAAkF,EAAE,OAAO;YACzG,QAAQ,KAAK,CAAC;QAChB;IACF,OAAO;QACL,QAAQ,GAAG,CAAC,iFAAiF;QAC7F,IAAI;YACF,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;gBAClB,YAAY,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;YACpC;YACA,QAAQ,GAAG,CAAC,gFAAgF;QAC9F,EAAE,OAAO,GAAQ;YACf,QAAQ,KAAK,CAAC,yFAAyF,oBAAoB,UAAU,EAAE,OAAO;YAC9I,QAAQ,KAAK,CAAC;QAChB;IACF;IAEA,qDAAqD;IACrD,IAAI,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;QACzB,IAAI;YACF,kBAAkB,2HAAA,CAAA,UAAK,CAAC,SAAS;YACjC,oBAAoB,2HAAA,CAAA,UAAK,CAAC,IAAI;YAC9B,IAAI,mBAAmB,mBAAmB;gBACxC,QAAQ,GAAG,CAAC;YACd,OAAO;gBACL,QAAQ,KAAK,CAAC;YAChB;QACF,EAAE,OAAO,GAAQ;YACf,QAAQ,KAAK,CAAC,6GAA6G,EAAE,OAAO;QACtI;IACF,OAAO;QACL,QAAQ,KAAK,CAAC;IAChB;AAEF,OAAO;IACL,QAAQ,GAAG,CAAC;IACZ,8FAA8F;IAC9F,2GAA2G;IAC3G,IAAI;QACF,IAAI,CAAC,iBAAiB,kBAAkB,2HAAA,CAAA,UAAK,CAAC,SAAS;QACvD,IAAI,CAAC,mBAAmB,oBAAoB,2HAAA,CAAA,UAAK,CAAC,IAAI;QACrD,IAAI,mBAAmB,mBAAmB;YACvC,QAAQ,GAAG,CAAC;QACd;IACJ,EAAE,OAAO,GAAO;QACZ,QAAQ,KAAK,CAAC,qEAAqE,EAAE,OAAO;IAChG;AACF;AAGO,MAAM,UAAU;AAChB,MAAM,YAAY","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firestoreAdminService.ts"],"sourcesContent":["\n// src/lib/firestoreAdminService.ts\nimport { adminDB } from '@/lib/firebaseAdmin';\nimport type { Scholarship } from '@/types';\nimport { Timestamp } from 'firebase-admin/firestore';\n\nconst SCHOLARSHIPS_COLLECTION = 'SCHOLARSHIPS';\n\nfunction ensureAdminDBInitialized() {\n  if (typeof adminDB === 'undefined' || !adminDB || typeof adminDB.collection !== 'function') {\n    const errorMessage = \"SERVER_CONFIG_ERROR: Firebase Admin SDK (adminDB) is not properly initialized. This is a critical server configuration issue. Possible causes: GOOGLE_APPLICATION_CREDENTIALS environment variable is not set, path is incorrect, service account file is malformed/missing, or Node.js process lacks read permissions. Detailed Admin SDK initialization logs should be in the server console (check firebaseAdmin.ts logs).\";\n    console.error(\"[firestoreAdminService] CRITICAL CHECK FAILED:\", errorMessage);\n    throw new Error(errorMessage);\n  }\n   console.log(\"[firestoreAdminService] AdminDB initialized check passed.\");\n}\n\nexport async function addScholarshipAdmin(scholarshipData: Omit<Scholarship, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {\n  console.log(\"[firestoreAdminService] addScholarshipAdmin: Attempting to add data:\", JSON.stringify(scholarshipData, null, 2));\n  ensureAdminDBInitialized(); // Explicit check\n  \n  const dataToSave: Partial<Scholarship> & { createdAt: any, updatedAt: any } = {\n    name: scholarshipData.name || '',\n    description: scholarshipData.description || '',\n    eligibility: scholarshipData.eligibility || '',\n    websiteUrl: scholarshipData.websiteUrl || '',\n    location: scholarshipData.location || 'International',\n    iconName: scholarshipData.iconName && scholarshipData.iconName !== '_none_' ? scholarshipData.iconName : null,\n    category: scholarshipData.category || null,\n    ageRequirement: scholarshipData.ageRequirement && scholarshipData.ageRequirement !== '_none_' ? scholarshipData.ageRequirement : null,\n    fundingLevel: scholarshipData.fundingLevel && scholarshipData.fundingLevel !== '_none_' ? scholarshipData.fundingLevel : null,\n    destinationRegion: scholarshipData.destinationRegion && scholarshipData.destinationRegion !== '_none_' ? scholarshipData.destinationRegion : null,\n    targetLevel: scholarshipData.targetLevel && scholarshipData.targetLevel !== '_none_' ? scholarshipData.targetLevel : null,\n    fundingCountry: scholarshipData.fundingCountry && scholarshipData.fundingCountry !== '_none_' ? scholarshipData.fundingCountry : null,\n    partner: scholarshipData.partner || null,\n    coverage: scholarshipData.coverage || null,\n    deadline: scholarshipData.deadline || null,\n    imageUrl: scholarshipData.imageUrl || null,\n    createdAt: Timestamp.now(),\n    updatedAt: Timestamp.now(),\n  };\n  \n  try {\n    const scholarshipsRef = adminDB!.collection(SCHOLARSHIPS_COLLECTION); // Added non-null assertion as ensureAdminDBInitialized would have thrown\n    const docRef = await scholarshipsRef.add(dataToSave as any);\n    console.log(\"[firestoreAdminService] addScholarshipAdmin: Successfully added document with ID:\", docRef.id);\n    return docRef.id;\n  } catch (error: any) { \n    console.error(\"[firestoreAdminService] addScholarshipAdmin: CRITICAL ERROR during Admin SDK Firestore 'add' operation:\", error);\n    throw new Error(`Admin SDK Firestore Error: ${error.message || 'Failed to add scholarship using Admin SDK. Check server console for details.'}`);\n  }\n}\n\nexport async function updateScholarshipAdmin(id: string, scholarshipData: Partial<Omit<Scholarship, 'id' | 'createdAt'>>): Promise<void> {\n  console.log(`[firestoreAdminService] updateScholarshipAdmin: Attempting to update ID ${id} with data:`, JSON.stringify(scholarshipData, null, 2));\n  ensureAdminDBInitialized();\n  \n  const dataToUpdate: { [key: string]: any } = {};\n  (Object.keys(scholarshipData) as Array<keyof typeof scholarshipData>).forEach(key => {\n      const value = scholarshipData[key];\n      if (value === undefined || value === null || value === '_none_') {\n          dataToUpdate[key] = null;\n      } else if (typeof value === 'string' && value.trim() === '' && \n                 (key === 'imageUrl' || key === 'iconName' || key === 'category' || \n                  key === 'ageRequirement' || key === 'fundingLevel' || key === 'destinationRegion' || \n                  key === 'targetLevel' || key === 'fundingCountry' || key === 'partner' || \n                  key === 'coverage' || key === 'deadline')) {\n          dataToUpdate[key] = null;\n      }\n      else {\n          dataToUpdate[key] = value;\n      }\n  });\n  dataToUpdate.updatedAt = Timestamp.now();\n\n  try {\n    const scholarshipDocRef = adminDB!.collection(SCHOLARSHIPS_COLLECTION).doc(id);\n    await scholarshipDocRef.update(dataToUpdate);\n    console.log(`[firestoreAdminService] updateScholarshipAdmin: Successfully updated document with ID: ${id}`);\n  } catch (error: any) {\n    console.error(`[firestoreAdminService] updateScholarshipAdmin: ERROR updating scholarship ${id} with Admin SDK:`, error);\n    throw new Error(`Admin SDK Firestore Error: ${error.message || `Failed to update scholarship ${id}. Check server console.`}`);\n  }\n}\n\nexport async function deleteScholarshipAdmin(id: string): Promise<void> {\n  console.log(`[firestoreAdminService] deleteScholarshipAdmin: Attempting to delete ID: ${id}`);\n  ensureAdminDBInitialized();\n  try {\n    const scholarshipDocRef = adminDB!.collection(SCHOLARSHIPS_COLLECTION).doc(id);\n    await scholarshipDocRef.delete();\n    console.log(`[firestoreAdminService] deleteScholarshipAdmin: Successfully deleted document with ID: ${id}`);\n  } catch (error: any) {\n    console.error(`[firestoreAdminService] deleteScholarshipAdmin: Error deleting scholarship ${id} with Admin SDK:`, error);\n    throw new Error(`Admin SDK Firestore Error: ${error.message || `Failed to delete scholarship ${id}. Check server console.`}`);\n  }\n}\n"],"names":[],"mappings":"AACA,mCAAmC;;;;;;AACnC;AAEA;;;;;;;AAEA,MAAM,0BAA0B;AAEhC,SAAS;IACP,IAAI,OAAO,2HAAA,CAAA,UAAO,KAAK,eAAe,CAAC,2HAAA,CAAA,UAAO,IAAI,OAAO,2HAAA,CAAA,UAAO,CAAC,UAAU,KAAK,YAAY;QAC1F,MAAM,eAAe;QACrB,QAAQ,KAAK,CAAC,kDAAkD;QAChE,MAAM,IAAI,MAAM;IAClB;IACC,QAAQ,GAAG,CAAC;AACf;AAEO,eAAe,oBAAoB,eAAoE;IAC5G,QAAQ,GAAG,CAAC,wEAAwE,KAAK,SAAS,CAAC,iBAAiB,MAAM;IAC1H,4BAA4B,iBAAiB;IAE7C,MAAM,aAAwE;QAC5E,MAAM,gBAAgB,IAAI,IAAI;QAC9B,aAAa,gBAAgB,WAAW,IAAI;QAC5C,aAAa,gBAAgB,WAAW,IAAI;QAC5C,YAAY,gBAAgB,UAAU,IAAI;QAC1C,UAAU,gBAAgB,QAAQ,IAAI;QACtC,UAAU,gBAAgB,QAAQ,IAAI,gBAAgB,QAAQ,KAAK,WAAW,gBAAgB,QAAQ,GAAG;QACzG,UAAU,gBAAgB,QAAQ,IAAI;QACtC,gBAAgB,gBAAgB,cAAc,IAAI,gBAAgB,cAAc,KAAK,WAAW,gBAAgB,cAAc,GAAG;QACjI,cAAc,gBAAgB,YAAY,IAAI,gBAAgB,YAAY,KAAK,WAAW,gBAAgB,YAAY,GAAG;QACzH,mBAAmB,gBAAgB,iBAAiB,IAAI,gBAAgB,iBAAiB,KAAK,WAAW,gBAAgB,iBAAiB,GAAG;QAC7I,aAAa,gBAAgB,WAAW,IAAI,gBAAgB,WAAW,KAAK,WAAW,gBAAgB,WAAW,GAAG;QACrH,gBAAgB,gBAAgB,cAAc,IAAI,gBAAgB,cAAc,KAAK,WAAW,gBAAgB,cAAc,GAAG;QACjI,SAAS,gBAAgB,OAAO,IAAI;QACpC,UAAU,gBAAgB,QAAQ,IAAI;QACtC,UAAU,gBAAgB,QAAQ,IAAI;QACtC,UAAU,gBAAgB,QAAQ,IAAI;QACtC,WAAW,4JAAA,CAAA,YAAS,CAAC,GAAG;QACxB,WAAW,4JAAA,CAAA,YAAS,CAAC,GAAG;IAC1B;IAEA,IAAI;QACF,MAAM,kBAAkB,2HAAA,CAAA,UAAO,CAAE,UAAU,CAAC,0BAA0B,yEAAyE;QAC/I,MAAM,SAAS,MAAM,gBAAgB,GAAG,CAAC;QACzC,QAAQ,GAAG,CAAC,qFAAqF,OAAO,EAAE;QAC1G,OAAO,OAAO,EAAE;IAClB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2GAA2G;QACzH,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,MAAM,OAAO,IAAI,gFAAgF;IACjJ;AACF;AAEO,eAAe,uBAAuB,EAAU,EAAE,eAA+D;IACtH,QAAQ,GAAG,CAAC,CAAC,wEAAwE,EAAE,GAAG,WAAW,CAAC,EAAE,KAAK,SAAS,CAAC,iBAAiB,MAAM;IAC9I;IAEA,MAAM,eAAuC,CAAC;IAC7C,OAAO,IAAI,CAAC,iBAAyD,OAAO,CAAC,CAAA;QAC1E,MAAM,QAAQ,eAAe,CAAC,IAAI;QAClC,IAAI,UAAU,aAAa,UAAU,QAAQ,UAAU,UAAU;YAC7D,YAAY,CAAC,IAAI,GAAG;QACxB,OAAO,IAAI,OAAO,UAAU,YAAY,MAAM,IAAI,OAAO,MAC9C,CAAC,QAAQ,cAAc,QAAQ,cAAc,QAAQ,cACpD,QAAQ,oBAAoB,QAAQ,kBAAkB,QAAQ,uBAC9D,QAAQ,iBAAiB,QAAQ,oBAAoB,QAAQ,aAC7D,QAAQ,cAAc,QAAQ,UAAU,GAAG;YACnD,YAAY,CAAC,IAAI,GAAG;QACxB,OACK;YACD,YAAY,CAAC,IAAI,GAAG;QACxB;IACJ;IACA,aAAa,SAAS,GAAG,4JAAA,CAAA,YAAS,CAAC,GAAG;IAEtC,IAAI;QACF,MAAM,oBAAoB,2HAAA,CAAA,UAAO,CAAE,UAAU,CAAC,yBAAyB,GAAG,CAAC;QAC3E,MAAM,kBAAkB,MAAM,CAAC;QAC/B,QAAQ,GAAG,CAAC,CAAC,uFAAuF,EAAE,IAAI;IAC5G,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,2EAA2E,EAAE,GAAG,gBAAgB,CAAC,EAAE;QAClH,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,MAAM,OAAO,IAAI,CAAC,6BAA6B,EAAE,GAAG,uBAAuB,CAAC,EAAE;IAC9H;AACF;AAEO,eAAe,uBAAuB,EAAU;IACrD,QAAQ,GAAG,CAAC,CAAC,yEAAyE,EAAE,IAAI;IAC5F;IACA,IAAI;QACF,MAAM,oBAAoB,2HAAA,CAAA,UAAO,CAAE,UAAU,CAAC,yBAAyB,GAAG,CAAC;QAC3E,MAAM,kBAAkB,MAAM;QAC9B,QAAQ,GAAG,CAAC,CAAC,uFAAuF,EAAE,IAAI;IAC5G,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,2EAA2E,EAAE,GAAG,gBAAgB,CAAC,EAAE;QAClH,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,MAAM,OAAO,IAAI,CAAC,6BAA6B,EAAE,GAAG,uBAAuB,CAAC,EAAE;IAC9H;AACF","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/scholarships/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { addScholarshipAdmin, deleteScholarshipAdmin, updateScholarshipAdmin } from '@/lib/firestoreAdminService';\nimport type { Scholarship } from '@/types';\n\n// Authorization check placeholder - implement robust checks before production\nasync function verifyAdminPrivileges(actionName: string) {\n  // In a real app, verify the user's ID token and check their role (e.g., from Firestore custom claims).\n  // Example:\n  // const { headers } = await import('next/headers');\n  // const idToken = headers().get('Authorization')?.split('Bearer ')[1];\n  // if (!idToken) throw new Error(`[Server Action Auth - ${actionName}] Unauthorized: No token provided`);\n  // const { adminAuth } = await import('@/lib/firebaseAdmin');\n  // if (!adminAuth) throw new Error(`[Server Action Auth - ${actionName}] Admin Auth not initialized`);\n  // try {\n  //   const decodedToken = await adminAuth.verifyIdToken(idToken);\n  //   const userRecord = await adminAuth.getUser(decodedToken.uid);\n  //   if (userRecord.customClaims?.role !== 'Admin') {\n  //     throw new Error(`[Server Action Auth - ${actionName}] Unauthorized: User is not an admin`);\n  //   }\n  //   console.log(`[Server Action Auth - ${actionName}] Admin privileges verified for UID:`, decodedToken.uid);\n  // } catch (error: any) {\n  //   console.error(`[Server Action Auth - ${actionName}] Admin verification failed:`, error.message);\n  //   throw new Error(`[Server Action Auth - ${actionName}] Unauthorized: Admin verification failed.`);\n  // }\n  console.warn(`[Server Action - ${actionName}] Placeholder admin authorization check. Implement actual verification.`);\n  return true; // Assume admin for now\n}\n\nexport async function handleAddScholarshipAction(data: Omit<Scholarship, 'id' | 'createdAt' | 'updatedAt'>) {\n  console.log('[Server Action - handleAddScholarshipAction] INVOKED.');\n  console.log('[Server Action - handleAddScholarshipAction] GOOGLE_APPLICATION_CREDENTIALS (at start of Server Action):', process.env.GOOGLE_APPLICATION_CREDENTIALS || \"NOT SET in Server Action environment\");\n  \n  // await verifyAdminPrivileges('handleAddScholarshipAction'); // Uncomment and implement\n\n  try {\n    // Data is already processed by the client before being sent here\n    console.log(\"[Server Action - handleAddScholarshipAction] Received processed data:\", JSON.stringify(data, null, 2));\n    const scholarshipId = await addScholarshipAdmin(data);\n    console.log(\"[Server Action - handleAddScholarshipAction] Scholarship added successfully with ID:\", scholarshipId);\n    return { success: true, scholarshipId, name: data.name };\n  } catch (err: any) {\n    console.error(\"[Server Action - handleAddScholarshipAction] CAUGHT ERROR while calling addScholarshipAdmin or during processing:\", err);\n    console.error(\"[Server Action - handleAddScholarshipAction] Error Name:\", err.name);\n    console.error(\"[Server Action - handleAddScholarshipAction] Error Message:\", err.message);\n    console.error(\"[Server Action - handleAddScholarshipAction] Error Stack:\", err.stack);\n    let clientErrorMessage = \"Failed to add scholarship. An unexpected server error occurred.\";\n    if (err.message) {\n        clientErrorMessage = err.message.includes(\"SERVER_CONFIG_ERROR:\") \n                             ? err.message \n                             : `Failed to add scholarship: ${err.message}`;\n    }\n    return { success: false, error: clientErrorMessage, name: data.name };\n  }\n}\n\nexport async function handleUpdateScholarshipAction(id: string, data: Partial<Omit<Scholarship, 'id' | 'createdAt'>>) {\n  console.log(`[Server Action - handleUpdateScholarshipAction] Received data for ID ${id}:`, data);\n  \n  // await verifyAdminPrivileges('handleUpdateScholarshipAction'); // Uncomment and implement\n\n  try {\n    // Data is already processed by the client\n    console.log(\"[Server Action - handleUpdateScholarshipAction] Processed data for Admin SDK:\", data);\n    await updateScholarshipAdmin(id, data);\n    console.log(\"[Server Action - handleUpdateScholarshipAction] Scholarship updated for ID:\", id);\n    return { success: true, id, name: data.name };\n  } catch (err: any) {\n    console.error(\"[Server Action - handleUpdateScholarshipAction] Error calling updateScholarshipAdmin:\", err);\n    return { success: false, error: err.message || \"Failed to update scholarship via Admin SDK.\", name: data.name };\n  }\n}\n\nexport async function handleDeleteScholarshipAction(id: string, name: string) {\n  console.log(`[Server Action - handleDeleteScholarshipAction] Attempting to delete ID ${id}, Name: ${name}`);\n  \n  // await verifyAdminPrivileges('handleDeleteScholarshipAction'); // Uncomment and implement\n\n  try {\n    await deleteScholarshipAdmin(id);\n    console.log(`[Server Action - handleDeleteScholarshipAction] Scholarship deleted for ID: ${id}`);\n    return { success: true, name };\n  } catch (err: any) {\n    console.error(`[Server Action - handleDeleteScholarshipAction] Error calling deleteScholarshipAdmin for ID ${id}:`, err);\n    return { success: false, error: err.message || \"Failed to delete scholarship via Admin SDK.\", name };\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAGA;;;;;;;;;AAGA,8EAA8E;AAC9E,eAAe,sBAAsB,UAAkB;IACrD,uGAAuG;IACvG,WAAW;IACX,oDAAoD;IACpD,uEAAuE;IACvE,yGAAyG;IACzG,6DAA6D;IAC7D,sGAAsG;IACtG,QAAQ;IACR,iEAAiE;IACjE,kEAAkE;IAClE,qDAAqD;IACrD,kGAAkG;IAClG,MAAM;IACN,8GAA8G;IAC9G,yBAAyB;IACzB,qGAAqG;IACrG,sGAAsG;IACtG,IAAI;IACJ,QAAQ,IAAI,CAAC,CAAC,iBAAiB,EAAE,WAAW,uEAAuE,CAAC;IACpH,OAAO,MAAM,uBAAuB;AACtC;AAEO,eAAe,2BAA2B,IAAyD;IACxG,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,4GAA4G,QAAQ,GAAG,CAAC,8BAA8B,IAAI;IAEtK,wFAAwF;IAExF,IAAI;QACF,iEAAiE;QACjE,QAAQ,GAAG,CAAC,yEAAyE,KAAK,SAAS,CAAC,MAAM,MAAM;QAChH,MAAM,gBAAgB,MAAM,CAAA,GAAA,mIAAA,CAAA,sBAAmB,AAAD,EAAE;QAChD,QAAQ,GAAG,CAAC,wFAAwF;QACpG,OAAO;YAAE,SAAS;YAAM;YAAe,MAAM,KAAK,IAAI;QAAC;IACzD,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,qHAAqH;QACnI,QAAQ,KAAK,CAAC,4DAA4D,IAAI,IAAI;QAClF,QAAQ,KAAK,CAAC,+DAA+D,IAAI,OAAO;QACxF,QAAQ,KAAK,CAAC,6DAA6D,IAAI,KAAK;QACpF,IAAI,qBAAqB;QACzB,IAAI,IAAI,OAAO,EAAE;YACb,qBAAqB,IAAI,OAAO,CAAC,QAAQ,CAAC,0BACnB,IAAI,OAAO,GACX,CAAC,2BAA2B,EAAE,IAAI,OAAO,EAAE;QACtE;QACA,OAAO;YAAE,SAAS;YAAO,OAAO;YAAoB,MAAM,KAAK,IAAI;QAAC;IACtE;AACF;AAEO,eAAe,8BAA8B,EAAU,EAAE,IAAoD;IAClH,QAAQ,GAAG,CAAC,CAAC,qEAAqE,EAAE,GAAG,CAAC,CAAC,EAAE;IAE3F,2FAA2F;IAE3F,IAAI;QACF,0CAA0C;QAC1C,QAAQ,GAAG,CAAC,iFAAiF;QAC7F,MAAM,CAAA,GAAA,mIAAA,CAAA,yBAAsB,AAAD,EAAE,IAAI;QACjC,QAAQ,GAAG,CAAC,+EAA+E;QAC3F,OAAO;YAAE,SAAS;YAAM;YAAI,MAAM,KAAK,IAAI;QAAC;IAC9C,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,yFAAyF;QACvG,OAAO;YAAE,SAAS;YAAO,OAAO,IAAI,OAAO,IAAI;YAA+C,MAAM,KAAK,IAAI;QAAC;IAChH;AACF;AAEO,eAAe,8BAA8B,EAAU,EAAE,IAAY;IAC1E,QAAQ,GAAG,CAAC,CAAC,wEAAwE,EAAE,GAAG,QAAQ,EAAE,MAAM;IAE1G,2FAA2F;IAE3F,IAAI;QACF,MAAM,CAAA,GAAA,mIAAA,CAAA,yBAAsB,AAAD,EAAE;QAC7B,QAAQ,GAAG,CAAC,CAAC,4EAA4E,EAAE,IAAI;QAC/F,OAAO;YAAE,SAAS;YAAM;QAAK;IAC/B,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,CAAC,4FAA4F,EAAE,GAAG,CAAC,CAAC,EAAE;QACpH,OAAO;YAAE,SAAS;YAAO,OAAO,IAAI,OAAO,IAAI;YAA+C;QAAK;IACrG;AACF;;;IAzDsB;IA2BA;IAiBA;;AA5CA,+OAAA;AA2BA,+OAAA;AAiBA,+OAAA","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/admin/scholarships/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {handleDeleteScholarshipAction as '6078df80afe875f0715264ab2c1dfd262c62d64c73'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/scholarships/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/scholarships/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/scholarships/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/scholarships/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/scholarships/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/scholarships/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}